#!/bin/bash

debug=false; [ ! -z "$1" ] && [ "$1" == "--debug" ] && debug=true

Init()
	{

	DebugFuncEntry

	local SCRIPT_FILE="sabnzbd-installer.sh"
	local SCRIPT_VERSION="2017.03.20"
	QPKG_CONFIG_PATHFILE="/etc/config/qpkg.conf"
	ULINUX_PATHFILE="/etc/config/uLinux.conf"
	INSTALL_LOG_FILE="install.log"
	DOWNLOAD_LOG_FILE="download.log"
	DEBUG_LOG_FILE="download.log"
	SHARE_DOWNLOAD_PATH="/share/Download"
	SHARE_PUBLIC_PATH="/share/Public"
	WORKING_PATH="${SHARE_PUBLIC_PATH}/${SCRIPT_FILE%.*}.tmp"
	BACKUP_PATH="${WORKING_PATH}/backup"
	QPKG_PATH="${WORKING_PATH}/qpkg-downloads"
	IPK_PATH="${WORKING_PATH}/ipk-downloads"

	errorcode=0
	SAB_IS_INSTALLED=false

	# cherry-pick binaries
	CAT_CMD="/bin/cat"
	GREP_CMD="/bin/grep"
	SED_CMD="/bin/sed"
	UNAME_CMD="/bin/uname"
	MD5SUM_CMD="/bin/md5sum"
	MKDIR_CMD="/bin/mkdir"

	HEAD_CMD="/usr/bin/head"
	TAIL_CMD="/usr/bin/tail"
	DIRNAME_CMD="/usr/bin/dirname"
	BASENAME_CMD="/usr/bin/basename"
	WGET_CMD="/usr/bin/wget"
	WC_CMD="/usr/bin/wc"
	CUT_CMD="/usr/bin/cut"
	CP_CMD="/usr/bin/cp"

	OPKG_CMD="/opt/bin/opkg"

	echo -e "$(ColourTextBrightWhite "$SCRIPT_FILE") ($SCRIPT_VERSION)\n"

	CheckEnvironment

	DebugFuncExit
	return 0

	}

SystemFileMissing()
	{

	# $1 = pathfile to check

	[ -z "$1" ] && return 1

	if [ ! -e "$1" ]; then
		ShowError "required QTS system file missing [$1]"
		errorcode=1
		return 1
	else
		return 0
	fi

	}

SystemShareMissing()
	{

	# $1 = symlink path to check

	[ -z "$1" ] && return 1

	if [ ! -L "$1" ]; then
		ShowError "required QTS system share missing [$1]. Please create it via the QTS Control Panel."
		errorcode=2
		return 1
	else
		return 0
	fi

	}

CheckEnvironment()
	{

	DebugFuncEntry
	local returncode=0

	if [ "$debug" == "true" ]; then
		DebugInfo "NAS model [$(getcfg "System" "Model" -f "$ULINUX_PATHFILE")]"
		DebugInfo "NAS internal model [$(getcfg "System" "Internal Model" -f "$ULINUX_PATHFILE")]"
		DebugInfo "QTS version [$(getcfg "System" "Version" -f "$ULINUX_PATHFILE")]"
		DebugInfo "QTS build number [$(getcfg "System" "Build Number" -f "$ULINUX_PATHFILE")]"
		DebugInfo "uptime & sysload [$(uptime | tr -s ' ')]"
		DebugInfo "PATH [$PATH]"
		DebugInfo "Download [$(ls -l ${SHARE_DOWNLOAD_PATH}* | tr -s ' ')]"
	fi

	SystemFileMissing "$CAT_CMD" || return
	SystemFileMissing "$GREP_CMD" || return
	SystemFileMissing "$SED_CMD" || return
	SystemFileMissing "$UNAME_CMD" || return
	SystemFileMissing "$MD5SUM_CMD" || return

	SystemFileMissing "$HEAD_CMD" || return
	SystemFileMissing "$TAIL_CMD" || return
	SystemFileMissing "$DIRNAME_CMD" || return
	SystemFileMissing "$BASENAME_CMD" || return
	SystemFileMissing "$WGET_CMD" || return
	SystemFileMissing "$WC_CMD" || return
	SystemFileMissing "$CUT_CMD" || return
	SystemFileMissing "$CP_CMD" || return

	SystemShareMissing "$SHARE_DOWNLOAD_PATH" || return
	SystemShareMissing "$SHARE_PUBLIC_PATH" || return

	GetQPKGArch
	GetClintonQPKGArch

	RefreshSABPaths

	SAB_WAS_INSTALLED=$SAB_IS_INSTALLED

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$WORKING_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create working directory ($WORKING_PATH) [$result]"
			errorcode=3
			returncode=1
		fi

		cd "$WORKING_PATH"
	fi

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$QPKG_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create QPKG download directory ($QPKG_PATH) [$result]"
			errorcode=4
			returncode=1
		fi
	fi

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$IPK_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create IPK download directory ($IPK_PATH) [$result]"
			errorcode=5
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

DownloadQPKGs()
	{

	DebugFuncEntry
	local returncode=0

	if ! QPKGIsInstalled "Python"; then
		LoadQPKGDetails "Python"
		DownloadQPKG "$qpkg_url" "$qpkg_md5"
	fi

	if [ "$errorcode" -eq "0" ]; then
		if ! QPKGIsInstalled "Entware-3x"; then
			LoadQPKGDetails "Entware-3x"
			DownloadQPKG "$qpkg_url" "$qpkg_md5"
		else
			local testfile="/opt/etc/passwd"
			[ -e "$testfile" ] && { [ -L "$testfile" ] && ENTWARE_VER="std" || ENTWARE_VER="alt" ;} || ENTWARE_VER="none"

			DebugVar "ENTWARE_VER"

			if [ "$ENTWARE_VER" == "alt" ]; then
				ShowError "Entware-3x (alt) is installed. This config has not been tested. Can't continue."
				errorcode=6
				returncode=1

			elif [ "$ENTWARE_VER" == "none" ]; then
				ShowError "Entware appears to be installed but is not visible. Can't continue."
				errorcode=7
				returncode=1
			fi
		fi
	fi

	[ "$errorcode" -eq "0" ] && ! QPKGIsInstalled "git" && LoadQPKGDetails "git" && DownloadQPKG "$qpkg_url" "$qpkg_md5"
	[ "$errorcode" -eq "0" ] && LoadQPKGDetails "SABnzbdplus" && DownloadQPKG "$qpkg_url" "$qpkg_md5" "$qpkg_file"

	DebugFuncExit
	return $returncode

	}

CreateBackup()
	{

	DebugFuncEntry
	local returncode=0

	# set this 'true' to overwrite an existing backup file set
	local overwrite_previous=true
	#local overwrite_previous=false

	DebugVar "overwrite_previous"

	if [ "$SAB_IS_INSTALLED" == "true" ]; then
		$MKDIR_CMD -p "$BACKUP_PATH" 2> /dev/null
		result=$?

		if [ "$result" -eq "0" ]; then
			DebugDone "backup directory created ($BACKUP_PATH)"
		else
			ShowError "unable to create backup directory ($BACKUP_PATH) [$result]"
			errorcode=8
			returncode=1
		fi

		if [ "$errorcode" -eq "0" ]; then
			if [ -e "$SAB_INI_ORIG_PATHFILE" ]; then
				if [ "$overwrite_previous" == "true" ]; then
					DebugInfo "settings backup will be overwritten"
					$CP_CMD --force "$SAB_INI_ORIG_PATHFILE" "$SAB_INI_BACKUP_PATHFILE"
					result=$?
				else
					DebugInfo "don't overwrite settings backup"
					$CP_CMD --no-clobber "$SAB_INI_ORIG_PATHFILE" "$SAB_INI_BACKUP_PATHFILE"
					result=$?
				fi

				if [ "$result" -eq "0" ]; then
					DebugDone "created backup ($SAB_INI_BACKUP_PATHFILE)"
				else
					ShowError "could not create backup of ($SAB_INI_ORIG_PATHFILE) [$result]"
					errorcode=9
					returncode=1
				fi
			fi
		fi

		if [ "$errorcode" -eq "0" ]; then
			$MKDIR_CMD -p "$SAB_ADMIN_BACKUP_PATHDIR" 2> /dev/null
			result=$?

			if [ "$result" -ne "0" ]; then
				ShowError "unable to create SABnzbd admin backup directory ($SAB_ADMIN_BACKUP_PATHDIR) [$result]"
				errorcode=10
				returncode=1
			fi
		fi

		if [ "$errorcode" -eq "0" ]; then
			if [ -e "$SAB_ADMIN_ORIG_PATHDIR" ]; then
				if [ "$overwrite_previous" == "true" ]; then
					DebugInfo "history backup will be overwritten"
					$CP_CMD --recursive --force "$SAB_ADMIN_ORIG_PATHDIR"/* "$SAB_ADMIN_BACKUP_PATHDIR"/ 2> /dev/null
					result=$?
				else
					DebugInfo "don't overwrite history backup"
					$CP_CMD --recursive --no-clobber "$SAB_ADMIN_ORIG_PATHDIR"/* "$SAB_ADMIN_BACKUP_PATHDIR"/ 2> /dev/null
					result=$?
				fi

				if [ "$result" -eq "0" ]; then
					DebugDone "created backup ($SAB_ADMIN_BACKUP_PATHDIR)"
				else
					ShowError "could not create backup of ($SAB_ADMIN_ORIG_PATHDIR) [$result]"
					errorcode=11
					returncode=1
				fi
			fi
		fi
	fi

	DebugFuncExit
	return $returncode

	}

RemoveQPKGs()
	{

	DebugFuncEntry

	UninstallExistingQPKG "Entware-ng"
	UninstallExistingQPKG "SABnzbdplus"

	DebugFuncExit
	return 0

	}

UninstallEntwarePython()
	{

	# forcibly remove Python packages so they will be reinstalled

	DebugFuncEntry
	local returncode=0

	if QPKGIsInstalled "Entware-3x"; then
		if [ ! -f "$OPKG_CMD" ]; then
			ShowError "opkg binary missing. Cannot continue. [$OPKG_CMD]"
			errorcode=12
			returncode=1
		else
			msg="Python through Entware"
			DebugProc "uninstalling \"$msg\""
			$OPKG_CMD -V0 remove python --force-removal-of-dependent-packages --force-remove 2> /dev/null

			true # this is cheating ;)
			# opkg sometimes fails with
				# Collected errors:
				# * pkg_run_script: Internal error: python-cryptography has a NULL tmp_unpack_dir.
			# so, until I can reliably remove Python without error, set returncode as 'true'.

			result=$?

			if [ "$result" -eq "0" ]; then
				DebugDone "\"$msg\" uninstalled"
			else
				ShowError "unable to uninstall \"$msg\" [$result]"
				errorcode=13
				returncode=1
			fi
		fi
	fi

	DebugFuncExit
	return $returncode

	}

InstallQPKGs()
	{

	DebugFuncEntry
	local returncode=0

	! QPKGIsInstalled "Python" && LoadQPKGDetails "Python" && InstallQPKG "$qpkg_file"

	if [ "$errorcode" -eq "0" ]; then
		if ! QPKGIsInstalled "Entware-3x"; then
			LoadQPKGDetails "Entware-3x"
			InstallQPKG "$qpkg_file"
		else
			local testfile="/opt/etc/passwd"
			[ -e "$testfile" ] && { [ -L "$testfile" ] && ENTWARE_VER="std" || ENTWARE_VER="alt" ;} || ENTWARE_VER="none"

			DebugVar "ENTWARE_VER"

			if [ "$ENTWARE_VER" == "alt" ]; then
				ShowError "Entware-3x (alt) is installed. This config has not been tested. Can't continue."
				errorcode=14
				returncode=1
			else
				if [ ! -f "$OPKG_CMD" ]; then
					ShowError "opkg binary missing. Cannot continue. [$OPKG_CMD]"
					errorcode=15
					returncode=1
				else
					DebugProc "updating Entware"

					$OPKG_CMD update > /dev/null
					result=$?

					if [ "$result" -eq "0" ]; then
						DebugDone "Entware updated"
					else
						DebugError "Entware update failed [$result]"
						# meh, continue anyway...
					fi
				fi
			fi
		fi
	fi

	[ "$errorcode" -eq "0" ] && ! QPKGIsInstalled "git" && LoadQPKGDetails "git" && InstallQPKG "$qpkg_file"

	if [ "$errorcode" -eq "0" ] && ! QPKGIsInstalled "SABnzbdplus"; then
		LoadQPKGDetails "SABnzbdplus"
		InstallQPKG "$qpkg_file"

		# give SAB time to init on slow systems
		DebugProc "sleeping ..."
		sleep 5
		RefreshSABPaths
	fi

	DebugFuncExit
	return $returncode

	}

DownloadIPKs()
	{

	DebugFuncEntry
	local returncode=0

	local packages="gcc python python-pip python-cffi python-pyopenssl python-dev ca-certificates nano"
	local download_cmd="$OPKG_CMD --verbosity=0 download"
	local download_msgs=""

	cd "$IPK_PATH"

		ShowProc "downloading Entware IPKs"

		download_msgs=$(eval $download_cmd $packages)
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "downloaded Entware IPKs"
		else
			ShowError "Entware IPKs download failed [$result]"
			echo "$download_msgs" > "$WORKING_PATH/ipks.$DOWNLOAD_LOG_FILE"
			errorcode=16
			returncode=1
		fi

	cd "$WORKING_PATH"

	DebugFuncExit
	return $returncode

	}

CreateWaiter()
	{

	DebugFuncEntry
	local returncode=0

	local WAITER_PATHFILE="$($DIRNAME_CMD "$SAB_INSTALLED_PATH")/wait-for-Entware.sh"
	local WAIT_FOR_PATH="/opt/Entware-3x.sh"

	$CAT_CMD > "$WAITER_PATHFILE" << EOF
#!/bin/sh

[ ! -z "\$1" ] && timeout="\$1" || timeout=600
[ ! -z "\$2" ] && testfile="\$2" || testfile="$WAIT_FOR_PATH"
scriptname="\$(/usr/bin/basename \$0)"
waitlog="/tmp/wait-counter-\${scriptname}.log"

if [ ! -e "\$testfile" ]; then
   (
      for ((count=1; count<=timeout; count++)); do
         sleep 1
         [ -e "\$testfile" ] &&
            {
            echo "waited for \$count seconds" >> "\$waitlog"
            true
            exit
            }

      done
      false
   )

   if [ "\$?" -ne "0" ]; then
      echo "timeout exceeded!" >> "\$waitlog"
      /sbin/write_log "[\$scriptname] Could not continue: timeout exceeded." 1
      false
      exit
   fi

   # if here, then testfile has appeared, so reload environment
   . /etc/profile
   . /root/.profile
fi
EOF

	result=$?

	if [ "$result" -eq "0" ]; then
		DebugDone "waiter created"

		if [ -f "$WAITER_PATHFILE" ]; then
			chmod +x "$WAITER_PATHFILE"
			result=$?

			if [ "$result" -eq "0" ]; then
				DebugDone "set waiter executable"
			else
				ShowError "unable to set waiter as executable ($WAITER_PATHFILE) [$result]"
				errorcode=17
				returncode=1
			fi
		else
			ShowError "waiter not found ($WAITER_PATHFILE) [$result]"
			errorcode=18
			returncode=1
		fi
	else
		ShowError "unable to create waiter ($WAITER_PATHFILE) [$result]"
		errorcode=19
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

InstallIPKs()
	{

	DebugFuncEntry
	local returncode=0

	local packages="*"
	local install_cmd="$OPKG_CMD --force-overwrite install"
	local install_msgs=""

	ShowProc "installing Entware IPKs"

	install_msgs=$(eval $install_cmd ${IPK_PATH}/${packages})
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "installed Entware IPKs"
	else
		ShowError "Entware IPKs install failed [$result]"
		echo "$install_msgs" > "$WORKING_PATH/ipks.$INSTALL_LOG_FILE"
		errorcode=20
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

InstallPIPs()
	{

	DebugFuncEntry

	DownloadAndExecute "pip modules" "pip install --upgrade pip setuptools && pip install http://www.golug.it/pub/yenc/yenc-0.4.0.tar.gz cheetah"

	DebugFuncExit
	return 0

	}

PatchInitWithPython()
	{

	DebugFuncEntry
	local returncode=0

	if [ -f "$SAB_INIT_PATHFILE" ]; then
		$SED_CMD -i 's|/usr/bin/python2.7|/opt/bin/python|' "$SAB_INIT_PATHFILE"
		result=$?

		if [ "$result" -eq "0" ]; then
			DebugDone "patched SABnzbd init with Python"
		else
			ShowError "could not patch SABnzbd init with new Python interpreter ($SAB_INIT_PATHFILE) [$result]"
			errorcode=21
			returncode=1
		fi
	else
		ShowError "SABnzbd init not found ($SAB_INIT_PATHFILE)"
		errorcode=22
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

PatchInitWithWaiter()
	{

	DebugFuncEntry
	local returncode=0

	local tag='#!/bin/sh'
	local inserttext=". $($DIRNAME_CMD "$SAB_INSTALLED_PATH")/wait-for-Entware.sh 300"

	if [ -f "$SAB_INIT_PATHFILE" ]; then
		($GREP_CMD "$inserttext" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$tag|$tag\n\n$inserttext|" "$SAB_INIT_PATHFILE"
		result=$?

		if [ "$result" -eq "0" ]; then
			DebugDone "patched SABnzbd init with waiter"
		else
			ShowError "could not patch SABnzbd init with waiter ($SAB_INIT_PATHFILE) [$result]"
			errorcode=23
			returncode=1
		fi
	else
		ShowError "SABnzbd init not found ($SAB_INIT_PATHFILE)"
		errorcode=24
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

CreateYENCLinks()
	{

	DebugFuncEntry

	local ent_python_path="$(getcfg "Entware-3x" Install_Path -f "$QPKG_CONFIG_PATHFILE")/lib/python2.7/site-packages"
	local sab_python_path="$(getcfg "SABnzbdplus" Install_Path -f "$QPKG_CONFIG_PATHFILE")/$CLINTON_QPKG_ARCH/python"

	ln -fs "${ent_python_path}/yenc.py" "$sab_python_path"
	ln -fs "${ent_python_path}/_yenc.so" "$sab_python_path"

	DebugDone "yEnc symlinks created"

	DebugFuncExit
	return 0

	}

RestoreBackup()
	{

	DebugFuncEntry
	local returncode=0

	if [ "$SAB_WAS_INSTALLED" == "true" ]; then
		if [ "$SAB_IS_INSTALLED" == "true" ]; then
			if [ -e "$SAB_INI_BACKUP_PATHFILE" ]; then
				$CP_CMD "$SAB_INI_BACKUP_PATHFILE" "$SAB_INI_ORIG_PATHFILE"
				result=$?

				if [ "$result" -eq "0" ]; then
					ShowDone "restored settings backup ($SAB_INI_ORIG_PATHFILE)"
				else
					ShowError "could not restore settings backup to ($SAB_INI_ORIG_PATHFILE) [$result]"
					errorcode=25
					returncode=1
				fi
			fi

			if [ "$errorcode" -eq "0" ] && [ -d "$SAB_ADMIN_BACKUP_PATHDIR" ]; then
				if [ ! -d "$SAB_ADMIN_ORIG_PATHDIR" ]; then
					$MKDIR_CMD -p "$SAB_ADMIN_ORIG_PATHDIR" 2> /dev/null
					result=$?

					if [ "$result" -eq "0" ]; then
						DebugDone "manually created history path ($SAB_ADMIN_ORIG_PATHDIR)"
					else
						ShowError "could not manually create history path ($SAB_ADMIN_ORIG_PATHDIR) [$result]"
						errorcode=26
						returncode=1
					fi
				else
					DebugDone "new history path exists ($SAB_ADMIN_ORIG_PATHDIR)"
				fi

				if [ "$errorcode" -eq "0" ]; then
					$CP_CMD --recursive "$SAB_ADMIN_BACKUP_PATHDIR"/* --target-directory "$SAB_ADMIN_ORIG_PATHDIR"
					result=$?

					if [ "$result" -eq "0" ]; then
						ShowDone "restored history backup ($SAB_ADMIN_ORIG_PATHDIR)"
					else
						ShowError "could not restore history backup to ($SAB_ADMIN_ORIG_PATHDIR) [$result]"
						errorcode=27
						returncode=1
					fi
				fi
			fi
		else
			ShowError "SABnzbd is not installed so can't restore backups"
			errorcode=28
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

DeleteTmp()
	{

	DebugFuncEntry

	[ "$debug" != "true" ] && [ -d "$WORKING_PATH" ] && rm -rf "$WORKING_PATH"

	DebugFuncExit
	return 0

	}

DownloadQPKG()
	{

	# $1 = QPKG URL
	# $2 = QPKG MD5 checksum
	# $3 = package name (optional)

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"
	DebugThis "\$2 [$2]"
	DebugThis "\$3 [$3]"

	[ "$errorcode" -gt "0" ] && { DebugFuncExit; return ;}

	if [ -z "$1" ]; then
		DebugError "QPKG URL not specified"
		errorcode=29
		returncode=1
		DebugFuncExit
		return 1
	fi

	if [ -z "$2" ]; then
		DebugError "QPKG MD5 not specified"
		errorcode=30
		returncode=1
		DebugFuncExit
		return 1
	fi

	[ -z "$3" ] && target_qpkg_file=$($BASENAME_CMD "$1") || target_qpkg_file="$3"

	local target_qpkg_pathfile="${QPKG_PATH}/${target_qpkg_file}"
	local expected_checksum=$2

	if [ -e "$target_qpkg_pathfile" ]; then
		file_checksum=$($MD5SUM_CMD "$target_qpkg_pathfile" | $CUT_CMD -f1 -d' ')
		result=$?

		if [ "$result" -eq "0" ]; then
			if [ "$file_checksum" == "$expected_checksum" ]; then
				DebugDone "existing QPKG checksum correct ($target_qpkg_pathfile)"
			else
				DebugError "existing QPKG checksum incorrect ($target_qpkg_pathfile) [$result]"
				DebugError "deleting ($target_qpkg_pathfile) [$result]"
				rm -f "$target_qpkg_pathfile"
			fi
		else
			ShowError "problem creating checksum from existing QPKG [$result]"
			errorcode=31
			returncode=1
			DebugFuncExit
			return 1
		fi
	fi

	if [ "$errorcode" -eq "0" ] && [ ! -e "$target_qpkg_pathfile" ]; then
		ShowProc "downloading QPKG ($target_qpkg_file)"

		$WGET_CMD -q -o "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE" "$1" -O "$target_qpkg_pathfile"
		result=$?

		echo -e "\nresult=[$result]" >> "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE"

		if [ "$result" -eq "0" ]; then
			file_checksum=$($MD5SUM_CMD "$target_qpkg_pathfile" | $CUT_CMD -f1 -d' ')
			result=$?

			if [ "$result" -eq "0" ]; then
				if [ "$file_checksum" == "$expected_checksum" ]; then
					ShowDone "downloaded QPKG checksum correct ($target_qpkg_file)"
				else
					ShowError "downloaded QPKG checksum incorrect ($target_qpkg_file) [$result]"
					errorcode=32
					returncode=1
				fi
			else
				ShowError "problem creating checksum from downloaded QPKG [$result]"
				errorcode=33
				returncode=1
			fi
		else
			ShowError "download failed ($target_qpkg_pathfile) [$result]"

			if [ "$debug" == "true" ]; then
				DebugSeparator
				$CAT_CMD "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE"
				DebugSeparator
			fi

			errorcode=34
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

DebugThis()
	{

	[ "$debug" == "true" ] && ShowDebug "$1"

	}

GetQPKGArch()
	{

	# reduce NAS architecture down to 5 possibilities

	DebugFuncEntry
	local returncode=0

	local NAS_ARCH="$($UNAME_CMD -m)"

	# X86
	# These models return:
	[ "$NAS_ARCH" == "i686" ] && QPKG_ARCH="x86"
	[ "$NAS_ARCH" == "x86_64" ] && QPKG_ARCH="x86"

	# ARM
	# These models return:
	[ "$NAS_ARCH" == "armv5tel" ] && QPKG_ARCH="x19"

	# TS-109
	# TS-409 Pro
	# These models return:
	[ "$NAS_ARCH" == "armv5tejl" ] && QPKG_ARCH="unsupported"

	# TS-X31
	# TS-X31U
	# These models return:
	[ "$NAS_ARCH" == "unknown" ] && QPKG_ARCH="x31"

	# TS-X31X
	# TS-X31XU
	# TS-X35
	# TS-X31+
	# TAS-X68
	# TS-X28
	# These models return:
	[ "$NAS_ARCH" == "armv71" ] && QPKG_ARCH="x41"

	# TS-269H
	# These models return:
	[ "$NAS_ARCH" == "unknown" ] && QPKG_ARCH="x269"

	DebugVar "NAS_ARCH"
	DebugVar "QPKG_ARCH"

	if [ -z "$QPKG_ARCH" ]; then
		ShowError "could not find matching software for this NAS architecture ($NAS_ARCH)"
		errorcode=35
		returncode=1

	elif [ "$QPKG_ARCH" == "unsupported" ]; then
		ShowError "this NAS architecture is unsupported ($NAS_ARCH)"
		errorcode=36
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

GetClintonQPKGArch()
	{

	# a "reimagining" of Clinton Hall's arch detection code ;)
	# reduce NAS architecture down to 3 possibilities

	DebugFuncEntry
	local returncode=0

	local NAS_ARCH="$($UNAME_CMD -m)"

	[ "$NAS_ARCH" == "armv5tejl" ] && CLINTON_QPKG_ARCH="arm"
	[ "$NAS_ARCH" == "armv5tel" ] && CLINTON_QPKG_ARCH="arm"
	[ "$NAS_ARCH" == "i686" ] && CLINTON_QPKG_ARCH="x86"
	[ "$NAS_ARCH" == "x86_64" ] && CLINTON_QPKG_ARCH="x86"
	[ "$NAS_ARCH" == "armv71" ] && CLINTON_QPKG_ARCH="x31"

	DebugVar "NAS_ARCH"
	DebugVar "CLINTON_QPKG_ARCH"

	if [ -z "$CLINTON_QPKG_ARCH" ]; then
		ShowError "could not determine NAS architecture ($NAS_ARCH)"
		errorcode=37
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

RefreshSABPaths()
	{

	DebugFuncEntry

	SAB_INSTALLED_PATH="$(getcfg "SABnzbdplus" Install_Path -f "$QPKG_CONFIG_PATHFILE")"

	result=$?

	DebugVar "result"

	if [ "$result" -eq "0" ]; then
		SAB_IS_INSTALLED=true
		SAB_CONFIG_PATH="${SAB_INSTALLED_PATH}/Config"
		SAB_INIT_PATHFILE="${SAB_INSTALLED_PATH}/sabnzbd.sh"
		SAB_INI_ORIG_PATHFILE="${SAB_CONFIG_PATH}/sabnzbd.ini"
		SAB_INI_BACKUP_PATHFILE="${BACKUP_PATH}/sabnzbd.ini"
		SAB_ADMIN_ORIG_PATHDIR="${SAB_CONFIG_PATH}/admin"
		SAB_ADMIN_BACKUP_PATHDIR="${BACKUP_PATH}/admin"
	fi

	DebugVar "SAB_IS_INSTALLED"
	DebugVar "QPKG_CONFIG_PATHFILE"
	DebugVar "SAB_INSTALLED_PATH"
	DebugVar "SAB_CONFIG_PATH"
	DebugVar "SAB_INIT_PATHFILE"
	DebugVar "SAB_INI_ORIG_PATHFILE"
	DebugVar "SAB_INI_BACKUP_PATHFILE"
	DebugVar "SAB_ADMIN_ORIG_PATHDIR"
	DebugVar "SAB_ADMIN_BACKUP_PATHDIR"

	DebugFuncExit
	return 0

	}

InstallQPKG()
	{

	# $1 = QPKG filename as '.qpkg' or '.zip'

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"

	[ "$errorcode" -gt "0" ] && { DebugFuncExit; return ;}

	if [ ! -z "$1" ]; then
		target_qpkg_file="$1"
	else
		DebugError "QPKG name not specified"
		errorcode=38
		returncode=1
	fi

	if [ "$errorcode" -eq "0" ]; then
		local target_qpkg_pathfile="${QPKG_PATH}/${target_qpkg_file}"

		if [ "${target_qpkg_pathfile##*.}" == "zip" ]; then
			unzip -nq "$target_qpkg_pathfile" -d "$QPKG_PATH"
			target_qpkg_pathfile="${target_qpkg_pathfile%.*}.qpkg"
		fi

		target_qpkg_file="$(basename "$target_qpkg_pathfile")"

		ShowProc "installing QPKG ($target_qpkg_file)"

		install_msgs=$(eval sh "$target_qpkg_pathfile" 2>&1)
		result=$?

		echo -e "${install_msgs}\nresult=[$result]" > "$target_qpkg_pathfile.$INSTALL_LOG_FILE"

		if [ "$result" -eq "0" ] || [ "$result" -eq "10" ]; then
			ShowDone "installed QPKG ($target_qpkg_file)"
		else
			ShowError "QPKG installation failed ($target_qpkg_file) [$result]"

			if [ "$debug" == "true" ]; then
				DebugSeparator
				$CAT_CMD "$target_qpkg_pathfile.$INSTALL_LOG_FILE"
				DebugSeparator
			fi

			errorcode=39
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

UninstallExistingQPKG()
	{

	# $1 = QPKG name

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"

	qpkg_installed_path="$(getcfg "$1" Install_Path -f "$QPKG_CONFIG_PATHFILE")"
	result=$?

	if [ "$result" -eq "0" ]; then
		qpkg_installed_path="$(getcfg "$1" Install_Path -f "$QPKG_CONFIG_PATHFILE")"

		if [ -e "${qpkg_installed_path}/.uninstall.sh" ]; then
			ShowProc "uninstalling QPKG \"$1\""

			${qpkg_installed_path}/.uninstall.sh > /dev/null
			result=$?

			if [ "$result" -eq "0" ]; then
				ShowDone "QPKG \"$1\" uninstalled"
			else
				ShowError "unable to uninstall QPKG \"$1\" [$result]"
				errorcode=40
				returncode=1
			fi
		fi

		RemoveConfigBlock "$1"
	else
		DebugError "QPKG \"$1\" not installed [$result]"
	fi

	DebugFuncExit
	return $returncode

	}

LoadQPKGDetails()
	{

	# $1 = QPKG name

	DebugFuncEntry

	DebugThis "\$1 [$1]"

	if [ -z "$1" ]; then
		DebugError "QPKG name not specified"
		errorcode=41
		DebugFuncExit
		return 1
	fi

	qpkg_url=""
	qpkg_md5=""
	qpkg_file=""
	local base_url=""

	if [ "$1" == "git" ]; then
		base_url="https://www.dropbox.com/s"
		[ "$CLINTON_QPKG_ARCH" == "x86" ] && { qpkg_url="${base_url}/fiay536scdscew7/git_2.1.0_x86.qpkg"; qpkg_md5="fc2f73b0f4317b5aad219a733c13030c";}
		[ "$CLINTON_QPKG_ARCH" == "arm" ] && { qpkg_url="${base_url}/li00l16znp0zcue/git_2.1.0_arm.qpkg"; qpkg_md5="17e593c48e963c9eafa1399d4d341f26";}
		[ "$CLINTON_QPKG_ARCH" == "x31" ] && { qpkg_url="${base_url}/aixw0rbzk3skm32/git_2.1.1_x31.qpkg"; qpkg_md5="441e429235488d6200713461de2e6e97";}

	elif [ "$1" == "Entware-3x" ]; then
		qpkg_url="http://entware-3x.zyxmon.org/binaries/other/Entware-3x_0.99std.qpkg"; qpkg_md5="3663c9e4323e694fb25897e276f55623"

	elif [ "$1" == "Python" ]; then
		base_url="http://download.qnap.com/QPKG"
		[ "$QPKG_ARCH" == "x86" ] && { qpkg_url="${base_url}/Python_2.7.3_x86.zip"; qpkg_md5="1cdf292bfdb271a99b0bf61d2ffec8ae";}
		[ "$QPKG_ARCH" == "x269" ] && { qpkg_url="${base_url}/QPKG_CE53XX/Python_2.7.3-0908_x86_ce53xx.zip"; qpkg_md5="22a0f05a202b7d943318110809c14603";}
		[ "$QPKG_ARCH" == "x19" ] && { qpkg_url="${base_url}/Python_2.7.3_arm-x19.zip"; qpkg_md5="ac76de6cdccc0d38d624464f6a7dbc2e";}
		[ "$QPKG_ARCH" == "x31" ] && { qpkg_url="${base_url}/X31/Python_2.7.3_arm-x31.zip"; qpkg_md5="2c4e551387f2e5037ecd55d2954587ee";}
		[ "$QPKG_ARCH" == "x41" ] && { qpkg_url="${base_url}/Python_2.7.3_arm-x41.zip"; qpkg_md5="68b9fa1e7cc1b8106935f7bf17c775a7";}

	elif [ "$1" == "SABnzbdplus" ]; then
		qpkg_url="http://bit.ly/2jPntF9"; qpkg_md5="03077bc11289b944d9e3a58927c269fe"; qpkg_file="SABnzbdplus_170131.qpkg"

	else
		DebugError "QPKG name not found"
		errorcode=42
		DebugFuncExit
		return 1
	fi

	[ -z "$qpkg_file" ] && [ ! -z "$qpkg_url" ] && qpkg_file=$($BASENAME_CMD "$qpkg_url")

	DebugVar "qpkg_url"
	DebugVar "qpkg_md5"
	DebugVar "qpkg_file"

	DebugFuncExit
	return 0

	}

StopSabDaemon()
	{

	DebugFuncEntry
	local returncode=0

	if [ -e "$SAB_INIT_PATHFILE" ]; then
		ShowProc "stopping SABnzbd daemon"
		"$SAB_INIT_PATHFILE" stop > /dev/null
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "SABnzbd daemon stopped"
		else
			ShowError "could not stop SABnzbd daemon [$result]"
			# meh, continue anyway...
			#errorcode=43
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

StartSabDaemon()
	{

	DebugFuncEntry
	local returncode=0

	if [ -e "$SAB_INIT_PATHFILE" ]; then
		ShowProc "starting SABnzbd daemon"

		"$SAB_INIT_PATHFILE" start > /dev/null
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "SABnzbd daemon started"
		else
			ShowError "could not start SABnzbd daemon [$result]"
			errorcode=44
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

QPKGIsInstalled()
	{

	# If package has been installed, check that it has also been enabled.
	# If not enabled, then enable it.
	# If not installed, return 1

	# $1 = package name to check/enable

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"

	$GREP_CMD -F "[$1]" < "$QPKG_CONFIG_PATHFILE" > /dev/null
	result=$?

	if [ "$result" -eq "0" ]; then
		DebugInfo "QPKG \"$1\" already installed"
		[ "$(getcfg "$1" Enable -u -f "$QPKG_CONFIG_PATHFILE")" != "TRUE" ] && setcfg "$1" Enable TRUE -f "$QPKG_CONFIG_PATHFILE"
	else
		DebugInfo "QPKG \"$1\" not installed [$result]"
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

ColourTextBrightGreen()
	{

	echo -en '\E[1;32m'"$(PrintResetColours "$1")"

	}

ColourTextBrightOrange()
	{

	echo -en '\E[1;38;5;214m'"$(PrintResetColours "$1")"

	}

ColourTextBrightRed()
	{

	echo -en '\E[1;31m'"$(PrintResetColours "$1")"

	}

ColourTextBlackOnCyan()
	{

	echo -en '\E[30;46m'"$(PrintResetColours "$1")"

	}

ColourTextBrightWhite()
	{

	echo -en '\E[1;97m'"$(PrintResetColours "$1")"

	}

PrintResetColours()
	{

	echo -en "$1"'\E[0m'

	}

ShowLogLine()
	{

	# $1 = pass/fail
	# $2 = message

	printf "[ %-10s ] %-33s\n" "$1" "$2"

	}

ShowInfo()
	{

	ShowLogLine "$(ColourTextBrightWhite "info")" "$1"

	}

ShowProc()
	{

	ShowLogLine "$(ColourTextBrightOrange "proc")" "$1 ..."

	}

ShowDone()
	{

	ShowLogLine "$(ColourTextBrightGreen "done")" "$1"

	}

ShowError()
	{

	ShowLogLine "$(ColourTextBrightRed "fail")" "$1"

	}

ShowDebug()
	{

	ShowLogLine "$(ColourTextBlackOnCyan "dbug")" "$1"

	}

DebugFuncEntry()
	{

	DebugThis "\\\\ entered <${FUNCNAME[1]}>"

	}

DebugFuncExit()
	{

	DebugThis "// leaving <${FUNCNAME[1]}> [$errorcode]"

	}

DebugInfo()
	{

	DebugThis "?? $1"

	}

DebugProc()
	{

	DebugThis "-- $1 ..."

	}

DebugDone()
	{

	DebugThis "== $1"

	}

DebugError()
	{

	DebugThis "!! $1"

	}

DebugVar()
	{

	DebugThis "\$\$ $1 [${!1}]"

	}

DebugSeparator()
	{

	DebugThis "== ============================="

	}

DownloadAndExecute()
	{

	# $1 = package display name
	# $2 = command(s) to run

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"
	DebugThis "\$2 [$2]"

	ShowProc "downloading and installing \"$1\""

	install_msgs=$(eval $2)
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "installed \"$1\""
	else
		ShowError "\"$1\" installation failed [$result]"
		echo "$install_msgs" > "$(echo "$1" | tr " " "_").$INSTALL_LOG_FILE"
		errorcode=45
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

RemoveConfigBlock()
	{

	# $1 = QPKG data block name to remove

	DebugFuncEntry
	local returncode=0

	DebugThis "\$1 [$1]"

	if [ -z "$1" ]; then
		errorcode=46
		returncode=1

	elif [ ! -e "$QPKG_CONFIG_PATHFILE" ]; then
		errorcode=47
		returncode=1

	else
		local start_line=$($GREP_CMD -nF "[$1]" "$QPKG_CONFIG_PATHFILE" | $CUT_CMD -f1 -d':')
		local last_line=$($WC_CMD -l < "$QPKG_CONFIG_PATHFILE" | tr -d ' ')
		local block_length=$($TAIL_CMD -n$((last_line-start_line)) < "$QPKG_CONFIG_PATHFILE" | $GREP_CMD -nF "[" | $HEAD_CMD -n1 | $CUT_CMD -f1 -d':')
		[ ! -z "$block_length" ] && end_line=$((start_line+block_length-1)) || end_line=$last_line

		$SED_CMD -i "$start_line,${end_line}d" "$QPKG_CONFIG_PATHFILE"
	fi

	DebugFuncExit
	return $returncode

	}

DisplayResult()
	{

	DebugFuncEntry

	[ "$SAB_WAS_INSTALLED" == "true" ] && RE="re" || RE=""

	echo

	if [ "$errorcode" -eq "0" ]; then
		[ "$debug" == "true" ] && emoticon=":DD" || emoticon=""
		ShowDone "SABnzbd has been successfully ${RE}installed! $emoticon"
	else
		[ "$debug" == "true" ] && emoticon=":S" || emoticon=""
		ShowError "SABnzbd ${RE}install failed! $emoticon [$errorcode]"
	fi

	DebugFuncExit

	}

Init
[ "$errorcode" -eq "0" ] && DownloadQPKGs
[ "$errorcode" -eq "0" ] && StopSabDaemon
[ "$errorcode" -eq "0" ] && CreateBackup
[ "$errorcode" -eq "0" ] && RemoveQPKGs
[ "$errorcode" -eq "0" ] && UninstallEntwarePython
[ "$errorcode" -eq "0" ] && InstallQPKGs
[ "$errorcode" -eq "0" ] && StopSabDaemon
[ "$errorcode" -eq "0" ] && DownloadIPKs
[ "$errorcode" -eq "0" ] && CreateWaiter
[ "$errorcode" -eq "0" ] && InstallIPKs
[ "$errorcode" -eq "0" ] && InstallPIPs
[ "$errorcode" -eq "0" ] && PatchInitWithPython
[ "$errorcode" -eq "0" ] && PatchInitWithWaiter
[ "$errorcode" -eq "0" ] && CreateYENCLinks
[ "$errorcode" -eq "0" ] && RestoreBackup
[ "$errorcode" -eq "0" ] && StartSabDaemon
[ "$errorcode" -eq "0" ] && DeleteTmp
DisplayResult

exit "$errorcode"
