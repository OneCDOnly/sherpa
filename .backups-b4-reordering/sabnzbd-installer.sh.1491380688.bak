#!/bin/bash
############################################################################
# sabnzbd-installer.sh
#
# (C)opyright 2017 OneCD
#
# So, blame OneCD if it all goes horribly wrong. ;)
#
# for more info:
# https://forum.qnap.com/viewtopic.php?f=133&t=129696
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.
#
############################################################################

debug=false; [ ! -z "$1" ] && [ "$1" == "--debug" ] && debug=true

Init()
	{

	DebugFuncEntry
	local returncode=0
	errorcode=0

	local SCRIPT_FILE="sabnzbd-installer.sh"
	local SCRIPT_VERSION="2017.04.05.02"

	QPKG_CONFIG_PATHFILE="/etc/config/qpkg.conf"
	ULINUX_PATHFILE="/etc/config/uLinux.conf"
	INSTALL_LOG_FILE="install.log"
	DOWNLOAD_LOG_FILE="download.log"
	DEBUG_LOG_FILE="download.log"
	SHARE_DOWNLOAD_PATH="/share/Download"
	SHARE_PUBLIC_PATH="/share/Public"
	WORKING_PATH="${SHARE_PUBLIC_PATH}/${SCRIPT_FILE%.*}.tmp"
	BACKUP_PATH="${WORKING_PATH}/backup"
	QPKG_PATH="${WORKING_PATH}/qpkg-downloads"
	IPK_PATH="${WORKING_PATH}/ipk-downloads"

	# used to create the temporary illusion of QNAP's Python 2.7.3 QPKG and Clinton's Git QPKG being installed
	FAKE_PYTHON_PATH="/usr/bin"
	FAKE_GIT_PATH="/Apps/bin"
	FAKE_PYTHON_PATHFILE="${FAKE_PYTHON_PATH}/python2.7"
	FAKE_GIT_PATHFILE="${FAKE_GIT_PATH}/git"

	# used when converting from Stephane's QPKG to Clinton's QPKG (not yet fully operational)
	FR_BACKUP_PATH="${BACKUP_PATH}/SAB_CONFIG"
	AU_BACKUP_PATH="${BACKUP_PATH}/Config"
	FR_BACKUP_PATHFILE="${AU_BACKUP_PATH}/config.ini"
	AU_BACKUP_PATHFILE="${AU_BACKUP_PATH}/sabnzbd.ini"

	# cherry-pick binaries
	CAT_CMD="/bin/cat"
	GREP_CMD="/bin/grep"
	SED_CMD="/bin/sed"
	UNAME_CMD="/bin/uname"
	MD5SUM_CMD="/bin/md5sum"
	MKDIR_CMD="/bin/mkdir"
	MV_CMD="/bin/mv"
	RM_CMD="/bin/rm"
	TOUCH_CMD="/bin/touch"
	CHMOD_CMD="/bin/chmod"
	LN_CMD="/bin/ln"
	HOSTNAME_CMD="/bin/hostname"

	SETCFG_CMD="/sbin/setcfg"
	GETCFG_CMD="/sbin/getcfg"
	RMCFG_CMD="/sbin/rmcfg"

	HEAD_CMD="/usr/bin/head"
	TAIL_CMD="/usr/bin/tail"
	DIRNAME_CMD="/usr/bin/dirname"
	BASENAME_CMD="/usr/bin/basename"
	WGET_CMD="/usr/bin/wget"
	WC_CMD="/usr/bin/wc"
	CUT_CMD="/usr/bin/cut"
	FIND_CMD="/usr/bin/find"

	OPKG_CMD="/opt/bin/opkg"

	echo "$(ColourTextBrightWhite "$SCRIPT_FILE") ($SCRIPT_VERSION)"
	[ "$debug" == "false" ] && echo

	if [ "$debug" == "true" ]; then
		DebugSeparator
		DebugInfo "Markers: (**) probed, (--) processing, (==) process done, (II) information,"
        DebugInfo "         (WW) warning, (EE) error, (->) function entry, (<-) function exit,"
        DebugInfo "         (VV) variable name & value, (\$1) argument value."
		DebugSeparator
		DebugProbed "NAS:            model: $($GETCFG_CMD System Model -f "$ULINUX_PATHFILE")"
		DebugProbed "NAS:   internal model: [$($GETCFG_CMD System "Internal Model" -f "$ULINUX_PATHFILE")"
		DebugProbed "NAS: firmware version: [$($GETCFG_CMD System Version -f "$ULINUX_PATHFILE")"
		DebugProbed "NAS:   firmware build: $($GETCFG_CMD System "Build Number" -f "$ULINUX_PATHFILE")"
		DebugProbed "NAS: uptime & sysload: $(uptime | tr -s ' ')"
		DebugProbed "NAS:             PATH: $PATH"
		DebugProbed "NAS:         Download: $(ls -l ${SHARE_DOWNLOAD_PATH}* | tr -s ' ')"
	fi

	SysFilePresent "$CAT_CMD" || return
	SysFilePresent "$GREP_CMD" || return
	SysFilePresent "$SED_CMD" || return
	SysFilePresent "$UNAME_CMD" || return
	SysFilePresent "$MD5SUM_CMD" || return
	SysFilePresent "$MKDIR_CMD" || return
	SysFilePresent "$MV_CMD" || return
	SysFilePresent "$RM_CMD" || return
	SysFilePresent "$TOUCH_CMD" || return
	SysFilePresent "$CHMOD_CMD" || return
	SysFilePresent "$LN_CMD" || return
	SysFilePresent "$HOSTNAME_CMD" || return

	SysFilePresent "$SETCFG_CMD" || return
	SysFilePresent "$GETCFG_CMD" || return
	SysFilePresent "$RMCFG_CMD" || return

	SysFilePresent "$HEAD_CMD" || return
	SysFilePresent "$TAIL_CMD" || return
	SysFilePresent "$DIRNAME_CMD" || return
	SysFilePresent "$BASENAME_CMD" || return
	SysFilePresent "$WGET_CMD" || return
	SysFilePresent "$WC_CMD" || return
	SysFilePresent "$CUT_CMD" || return
	SysFilePresent "$FIND_CMD" || return

	SysSharePresent "$SHARE_DOWNLOAD_PATH" || return
	SysSharePresent "$SHARE_PUBLIC_PATH" || return

	GetClintonQPKGArch
	CalcPreferredEntware

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$WORKING_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create working directory ($WORKING_PATH) [$result]"
			errorcode=1
			returncode=1
		fi

		cd "$WORKING_PATH"
	fi

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$QPKG_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create QPKG download directory ($QPKG_PATH) [$result]"
			errorcode=2
			returncode=1
		fi
	fi

	if [ "$errorcode" -eq "0" ]; then
		$MKDIR_CMD -p "$IPK_PATH" 2> /dev/null
		result=$?

		if [ "$result" -ne "0" ]; then
			ShowError "unable to create IPK download directory ($IPK_PATH) [$result]"
			errorcode=3
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

DownloadQPKGs()
	{

	DebugFuncEntry
	local returncode=0

	if ! QPKGIsInstalled "$PREF_ENTWARE"; then
		LoadQPKGDetails "$PREF_ENTWARE"
		DownloadQPKG "$qpkg_url" "$qpkg_md5"

	elif [ "$PREF_ENTWARE" == "Entware-3x" ]; then
		local testfile="/opt/etc/passwd"
		[ -e "$testfile" ] && { [ -L "$testfile" ] && ENTWARE_VER="std" || ENTWARE_VER="alt" ;} || ENTWARE_VER="none"

		DebugVar "ENTWARE_VER"

		if [ "$ENTWARE_VER" == "alt" ]; then
			ShowError "Entware-3x (alt) is installed. This configuration has not been tested. Can't continue."
			errorcode=4
			returncode=1

		elif [ "$ENTWARE_VER" == "none" ]; then
			ShowError "Entware appears to be installed but is not visible. Can't continue."
			errorcode=5
			returncode=1
		fi
	fi

	[ "$errorcode" -eq "0" ] && LoadQPKGDetails "SABnzbdplus" && DownloadQPKG "$qpkg_url" "$qpkg_md5" "$qpkg_file"

	DebugFuncExit
	return $returncode

	}

BackupConfig()
	{

	DebugFuncEntry
	local returncode=0

	if QPKGIsInstalled "QSabNZBdPlus"; then
		LoadSABVars "QSabNZBdPlus"

	elif QPKGIsInstalled "SABnzbdplus"; then
		LoadSABVars "SABnzbdplus"
	fi

	StopSabDaemon

	SAB_WAS_INSTALLED=$SAB_IS_INSTALLED

	if [ "$SAB_IS_INSTALLED" == "true" ]; then
		if [ -d "$SAB_CONFIG_PATH" ]; then
			if [ ! -d "${BACKUP_PATH}/Config" ]; then
				$MKDIR_CMD -p "$BACKUP_PATH" 2> /dev/null
				result=$?

				if [ "$result" -eq "0" ]; then
					DebugDone "backup directory created ($BACKUP_PATH)"
				else
					ShowError "unable to create backup directory ($BACKUP_PATH) [$result]"
					errorcode=6
					returncode=1
				fi
			fi

			if [ "$errorcode" -eq "0" ]; then
				if [ ! -d "${BACKUP_PATH}/Config" ]; then
					$MV_CMD "$SAB_CONFIG_PATH" "$BACKUP_PATH"
					result=$?

					if [ "$result" -eq "0" ]; then
						DebugDone "created backup ($BACKUP_PATH)"

						# convert filenames from QSabNZBdPlus -> SABnzbdplus (why can't we all agree on filenames?)
						[ -d "$FR_BACKUP_PATH" ] && { mv "$FR_BACKUP_PATH" "$AU_BACKUP_PATH"; DebugDone "renamed backup config path" ;}
						[ -f "$FR_BACKUP_PATHFILE" ] && { mv "$FR_BACKUP_PATHFILE" "$AU_BACKUP_PATHFILE"; DebugDone "renamed backup config file" ;}

						# change QSabNZBdPlus web port to match the port for SABnzbdplus

					else
						ShowError "could not create backup of ($SAB_CONFIG_PATH) [$result]"
						errorcode=7
						returncode=1
					fi
 				else
 					DebugInfo "a backup set already exists [$BACKUP_PATH]"
 				fi
			fi
		fi
	fi

	DebugFuncExit
	return $returncode

	}

MakeMods()
	{

	DebugFuncEntry

	[ "$errorcode" -eq "0" ] && CreateWaiter
	[ "$errorcode" -eq "0" ] && CreateX64Link
	[ "$errorcode" -eq "0" ] && PatchSABInit
	[ "$errorcode" -eq "0" ] && CreateYENCLinks

	DebugFuncExit
	return 0

	}

RemovePackageInstallers()
	{

	DebugFuncEntry

	[ "$PREF_ENTWARE" == "Entware-3x" ] && UninstallExistingQPKG "Entware-ng"
	[ "$errorcode" -eq "0" ] && UninstallExistingQPKG "Optware"

	DebugFuncExit
	return 0

	}

RemoveSABs()
	{

	DebugFuncEntry

	[ "$errorcode" -eq "0" ] && UninstallExistingQPKG "SABnzbdplus"
	[ "$errorcode" -eq "0" ] && UninstallExistingQPKG "QSabNZBdPlus"

	DebugFuncExit
	return 0

	}

UpdateEntware()
	{

	DebugFuncEntry
	local returncode=0

	if [ ! -f "$OPKG_CMD" ]; then
		ShowError "opkg binary missing. Cannot continue. [$OPKG_CMD]"
		errorcode=8
		returncode=1
	else
		ShowProc "updating Entware"

		$OPKG_CMD update > /dev/null
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "Entware updated"
		else
			ShowWarning "Entware update failed [$result]"
			# meh, continue anyway...
		fi
	fi

	DebugFuncExit
	return $returncode

	}

InstallEntware()
	{

	DebugFuncEntry
	local returncode=0

	if [ "$errorcode" -eq "0" ]; then
		if ! QPKGIsInstalled "$PREF_ENTWARE"; then
			LoadQPKGDetails "$PREF_ENTWARE"
			InstallQPKG "$qpkg_file"
		else
			if [ "$PREF_ENTWARE" == "Entware-3x" ]; then
				local testfile="/opt/etc/passwd"
				[ -e "$testfile" ] && { [ -L "$testfile" ] && ENTWARE_VER="std" || ENTWARE_VER="alt" ;} || ENTWARE_VER="none"

				DebugVar "ENTWARE_VER"

				if [ "$ENTWARE_VER" == "alt" ]; then
					ShowError "Entware-3x (alt) is installed. This config has not been tested. Can't continue."
					errorcode=9
					returncode=1
				else
					UpdateEntware
					returncode=$?
				fi
			fi
		fi
	fi

	[ "$errorcode" -eq "0" ] && ReloadProfile

	DebugFuncExit
	return $returncode

	}

InstallOther()
	{

	DebugFuncEntry

	InstallFakeQPKGs
	[ "$errorcode" -eq "0" ] && DownloadIPKs
	[ "$errorcode" -eq "0" ] && InstallIPKs
	[ "$errorcode" -eq "0" ] && InstallPythonDevIPK
	[ "$errorcode" -eq "0" ] && InstallPIPs

	DebugFuncExit
	return 0

	}

InstallSAB()
	{

	DebugFuncEntry

	if ! QPKGIsInstalled "SABnzbdplus"; then
		LoadQPKGDetails "SABnzbdplus"
		InstallQPKG "$qpkg_file"
		LoadSABVars "SABnzbdplus"
		StopSabDaemon
		MakeMods
	fi

	DebugFuncExit
	return 0

	}

InstallFakeQPKGs()
	{

	DebugFuncEntry

	InstallFakeQPKG "Python" && fakeQPKG_python=true || fakeQPKG_python=false

	if [ -f "$FAKE_PYTHON_PATHFILE" ] && [ -s "$FAKE_PYTHON_PATHFILE" ]; then
		fakebin_python=false
	else
		$MKDIR_CMD -p "$FAKE_PYTHON_PATH"
		$TOUCH_CMD "$FAKE_PYTHON_PATHFILE"
		$CHMOD_CMD +x "$FAKE_PYTHON_PATHFILE"
		fakebin_python=true
	fi

	InstallFakeQPKG "git" && fakeQPKG_git=true || fakeQPKG_git=false

	if [ -f "$FAKE_GIT_PATHFILE" ] && [ -s "$FAKE_GIT_PATHFILE" ]; then
		fakebin_git=false
	else
		$MKDIR_CMD -p "$FAKE_GIT_PATH"
		$TOUCH_CMD "$FAKE_GIT_PATHFILE"
		$CHMOD_CMD +x "$FAKE_GIT_PATHFILE"
		fakebin_git=true
	fi

	DebugVar "fakeQPKG_python"
	DebugVar "fakebin_python"
	DebugVar "fakeQPKG_git"
	DebugVar "fakebin_git"

	DebugFuncExit

	}

InstallFakeQPKG()
	{

	# So the SABnzbd QPKG installer thinks the specified QPKG is installed
	# $1 = QPKG name

	DebugFuncEntry
	local returncode=0

	DebugThis "(\$1) [$1]"

	if [ -z "$1" ]; then
		DebugError "QPKG name not specified"
		errorcode=10
		returncode=1
	else
		if ! QPKGIsInstalled "$1" ; then
			$TOUCH_CMD "$QPKG_CONFIG_PATHFILE"
			$SETCFG_CMD "$1" Enable TRUE -f "$QPKG_CONFIG_PATHFILE"
			returncode=0
		else
			returncode=2
		fi
	fi

	DebugFuncExit
	return $returncode

	}

ReloadProfile()
	{

	DebugFuncEntry

	. /etc/profile > /dev/null
	. /root/.profile > /dev/null

	cd "$WORKING_PATH"

	DebugInfo "reloaded environment"

	DebugFuncExit
	return 0

	}

DownloadIPKs()
	{

	DebugFuncEntry
	local returncode=0

	local packages="gcc python python-pip python-cffi python-pyopenssl ca-certificates nano git git-http"
	[ "$CLINTON_QPKG_ARCH" == "x64" ] && packages="$packages unrar p7zip par2cmdline ionice"
	local download_cmd="$OPKG_CMD --verbosity=0 download"
	local download_msgs=""

	DebugVar "IPK_PATH"

	[ ! -z "$IPK_PATH" ] && { $RM_CMD -f "$IPK_PATH"/*.ipk; DebugDone "removed previous IPK downloads" ;}

	ShowProc "downloading Entware IPKs"

	cd "$IPK_PATH"
	download_msgs=$(eval $download_cmd $packages)
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "downloaded Entware IPKs"
	else
		ShowError "Entware IPKs download failed [$result]"
		echo "$download_msgs" > "${IPK_PATH}/ipks.$DOWNLOAD_LOG_FILE"
		errorcode=11
		returncode=1
	fi

	cd "$WORKING_PATH"

	DebugFuncExit
	return $returncode

	}

CreateWaiter()
	{

	DebugFuncEntry
	local returncode=0

	local WAITER_PATHFILE="$($DIRNAME_CMD "$SAB_INSTALLED_PATH")/wait-for-Entware.sh"
	WAIT_FOR_PATH="/opt/${PREF_ENTWARE}.sh"

	$CAT_CMD > "$WAITER_PATHFILE" << EOF
#!/bin/sh

[ ! -z "\$1" ] && timeout="\$1" || timeout=600
[ ! -z "\$2" ] && testfile="\$2" || testfile="$WAIT_FOR_PATH"
scriptname="\$(/usr/bin/basename \$0)"
waitlog="/tmp/wait-counter-\${scriptname}.log"

if [ ! -e "\$testfile" ]; then
   (
      for ((count=1; count<=timeout; count++)); do
         sleep 1
         [ -e "\$testfile" ] &&
            {
            echo "waited for \$count seconds" >> "\$waitlog"
            true
            exit
            }

      done
      false
   )

   if [ "\$?" -ne "0" ]; then
      echo "timeout exceeded!" >> "\$waitlog"
      /sbin/write_log "[\$scriptname] Could not continue: timeout exceeded." 1
      false
      exit
   fi

   # if here, then testfile has appeared, so reload environment
   . /etc/profile
   . /root/.profile
fi
EOF

	result=$?

	if [ "$result" -eq "0" ]; then
		DebugDone "waiter created"

		if [ -f "$WAITER_PATHFILE" ]; then
			$CHMOD_CMD +x "$WAITER_PATHFILE"
			result=$?

			if [ "$result" -eq "0" ]; then
				DebugDone "set waiter executable"
			else
				ShowError "unable to set waiter as executable ($WAITER_PATHFILE) [$result]"
				errorcode=12
				returncode=1
			fi
		else
			ShowError "waiter not found ($WAITER_PATHFILE) [$result]"
			errorcode=13
			returncode=1
		fi
	else
		ShowError "unable to create waiter ($WAITER_PATHFILE) [$result]"
		errorcode=14
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

InstallIPKs()
	{

	DebugFuncEntry
	local returncode=0

	local packages="*"
	local install_cmd="$OPKG_CMD install --force-overwrite"
	local install_msgs=""

	ShowProc "installing Entware IPKs"

	install_msgs=$(eval $install_cmd ${IPK_PATH}/${packages})
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "installed Entware IPKs"
	else
		ShowError "Entware IPKs install failed [$result]"
		echo "$install_msgs" > "${IPK_PATH}/ipks.$INSTALL_LOG_FILE"
		errorcode=15
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

InstallPythonDevIPK()
	{

	DebugFuncEntry
	local returncode=0

	local install_cmd="$OPKG_CMD install --force-overwrite python-dev"
	local install_msgs=""

	ShowProc "installing Entware python-dev IPK"

	install_msgs=$(eval $install_cmd)
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "installed Entware python-dev IPK"
	else
		ShowError "Entware python-dev IPK install failed [$result]"
		echo "$install_msgs" > "${IPK_PATH}/ipks-python-dev.$INSTALL_LOG_FILE"
		errorcode=16
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

InstallPIPs()
	{

	DebugFuncEntry

	DownloadAndExecute "pip modules" "pip install --upgrade pip setuptools && pip install http://www.golug.it/pub/yenc/yenc-0.4.0.tar.gz cheetah"

	DebugFuncExit
	return 0

	}

DownloadAndExecute()
	{

	# $1 = package display name
	# $2 = command(s) to run

	DebugFuncEntry
	local returncode=0

	DebugThis "(\$1) [$1]"
	DebugThis "(\$2) [$2]"

	ShowProc "downloading and installing '$1'"

	install_msgs=$(eval $2)
	result=$?

	if [ "$result" -eq "0" ]; then
		ShowDone "installed '$1'"
	else
		ShowError "\"$1\" installation failed [$result]"
		echo "$install_msgs" > "$(echo "$1" | tr " " "_").$INSTALL_LOG_FILE"
		errorcode=17
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

PatchSABInit()
	{

	DebugFuncEntry
	local returncode=0
	local findtext=""
	local inserttext=""

	if [ -f "$SAB_INIT_PATHFILE" ]; then
		# change python
		$SED_CMD -i 's|/usr/bin/python2.7|/opt/bin/python|' "$SAB_INIT_PATHFILE"
		DebugDone "patched: switch Python"

		# add waiter
		findtext='#!/bin/sh'
		inserttext=". $($DIRNAME_CMD "$SAB_INSTALLED_PATH")/wait-for-Entware.sh 300"
		($GREP_CMD "$inserttext" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$findtext|$findtext\n\n$inserttext|" "$SAB_INIT_PATHFILE"
		DebugDone "patched: add call to Entware waiter"

		# remove additions to $PATH
		$SED_CMD -i 's|:/Apps/bin:|:|;s|:/Apps/lib:|:|' "$SAB_INIT_PATHFILE"
		DebugDone "patched: disable Git PATH mods"

 		if [ "$CLINTON_QPKG_ARCH" == "x64" ]; then
			# modify check for x64 arch
			$SED_CMD -i 's|grep "x86_64"; then ver="x86"; fi|grep "x86_64"; then ver="x64"; fi|' "$SAB_INIT_PATHFILE"
			DebugDone "patched: modified x86_64 arch support"

			# add check for true x64 arch
 			findtext='grep "x86_64"; then ver="x64"; fi'
 			inserttext="if /bin/uname -m \| grep \"x64\"; then ver=\"x64\"; fi"
 			($GREP_CMD "grep \"x64\"" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$findtext|$findtext\n$inserttext|" "$SAB_INIT_PATHFILE"
 			DebugDone "patched: add x64 arch support"
		fi

		# disable these as not needed
		inserttext="CheckQpkgEnabled "
		($GREP_CMD "#$inserttext" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$inserttext|#$inserttext|" "$SAB_INIT_PATHFILE"
		DebugDone "patched: don't check QPKGs are enabled"

		inserttext="CheckForGit "
		($GREP_CMD "#$inserttext" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$inserttext|#$inserttext|" "$SAB_INIT_PATHFILE"
		DebugDone "patched: don't check Git QPKG is present"

		inserttext="ConfigPython"
		($GREP_CMD "#$inserttext" < "$SAB_INIT_PATHFILE" > /dev/null) || $SED_CMD -i "s|$inserttext$|#$inserttext|" "$SAB_INIT_PATHFILE"
		DebugDone "patched: don't (re)config Python"

	else
		ShowError "SABnzbd init not found ($SAB_INIT_PATHFILE)"
		errorcode=18
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

CreateX64Link()
	{

	DebugFuncEntry
	local returncode=0

	if [ "$CLINTON_QPKG_ARCH" == "x64" ]; then
		if [ ! -z "$SAB_INSTALLED_PATH" ]; then
			$MKDIR_CMD -p "${SAB_INSTALLED_PATH}/x64"
			$LN_CMD -s "${SAB_INSTALLED_PATH}/x86/bin" "${SAB_INSTALLED_PATH}/x64/bin"
			$LN_CMD -s "${SAB_INSTALLED_PATH}/x86/lib" "${SAB_INSTALLED_PATH}/x64/lib"
			$LN_CMD -s "${SAB_INSTALLED_PATH}/x86/python" "${SAB_INSTALLED_PATH}/x64/python"
			$LN_CMD -fs "/opt/bin" "${SAB_INSTALLED_PATH}/x64/bin-utils"

			DebugDone "x64 symlink created"
		else
			DebugError "no sab installed path"
			errorcode=19
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

CreateYENCLinks()
	{

	DebugFuncEntry
	local ent_python_path="$($GETCFG_CMD "$PREF_ENTWARE" Install_Path -f "$QPKG_CONFIG_PATHFILE")/lib/python2.7/site-packages"
	local sab_python_path="$SAB_INSTALLED_PATH/$CLINTON_QPKG_ARCH/python"

	$LN_CMD -fs "${ent_python_path}/yenc.py" "$sab_python_path"
	$LN_CMD -fs "${ent_python_path}/_yenc.so" "$sab_python_path"

	DebugDone "yEnc symlinks created"

	DebugFuncExit
	return 0

	}

RestoreConfig()
	{

	DebugFuncEntry
	local returncode=0

	if [ "$SAB_IS_INSTALLED" == "true" ]; then
		if [ -d "$AU_BACKUP_PATH" ]; then
			if [ ! -d "$SAB_CONFIG_PATH" ]; then
				$MKDIR_CMD -p "$($DIRNAME_CMD "$SAB_CONFIG_PATH")" 2> /dev/null
			else
				rm -r "$SAB_CONFIG_PATH" 2> /dev/null
			fi

			$MV_CMD "$AU_BACKUP_PATH" "$($DIRNAME_CMD "$SAB_CONFIG_PATH")"
			result=$?

			if [ "$result" -eq "0" ]; then
				DebugDone "restored history backup ($SAB_CONFIG_PATH)"
			else
				ShowError "could not restore history backup to ($SAB_CONFIG_PATH) [$result]"
				errorcode=20
				returncode=1
			fi
		fi

	else
		ShowError "SABnzbd is not installed so can't restore backups"
		errorcode=21
		returncode=1
	fi

	[ "$errorcode" -eq "0" ] && StartSabDaemon

	DebugFuncExit
	return $returncode

	}

DownloadQPKG()
	{

	# $1 = QPKG URL
	# $2 = QPKG MD5 checksum
	# $3 = package name (optional)

	DebugFuncEntry
	local returncode=0
	local target_qpkg_file=""
	local target_qpkg_pathfile=""
	local expected_checksum=""

	DebugThis "(\$1) [$1]"
	DebugThis "(\$2) [$2]"
	DebugThis "(\$3) [$3]"

	[ "$errorcode" -gt "0" ] && { DebugFuncExit; return ;}

	if [ -z "$1" ]; then
		DebugError "QPKG URL not specified"
		errorcode=22
		returncode=1

	elif [ -z "$2" ]; then
		DebugError "QPKG MD5 not specified"
		errorcode=23
		returncode=1

	else
		[ -z "$3" ] && target_qpkg_file=$($BASENAME_CMD "$1") || target_qpkg_file="$3"

		target_qpkg_pathfile="${QPKG_PATH}/${target_qpkg_file}"
		expected_checksum=$2

		if [ -e "$target_qpkg_pathfile" ]; then
			file_checksum=$($MD5SUM_CMD "$target_qpkg_pathfile" | $CUT_CMD -f1 -d' ')
			result=$?

			if [ "$result" -eq "0" ]; then
				if [ "$file_checksum" == "$expected_checksum" ]; then
					DebugInfo "existing QPKG checksum correct ($target_qpkg_file)"
				else
					DebugError "existing QPKG checksum incorrect ($target_qpkg_file) [$result]"
					DebugError "deleting ($target_qpkg_pathfile) [$result]"
					rm -f "$target_qpkg_pathfile"
				fi
			else
				ShowError "problem creating checksum from existing QPKG [$result]"
				errorcode=24
				returncode=1
			fi
		fi

		if [ "$errorcode" -eq "0" ] && [ ! -e "$target_qpkg_pathfile" ]; then
			ShowProc "downloading QPKG ($target_qpkg_file)"

			$WGET_CMD --no-check-certificate --output-file "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE" "$1" --output-document "$target_qpkg_pathfile"
			result=$?

			echo -e "\nresult=[$result]" >> "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE"

			if [ "$result" -eq "0" ]; then
				file_checksum=$($MD5SUM_CMD "$target_qpkg_pathfile" | $CUT_CMD -f1 -d' ')
				result=$?

				if [ "$result" -eq "0" ]; then
					if [ "$file_checksum" == "$expected_checksum" ]; then
						ShowDone "downloaded QPKG checksum correct ($target_qpkg_file)"
					else
						ShowError "downloaded QPKG checksum incorrect ($target_qpkg_file) [$result]"
						errorcode=25
						returncode=1
					fi
				else
					ShowError "problem creating checksum from downloaded QPKG [$result]"
					errorcode=26
					returncode=1
				fi
			else
				ShowError "download failed ($target_qpkg_pathfile) [$result]"

				if [ "$debug" == "true" ]; then
					DebugSeparator
					$CAT_CMD "$target_qpkg_pathfile.$DOWNLOAD_LOG_FILE"
					DebugSeparator
				fi

				errorcode=27
				returncode=1
			fi
		fi
	fi

	DebugFuncExit
	return $returncode

	}

GetClintonQPKGArch()
	{

	# a "reimagining" of Clinton Hall's arch detection code ;)
	# reduce NAS architecture down to 4 possibilities

	DebugFuncEntry
	local returncode=0

	local NAS_ARCH="$($UNAME_CMD -m)"

	[ "$NAS_ARCH" == "armv5tejl" ] && CLINTON_QPKG_ARCH="arm"
	[ "$NAS_ARCH" == "armv5tel" ] && CLINTON_QPKG_ARCH="arm"
	[ "$NAS_ARCH" == "i686" ] && CLINTON_QPKG_ARCH="x86"
	[ "$NAS_ARCH" == "x86_64" ] && CLINTON_QPKG_ARCH="x64"
	[ "$NAS_ARCH" == "armv7l" ] && CLINTON_QPKG_ARCH="x31"

	DebugVar "NAS_ARCH"
	DebugVar "CLINTON_QPKG_ARCH"

	if [ -z "$CLINTON_QPKG_ARCH" ]; then
		ShowError "could not determine NAS architecture ($NAS_ARCH)"
		errorcode=28
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

CalcPreferredEntware()
	{

	# decide which Entware is suitable for this NAS.

	DebugFuncEntry

	if [ "$($UNAME_CMD -m)" == "i686" ]; then
		PREF_ENTWARE="Entware-ng"
	else
		PREF_ENTWARE="Entware-3x"
	fi

	DebugVar "PREF_ENTWARE"

	DebugFuncExit
	return 0

	}

LoadSABVars()
	{

	DebugFuncEntry
	local returncode=0
	local target_qpkg_name=""

	if [ -z "$1" ]; then
		DebugError "SABnzbd QPKG name not specified"
		errorcode=29
		returncode=1
	else
		target_qpkg_name="$1"
		SAB_INSTALLED_PATH="$($GETCFG_CMD "$target_qpkg_name" Install_Path -f "$QPKG_CONFIG_PATHFILE")"
		result=$?

		DebugVar "result"

		if [ "$result" -eq "0" ]; then
			SAB_IS_INSTALLED=true

			if [ "$target_qpkg_name" == "SABnzbdplus" ]; then
				SAB_CONFIG_PATH="${SAB_INSTALLED_PATH}/Config"
			elif [ "$target_qpkg_name" == "QSabNZBdPlus" ]; then
				SAB_CONFIG_PATH="${SAB_INSTALLED_PATH}/SAB_CONFIG"
			fi

			SAB_INIT_PATHFILE="$($GETCFG_CMD "$target_qpkg_name" Shell -f "$QPKG_CONFIG_PATHFILE")"
			SAB_PORT="$($GETCFG_CMD "$target_qpkg_name" Web_Port -f "$QPKG_CONFIG_PATHFILE")"

		else
			SAB_IS_INSTALLED=false
			SAB_CONFIG_PATH=""
			SAB_INIT_PATHFILE=""
			SAB_PORT=""
		fi
	fi

	DebugVar "SAB_IS_INSTALLED"
	DebugVar "SAB_INSTALLED_PATH"
	DebugVar "SAB_CONFIG_PATH"
	DebugVar "SAB_INIT_PATHFILE"

	DebugFuncExit
	return 0

	}

InstallQPKG()
	{

	# $1 = QPKG filename as '.qpkg' or '.zip'

	DebugFuncEntry
	local returncode=0
	local target_qpkg_file=""
	local target_qpkg_pathfile=""

	DebugThis "(\$1) [$1]"

	if [ -z "$1" ]; then
		DebugError "QPKG name not specified"
		errorcode=30
		returncode=1
	else
		target_qpkg_file="$1"
		target_qpkg_pathfile="${QPKG_PATH}/${target_qpkg_file}"

		if [ "${target_qpkg_pathfile##*.}" == "zip" ]; then
			unzip -nq "$target_qpkg_pathfile" -d "$QPKG_PATH"
			target_qpkg_pathfile="${target_qpkg_pathfile%.*}.qpkg"
		fi

		target_qpkg_file="$(basename "$target_qpkg_pathfile")"

		ShowProc "installing QPKG ($target_qpkg_file)"

		install_msgs=$(eval sh "$target_qpkg_pathfile" 2>&1)
		result=$?

		echo -e "${install_msgs}\nresult=[$result]" > "$target_qpkg_pathfile.$INSTALL_LOG_FILE"

		if [ "$result" -eq "0" ] || [ "$result" -eq "10" ]; then
			ShowDone "installed QPKG ($target_qpkg_file)"
		else
			ShowError "QPKG installation failed ($target_qpkg_file) [$result]"

			if [ "$debug" == "true" ]; then
				DebugSeparator
				$CAT_CMD "$target_qpkg_pathfile.$INSTALL_LOG_FILE"
				DebugSeparator
			fi

			errorcode=31
			returncode=1
		fi
	fi

	DebugFuncExit
	return $returncode

	}

UninstallExistingQPKG()
	{

	# $1 = QPKG name

	DebugFuncEntry
	local returncode=0

	DebugThis "(\$1) [$1]"

	qpkg_installed_path="$($GETCFG_CMD "$1" Install_Path -f "$QPKG_CONFIG_PATHFILE")"
	result=$?

	if [ "$result" -eq "0" ]; then
		qpkg_installed_path="$($GETCFG_CMD "$1" Install_Path -f "$QPKG_CONFIG_PATHFILE")"

		if [ -e "${qpkg_installed_path}/.uninstall.sh" ]; then
			ShowProc "uninstalling QPKG '$1'"

			${qpkg_installed_path}/.uninstall.sh > /dev/null
			result=$?

			if [ "$result" -eq "0" ]; then
				ShowDone "uninstalled QPKG '$1'"
			else
				ShowError "unable to uninstall QPKG \"$1\" [$result]"
				errorcode=32
				returncode=1
			fi
		fi

		$RMCFG_CMD "$1" -f "$QPKG_CONFIG_PATHFILE"
	else
		DebugProbed "QPKG '$1' not installed [$result]"
	fi

	DebugFuncExit
	return $returncode

	}

LoadQPKGDetails()
	{

	# $1 = QPKG name

	DebugFuncEntry
	local returncode=0

	DebugThis "(\$1) [$1]"

	qpkg_url=""
	qpkg_md5=""
	qpkg_file=""

	if [ -z "$1" ]; then
		DebugError "QPKG name not specified"
		errorcode=33
		returncode=1
	else
		local base_url=""

		if [ "$1" == "Entware-3x" ]; then
			qpkg_url="http://entware-3x.zyxmon.org/binaries/other/Entware-3x_0.99std.qpkg"; qpkg_md5="3663c9e4323e694fb25897e276f55623"

		elif [ "$1" == "Entware-ng" ]; then
			qpkg_url="http://entware.zyxmon.org/binaries/other/Entware-ng_0.97.qpkg"; qpkg_md5="6c81cc37cbadd85adfb2751dc06a238f"

		elif [ "$1" == "SABnzbdplus" ]; then
			qpkg_url="http://bit.ly/2jPntF9"; qpkg_md5="03077bc11289b944d9e3a58927c269fe"; qpkg_file="SABnzbdplus_170131.qpkg"

		elif [ "$1" == "SickRage" ]; then
			qpkg_url="https://www.dropbox.com/s/j1svazqdi9ieq82/SickBeard-TVRage_151227.qpkg"; qpkg_md5="6616a16f67785d1314d4e0a5a8d3bbdb"

		elif [ "$1" == "CouchPotato2" ]; then
			qpkg_url="https://www.dropbox.com/s/q1zgst6tstoonls/CouchPotato2_141108.qpkg"; qpkg_md5="7e03bac94cdc794df2a3043d080c9cf1"

		else
			DebugError "QPKG name not found"
			errorcode=34
			returncode=1
		fi

		[ -z "$qpkg_file" ] && [ ! -z "$qpkg_url" ] && qpkg_file=$($BASENAME_CMD "$qpkg_url")
	fi

	DebugVar "qpkg_url"
	DebugVar "qpkg_md5"
	DebugVar "qpkg_file"

	DebugFuncExit
	return $returncode

	}

ReinstallSAB()
	{

	DebugFuncEntry

	[ "$errorcode" -eq "0" ] && BackupConfig
	[ "$errorcode" -eq "0" ] && RemoveSABs
	[ "$errorcode" -eq "0" ] && InstallSAB
	[ "$errorcode" -eq "0" ] && RestoreConfig

	DebugFuncExit

	}

StopSabDaemon()
	{

	DebugFuncEntry
	local returncode=0

	if [ -f "$SAB_INIT_PATHFILE" ]; then
		ShowProc "stopping SABnzbd daemon"
		"$SAB_INIT_PATHFILE" stop > /dev/null 2>&1
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "SABnzbd daemon stopped"
		else
			ShowWarning "could not stop SABnzbd daemon [$result]"
			# meh, continue anyway...
			#errorcode=35
			returncode=1
		fi
	else
		DebugError "SABnzbd init not found"
	fi

	DebugFuncExit
	return $returncode

	}

StartSabDaemon()
	{

	DebugFuncEntry
	local returncode=0

	if [ -e "$SAB_INIT_PATHFILE" ]; then
		ShowProc "starting SABnzbd daemon"

		"$SAB_INIT_PATHFILE" start > /dev/null
		result=$?

		if [ "$result" -eq "0" ]; then
			ShowDone "SABnzbd daemon started"
		else
			ShowError "could not start SABnzbd daemon [$result]"
			errorcode=36
			returncode=1
		fi
	else
		DebugInfo "no init file found [$SAB_INIT_PATHFILE]"
	fi

	DebugFuncExit
	return $returncode

	}

Cleanup()
	{

	DebugFuncEntry

	[ "$errorcode" -eq "0" ] && [ "$debug" != "true" ] && [ -d "$WORKING_PATH" ] && rm -rf "$WORKING_PATH"
	[ "$fakeQPKG_python" == "true" ] && $RMCFG_CMD "Python" -f "$QPKG_CONFIG_PATHFILE"
	[ "$fakebin_python" == "true" ] && $RM_CMD -f "$FAKE_PYTHON_PATHFILE"
	[ "$fakeQPKG_git" == "true" ] && $RMCFG_CMD "git" -f "$QPKG_CONFIG_PATHFILE"
	[ "$fakebin_git" == "true" ] && $RM_CMD -f "$FAKE_GIT_PATHFILE"

	DebugFuncExit

	}

DisplayResult()
	{

	DebugFuncEntry

	[ "$SAB_WAS_INSTALLED" == "true" ] && RE="re" || RE=""
	[ "$debug" == "false" ] && echo

	if [ "$errorcode" -eq "0" ]; then
		[ "$debug" == "true" ] && emoticon=":DD" || emoticon=""
		ShowDone "SABnzbd has been successfully ${RE}installed! $emoticon"
		[ "$debug" == "false" ] && echo
		ShowInfo "It should now be accessible on your LAN @ $(ColourTextUnderlinedBlue "http://$($HOSTNAME_CMD -i | tr -d ' '):$SAB_PORT")"
	else
		[ "$debug" == "true" ] && emoticon=":S" || emoticon=""
		ShowError "SABnzbd ${RE}install failed! $emoticon [$errorcode]"
	fi

	DebugFuncExit

	}

QPKGIsInstalled()
	{

	# If package has been installed, check that it has also been enabled.
	# If not enabled, then enable it.
	# If not installed, return 1

	# $1 = package name to check/enable

	DebugFuncEntry
	local returncode=0

	DebugThis "(\$1) [$1]"

	$GREP_CMD -F "[$1]" < "$QPKG_CONFIG_PATHFILE" > /dev/null
	result=$?

	if [ "$result" -eq "0" ]; then
		DebugProbed "QPKG '$1' is installed"
		[ "$($GETCFG_CMD "$1" Enable -u -f "$QPKG_CONFIG_PATHFILE")" != "TRUE" ] && $SETCFG_CMD "$1" Enable TRUE -f "$QPKG_CONFIG_PATHFILE"
	else
		DebugProbed "QPKG '$1' is not installed [$result]"
		returncode=1
	fi

	DebugFuncExit
	return $returncode

	}

SysFilePresent()
	{

	# $1 = pathfile to check

	[ -z "$1" ] && return 1

	if [ ! -e "$1" ]; then
		ShowError "required NAS system file missing [$1]"
		errorcode=37
		return 1
	else
		return 0
	fi

	}

SysSharePresent()
	{

	# $1 = symlink path to check

	[ -z "$1" ] && return 1

	if [ ! -L "$1" ]; then
		ShowError "required NAS system share missing [$1]. Please recreate it via the NAS Control Panel."
		errorcode=38
		return 1
	else
		return 0
	fi

	}

ColourTextBrightGreen()
	{

	echo -en '\E[1;32m'"$(PrintResetColours "$1")"

	}

ColourTextBrightOrange()
	{

	echo -en '\E[1;38;5;214m'"$(PrintResetColours "$1")"

	}

ColourTextBrightRed()
	{

	echo -en '\E[1;31m'"$(PrintResetColours "$1")"

	}

ColourTextUnderlinedBlue()
	{

	echo -en '\E[4;94m'"$(PrintResetColours "$1")"

	}

ColourTextBlackOnCyan()
	{

	echo -en '\E[30;46m'"$(PrintResetColours "$1")"

	}

ColourTextBrightWhite()
	{

	echo -en '\E[1;97m'"$(PrintResetColours "$1")"

	}

PrintResetColours()
	{

	echo -en "$1"'\E[0m'

	}

ShowLogLine()
	{

	# $1 = pass/fail
	# $2 = message

	printf "[ %-10s ] %-33s\n" "$1" "$2"

	}

ShowInfo()
	{

	ShowLogLine "$(ColourTextBrightWhite "info")" "$1"

	}

ShowProc()
	{

	ShowLogLine "$(ColourTextBrightOrange "proc")" "$1 ..."

	}

ShowDone()
	{

	ShowLogLine "$(ColourTextBrightGreen "done")" "$1"

	}

ShowWarning()
	{

	ShowLogLine "$(ColourTextBrightOrange "fail")" "$1"

	}

ShowError()
	{

	ShowLogLine "$(ColourTextBrightRed "fail")" "$1"

	}

ShowDebug()
	{

	ShowLogLine "$(ColourTextBlackOnCyan "dbug")" "$1"

	}

DebugFuncEntry()
	{

	DebugThis "(->) <${FUNCNAME[1]}>"

	}

DebugFuncExit()
	{

	DebugThis "(<-) <${FUNCNAME[1]}> [$errorcode]"

	}

DebugProc()
	{

	DebugThis "(--) $1 ..."

	}

DebugDone()
	{

	DebugThis "(==) $1"

	}

DebugProbed()
	{

	DebugThis "(**) $1"

	}

DebugInfo()
	{

	DebugThis "(II) $1"

	}

DebugWarning()
	{

	DebugThis "(WW) $1"

	}

DebugError()
	{

	DebugThis "(EE) $1"

	}

DebugVar()
	{

	DebugThis "(VV) $1 [${!1}]"

	}

DebugSeparator()
	{

	DebugThis "(==) $(printf '%0.s=' $(seq 1 75))"

	}

DebugThis()
	{

	[ "$debug" == "true" ] && ShowDebug "$1"

	}

Init
[ "$errorcode" -eq "0" ] && DownloadQPKGs
[ "$errorcode" -eq "0" ] && RemovePackageInstallers
[ "$errorcode" -eq "0" ] && InstallEntware
[ "$errorcode" -eq "0" ] && InstallOther
[ "$errorcode" -eq "0" ] && ReinstallSAB
Cleanup
DisplayResult

exit "$errorcode"
