* Is LenANSIDiff() really needed in GenerateFeaturesReportTitleLine()?

* Put 'sherpa about' display into a report window.

* Check OOM killed pids against inactive daemons and report as-such on status report.

* Takes 3.5 to 6 seconds to build QPKG states on Laura.
	- Should be able to do this quicker.
	- Calculate QPKG features separate to states and cache/load these from file next time?

* Disable same-line display updates when not in a user terminal.
	- No-need to record every progress message change in logs.

* Only install IPKs for QPKGs that download successfully (or are already downloaded).
	- ... and the installed ones, as-happens now.

* Default dependency report should only show installed QPKGs.
	- ... but should allow 'sherpa d all' to see all QPKGs.
	- Do the same for repository report.
	- Add new $QPKG_ACTIONS element: 'report'

* When running 'sherpa rebuild sab', SAB is installed and auto-updates as usual. Then when 'restore' action runs, auto-update runs again.
	- Disable auto-update after installation if 'restore' is to be run, then enable it again after 'restore' completes?

* Arg parser: use commas to separate actions & options?

* Include QPKG "signed" status in dependencies report?

* If using 'rustc' IPK, ensure $HOME is != /root before executing.

* 'install'/'reinstall'/'upgrade' should check path QPKG is installed or is to-be installed to.
	- If it starts with /root - abort.

* Reject useless action/group combinations like:
	- 'stop/deactivate inactive'
	- 'start/activate active'
	- 'install installed'
	- 'uninstall not-installed'
	- 'enable enabled'
	- 'disable disabled'

* 'status' report: show new QPKG application version alongside current application version?
	- Not sure about this. Installed application version is not stored. Maybe just display new version?

* Report column headings in bright white?

* Include QPKG version numbers in live progress messages?

* Allow QPKGs to follow source git branch, release or tag.
	# [[ $(git branch) =~ '(no branch)' ]] && echo none || echo one
	# git describe --tags

* Add new arg to reshow the previously generated report.
	- 'sherpa show report'.

* Try each user arg as an action (verb).
    - if not an action, try as a group (noun).
    - if not a group, then it's unwanted.
    - if it's a group, and an action has already been set, process action and group.
    - if it's a group, and no action was set, then assign a default action, process action and group, then iterate.

* BASH completion.

* Automate generation of 'Packages.md' in wiki using details from 'packages.source' ?
    - Would need to store full application description, port numbers, application source.
    - Maybe consider another local source file, that builds 'packages.source' first?

* In production, sherpa 'stable' branch should only update once per-day.
    - 'unstable' should update once per 10 minutes.

* Examine TS-231 QTS executables with 'file'.
    - In what way are they different to x41 executables?

	x31:
		-------------------------------------------------------------------------------------------------------------------------
		[/sbin] # file getcfg
		getcfg: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.3, for GNU/Linux 2.6.16, stripped
		-------------------------------------------------------------------------------------------------------------------------
		[/sbin] # cat /etc/platform.conf
		Platform = ARM_MS
		-------------------------------------------------------------------------------------------------------------------------

	x41:
		-------------------------------------------------------------------------------------------------------------------------
		[/sbin] # file getcfg
		getcfg: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 3.1.1, BuildID[sha1]=5ffd3652ef380f1a3665b325f0a171e3e34fca7a, stripped
		-------------------------------------------------------------------------------------------------------------------------
		[/sbin] # cat /etc/platform.conf
		Platform = ARM_AL
		-------------------------------------------------------------------------------------------------------------------------

* QDK looks like it will now write installation scripts that extract to unique paths.
	- Should now be able to install more than one QPKG simultaneously. https://github.com/qnap-dev/QDK/commit/f1eaf3bf0a9547d449592369e555cdfd6cc3c405
	- It will take time for this ability to make its way into all QPKGs, so will need to note which QPKGs can be installed this way. 'packages' file will need an extra field to note this.
	- Will also apply to reinstalls and upgrades.

* Create local sherpa App Center repository in UI.
	- Place sherpa.xml in /home/httpd and add a 3rd-party repo to App Center with 'http://0.0.0.0:8080/sherpa.xml'
	- Hide this repo in App Center, to prevent user installs via UI? Must check if this can be done. If can't hide, prohibit icon installs?

* Compare .git/ORIG_HEAD before-and-after 'git pull'. If different, then remove *.pyc before starting application.

* Add mini rolling CPU utilitisation graph to progress display while installing QPKGs?
    while true; do top -b -n 2 -d 0.2 -p 1621 | tail -1 | awk '{print $9}'; done
    while true; do /usr/bin/top -b -n2 -d1 | grep 20744 | tail -1 | awk '{print $7}'; done

* Create a troubleshooting page for the wiki?
    - Include explanations of various actions like 'clean' and 'check', so users will have a better idea which action to run when things go wrong.

* Download updates for installed QPKGs in background when running sherpa for any reason?

* Keep track of each package's action times and process the longest ones first next time?
	- Add a new "launch policy" setting: 'none', 'longest', 'shortest', 'balanced'.
		- 'none': QPKGs are processed in the same order they appear in 'packages'.
		- 'longest': QPKGs that take a long time to execute are processed first, in-order, down to the shortest time to execute.
		- 'shortest': QPKGs that take a short time to execute are processed first, in-order, up to the longest time to execute.
		- 'balanced': QPKGs are processed as a mix of longest, then shortest, then next longest, then next shortest, and so-on.

* Wrap description column text in packages report?
	- Use 'GNU column' for this? Nope, 'column' can't wrap text containing ANSI codes. Won't show a wrapped column in colour. :(

* Include new integrated help screens for all actions?
	- Like: `sherpa paste help`, `sherpa install help`, `sherpa reassign help`
