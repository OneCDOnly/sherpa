#!/usr/bin/env bash

SwapTags()
	{

	# input:
	# 	$1 = input pathfile to process for tags. This always has a '.source' extension.
	# 	$2 = output pathfile.

	# output:
	# 	$? = 0

	echo -n "swapping tags (input: '$(basename $1)', output: '$(basename $2)') ... "

	if [[ -f "$1" ]]; then			# ignore symlinks.
		local buffer=$(<"$1")

		buffer=$(sed "s|<?dont_edit?>|$dont_edit_msg (source: '$(basename "$1")')|g" <<< "$buffer")
		buffer=$(sed "s|<?filename?>|$(basename "$2")|g" <<< "$buffer")
		buffer=$(sed "s|<?copyright?>|${copyright_msg//$'\n'/\\n}|g" <<< "$buffer")			# escape newlines.
		buffer=$(sed "s|<?copyright_basic?>|${copyright_basic//$'\n'/\\n}|g" <<< "$buffer")	# escape newlines.
		buffer=$(sed "s|<?project?>|${project_msg//$'\n'/\\n}|g" <<< "$buffer")				# escape newlines.
		buffer=$(sed "s|<?tested?>|${tested_msg//$'\n'/\\n}|g" <<< "$buffer")				# escape newlines.
		buffer=$(sed "s|<?license?>|${license_msg//$'\n'/\\n}|g" <<< "$buffer")				# escape newlines.
		buffer=$(sed "s|<?build_date?>|$build_date|g" <<< "$buffer")
		buffer=$(sed "s|<?build_year?>|$build_year|g" <<< "$buffer")
		buffer=$(sed "s|<?email?>|$email|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_sherpa_base_url?>|$cdn_sherpa_base_url|g" <<< "$buffer")
		buffer=$(sed "s|<?management_file?>|$management_file|g" <<< "$buffer")
		buffer=$(sed "s|<?latest_release_version?>|${latest_release_version:-0}|g" <<< "$buffer")
		buffer=$(sed "s|<?title_description?>|$title_description|g" <<< "$buffer")
		buffer=$(sed "s|<?essential_ipks?>|${essential_ipks:=essential ipks}|g" <<< "$buffer")
		buffer=$(sed "s|<?essential_pips?>|${essential_pips:=essential pips}|g" <<< "$buffer")
		buffer=$(sed "s|<?exclusion_pips?>|${exclusion_pips:=exclusion pips}|g" <<< "$buffer")

		[[ -e $2 ]] && chmod +w "$2"
		echo "$buffer" > "$2"
	fi

	ShowDone

	}

Squeeze()
	{

	# input:
	# 	$1 = input pathfile to process for excess material.
	# 	$2 = output pathfile.

	# output:
	# 	$? = 0

	echo -n 'squeezing ... '

	if [[ -f "$1" ]]; then			# ignore symlinks.
		local buffer=$(<"$1")

		buffer=$(sed -e '/^#[[:space:]].*/d;/#$/d;s/[[:space:]]#[[:space:]].*//' <<< "$buffer")		# remove comment lines and line comments.
		buffer=$(sed -e 's/^[[:space:]]*//' <<< "$buffer")											# remove leading whitespace.
		buffer=$(sed 's/[[:space:]]*$//' <<< "$buffer")												# remove trailing whitespace.
		buffer=$(sed '/^$/d' <<< "$buffer")															# remove empty lines.
		buffer=$(sed 's/\;[[:space:]]/;/' <<< "$buffer")											# remove whitespace after semicolons.

# 		buffer=$(sed ':a;N;$!ba;s/\(\)\n{/{/g' <<< "$buffer")										# remove newline between '()' and '{'
# 		buffer=$(sed ':a;N;$!ba;s/\(\){\n/{ /g' <<< "$buffer")										# remove newline after '(){' and add '{ '.

		# single lines with only '}' should be merged with previous line.

		buffer=$(sed "s|Content-Transfer-Encoding: base64|Content-Transfer-Encoding: base64\n|" <<< "$buffer")	# need to add a newline after this string so signature block is accepted by QTS.

		[[ -e $2 ]] && chmod +w "$2"
		echo "$buffer" > "$2"
	fi

	ShowDone

	}

ColourTextBrightGreen()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;32m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightYellow()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;33m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightOrange()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;38;5;214m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightOrangeBlink()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;5;38;5;214m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightRed()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;31m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightRedBlink()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;5;31m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;36m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextDarkGrey()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;90m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextUnderlinedCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[4;36m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBlackOnCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[30;46m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightWhite()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;97m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ShowPassed()
	{

	ColourTextBrightGreen passed
	echo

	}

ShowFailed()
	{

	ColourTextBrightRed failed
	echo

	}

ShowDone()
	{

	ColourTextBrightGreen done
	echo

	}

build_date=$(date '+%y%m%d')
build_year=$(date '+%Y')
colourful=true
title_description='A mini-package-manager for QNAPÂ® NAS'

checksum_root_path="$HOME"/scripts/nas
source_path="$HOME"/scripts/nas/sherpa/support
target_path="$HOME"/scripts/nas/sherpa
qpkgs_path="$HOME"/scripts/nas/sherpa/QPKGs
wiki_path="$HOME"/documents/sherpa.wiki
docs_path="$HOME"/scripts/nas/sherpa/docs

management_source_file=sherpa-manager.source
management_file=sherpa-manager.sh
management_archive_file=sherpa-manager.tar.gz

objects_file=objects
objects_archive_file=objects.tar.gz

packages_source_file=packages.source
packages_file=packages
packages_archive_file=packages.tar.gz

highest_package_versions_found_pathfile=$source_path/highest_package_versions_found.raw
highest_package_versions_found_sorted_pathfile=$source_path/highest_package_versions_found.tbl

service_library_source_file=service-library.source
service_library_file=service.lib

readme_source_file=README.source
readme_file=README.md

forum_source_file=QNAP-forum-announcement.bbcode.source
forum_file=QNAP-forum-announcement.bbcode

stable_branch=stable
unstable_branch=unstable

stable_branch_msg="$(ColourTextBrightGreen "$stable_branch")"
unstable_branch_msg="$(ColourTextBrightRed "$unstable_branch")"

cdn_onecd_url='https://raw.githubusercontent.com/OneCDOnly'
cdn_sherpa_base_url=$cdn_onecd_url/sherpa
cdn_sherpa_url=$cdn_sherpa_base_url/'$useropt_branch'
cdn_sherpa_packages_url="$cdn_sherpa_url/QPKGs/<?package_name?>/build"
cdn_other_packages_url="$cdn_onecd_url/<?package_name?>/main/build"
cdn_qnap_dev_packages_url='https://github.com/qnap-dev/<?package_name?>/releases/download/v<?version?>'

email='<?email?>'
copyright_basic='Copyright (C) 2017-<?build_year?> OneCD'
dont_edit_msg="Please don't edit this file directly, it was built/modified programmatically with the '$(basename "$0")' script."
email=one.cd.only@gmail.com

# Must escape ampersand chars in `read` blocks for compatibility with `sed` regex.

read -rd '' copyright_msg << EOB
<?copyright_basic?>.
#
#* Contact:
#*   <?email?>
EOB

read -rd '' project_msg << EOB
Project:
#*	 https://git.io/sherpa
#
#* Forum:
#*	 https://forum.qnap.com/viewtopic.php?f=320\&t=132373
EOB

read -rd '' tested_msg << EOB
Tested on:
#*	 GNU bash, version 3.2.57(2)-release (i686-pc-linux-gnu)
#*	 GNU bash, version 3.2.57(1)-release (aarch64-QNAP-linux-gnu)
#*	   Copyright (C) 2007 Free Software Foundation, Inc.
#
#*   ... and periodically on:
#*	 GNU bash, version 5.0.17(1)-release (aarch64-openwrt-linux-gnu)
#*	   Copyright (C) 2019 Free Software Foundation, Inc.
EOB

read -rd '' license_msg << EOB
License:
#*   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
#*	 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
#*	 You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/
EOB

true
