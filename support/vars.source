#!/usr/bin/env bash

build_date=$(date '+%y%m%d')
build_year=$(date '+%Y')
packages_epoch=0			# Only update before building `packages` file.
colourful=true
title_description='a mini-package-manager for QNAP NAS'

checksum_root_path=$HOME/scripts/nas
qpkgs_root_path=$HOME/scripts/nas/sherpa.packages
	qpkgs_path=$qpkgs_root_path/QPKGs
	qpkgs_support_path=$qpkgs_root_path/support
root_path=$HOME/scripts/nas/sherpa
	docs_path=$root_path/docs
	support_path=$root_path/support
wiki_path=$HOME/documents/sherpa.wiki

highest_package_versions_found_pathfile=$qpkgs_support_path/highest_package_versions_found.raw
highest_package_versions_found_sorted_pathfile=$qpkgs_support_path/highest_package_versions_found.tbl

management_archive_file=sherpa-manager.tar.gz
management_file=sherpa-manager.sh
management_source_file=sherpa-manager.source

objects_archive_file=objects.tar.gz
objects_file=objects

packages_archive_file=packages.tar.gz
packages_file=packages
packages_source_file=packages.source

service_library_file=service.lib
service_library_source_file=service-library.source

stable_branch=stable
unstable_branch=unstable

cdn_nzbget_dev_packages_url='https://github.com/nzbgetcom/<?package_name?>/releases/download/v<?version?>'
cdn_onecd_url='https://raw.githubusercontent.com/OneCDOnly'
	cdn_other_packages_url=$cdn_onecd_url/'<?package_name?>/main/build'
	cdn_sherpa_base_url=$cdn_onecd_url/sherpa
		cdn_sherpa_url=$cdn_sherpa_base_url/'$useropt_branch'
	cdn_sherpa_packages_base_url=$cdn_onecd_url/sherpa.packages
		cdn_sherpa_packages_url=$cdn_sherpa_packages_base_url/'$useropt_branch/QPKGs/<?package_name?>/build'
cdn_qnap_dev_packages_url='https://github.com/qnap-dev/<?package_name?>/releases/download/v<?version?>'

copyright_basic='copyright (C) 2017-<?build_year?> OneCD'
dont_edit_msg="Please don't edit this file directly, it was built/modified programmatically with the '$(basename "$0")' script."
email=one.cd.only@gmail.com

# Must escape ampersand chars in `read` blocks for compatibility with `sed` regex.

read -rd '' copyright_msg << EOB
<?copyright_basic?>.
#
#* Contact:
#*   <?email?>
EOB

read -rd '' project_msg << EOB
Project:
#*	 https://git.io/sherpa
#
#* Forum:
#*	 https://forum.qnap.com/viewtopic.php?f=320\&t=132373
EOB

read -rd '' tested_msg << EOB
Tested on:
#*	 GNU bash, version 3.2.57(2)-release (i686-pc-linux-gnu)
#*	 GNU bash, version 3.2.57(1)-release (aarch64-QNAP-linux-gnu)
#*	   Copyright (C) 2007 Free Software Foundation, Inc.
#
#*   ... and periodically on:
#*	 GNU bash, version 5.0.17(1)-release (aarch64-openwrt-linux-gnu)
#*	   Copyright (C) 2019 Free Software Foundation, Inc.
EOB

read -rd '' license_msg << EOB
License:
#*   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
#*	 This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
#*	 You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/
EOB

SwapTags()
	{

	# Input:
	# 	$1 = Input pathfile to process for tags. This always has a '.source' extension.
	# 	$2 = Output pathfile.

	# Output:
	# 	$? = 0

	echo -n "swapping tags (input: '$(basename $1)', output: '$(basename $2)') ... "

	if [[ -f "$1" ]]; then			# ignore symlinks.
		local buffer=$(<"$1")

		buffer=$(sed "s|<?dont_edit?>|$dont_edit_msg (source: '$(basename "$1")')|g" <<< "$buffer")
		buffer=$(sed "s|<?filename?>|$(basename "$2")|g" <<< "$buffer")
		buffer=$(sed "s|<?copyright?>|${copyright_msg//$'\n'/\\n}|g" <<< "$buffer")					# Escape newlines.
		buffer=$(sed "s|<?copyright_basic?>|${copyright_basic//$'\n'/\\n}|g" <<< "$buffer")			# Escape newlines.
		buffer=$(sed "s|<?project?>|${project_msg//$'\n'/\\n}|g" <<< "$buffer")						# Escape newlines.
		buffer=$(sed "s|<?tested?>|${tested_msg//$'\n'/\\n}|g" <<< "$buffer")						# Escape newlines.
		buffer=$(sed "s|<?license?>|${license_msg//$'\n'/\\n}|g" <<< "$buffer")						# Escape newlines.
		buffer=$(sed "s|<?build_date?>|$build_date|g" <<< "$buffer")
		buffer=$(sed "s|<?build_year?>|$build_year|g" <<< "$buffer")
		buffer=$(sed "s|<?packages_epoch?>|$packages_epoch|g" <<< "$buffer")
		buffer=$(sed "s|<?email?>|$email|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_sherpa_base_url?>|$cdn_sherpa_base_url|g" <<< "$buffer")
		buffer=$(sed "s|<?management_file?>|$management_file|g" <<< "$buffer")
		buffer=$(sed "s|<?latest_release_version?>|${latest_release_version:-0}|g" <<< "$buffer")
		buffer=$(sed "s|<?title_description?>|$title_description|g" <<< "$buffer")
		buffer=$(sed "s|<?essential_ipks?>|${essential_ipks:=essential ipks}|g" <<< "$buffer")
		buffer=$(sed "s|<?essential_pips?>|${essential_pips:=essential pips}|g" <<< "$buffer")
		buffer=$(sed "s|<?exclusion_pips?>|${exclusion_pips:=exclusion pips}|g" <<< "$buffer")

		buffer=$(sed "s|<?cdn_nzbget_dev_packages_url?>|$cdn_nzbget_dev_packages_url|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_other_packages_url?>|$cdn_other_packages_url|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_qnap_dev_packages_url?>|$cdn_qnap_dev_packages_url|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_sherpa_packages_url?>|$cdn_sherpa_packages_url|g" <<< "$buffer")
		buffer=$(sed "s|<?cdn_sherpa_packages_base_url?>|$cdn_sherpa_packages_base_url|g" <<< "$buffer")

		[[ -e $2 ]] && chmod +w "$2"
		echo "$buffer" > "$2"
	fi

	ShowDone

	}

Squeeze()
	{

	# Input:
	# 	$1 = Input pathfile to process for excess material.
	# 	$2 = Output pathfile.

	# Output:
	# 	$? = 0

	echo -n 'squeezing ... '

	if [[ -f "$1" ]]; then			# ignore symlinks.
		local buffer=$(<"$1")

		buffer=$(sed -e '/#devdebug/d' <<< "$buffer")												# Remove '#devdebug' lines.
		buffer=$(sed -e '/^#[[:space:]].*/d;/#$/d;s/[[:space:]]#[[:space:]].*//' <<< "$buffer")		# Remove comment lines and line comments.
		buffer=$(sed -e 's/^[[:space:]]*//' <<< "$buffer")											# Remove line leading whitespace.
		buffer=$(sed 's/[[:space:]]*$//' <<< "$buffer")												# Remove line trailing whitespace.
		buffer=$(sed '/^$/d' <<< "$buffer")															# Remove empty lines.
		buffer=$(sed 's/\;[[:space:]]/;/' <<< "$buffer")											# Remove whitespace after semicolons.
		buffer=$(sed "s|Content-Transfer-Encoding: base64|Content-Transfer-Encoding: base64\n|" <<< "$buffer")	# Need to add a newline after this string so signature block is accepted by QTS.

		[[ -e $2 ]] && chmod +w "$2"
		echo "$buffer" > "$2"
	fi

	ShowDone

	}

QPKG.Abbrvs()
	{

	# Input:
	#   $1 = QPKG name.

	# Output:
	#   stdout = list of abbreviations that may be used to specify this package (first package found).
	#   $? = 0 if successful, 1 if failed.

	local -i i=0

	for i in "${!QPKG_NAME[@]}"; do
		if [[ ${QPKG_NAME[$i]} = "${1:?package name null}" ]]; then
			echo -n "${QPKG_ABBRVS[$i]}"
			return 0
		fi
	done

	return 1

	}

ColourTextBrightGreen()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;32m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightYellow()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;33m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightOrange()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;38;5;214m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightOrangeBlink()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;5;38;5;214m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightRed()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;31m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightRedBlink()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;5;31m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;36m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextDarkGrey()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;90m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextUnderlinedCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[4;36m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBlackOnCyan()
	{

	if [[ $colourful = true ]]; then
		printf '\033[30;46m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ColourTextBrightWhite()
	{

	if [[ $colourful = true ]]; then
		printf '\033[1;97m%s\033[0m' "${1:-}"
	else
		printf '%s' "${1:-}"
	fi

	} 2>/dev/null

ShowPassed()
	{

	ColourTextBrightGreen passed
	echo

	}

ShowFailed()
	{

	ColourTextBrightRed failed
	echo

	}

ShowDone()
	{

	ColourTextBrightGreen done
	echo

	}

true
