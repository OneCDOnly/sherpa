User.Opts.Help.Abbreviations.Add()
    {
    [[ ${_object_user_opts_help_abbreviations_array_[*]} != *"$1"* ]] && _object_user_opts_help_abbreviations_array_+=("$1")
    }
User.Opts.Help.Abbreviations.Array()
    {
    echo -n "${_object_user_opts_help_abbreviations_array_[@]}"
    }
User.Opts.Help.Abbreviations.Clear()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ != 'true' ]] && return
    _object_user_opts_help_abbreviations_flag_=false
    DebugVar _object_user_opts_help_abbreviations_flag_
    }
User.Opts.Help.Abbreviations.Count()
    {
    echo "${#_object_user_opts_help_abbreviations_array_[@]}"
    }
User.Opts.Help.Abbreviations.Disable()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ != 'true' ]] && return
    _object_user_opts_help_abbreviations_enable_=false
    DebugVar _object_user_opts_help_abbreviations_enable_
    }
User.Opts.Help.Abbreviations.Enable()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ = 'true' ]] && return
    _object_user_opts_help_abbreviations_enable_=true
    DebugVar _object_user_opts_help_abbreviations_enable_
    }
User.Opts.Help.Abbreviations.Enumerate()
    {
    ((_object_user_opts_help_abbreviations_array_index_++))
    if [[ $_object_user_opts_help_abbreviations_array_index_ -gt ${#_object_user_opts_help_abbreviations_array_[@]} ]]; then
        _object_user_opts_help_abbreviations_array_index_=1
    fi
    }
User.Opts.Help.Abbreviations.Exist()
    {
    [[ ${_object_user_opts_help_abbreviations_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Abbreviations.First()
    {
    echo "${_object_user_opts_help_abbreviations_array_[0]}"
    }
User.Opts.Help.Abbreviations.GetCurrent()
    {
    echo -n "${_object_user_opts_help_abbreviations_array_[((_object_user_opts_help_abbreviations_array_index_-1))]}"
    }
User.Opts.Help.Abbreviations.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_abbreviations_array_[@]} ]] && index=${#_object_user_opts_help_abbreviations_array_[@]}
    echo -n "${_object_user_opts_help_abbreviations_array_[((index-1))]}"
    }
User.Opts.Help.Abbreviations.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_abbreviations_array_[@]} ]]; then
            _object_user_opts_help_abbreviations_array_index_=${#_object_user_opts_help_abbreviations_array_[@]}
        else
            _object_user_opts_help_abbreviations_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_abbreviations_array_index_
    fi
    }
User.Opts.Help.Abbreviations.Init()
    {
    _object_user_opts_help_abbreviations_value_=0
    _object_user_opts_help_abbreviations_text_=''
    _object_user_opts_help_abbreviations_flag_=false
    _object_user_opts_help_abbreviations_enable_=false
    _object_user_opts_help_abbreviations_array_+=()
    _object_user_opts_help_abbreviations_array_index_=1
    _object_user_opts_help_abbreviations_path_=''
    }
User.Opts.Help.Abbreviations.IsAny()
    {
    [[ ${#_object_user_opts_help_abbreviations_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Abbreviations.IsDisabled()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ != 'true' ]]
    }
User.Opts.Help.Abbreviations.IsEnabled()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ = 'true' ]]
    }
User.Opts.Help.Abbreviations.IsNone()
    {
    [[ ${#_object_user_opts_help_abbreviations_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Abbreviations.IsNot()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ != 'true' ]]
    }
User.Opts.Help.Abbreviations.IsSet()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ = 'true' ]]
    }
User.Opts.Help.Abbreviations.List()
    {
    echo -n "${_object_user_opts_help_abbreviations_array_[*]}"
    }
User.Opts.Help.Abbreviations.ListComma()
    {
    echo -n "${_object_user_opts_help_abbreviations_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Abbreviations.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_abbreviations_path_="$2"
    else
        echo -n "$_object_user_opts_help_abbreviations_path_"
    fi
    }
User.Opts.Help.Abbreviations.Remove()
    {
    [[ ${_object_user_opts_help_abbreviations_array_[*]} == *"$1"* ]] && _object_user_opts_help_abbreviations_array_=("${_object_user_opts_help_abbreviations_array_[@]/$1}")
    }
User.Opts.Help.Abbreviations.Set()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ = 'true' ]] && return
    _object_user_opts_help_abbreviations_flag_=true
    DebugVar _object_user_opts_help_abbreviations_flag_
    }
User.Opts.Help.Abbreviations.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_abbreviations_text_="$2"
    else
        echo -n "$_object_user_opts_help_abbreviations_text_"
    fi
    }
User.Opts.Help.Abbreviations.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_abbreviations_value_=$2
    else
        echo -n $_object_user_opts_help_abbreviations_value_
    fi
    }
User.Opts.Help.Abbreviations.Init

User.Opts.Help.Actions.Add()
    {
    [[ ${_object_user_opts_help_actions_array_[*]} != *"$1"* ]] && _object_user_opts_help_actions_array_+=("$1")
    }
User.Opts.Help.Actions.Array()
    {
    echo -n "${_object_user_opts_help_actions_array_[@]}"
    }
User.Opts.Help.Actions.Clear()
    {
    [[ $_object_user_opts_help_actions_flag_ != 'true' ]] && return
    _object_user_opts_help_actions_flag_=false
    DebugVar _object_user_opts_help_actions_flag_
    }
User.Opts.Help.Actions.Count()
    {
    echo "${#_object_user_opts_help_actions_array_[@]}"
    }
User.Opts.Help.Actions.Disable()
    {
    [[ $_object_user_opts_help_actions_enable_ != 'true' ]] && return
    _object_user_opts_help_actions_enable_=false
    DebugVar _object_user_opts_help_actions_enable_
    }
User.Opts.Help.Actions.Enable()
    {
    [[ $_object_user_opts_help_actions_enable_ = 'true' ]] && return
    _object_user_opts_help_actions_enable_=true
    DebugVar _object_user_opts_help_actions_enable_
    }
User.Opts.Help.Actions.Enumerate()
    {
    ((_object_user_opts_help_actions_array_index_++))
    if [[ $_object_user_opts_help_actions_array_index_ -gt ${#_object_user_opts_help_actions_array_[@]} ]]; then
        _object_user_opts_help_actions_array_index_=1
    fi
    }
User.Opts.Help.Actions.Exist()
    {
    [[ ${_object_user_opts_help_actions_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Actions.First()
    {
    echo "${_object_user_opts_help_actions_array_[0]}"
    }
User.Opts.Help.Actions.GetCurrent()
    {
    echo -n "${_object_user_opts_help_actions_array_[((_object_user_opts_help_actions_array_index_-1))]}"
    }
User.Opts.Help.Actions.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_actions_array_[@]} ]] && index=${#_object_user_opts_help_actions_array_[@]}
    echo -n "${_object_user_opts_help_actions_array_[((index-1))]}"
    }
User.Opts.Help.Actions.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_actions_array_[@]} ]]; then
            _object_user_opts_help_actions_array_index_=${#_object_user_opts_help_actions_array_[@]}
        else
            _object_user_opts_help_actions_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_actions_array_index_
    fi
    }
User.Opts.Help.Actions.Init()
    {
    _object_user_opts_help_actions_value_=0
    _object_user_opts_help_actions_text_=''
    _object_user_opts_help_actions_flag_=false
    _object_user_opts_help_actions_enable_=false
    _object_user_opts_help_actions_array_+=()
    _object_user_opts_help_actions_array_index_=1
    _object_user_opts_help_actions_path_=''
    }
User.Opts.Help.Actions.IsAny()
    {
    [[ ${#_object_user_opts_help_actions_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Actions.IsDisabled()
    {
    [[ $_object_user_opts_help_actions_enable_ != 'true' ]]
    }
User.Opts.Help.Actions.IsEnabled()
    {
    [[ $_object_user_opts_help_actions_enable_ = 'true' ]]
    }
User.Opts.Help.Actions.IsNone()
    {
    [[ ${#_object_user_opts_help_actions_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Actions.IsNot()
    {
    [[ $_object_user_opts_help_actions_flag_ != 'true' ]]
    }
User.Opts.Help.Actions.IsSet()
    {
    [[ $_object_user_opts_help_actions_flag_ = 'true' ]]
    }
User.Opts.Help.Actions.List()
    {
    echo -n "${_object_user_opts_help_actions_array_[*]}"
    }
User.Opts.Help.Actions.ListComma()
    {
    echo -n "${_object_user_opts_help_actions_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Actions.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actions_path_="$2"
    else
        echo -n "$_object_user_opts_help_actions_path_"
    fi
    }
User.Opts.Help.Actions.Remove()
    {
    [[ ${_object_user_opts_help_actions_array_[*]} == *"$1"* ]] && _object_user_opts_help_actions_array_=("${_object_user_opts_help_actions_array_[@]/$1}")
    }
User.Opts.Help.Actions.Set()
    {
    [[ $_object_user_opts_help_actions_flag_ = 'true' ]] && return
    _object_user_opts_help_actions_flag_=true
    DebugVar _object_user_opts_help_actions_flag_
    }
User.Opts.Help.Actions.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actions_text_="$2"
    else
        echo -n "$_object_user_opts_help_actions_text_"
    fi
    }
User.Opts.Help.Actions.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actions_value_=$2
    else
        echo -n $_object_user_opts_help_actions_value_
    fi
    }
User.Opts.Help.Actions.Init

User.Opts.Help.ActionsAll.Add()
    {
    [[ ${_object_user_opts_help_actionsall_array_[*]} != *"$1"* ]] && _object_user_opts_help_actionsall_array_+=("$1")
    }
User.Opts.Help.ActionsAll.Array()
    {
    echo -n "${_object_user_opts_help_actionsall_array_[@]}"
    }
User.Opts.Help.ActionsAll.Clear()
    {
    [[ $_object_user_opts_help_actionsall_flag_ != 'true' ]] && return
    _object_user_opts_help_actionsall_flag_=false
    DebugVar _object_user_opts_help_actionsall_flag_
    }
User.Opts.Help.ActionsAll.Count()
    {
    echo "${#_object_user_opts_help_actionsall_array_[@]}"
    }
User.Opts.Help.ActionsAll.Disable()
    {
    [[ $_object_user_opts_help_actionsall_enable_ != 'true' ]] && return
    _object_user_opts_help_actionsall_enable_=false
    DebugVar _object_user_opts_help_actionsall_enable_
    }
User.Opts.Help.ActionsAll.Enable()
    {
    [[ $_object_user_opts_help_actionsall_enable_ = 'true' ]] && return
    _object_user_opts_help_actionsall_enable_=true
    DebugVar _object_user_opts_help_actionsall_enable_
    }
User.Opts.Help.ActionsAll.Enumerate()
    {
    ((_object_user_opts_help_actionsall_array_index_++))
    if [[ $_object_user_opts_help_actionsall_array_index_ -gt ${#_object_user_opts_help_actionsall_array_[@]} ]]; then
        _object_user_opts_help_actionsall_array_index_=1
    fi
    }
User.Opts.Help.ActionsAll.Exist()
    {
    [[ ${_object_user_opts_help_actionsall_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.ActionsAll.First()
    {
    echo "${_object_user_opts_help_actionsall_array_[0]}"
    }
User.Opts.Help.ActionsAll.GetCurrent()
    {
    echo -n "${_object_user_opts_help_actionsall_array_[((_object_user_opts_help_actionsall_array_index_-1))]}"
    }
User.Opts.Help.ActionsAll.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_actionsall_array_[@]} ]] && index=${#_object_user_opts_help_actionsall_array_[@]}
    echo -n "${_object_user_opts_help_actionsall_array_[((index-1))]}"
    }
User.Opts.Help.ActionsAll.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_actionsall_array_[@]} ]]; then
            _object_user_opts_help_actionsall_array_index_=${#_object_user_opts_help_actionsall_array_[@]}
        else
            _object_user_opts_help_actionsall_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_actionsall_array_index_
    fi
    }
User.Opts.Help.ActionsAll.Init()
    {
    _object_user_opts_help_actionsall_value_=0
    _object_user_opts_help_actionsall_text_=''
    _object_user_opts_help_actionsall_flag_=false
    _object_user_opts_help_actionsall_enable_=false
    _object_user_opts_help_actionsall_array_+=()
    _object_user_opts_help_actionsall_array_index_=1
    _object_user_opts_help_actionsall_path_=''
    }
User.Opts.Help.ActionsAll.IsAny()
    {
    [[ ${#_object_user_opts_help_actionsall_array_[@]} -gt 0 ]]
    }
User.Opts.Help.ActionsAll.IsDisabled()
    {
    [[ $_object_user_opts_help_actionsall_enable_ != 'true' ]]
    }
User.Opts.Help.ActionsAll.IsEnabled()
    {
    [[ $_object_user_opts_help_actionsall_enable_ = 'true' ]]
    }
User.Opts.Help.ActionsAll.IsNone()
    {
    [[ ${#_object_user_opts_help_actionsall_array_[@]} -eq 0 ]]
    }
User.Opts.Help.ActionsAll.IsNot()
    {
    [[ $_object_user_opts_help_actionsall_flag_ != 'true' ]]
    }
User.Opts.Help.ActionsAll.IsSet()
    {
    [[ $_object_user_opts_help_actionsall_flag_ = 'true' ]]
    }
User.Opts.Help.ActionsAll.List()
    {
    echo -n "${_object_user_opts_help_actionsall_array_[*]}"
    }
User.Opts.Help.ActionsAll.ListComma()
    {
    echo -n "${_object_user_opts_help_actionsall_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.ActionsAll.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actionsall_path_="$2"
    else
        echo -n "$_object_user_opts_help_actionsall_path_"
    fi
    }
User.Opts.Help.ActionsAll.Remove()
    {
    [[ ${_object_user_opts_help_actionsall_array_[*]} == *"$1"* ]] && _object_user_opts_help_actionsall_array_=("${_object_user_opts_help_actionsall_array_[@]/$1}")
    }
User.Opts.Help.ActionsAll.Set()
    {
    [[ $_object_user_opts_help_actionsall_flag_ = 'true' ]] && return
    _object_user_opts_help_actionsall_flag_=true
    DebugVar _object_user_opts_help_actionsall_flag_
    }
User.Opts.Help.ActionsAll.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actionsall_text_="$2"
    else
        echo -n "$_object_user_opts_help_actionsall_text_"
    fi
    }
User.Opts.Help.ActionsAll.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actionsall_value_=$2
    else
        echo -n $_object_user_opts_help_actionsall_value_
    fi
    }
User.Opts.Help.ActionsAll.Init

User.Opts.Help.Basic.Add()
    {
    [[ ${_object_user_opts_help_basic_array_[*]} != *"$1"* ]] && _object_user_opts_help_basic_array_+=("$1")
    }
User.Opts.Help.Basic.Array()
    {
    echo -n "${_object_user_opts_help_basic_array_[@]}"
    }
User.Opts.Help.Basic.Clear()
    {
    [[ $_object_user_opts_help_basic_flag_ != 'true' ]] && return
    _object_user_opts_help_basic_flag_=false
    DebugVar _object_user_opts_help_basic_flag_
    }
User.Opts.Help.Basic.Count()
    {
    echo "${#_object_user_opts_help_basic_array_[@]}"
    }
User.Opts.Help.Basic.Disable()
    {
    [[ $_object_user_opts_help_basic_enable_ != 'true' ]] && return
    _object_user_opts_help_basic_enable_=false
    DebugVar _object_user_opts_help_basic_enable_
    }
User.Opts.Help.Basic.Enable()
    {
    [[ $_object_user_opts_help_basic_enable_ = 'true' ]] && return
    _object_user_opts_help_basic_enable_=true
    DebugVar _object_user_opts_help_basic_enable_
    }
User.Opts.Help.Basic.Enumerate()
    {
    ((_object_user_opts_help_basic_array_index_++))
    if [[ $_object_user_opts_help_basic_array_index_ -gt ${#_object_user_opts_help_basic_array_[@]} ]]; then
        _object_user_opts_help_basic_array_index_=1
    fi
    }
User.Opts.Help.Basic.Exist()
    {
    [[ ${_object_user_opts_help_basic_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Basic.First()
    {
    echo "${_object_user_opts_help_basic_array_[0]}"
    }
User.Opts.Help.Basic.GetCurrent()
    {
    echo -n "${_object_user_opts_help_basic_array_[((_object_user_opts_help_basic_array_index_-1))]}"
    }
User.Opts.Help.Basic.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_basic_array_[@]} ]] && index=${#_object_user_opts_help_basic_array_[@]}
    echo -n "${_object_user_opts_help_basic_array_[((index-1))]}"
    }
User.Opts.Help.Basic.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_basic_array_[@]} ]]; then
            _object_user_opts_help_basic_array_index_=${#_object_user_opts_help_basic_array_[@]}
        else
            _object_user_opts_help_basic_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_basic_array_index_
    fi
    }
User.Opts.Help.Basic.Init()
    {
    _object_user_opts_help_basic_value_=0
    _object_user_opts_help_basic_text_=''
    _object_user_opts_help_basic_flag_=false
    _object_user_opts_help_basic_enable_=false
    _object_user_opts_help_basic_array_+=()
    _object_user_opts_help_basic_array_index_=1
    _object_user_opts_help_basic_path_=''
    }
User.Opts.Help.Basic.IsAny()
    {
    [[ ${#_object_user_opts_help_basic_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Basic.IsDisabled()
    {
    [[ $_object_user_opts_help_basic_enable_ != 'true' ]]
    }
User.Opts.Help.Basic.IsEnabled()
    {
    [[ $_object_user_opts_help_basic_enable_ = 'true' ]]
    }
User.Opts.Help.Basic.IsNone()
    {
    [[ ${#_object_user_opts_help_basic_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Basic.IsNot()
    {
    [[ $_object_user_opts_help_basic_flag_ != 'true' ]]
    }
User.Opts.Help.Basic.IsSet()
    {
    [[ $_object_user_opts_help_basic_flag_ = 'true' ]]
    }
User.Opts.Help.Basic.List()
    {
    echo -n "${_object_user_opts_help_basic_array_[*]}"
    }
User.Opts.Help.Basic.ListComma()
    {
    echo -n "${_object_user_opts_help_basic_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Basic.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_basic_path_="$2"
    else
        echo -n "$_object_user_opts_help_basic_path_"
    fi
    }
User.Opts.Help.Basic.Remove()
    {
    [[ ${_object_user_opts_help_basic_array_[*]} == *"$1"* ]] && _object_user_opts_help_basic_array_=("${_object_user_opts_help_basic_array_[@]/$1}")
    }
User.Opts.Help.Basic.Set()
    {
    [[ $_object_user_opts_help_basic_flag_ = 'true' ]] && return
    _object_user_opts_help_basic_flag_=true
    DebugVar _object_user_opts_help_basic_flag_
    }
User.Opts.Help.Basic.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_basic_text_="$2"
    else
        echo -n "$_object_user_opts_help_basic_text_"
    fi
    }
User.Opts.Help.Basic.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_basic_value_=$2
    else
        echo -n $_object_user_opts_help_basic_value_
    fi
    }
User.Opts.Help.Basic.Init

User.Opts.Help.Options.Add()
    {
    [[ ${_object_user_opts_help_options_array_[*]} != *"$1"* ]] && _object_user_opts_help_options_array_+=("$1")
    }
User.Opts.Help.Options.Array()
    {
    echo -n "${_object_user_opts_help_options_array_[@]}"
    }
User.Opts.Help.Options.Clear()
    {
    [[ $_object_user_opts_help_options_flag_ != 'true' ]] && return
    _object_user_opts_help_options_flag_=false
    DebugVar _object_user_opts_help_options_flag_
    }
User.Opts.Help.Options.Count()
    {
    echo "${#_object_user_opts_help_options_array_[@]}"
    }
User.Opts.Help.Options.Disable()
    {
    [[ $_object_user_opts_help_options_enable_ != 'true' ]] && return
    _object_user_opts_help_options_enable_=false
    DebugVar _object_user_opts_help_options_enable_
    }
User.Opts.Help.Options.Enable()
    {
    [[ $_object_user_opts_help_options_enable_ = 'true' ]] && return
    _object_user_opts_help_options_enable_=true
    DebugVar _object_user_opts_help_options_enable_
    }
User.Opts.Help.Options.Enumerate()
    {
    ((_object_user_opts_help_options_array_index_++))
    if [[ $_object_user_opts_help_options_array_index_ -gt ${#_object_user_opts_help_options_array_[@]} ]]; then
        _object_user_opts_help_options_array_index_=1
    fi
    }
User.Opts.Help.Options.Exist()
    {
    [[ ${_object_user_opts_help_options_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Options.First()
    {
    echo "${_object_user_opts_help_options_array_[0]}"
    }
User.Opts.Help.Options.GetCurrent()
    {
    echo -n "${_object_user_opts_help_options_array_[((_object_user_opts_help_options_array_index_-1))]}"
    }
User.Opts.Help.Options.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_options_array_[@]} ]] && index=${#_object_user_opts_help_options_array_[@]}
    echo -n "${_object_user_opts_help_options_array_[((index-1))]}"
    }
User.Opts.Help.Options.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_options_array_[@]} ]]; then
            _object_user_opts_help_options_array_index_=${#_object_user_opts_help_options_array_[@]}
        else
            _object_user_opts_help_options_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_options_array_index_
    fi
    }
User.Opts.Help.Options.Init()
    {
    _object_user_opts_help_options_value_=0
    _object_user_opts_help_options_text_=''
    _object_user_opts_help_options_flag_=false
    _object_user_opts_help_options_enable_=false
    _object_user_opts_help_options_array_+=()
    _object_user_opts_help_options_array_index_=1
    _object_user_opts_help_options_path_=''
    }
User.Opts.Help.Options.IsAny()
    {
    [[ ${#_object_user_opts_help_options_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Options.IsDisabled()
    {
    [[ $_object_user_opts_help_options_enable_ != 'true' ]]
    }
User.Opts.Help.Options.IsEnabled()
    {
    [[ $_object_user_opts_help_options_enable_ = 'true' ]]
    }
User.Opts.Help.Options.IsNone()
    {
    [[ ${#_object_user_opts_help_options_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Options.IsNot()
    {
    [[ $_object_user_opts_help_options_flag_ != 'true' ]]
    }
User.Opts.Help.Options.IsSet()
    {
    [[ $_object_user_opts_help_options_flag_ = 'true' ]]
    }
User.Opts.Help.Options.List()
    {
    echo -n "${_object_user_opts_help_options_array_[*]}"
    }
User.Opts.Help.Options.ListComma()
    {
    echo -n "${_object_user_opts_help_options_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Options.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_options_path_="$2"
    else
        echo -n "$_object_user_opts_help_options_path_"
    fi
    }
User.Opts.Help.Options.Remove()
    {
    [[ ${_object_user_opts_help_options_array_[*]} == *"$1"* ]] && _object_user_opts_help_options_array_=("${_object_user_opts_help_options_array_[@]/$1}")
    }
User.Opts.Help.Options.Set()
    {
    [[ $_object_user_opts_help_options_flag_ = 'true' ]] && return
    _object_user_opts_help_options_flag_=true
    DebugVar _object_user_opts_help_options_flag_
    }
User.Opts.Help.Options.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_options_text_="$2"
    else
        echo -n "$_object_user_opts_help_options_text_"
    fi
    }
User.Opts.Help.Options.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_options_value_=$2
    else
        echo -n $_object_user_opts_help_options_value_
    fi
    }
User.Opts.Help.Options.Init

User.Opts.Help.Packages.Add()
    {
    [[ ${_object_user_opts_help_packages_array_[*]} != *"$1"* ]] && _object_user_opts_help_packages_array_+=("$1")
    }
User.Opts.Help.Packages.Array()
    {
    echo -n "${_object_user_opts_help_packages_array_[@]}"
    }
User.Opts.Help.Packages.Clear()
    {
    [[ $_object_user_opts_help_packages_flag_ != 'true' ]] && return
    _object_user_opts_help_packages_flag_=false
    DebugVar _object_user_opts_help_packages_flag_
    }
User.Opts.Help.Packages.Count()
    {
    echo "${#_object_user_opts_help_packages_array_[@]}"
    }
User.Opts.Help.Packages.Disable()
    {
    [[ $_object_user_opts_help_packages_enable_ != 'true' ]] && return
    _object_user_opts_help_packages_enable_=false
    DebugVar _object_user_opts_help_packages_enable_
    }
User.Opts.Help.Packages.Enable()
    {
    [[ $_object_user_opts_help_packages_enable_ = 'true' ]] && return
    _object_user_opts_help_packages_enable_=true
    DebugVar _object_user_opts_help_packages_enable_
    }
User.Opts.Help.Packages.Enumerate()
    {
    ((_object_user_opts_help_packages_array_index_++))
    if [[ $_object_user_opts_help_packages_array_index_ -gt ${#_object_user_opts_help_packages_array_[@]} ]]; then
        _object_user_opts_help_packages_array_index_=1
    fi
    }
User.Opts.Help.Packages.Exist()
    {
    [[ ${_object_user_opts_help_packages_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Packages.First()
    {
    echo "${_object_user_opts_help_packages_array_[0]}"
    }
User.Opts.Help.Packages.GetCurrent()
    {
    echo -n "${_object_user_opts_help_packages_array_[((_object_user_opts_help_packages_array_index_-1))]}"
    }
User.Opts.Help.Packages.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_packages_array_[@]} ]] && index=${#_object_user_opts_help_packages_array_[@]}
    echo -n "${_object_user_opts_help_packages_array_[((index-1))]}"
    }
User.Opts.Help.Packages.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_packages_array_[@]} ]]; then
            _object_user_opts_help_packages_array_index_=${#_object_user_opts_help_packages_array_[@]}
        else
            _object_user_opts_help_packages_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_packages_array_index_
    fi
    }
User.Opts.Help.Packages.Init()
    {
    _object_user_opts_help_packages_value_=0
    _object_user_opts_help_packages_text_=''
    _object_user_opts_help_packages_flag_=false
    _object_user_opts_help_packages_enable_=false
    _object_user_opts_help_packages_array_+=()
    _object_user_opts_help_packages_array_index_=1
    _object_user_opts_help_packages_path_=''
    }
User.Opts.Help.Packages.IsAny()
    {
    [[ ${#_object_user_opts_help_packages_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Packages.IsDisabled()
    {
    [[ $_object_user_opts_help_packages_enable_ != 'true' ]]
    }
User.Opts.Help.Packages.IsEnabled()
    {
    [[ $_object_user_opts_help_packages_enable_ = 'true' ]]
    }
User.Opts.Help.Packages.IsNone()
    {
    [[ ${#_object_user_opts_help_packages_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Packages.IsNot()
    {
    [[ $_object_user_opts_help_packages_flag_ != 'true' ]]
    }
User.Opts.Help.Packages.IsSet()
    {
    [[ $_object_user_opts_help_packages_flag_ = 'true' ]]
    }
User.Opts.Help.Packages.List()
    {
    echo -n "${_object_user_opts_help_packages_array_[*]}"
    }
User.Opts.Help.Packages.ListComma()
    {
    echo -n "${_object_user_opts_help_packages_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Packages.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_packages_path_="$2"
    else
        echo -n "$_object_user_opts_help_packages_path_"
    fi
    }
User.Opts.Help.Packages.Remove()
    {
    [[ ${_object_user_opts_help_packages_array_[*]} == *"$1"* ]] && _object_user_opts_help_packages_array_=("${_object_user_opts_help_packages_array_[@]/$1}")
    }
User.Opts.Help.Packages.Set()
    {
    [[ $_object_user_opts_help_packages_flag_ = 'true' ]] && return
    _object_user_opts_help_packages_flag_=true
    DebugVar _object_user_opts_help_packages_flag_
    }
User.Opts.Help.Packages.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_packages_text_="$2"
    else
        echo -n "$_object_user_opts_help_packages_text_"
    fi
    }
User.Opts.Help.Packages.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_packages_value_=$2
    else
        echo -n $_object_user_opts_help_packages_value_
    fi
    }
User.Opts.Help.Packages.Init

User.Opts.Help.Problems.Add()
    {
    [[ ${_object_user_opts_help_problems_array_[*]} != *"$1"* ]] && _object_user_opts_help_problems_array_+=("$1")
    }
User.Opts.Help.Problems.Array()
    {
    echo -n "${_object_user_opts_help_problems_array_[@]}"
    }
User.Opts.Help.Problems.Clear()
    {
    [[ $_object_user_opts_help_problems_flag_ != 'true' ]] && return
    _object_user_opts_help_problems_flag_=false
    DebugVar _object_user_opts_help_problems_flag_
    }
User.Opts.Help.Problems.Count()
    {
    echo "${#_object_user_opts_help_problems_array_[@]}"
    }
User.Opts.Help.Problems.Disable()
    {
    [[ $_object_user_opts_help_problems_enable_ != 'true' ]] && return
    _object_user_opts_help_problems_enable_=false
    DebugVar _object_user_opts_help_problems_enable_
    }
User.Opts.Help.Problems.Enable()
    {
    [[ $_object_user_opts_help_problems_enable_ = 'true' ]] && return
    _object_user_opts_help_problems_enable_=true
    DebugVar _object_user_opts_help_problems_enable_
    }
User.Opts.Help.Problems.Enumerate()
    {
    ((_object_user_opts_help_problems_array_index_++))
    if [[ $_object_user_opts_help_problems_array_index_ -gt ${#_object_user_opts_help_problems_array_[@]} ]]; then
        _object_user_opts_help_problems_array_index_=1
    fi
    }
User.Opts.Help.Problems.Exist()
    {
    [[ ${_object_user_opts_help_problems_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Problems.First()
    {
    echo "${_object_user_opts_help_problems_array_[0]}"
    }
User.Opts.Help.Problems.GetCurrent()
    {
    echo -n "${_object_user_opts_help_problems_array_[((_object_user_opts_help_problems_array_index_-1))]}"
    }
User.Opts.Help.Problems.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_problems_array_[@]} ]] && index=${#_object_user_opts_help_problems_array_[@]}
    echo -n "${_object_user_opts_help_problems_array_[((index-1))]}"
    }
User.Opts.Help.Problems.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_problems_array_[@]} ]]; then
            _object_user_opts_help_problems_array_index_=${#_object_user_opts_help_problems_array_[@]}
        else
            _object_user_opts_help_problems_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_problems_array_index_
    fi
    }
User.Opts.Help.Problems.Init()
    {
    _object_user_opts_help_problems_value_=0
    _object_user_opts_help_problems_text_=''
    _object_user_opts_help_problems_flag_=false
    _object_user_opts_help_problems_enable_=false
    _object_user_opts_help_problems_array_+=()
    _object_user_opts_help_problems_array_index_=1
    _object_user_opts_help_problems_path_=''
    }
User.Opts.Help.Problems.IsAny()
    {
    [[ ${#_object_user_opts_help_problems_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Problems.IsDisabled()
    {
    [[ $_object_user_opts_help_problems_enable_ != 'true' ]]
    }
User.Opts.Help.Problems.IsEnabled()
    {
    [[ $_object_user_opts_help_problems_enable_ = 'true' ]]
    }
User.Opts.Help.Problems.IsNone()
    {
    [[ ${#_object_user_opts_help_problems_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Problems.IsNot()
    {
    [[ $_object_user_opts_help_problems_flag_ != 'true' ]]
    }
User.Opts.Help.Problems.IsSet()
    {
    [[ $_object_user_opts_help_problems_flag_ = 'true' ]]
    }
User.Opts.Help.Problems.List()
    {
    echo -n "${_object_user_opts_help_problems_array_[*]}"
    }
User.Opts.Help.Problems.ListComma()
    {
    echo -n "${_object_user_opts_help_problems_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Problems.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_problems_path_="$2"
    else
        echo -n "$_object_user_opts_help_problems_path_"
    fi
    }
User.Opts.Help.Problems.Remove()
    {
    [[ ${_object_user_opts_help_problems_array_[*]} == *"$1"* ]] && _object_user_opts_help_problems_array_=("${_object_user_opts_help_problems_array_[@]/$1}")
    }
User.Opts.Help.Problems.Set()
    {
    [[ $_object_user_opts_help_problems_flag_ = 'true' ]] && return
    _object_user_opts_help_problems_flag_=true
    DebugVar _object_user_opts_help_problems_flag_
    }
User.Opts.Help.Problems.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_problems_text_="$2"
    else
        echo -n "$_object_user_opts_help_problems_text_"
    fi
    }
User.Opts.Help.Problems.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_problems_value_=$2
    else
        echo -n $_object_user_opts_help_problems_value_
    fi
    }
User.Opts.Help.Problems.Init

User.Opts.Help.Tips.Add()
    {
    [[ ${_object_user_opts_help_tips_array_[*]} != *"$1"* ]] && _object_user_opts_help_tips_array_+=("$1")
    }
User.Opts.Help.Tips.Array()
    {
    echo -n "${_object_user_opts_help_tips_array_[@]}"
    }
User.Opts.Help.Tips.Clear()
    {
    [[ $_object_user_opts_help_tips_flag_ != 'true' ]] && return
    _object_user_opts_help_tips_flag_=false
    DebugVar _object_user_opts_help_tips_flag_
    }
User.Opts.Help.Tips.Count()
    {
    echo "${#_object_user_opts_help_tips_array_[@]}"
    }
User.Opts.Help.Tips.Disable()
    {
    [[ $_object_user_opts_help_tips_enable_ != 'true' ]] && return
    _object_user_opts_help_tips_enable_=false
    DebugVar _object_user_opts_help_tips_enable_
    }
User.Opts.Help.Tips.Enable()
    {
    [[ $_object_user_opts_help_tips_enable_ = 'true' ]] && return
    _object_user_opts_help_tips_enable_=true
    DebugVar _object_user_opts_help_tips_enable_
    }
User.Opts.Help.Tips.Enumerate()
    {
    ((_object_user_opts_help_tips_array_index_++))
    if [[ $_object_user_opts_help_tips_array_index_ -gt ${#_object_user_opts_help_tips_array_[@]} ]]; then
        _object_user_opts_help_tips_array_index_=1
    fi
    }
User.Opts.Help.Tips.Exist()
    {
    [[ ${_object_user_opts_help_tips_array_[*]} == *"$1"* ]]
    }
User.Opts.Help.Tips.First()
    {
    echo "${_object_user_opts_help_tips_array_[0]}"
    }
User.Opts.Help.Tips.GetCurrent()
    {
    echo -n "${_object_user_opts_help_tips_array_[((_object_user_opts_help_tips_array_index_-1))]}"
    }
User.Opts.Help.Tips.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_help_tips_array_[@]} ]] && index=${#_object_user_opts_help_tips_array_[@]}
    echo -n "${_object_user_opts_help_tips_array_[((index-1))]}"
    }
User.Opts.Help.Tips.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_help_tips_array_[@]} ]]; then
            _object_user_opts_help_tips_array_index_=${#_object_user_opts_help_tips_array_[@]}
        else
            _object_user_opts_help_tips_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_help_tips_array_index_
    fi
    }
User.Opts.Help.Tips.Init()
    {
    _object_user_opts_help_tips_value_=0
    _object_user_opts_help_tips_text_=''
    _object_user_opts_help_tips_flag_=false
    _object_user_opts_help_tips_enable_=false
    _object_user_opts_help_tips_array_+=()
    _object_user_opts_help_tips_array_index_=1
    _object_user_opts_help_tips_path_=''
    }
User.Opts.Help.Tips.IsAny()
    {
    [[ ${#_object_user_opts_help_tips_array_[@]} -gt 0 ]]
    }
User.Opts.Help.Tips.IsDisabled()
    {
    [[ $_object_user_opts_help_tips_enable_ != 'true' ]]
    }
User.Opts.Help.Tips.IsEnabled()
    {
    [[ $_object_user_opts_help_tips_enable_ = 'true' ]]
    }
User.Opts.Help.Tips.IsNone()
    {
    [[ ${#_object_user_opts_help_tips_array_[@]} -eq 0 ]]
    }
User.Opts.Help.Tips.IsNot()
    {
    [[ $_object_user_opts_help_tips_flag_ != 'true' ]]
    }
User.Opts.Help.Tips.IsSet()
    {
    [[ $_object_user_opts_help_tips_flag_ = 'true' ]]
    }
User.Opts.Help.Tips.List()
    {
    echo -n "${_object_user_opts_help_tips_array_[*]}"
    }
User.Opts.Help.Tips.ListComma()
    {
    echo -n "${_object_user_opts_help_tips_array_[*]}" | tr ' ' ','
    }
User.Opts.Help.Tips.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_tips_path_="$2"
    else
        echo -n "$_object_user_opts_help_tips_path_"
    fi
    }
User.Opts.Help.Tips.Remove()
    {
    [[ ${_object_user_opts_help_tips_array_[*]} == *"$1"* ]] && _object_user_opts_help_tips_array_=("${_object_user_opts_help_tips_array_[@]/$1}")
    }
User.Opts.Help.Tips.Set()
    {
    [[ $_object_user_opts_help_tips_flag_ = 'true' ]] && return
    _object_user_opts_help_tips_flag_=true
    DebugVar _object_user_opts_help_tips_flag_
    }
User.Opts.Help.Tips.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_tips_text_="$2"
    else
        echo -n "$_object_user_opts_help_tips_text_"
    fi
    }
User.Opts.Help.Tips.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_tips_value_=$2
    else
        echo -n $_object_user_opts_help_tips_value_
    fi
    }
User.Opts.Help.Tips.Init

User.Opts.Clean.Add()
    {
    [[ ${_object_user_opts_clean_array_[*]} != *"$1"* ]] && _object_user_opts_clean_array_+=("$1")
    }
User.Opts.Clean.Array()
    {
    echo -n "${_object_user_opts_clean_array_[@]}"
    }
User.Opts.Clean.Clear()
    {
    [[ $_object_user_opts_clean_flag_ != 'true' ]] && return
    _object_user_opts_clean_flag_=false
    DebugVar _object_user_opts_clean_flag_
    }
User.Opts.Clean.Count()
    {
    echo "${#_object_user_opts_clean_array_[@]}"
    }
User.Opts.Clean.Disable()
    {
    [[ $_object_user_opts_clean_enable_ != 'true' ]] && return
    _object_user_opts_clean_enable_=false
    DebugVar _object_user_opts_clean_enable_
    }
User.Opts.Clean.Enable()
    {
    [[ $_object_user_opts_clean_enable_ = 'true' ]] && return
    _object_user_opts_clean_enable_=true
    DebugVar _object_user_opts_clean_enable_
    }
User.Opts.Clean.Enumerate()
    {
    ((_object_user_opts_clean_array_index_++))
    if [[ $_object_user_opts_clean_array_index_ -gt ${#_object_user_opts_clean_array_[@]} ]]; then
        _object_user_opts_clean_array_index_=1
    fi
    }
User.Opts.Clean.Exist()
    {
    [[ ${_object_user_opts_clean_array_[*]} == *"$1"* ]]
    }
User.Opts.Clean.First()
    {
    echo "${_object_user_opts_clean_array_[0]}"
    }
User.Opts.Clean.GetCurrent()
    {
    echo -n "${_object_user_opts_clean_array_[((_object_user_opts_clean_array_index_-1))]}"
    }
User.Opts.Clean.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_clean_array_[@]} ]] && index=${#_object_user_opts_clean_array_[@]}
    echo -n "${_object_user_opts_clean_array_[((index-1))]}"
    }
User.Opts.Clean.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_clean_array_[@]} ]]; then
            _object_user_opts_clean_array_index_=${#_object_user_opts_clean_array_[@]}
        else
            _object_user_opts_clean_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_clean_array_index_
    fi
    }
User.Opts.Clean.Init()
    {
    _object_user_opts_clean_value_=0
    _object_user_opts_clean_text_=''
    _object_user_opts_clean_flag_=false
    _object_user_opts_clean_enable_=false
    _object_user_opts_clean_array_+=()
    _object_user_opts_clean_array_index_=1
    _object_user_opts_clean_path_=''
    }
User.Opts.Clean.IsAny()
    {
    [[ ${#_object_user_opts_clean_array_[@]} -gt 0 ]]
    }
User.Opts.Clean.IsDisabled()
    {
    [[ $_object_user_opts_clean_enable_ != 'true' ]]
    }
User.Opts.Clean.IsEnabled()
    {
    [[ $_object_user_opts_clean_enable_ = 'true' ]]
    }
User.Opts.Clean.IsNone()
    {
    [[ ${#_object_user_opts_clean_array_[@]} -eq 0 ]]
    }
User.Opts.Clean.IsNot()
    {
    [[ $_object_user_opts_clean_flag_ != 'true' ]]
    }
User.Opts.Clean.IsSet()
    {
    [[ $_object_user_opts_clean_flag_ = 'true' ]]
    }
User.Opts.Clean.List()
    {
    echo -n "${_object_user_opts_clean_array_[*]}"
    }
User.Opts.Clean.ListComma()
    {
    echo -n "${_object_user_opts_clean_array_[*]}" | tr ' ' ','
    }
User.Opts.Clean.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_clean_path_="$2"
    else
        echo -n "$_object_user_opts_clean_path_"
    fi
    }
User.Opts.Clean.Remove()
    {
    [[ ${_object_user_opts_clean_array_[*]} == *"$1"* ]] && _object_user_opts_clean_array_=("${_object_user_opts_clean_array_[@]/$1}")
    }
User.Opts.Clean.Set()
    {
    [[ $_object_user_opts_clean_flag_ = 'true' ]] && return
    _object_user_opts_clean_flag_=true
    DebugVar _object_user_opts_clean_flag_
    }
User.Opts.Clean.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_clean_text_="$2"
    else
        echo -n "$_object_user_opts_clean_text_"
    fi
    }
User.Opts.Clean.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_clean_value_=$2
    else
        echo -n $_object_user_opts_clean_value_
    fi
    }
User.Opts.Clean.Init

User.Opts.Dependencies.Check.Add()
    {
    [[ ${_object_user_opts_dependencies_check_array_[*]} != *"$1"* ]] && _object_user_opts_dependencies_check_array_+=("$1")
    }
User.Opts.Dependencies.Check.Array()
    {
    echo -n "${_object_user_opts_dependencies_check_array_[@]}"
    }
User.Opts.Dependencies.Check.Clear()
    {
    [[ $_object_user_opts_dependencies_check_flag_ != 'true' ]] && return
    _object_user_opts_dependencies_check_flag_=false
    DebugVar _object_user_opts_dependencies_check_flag_
    }
User.Opts.Dependencies.Check.Count()
    {
    echo "${#_object_user_opts_dependencies_check_array_[@]}"
    }
User.Opts.Dependencies.Check.Disable()
    {
    [[ $_object_user_opts_dependencies_check_enable_ != 'true' ]] && return
    _object_user_opts_dependencies_check_enable_=false
    DebugVar _object_user_opts_dependencies_check_enable_
    }
User.Opts.Dependencies.Check.Enable()
    {
    [[ $_object_user_opts_dependencies_check_enable_ = 'true' ]] && return
    _object_user_opts_dependencies_check_enable_=true
    DebugVar _object_user_opts_dependencies_check_enable_
    }
User.Opts.Dependencies.Check.Enumerate()
    {
    ((_object_user_opts_dependencies_check_array_index_++))
    if [[ $_object_user_opts_dependencies_check_array_index_ -gt ${#_object_user_opts_dependencies_check_array_[@]} ]]; then
        _object_user_opts_dependencies_check_array_index_=1
    fi
    }
User.Opts.Dependencies.Check.Exist()
    {
    [[ ${_object_user_opts_dependencies_check_array_[*]} == *"$1"* ]]
    }
User.Opts.Dependencies.Check.First()
    {
    echo "${_object_user_opts_dependencies_check_array_[0]}"
    }
User.Opts.Dependencies.Check.GetCurrent()
    {
    echo -n "${_object_user_opts_dependencies_check_array_[((_object_user_opts_dependencies_check_array_index_-1))]}"
    }
User.Opts.Dependencies.Check.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_dependencies_check_array_[@]} ]] && index=${#_object_user_opts_dependencies_check_array_[@]}
    echo -n "${_object_user_opts_dependencies_check_array_[((index-1))]}"
    }
User.Opts.Dependencies.Check.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_dependencies_check_array_[@]} ]]; then
            _object_user_opts_dependencies_check_array_index_=${#_object_user_opts_dependencies_check_array_[@]}
        else
            _object_user_opts_dependencies_check_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_dependencies_check_array_index_
    fi
    }
User.Opts.Dependencies.Check.Init()
    {
    _object_user_opts_dependencies_check_value_=0
    _object_user_opts_dependencies_check_text_=''
    _object_user_opts_dependencies_check_flag_=false
    _object_user_opts_dependencies_check_enable_=false
    _object_user_opts_dependencies_check_array_+=()
    _object_user_opts_dependencies_check_array_index_=1
    _object_user_opts_dependencies_check_path_=''
    }
User.Opts.Dependencies.Check.IsAny()
    {
    [[ ${#_object_user_opts_dependencies_check_array_[@]} -gt 0 ]]
    }
User.Opts.Dependencies.Check.IsDisabled()
    {
    [[ $_object_user_opts_dependencies_check_enable_ != 'true' ]]
    }
User.Opts.Dependencies.Check.IsEnabled()
    {
    [[ $_object_user_opts_dependencies_check_enable_ = 'true' ]]
    }
User.Opts.Dependencies.Check.IsNone()
    {
    [[ ${#_object_user_opts_dependencies_check_array_[@]} -eq 0 ]]
    }
User.Opts.Dependencies.Check.IsNot()
    {
    [[ $_object_user_opts_dependencies_check_flag_ != 'true' ]]
    }
User.Opts.Dependencies.Check.IsSet()
    {
    [[ $_object_user_opts_dependencies_check_flag_ = 'true' ]]
    }
User.Opts.Dependencies.Check.List()
    {
    echo -n "${_object_user_opts_dependencies_check_array_[*]}"
    }
User.Opts.Dependencies.Check.ListComma()
    {
    echo -n "${_object_user_opts_dependencies_check_array_[*]}" | tr ' ' ','
    }
User.Opts.Dependencies.Check.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_dependencies_check_path_="$2"
    else
        echo -n "$_object_user_opts_dependencies_check_path_"
    fi
    }
User.Opts.Dependencies.Check.Remove()
    {
    [[ ${_object_user_opts_dependencies_check_array_[*]} == *"$1"* ]] && _object_user_opts_dependencies_check_array_=("${_object_user_opts_dependencies_check_array_[@]/$1}")
    }
User.Opts.Dependencies.Check.Set()
    {
    [[ $_object_user_opts_dependencies_check_flag_ = 'true' ]] && return
    _object_user_opts_dependencies_check_flag_=true
    DebugVar _object_user_opts_dependencies_check_flag_
    }
User.Opts.Dependencies.Check.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_dependencies_check_text_="$2"
    else
        echo -n "$_object_user_opts_dependencies_check_text_"
    fi
    }
User.Opts.Dependencies.Check.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_dependencies_check_value_=$2
    else
        echo -n $_object_user_opts_dependencies_check_value_
    fi
    }
User.Opts.Dependencies.Check.Init

User.Opts.IgnoreFreeSpace.Add()
    {
    [[ ${_object_user_opts_ignorefreespace_array_[*]} != *"$1"* ]] && _object_user_opts_ignorefreespace_array_+=("$1")
    }
User.Opts.IgnoreFreeSpace.Array()
    {
    echo -n "${_object_user_opts_ignorefreespace_array_[@]}"
    }
User.Opts.IgnoreFreeSpace.Clear()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ != 'true' ]] && return
    _object_user_opts_ignorefreespace_flag_=false
    DebugVar _object_user_opts_ignorefreespace_flag_
    }
User.Opts.IgnoreFreeSpace.Count()
    {
    echo "${#_object_user_opts_ignorefreespace_array_[@]}"
    }
User.Opts.IgnoreFreeSpace.Disable()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ != 'true' ]] && return
    _object_user_opts_ignorefreespace_enable_=false
    DebugVar _object_user_opts_ignorefreespace_enable_
    }
User.Opts.IgnoreFreeSpace.Enable()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ = 'true' ]] && return
    _object_user_opts_ignorefreespace_enable_=true
    DebugVar _object_user_opts_ignorefreespace_enable_
    }
User.Opts.IgnoreFreeSpace.Enumerate()
    {
    ((_object_user_opts_ignorefreespace_array_index_++))
    if [[ $_object_user_opts_ignorefreespace_array_index_ -gt ${#_object_user_opts_ignorefreespace_array_[@]} ]]; then
        _object_user_opts_ignorefreespace_array_index_=1
    fi
    }
User.Opts.IgnoreFreeSpace.Exist()
    {
    [[ ${_object_user_opts_ignorefreespace_array_[*]} == *"$1"* ]]
    }
User.Opts.IgnoreFreeSpace.First()
    {
    echo "${_object_user_opts_ignorefreespace_array_[0]}"
    }
User.Opts.IgnoreFreeSpace.GetCurrent()
    {
    echo -n "${_object_user_opts_ignorefreespace_array_[((_object_user_opts_ignorefreespace_array_index_-1))]}"
    }
User.Opts.IgnoreFreeSpace.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_ignorefreespace_array_[@]} ]] && index=${#_object_user_opts_ignorefreespace_array_[@]}
    echo -n "${_object_user_opts_ignorefreespace_array_[((index-1))]}"
    }
User.Opts.IgnoreFreeSpace.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_ignorefreespace_array_[@]} ]]; then
            _object_user_opts_ignorefreespace_array_index_=${#_object_user_opts_ignorefreespace_array_[@]}
        else
            _object_user_opts_ignorefreespace_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_ignorefreespace_array_index_
    fi
    }
User.Opts.IgnoreFreeSpace.Init()
    {
    _object_user_opts_ignorefreespace_value_=0
    _object_user_opts_ignorefreespace_text_=''
    _object_user_opts_ignorefreespace_flag_=false
    _object_user_opts_ignorefreespace_enable_=false
    _object_user_opts_ignorefreespace_array_+=()
    _object_user_opts_ignorefreespace_array_index_=1
    _object_user_opts_ignorefreespace_path_=''
    }
User.Opts.IgnoreFreeSpace.IsAny()
    {
    [[ ${#_object_user_opts_ignorefreespace_array_[@]} -gt 0 ]]
    }
User.Opts.IgnoreFreeSpace.IsDisabled()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ != 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsEnabled()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ = 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsNone()
    {
    [[ ${#_object_user_opts_ignorefreespace_array_[@]} -eq 0 ]]
    }
User.Opts.IgnoreFreeSpace.IsNot()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ != 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsSet()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ = 'true' ]]
    }
User.Opts.IgnoreFreeSpace.List()
    {
    echo -n "${_object_user_opts_ignorefreespace_array_[*]}"
    }
User.Opts.IgnoreFreeSpace.ListComma()
    {
    echo -n "${_object_user_opts_ignorefreespace_array_[*]}" | tr ' ' ','
    }
User.Opts.IgnoreFreeSpace.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_ignorefreespace_path_="$2"
    else
        echo -n "$_object_user_opts_ignorefreespace_path_"
    fi
    }
User.Opts.IgnoreFreeSpace.Remove()
    {
    [[ ${_object_user_opts_ignorefreespace_array_[*]} == *"$1"* ]] && _object_user_opts_ignorefreespace_array_=("${_object_user_opts_ignorefreespace_array_[@]/$1}")
    }
User.Opts.IgnoreFreeSpace.Set()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ = 'true' ]] && return
    _object_user_opts_ignorefreespace_flag_=true
    DebugVar _object_user_opts_ignorefreespace_flag_
    }
User.Opts.IgnoreFreeSpace.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_ignorefreespace_text_="$2"
    else
        echo -n "$_object_user_opts_ignorefreespace_text_"
    fi
    }
User.Opts.IgnoreFreeSpace.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_ignorefreespace_value_=$2
    else
        echo -n $_object_user_opts_ignorefreespace_value_
    fi
    }
User.Opts.IgnoreFreeSpace.Init

User.Opts.Versions.View.Add()
    {
    [[ ${_object_user_opts_versions_view_array_[*]} != *"$1"* ]] && _object_user_opts_versions_view_array_+=("$1")
    }
User.Opts.Versions.View.Array()
    {
    echo -n "${_object_user_opts_versions_view_array_[@]}"
    }
User.Opts.Versions.View.Clear()
    {
    [[ $_object_user_opts_versions_view_flag_ != 'true' ]] && return
    _object_user_opts_versions_view_flag_=false
    DebugVar _object_user_opts_versions_view_flag_
    }
User.Opts.Versions.View.Count()
    {
    echo "${#_object_user_opts_versions_view_array_[@]}"
    }
User.Opts.Versions.View.Disable()
    {
    [[ $_object_user_opts_versions_view_enable_ != 'true' ]] && return
    _object_user_opts_versions_view_enable_=false
    DebugVar _object_user_opts_versions_view_enable_
    }
User.Opts.Versions.View.Enable()
    {
    [[ $_object_user_opts_versions_view_enable_ = 'true' ]] && return
    _object_user_opts_versions_view_enable_=true
    DebugVar _object_user_opts_versions_view_enable_
    }
User.Opts.Versions.View.Enumerate()
    {
    ((_object_user_opts_versions_view_array_index_++))
    if [[ $_object_user_opts_versions_view_array_index_ -gt ${#_object_user_opts_versions_view_array_[@]} ]]; then
        _object_user_opts_versions_view_array_index_=1
    fi
    }
User.Opts.Versions.View.Exist()
    {
    [[ ${_object_user_opts_versions_view_array_[*]} == *"$1"* ]]
    }
User.Opts.Versions.View.First()
    {
    echo "${_object_user_opts_versions_view_array_[0]}"
    }
User.Opts.Versions.View.GetCurrent()
    {
    echo -n "${_object_user_opts_versions_view_array_[((_object_user_opts_versions_view_array_index_-1))]}"
    }
User.Opts.Versions.View.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_versions_view_array_[@]} ]] && index=${#_object_user_opts_versions_view_array_[@]}
    echo -n "${_object_user_opts_versions_view_array_[((index-1))]}"
    }
User.Opts.Versions.View.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_versions_view_array_[@]} ]]; then
            _object_user_opts_versions_view_array_index_=${#_object_user_opts_versions_view_array_[@]}
        else
            _object_user_opts_versions_view_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_versions_view_array_index_
    fi
    }
User.Opts.Versions.View.Init()
    {
    _object_user_opts_versions_view_value_=0
    _object_user_opts_versions_view_text_=''
    _object_user_opts_versions_view_flag_=false
    _object_user_opts_versions_view_enable_=false
    _object_user_opts_versions_view_array_+=()
    _object_user_opts_versions_view_array_index_=1
    _object_user_opts_versions_view_path_=''
    }
User.Opts.Versions.View.IsAny()
    {
    [[ ${#_object_user_opts_versions_view_array_[@]} -gt 0 ]]
    }
User.Opts.Versions.View.IsDisabled()
    {
    [[ $_object_user_opts_versions_view_enable_ != 'true' ]]
    }
User.Opts.Versions.View.IsEnabled()
    {
    [[ $_object_user_opts_versions_view_enable_ = 'true' ]]
    }
User.Opts.Versions.View.IsNone()
    {
    [[ ${#_object_user_opts_versions_view_array_[@]} -eq 0 ]]
    }
User.Opts.Versions.View.IsNot()
    {
    [[ $_object_user_opts_versions_view_flag_ != 'true' ]]
    }
User.Opts.Versions.View.IsSet()
    {
    [[ $_object_user_opts_versions_view_flag_ = 'true' ]]
    }
User.Opts.Versions.View.List()
    {
    echo -n "${_object_user_opts_versions_view_array_[*]}"
    }
User.Opts.Versions.View.ListComma()
    {
    echo -n "${_object_user_opts_versions_view_array_[*]}" | tr ' ' ','
    }
User.Opts.Versions.View.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_versions_view_path_="$2"
    else
        echo -n "$_object_user_opts_versions_view_path_"
    fi
    }
User.Opts.Versions.View.Remove()
    {
    [[ ${_object_user_opts_versions_view_array_[*]} == *"$1"* ]] && _object_user_opts_versions_view_array_=("${_object_user_opts_versions_view_array_[@]/$1}")
    }
User.Opts.Versions.View.Set()
    {
    [[ $_object_user_opts_versions_view_flag_ = 'true' ]] && return
    _object_user_opts_versions_view_flag_=true
    DebugVar _object_user_opts_versions_view_flag_
    }
User.Opts.Versions.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_versions_view_text_="$2"
    else
        echo -n "$_object_user_opts_versions_view_text_"
    fi
    }
User.Opts.Versions.View.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_versions_view_value_=$2
    else
        echo -n $_object_user_opts_versions_view_value_
    fi
    }
User.Opts.Versions.View.Init

User.Opts.Log.Last.Paste.Add()
    {
    [[ ${_object_user_opts_log_last_paste_array_[*]} != *"$1"* ]] && _object_user_opts_log_last_paste_array_+=("$1")
    }
User.Opts.Log.Last.Paste.Array()
    {
    echo -n "${_object_user_opts_log_last_paste_array_[@]}"
    }
User.Opts.Log.Last.Paste.Clear()
    {
    [[ $_object_user_opts_log_last_paste_flag_ != 'true' ]] && return
    _object_user_opts_log_last_paste_flag_=false
    DebugVar _object_user_opts_log_last_paste_flag_
    }
User.Opts.Log.Last.Paste.Count()
    {
    echo "${#_object_user_opts_log_last_paste_array_[@]}"
    }
User.Opts.Log.Last.Paste.Disable()
    {
    [[ $_object_user_opts_log_last_paste_enable_ != 'true' ]] && return
    _object_user_opts_log_last_paste_enable_=false
    DebugVar _object_user_opts_log_last_paste_enable_
    }
User.Opts.Log.Last.Paste.Enable()
    {
    [[ $_object_user_opts_log_last_paste_enable_ = 'true' ]] && return
    _object_user_opts_log_last_paste_enable_=true
    DebugVar _object_user_opts_log_last_paste_enable_
    }
User.Opts.Log.Last.Paste.Enumerate()
    {
    ((_object_user_opts_log_last_paste_array_index_++))
    if [[ $_object_user_opts_log_last_paste_array_index_ -gt ${#_object_user_opts_log_last_paste_array_[@]} ]]; then
        _object_user_opts_log_last_paste_array_index_=1
    fi
    }
User.Opts.Log.Last.Paste.Exist()
    {
    [[ ${_object_user_opts_log_last_paste_array_[*]} == *"$1"* ]]
    }
User.Opts.Log.Last.Paste.First()
    {
    echo "${_object_user_opts_log_last_paste_array_[0]}"
    }
User.Opts.Log.Last.Paste.GetCurrent()
    {
    echo -n "${_object_user_opts_log_last_paste_array_[((_object_user_opts_log_last_paste_array_index_-1))]}"
    }
User.Opts.Log.Last.Paste.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_log_last_paste_array_[@]} ]] && index=${#_object_user_opts_log_last_paste_array_[@]}
    echo -n "${_object_user_opts_log_last_paste_array_[((index-1))]}"
    }
User.Opts.Log.Last.Paste.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_log_last_paste_array_[@]} ]]; then
            _object_user_opts_log_last_paste_array_index_=${#_object_user_opts_log_last_paste_array_[@]}
        else
            _object_user_opts_log_last_paste_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_log_last_paste_array_index_
    fi
    }
User.Opts.Log.Last.Paste.Init()
    {
    _object_user_opts_log_last_paste_value_=0
    _object_user_opts_log_last_paste_text_=''
    _object_user_opts_log_last_paste_flag_=false
    _object_user_opts_log_last_paste_enable_=false
    _object_user_opts_log_last_paste_array_+=()
    _object_user_opts_log_last_paste_array_index_=1
    _object_user_opts_log_last_paste_path_=''
    }
User.Opts.Log.Last.Paste.IsAny()
    {
    [[ ${#_object_user_opts_log_last_paste_array_[@]} -gt 0 ]]
    }
User.Opts.Log.Last.Paste.IsDisabled()
    {
    [[ $_object_user_opts_log_last_paste_enable_ != 'true' ]]
    }
User.Opts.Log.Last.Paste.IsEnabled()
    {
    [[ $_object_user_opts_log_last_paste_enable_ = 'true' ]]
    }
User.Opts.Log.Last.Paste.IsNone()
    {
    [[ ${#_object_user_opts_log_last_paste_array_[@]} -eq 0 ]]
    }
User.Opts.Log.Last.Paste.IsNot()
    {
    [[ $_object_user_opts_log_last_paste_flag_ != 'true' ]]
    }
User.Opts.Log.Last.Paste.IsSet()
    {
    [[ $_object_user_opts_log_last_paste_flag_ = 'true' ]]
    }
User.Opts.Log.Last.Paste.List()
    {
    echo -n "${_object_user_opts_log_last_paste_array_[*]}"
    }
User.Opts.Log.Last.Paste.ListComma()
    {
    echo -n "${_object_user_opts_log_last_paste_array_[*]}" | tr ' ' ','
    }
User.Opts.Log.Last.Paste.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_paste_path_="$2"
    else
        echo -n "$_object_user_opts_log_last_paste_path_"
    fi
    }
User.Opts.Log.Last.Paste.Remove()
    {
    [[ ${_object_user_opts_log_last_paste_array_[*]} == *"$1"* ]] && _object_user_opts_log_last_paste_array_=("${_object_user_opts_log_last_paste_array_[@]/$1}")
    }
User.Opts.Log.Last.Paste.Set()
    {
    [[ $_object_user_opts_log_last_paste_flag_ = 'true' ]] && return
    _object_user_opts_log_last_paste_flag_=true
    DebugVar _object_user_opts_log_last_paste_flag_
    }
User.Opts.Log.Last.Paste.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_paste_text_="$2"
    else
        echo -n "$_object_user_opts_log_last_paste_text_"
    fi
    }
User.Opts.Log.Last.Paste.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_paste_value_=$2
    else
        echo -n $_object_user_opts_log_last_paste_value_
    fi
    }
User.Opts.Log.Last.Paste.Init

User.Opts.Log.Last.View.Add()
    {
    [[ ${_object_user_opts_log_last_view_array_[*]} != *"$1"* ]] && _object_user_opts_log_last_view_array_+=("$1")
    }
User.Opts.Log.Last.View.Array()
    {
    echo -n "${_object_user_opts_log_last_view_array_[@]}"
    }
User.Opts.Log.Last.View.Clear()
    {
    [[ $_object_user_opts_log_last_view_flag_ != 'true' ]] && return
    _object_user_opts_log_last_view_flag_=false
    DebugVar _object_user_opts_log_last_view_flag_
    }
User.Opts.Log.Last.View.Count()
    {
    echo "${#_object_user_opts_log_last_view_array_[@]}"
    }
User.Opts.Log.Last.View.Disable()
    {
    [[ $_object_user_opts_log_last_view_enable_ != 'true' ]] && return
    _object_user_opts_log_last_view_enable_=false
    DebugVar _object_user_opts_log_last_view_enable_
    }
User.Opts.Log.Last.View.Enable()
    {
    [[ $_object_user_opts_log_last_view_enable_ = 'true' ]] && return
    _object_user_opts_log_last_view_enable_=true
    DebugVar _object_user_opts_log_last_view_enable_
    }
User.Opts.Log.Last.View.Enumerate()
    {
    ((_object_user_opts_log_last_view_array_index_++))
    if [[ $_object_user_opts_log_last_view_array_index_ -gt ${#_object_user_opts_log_last_view_array_[@]} ]]; then
        _object_user_opts_log_last_view_array_index_=1
    fi
    }
User.Opts.Log.Last.View.Exist()
    {
    [[ ${_object_user_opts_log_last_view_array_[*]} == *"$1"* ]]
    }
User.Opts.Log.Last.View.First()
    {
    echo "${_object_user_opts_log_last_view_array_[0]}"
    }
User.Opts.Log.Last.View.GetCurrent()
    {
    echo -n "${_object_user_opts_log_last_view_array_[((_object_user_opts_log_last_view_array_index_-1))]}"
    }
User.Opts.Log.Last.View.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_log_last_view_array_[@]} ]] && index=${#_object_user_opts_log_last_view_array_[@]}
    echo -n "${_object_user_opts_log_last_view_array_[((index-1))]}"
    }
User.Opts.Log.Last.View.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_log_last_view_array_[@]} ]]; then
            _object_user_opts_log_last_view_array_index_=${#_object_user_opts_log_last_view_array_[@]}
        else
            _object_user_opts_log_last_view_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_log_last_view_array_index_
    fi
    }
User.Opts.Log.Last.View.Init()
    {
    _object_user_opts_log_last_view_value_=0
    _object_user_opts_log_last_view_text_=''
    _object_user_opts_log_last_view_flag_=false
    _object_user_opts_log_last_view_enable_=false
    _object_user_opts_log_last_view_array_+=()
    _object_user_opts_log_last_view_array_index_=1
    _object_user_opts_log_last_view_path_=''
    }
User.Opts.Log.Last.View.IsAny()
    {
    [[ ${#_object_user_opts_log_last_view_array_[@]} -gt 0 ]]
    }
User.Opts.Log.Last.View.IsDisabled()
    {
    [[ $_object_user_opts_log_last_view_enable_ != 'true' ]]
    }
User.Opts.Log.Last.View.IsEnabled()
    {
    [[ $_object_user_opts_log_last_view_enable_ = 'true' ]]
    }
User.Opts.Log.Last.View.IsNone()
    {
    [[ ${#_object_user_opts_log_last_view_array_[@]} -eq 0 ]]
    }
User.Opts.Log.Last.View.IsNot()
    {
    [[ $_object_user_opts_log_last_view_flag_ != 'true' ]]
    }
User.Opts.Log.Last.View.IsSet()
    {
    [[ $_object_user_opts_log_last_view_flag_ = 'true' ]]
    }
User.Opts.Log.Last.View.List()
    {
    echo -n "${_object_user_opts_log_last_view_array_[*]}"
    }
User.Opts.Log.Last.View.ListComma()
    {
    echo -n "${_object_user_opts_log_last_view_array_[*]}" | tr ' ' ','
    }
User.Opts.Log.Last.View.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_view_path_="$2"
    else
        echo -n "$_object_user_opts_log_last_view_path_"
    fi
    }
User.Opts.Log.Last.View.Remove()
    {
    [[ ${_object_user_opts_log_last_view_array_[*]} == *"$1"* ]] && _object_user_opts_log_last_view_array_=("${_object_user_opts_log_last_view_array_[@]/$1}")
    }
User.Opts.Log.Last.View.Set()
    {
    [[ $_object_user_opts_log_last_view_flag_ = 'true' ]] && return
    _object_user_opts_log_last_view_flag_=true
    DebugVar _object_user_opts_log_last_view_flag_
    }
User.Opts.Log.Last.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_view_text_="$2"
    else
        echo -n "$_object_user_opts_log_last_view_text_"
    fi
    }
User.Opts.Log.Last.View.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_view_value_=$2
    else
        echo -n $_object_user_opts_log_last_view_value_
    fi
    }
User.Opts.Log.Last.View.Init

User.Opts.Log.Tail.Paste.Add()
    {
    [[ ${_object_user_opts_log_tail_paste_array_[*]} != *"$1"* ]] && _object_user_opts_log_tail_paste_array_+=("$1")
    }
User.Opts.Log.Tail.Paste.Array()
    {
    echo -n "${_object_user_opts_log_tail_paste_array_[@]}"
    }
User.Opts.Log.Tail.Paste.Clear()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ != 'true' ]] && return
    _object_user_opts_log_tail_paste_flag_=false
    DebugVar _object_user_opts_log_tail_paste_flag_
    }
User.Opts.Log.Tail.Paste.Count()
    {
    echo "${#_object_user_opts_log_tail_paste_array_[@]}"
    }
User.Opts.Log.Tail.Paste.Disable()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ != 'true' ]] && return
    _object_user_opts_log_tail_paste_enable_=false
    DebugVar _object_user_opts_log_tail_paste_enable_
    }
User.Opts.Log.Tail.Paste.Enable()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ = 'true' ]] && return
    _object_user_opts_log_tail_paste_enable_=true
    DebugVar _object_user_opts_log_tail_paste_enable_
    }
User.Opts.Log.Tail.Paste.Enumerate()
    {
    ((_object_user_opts_log_tail_paste_array_index_++))
    if [[ $_object_user_opts_log_tail_paste_array_index_ -gt ${#_object_user_opts_log_tail_paste_array_[@]} ]]; then
        _object_user_opts_log_tail_paste_array_index_=1
    fi
    }
User.Opts.Log.Tail.Paste.Exist()
    {
    [[ ${_object_user_opts_log_tail_paste_array_[*]} == *"$1"* ]]
    }
User.Opts.Log.Tail.Paste.First()
    {
    echo "${_object_user_opts_log_tail_paste_array_[0]}"
    }
User.Opts.Log.Tail.Paste.GetCurrent()
    {
    echo -n "${_object_user_opts_log_tail_paste_array_[((_object_user_opts_log_tail_paste_array_index_-1))]}"
    }
User.Opts.Log.Tail.Paste.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_log_tail_paste_array_[@]} ]] && index=${#_object_user_opts_log_tail_paste_array_[@]}
    echo -n "${_object_user_opts_log_tail_paste_array_[((index-1))]}"
    }
User.Opts.Log.Tail.Paste.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_log_tail_paste_array_[@]} ]]; then
            _object_user_opts_log_tail_paste_array_index_=${#_object_user_opts_log_tail_paste_array_[@]}
        else
            _object_user_opts_log_tail_paste_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_log_tail_paste_array_index_
    fi
    }
User.Opts.Log.Tail.Paste.Init()
    {
    _object_user_opts_log_tail_paste_value_=0
    _object_user_opts_log_tail_paste_text_=''
    _object_user_opts_log_tail_paste_flag_=false
    _object_user_opts_log_tail_paste_enable_=false
    _object_user_opts_log_tail_paste_array_+=()
    _object_user_opts_log_tail_paste_array_index_=1
    _object_user_opts_log_tail_paste_path_=''
    }
User.Opts.Log.Tail.Paste.IsAny()
    {
    [[ ${#_object_user_opts_log_tail_paste_array_[@]} -gt 0 ]]
    }
User.Opts.Log.Tail.Paste.IsDisabled()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ != 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsEnabled()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ = 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsNone()
    {
    [[ ${#_object_user_opts_log_tail_paste_array_[@]} -eq 0 ]]
    }
User.Opts.Log.Tail.Paste.IsNot()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ != 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsSet()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ = 'true' ]]
    }
User.Opts.Log.Tail.Paste.List()
    {
    echo -n "${_object_user_opts_log_tail_paste_array_[*]}"
    }
User.Opts.Log.Tail.Paste.ListComma()
    {
    echo -n "${_object_user_opts_log_tail_paste_array_[*]}" | tr ' ' ','
    }
User.Opts.Log.Tail.Paste.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_tail_paste_path_="$2"
    else
        echo -n "$_object_user_opts_log_tail_paste_path_"
    fi
    }
User.Opts.Log.Tail.Paste.Remove()
    {
    [[ ${_object_user_opts_log_tail_paste_array_[*]} == *"$1"* ]] && _object_user_opts_log_tail_paste_array_=("${_object_user_opts_log_tail_paste_array_[@]/$1}")
    }
User.Opts.Log.Tail.Paste.Set()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ = 'true' ]] && return
    _object_user_opts_log_tail_paste_flag_=true
    DebugVar _object_user_opts_log_tail_paste_flag_
    }
User.Opts.Log.Tail.Paste.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_tail_paste_text_="$2"
    else
        echo -n "$_object_user_opts_log_tail_paste_text_"
    fi
    }
User.Opts.Log.Tail.Paste.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_tail_paste_value_=$2
    else
        echo -n $_object_user_opts_log_tail_paste_value_
    fi
    }
User.Opts.Log.Tail.Paste.Init

User.Opts.Log.Whole.View.Add()
    {
    [[ ${_object_user_opts_log_whole_view_array_[*]} != *"$1"* ]] && _object_user_opts_log_whole_view_array_+=("$1")
    }
User.Opts.Log.Whole.View.Array()
    {
    echo -n "${_object_user_opts_log_whole_view_array_[@]}"
    }
User.Opts.Log.Whole.View.Clear()
    {
    [[ $_object_user_opts_log_whole_view_flag_ != 'true' ]] && return
    _object_user_opts_log_whole_view_flag_=false
    DebugVar _object_user_opts_log_whole_view_flag_
    }
User.Opts.Log.Whole.View.Count()
    {
    echo "${#_object_user_opts_log_whole_view_array_[@]}"
    }
User.Opts.Log.Whole.View.Disable()
    {
    [[ $_object_user_opts_log_whole_view_enable_ != 'true' ]] && return
    _object_user_opts_log_whole_view_enable_=false
    DebugVar _object_user_opts_log_whole_view_enable_
    }
User.Opts.Log.Whole.View.Enable()
    {
    [[ $_object_user_opts_log_whole_view_enable_ = 'true' ]] && return
    _object_user_opts_log_whole_view_enable_=true
    DebugVar _object_user_opts_log_whole_view_enable_
    }
User.Opts.Log.Whole.View.Enumerate()
    {
    ((_object_user_opts_log_whole_view_array_index_++))
    if [[ $_object_user_opts_log_whole_view_array_index_ -gt ${#_object_user_opts_log_whole_view_array_[@]} ]]; then
        _object_user_opts_log_whole_view_array_index_=1
    fi
    }
User.Opts.Log.Whole.View.Exist()
    {
    [[ ${_object_user_opts_log_whole_view_array_[*]} == *"$1"* ]]
    }
User.Opts.Log.Whole.View.First()
    {
    echo "${_object_user_opts_log_whole_view_array_[0]}"
    }
User.Opts.Log.Whole.View.GetCurrent()
    {
    echo -n "${_object_user_opts_log_whole_view_array_[((_object_user_opts_log_whole_view_array_index_-1))]}"
    }
User.Opts.Log.Whole.View.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_log_whole_view_array_[@]} ]] && index=${#_object_user_opts_log_whole_view_array_[@]}
    echo -n "${_object_user_opts_log_whole_view_array_[((index-1))]}"
    }
User.Opts.Log.Whole.View.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_log_whole_view_array_[@]} ]]; then
            _object_user_opts_log_whole_view_array_index_=${#_object_user_opts_log_whole_view_array_[@]}
        else
            _object_user_opts_log_whole_view_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_log_whole_view_array_index_
    fi
    }
User.Opts.Log.Whole.View.Init()
    {
    _object_user_opts_log_whole_view_value_=0
    _object_user_opts_log_whole_view_text_=''
    _object_user_opts_log_whole_view_flag_=false
    _object_user_opts_log_whole_view_enable_=false
    _object_user_opts_log_whole_view_array_+=()
    _object_user_opts_log_whole_view_array_index_=1
    _object_user_opts_log_whole_view_path_=''
    }
User.Opts.Log.Whole.View.IsAny()
    {
    [[ ${#_object_user_opts_log_whole_view_array_[@]} -gt 0 ]]
    }
User.Opts.Log.Whole.View.IsDisabled()
    {
    [[ $_object_user_opts_log_whole_view_enable_ != 'true' ]]
    }
User.Opts.Log.Whole.View.IsEnabled()
    {
    [[ $_object_user_opts_log_whole_view_enable_ = 'true' ]]
    }
User.Opts.Log.Whole.View.IsNone()
    {
    [[ ${#_object_user_opts_log_whole_view_array_[@]} -eq 0 ]]
    }
User.Opts.Log.Whole.View.IsNot()
    {
    [[ $_object_user_opts_log_whole_view_flag_ != 'true' ]]
    }
User.Opts.Log.Whole.View.IsSet()
    {
    [[ $_object_user_opts_log_whole_view_flag_ = 'true' ]]
    }
User.Opts.Log.Whole.View.List()
    {
    echo -n "${_object_user_opts_log_whole_view_array_[*]}"
    }
User.Opts.Log.Whole.View.ListComma()
    {
    echo -n "${_object_user_opts_log_whole_view_array_[*]}" | tr ' ' ','
    }
User.Opts.Log.Whole.View.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_whole_view_path_="$2"
    else
        echo -n "$_object_user_opts_log_whole_view_path_"
    fi
    }
User.Opts.Log.Whole.View.Remove()
    {
    [[ ${_object_user_opts_log_whole_view_array_[*]} == *"$1"* ]] && _object_user_opts_log_whole_view_array_=("${_object_user_opts_log_whole_view_array_[@]/$1}")
    }
User.Opts.Log.Whole.View.Set()
    {
    [[ $_object_user_opts_log_whole_view_flag_ = 'true' ]] && return
    _object_user_opts_log_whole_view_flag_=true
    DebugVar _object_user_opts_log_whole_view_flag_
    }
User.Opts.Log.Whole.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_whole_view_text_="$2"
    else
        echo -n "$_object_user_opts_log_whole_view_text_"
    fi
    }
User.Opts.Log.Whole.View.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_whole_view_value_=$2
    else
        echo -n $_object_user_opts_log_whole_view_value_
    fi
    }
User.Opts.Log.Whole.View.Init

User.Opts.Apps.All.Backup.Add()
    {
    [[ ${_object_user_opts_apps_all_backup_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_backup_array_+=("$1")
    }
User.Opts.Apps.All.Backup.Array()
    {
    echo -n "${_object_user_opts_apps_all_backup_array_[@]}"
    }
User.Opts.Apps.All.Backup.Clear()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_backup_flag_=false
    DebugVar _object_user_opts_apps_all_backup_flag_
    }
User.Opts.Apps.All.Backup.Count()
    {
    echo "${#_object_user_opts_apps_all_backup_array_[@]}"
    }
User.Opts.Apps.All.Backup.Disable()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_backup_enable_=false
    DebugVar _object_user_opts_apps_all_backup_enable_
    }
User.Opts.Apps.All.Backup.Enable()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_backup_enable_=true
    DebugVar _object_user_opts_apps_all_backup_enable_
    }
User.Opts.Apps.All.Backup.Enumerate()
    {
    ((_object_user_opts_apps_all_backup_array_index_++))
    if [[ $_object_user_opts_apps_all_backup_array_index_ -gt ${#_object_user_opts_apps_all_backup_array_[@]} ]]; then
        _object_user_opts_apps_all_backup_array_index_=1
    fi
    }
User.Opts.Apps.All.Backup.Exist()
    {
    [[ ${_object_user_opts_apps_all_backup_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Backup.First()
    {
    echo "${_object_user_opts_apps_all_backup_array_[0]}"
    }
User.Opts.Apps.All.Backup.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_backup_array_[((_object_user_opts_apps_all_backup_array_index_-1))]}"
    }
User.Opts.Apps.All.Backup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_backup_array_[@]} ]] && index=${#_object_user_opts_apps_all_backup_array_[@]}
    echo -n "${_object_user_opts_apps_all_backup_array_[((index-1))]}"
    }
User.Opts.Apps.All.Backup.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_backup_array_[@]} ]]; then
            _object_user_opts_apps_all_backup_array_index_=${#_object_user_opts_apps_all_backup_array_[@]}
        else
            _object_user_opts_apps_all_backup_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_backup_array_index_
    fi
    }
User.Opts.Apps.All.Backup.Init()
    {
    _object_user_opts_apps_all_backup_value_=0
    _object_user_opts_apps_all_backup_text_=''
    _object_user_opts_apps_all_backup_flag_=false
    _object_user_opts_apps_all_backup_enable_=false
    _object_user_opts_apps_all_backup_array_+=()
    _object_user_opts_apps_all_backup_array_index_=1
    _object_user_opts_apps_all_backup_path_=''
    }
User.Opts.Apps.All.Backup.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_backup_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Backup.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Backup.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Backup.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_backup_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Backup.IsNot()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Backup.IsSet()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Backup.List()
    {
    echo -n "${_object_user_opts_apps_all_backup_array_[*]}"
    }
User.Opts.Apps.All.Backup.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_backup_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Backup.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_backup_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_backup_path_"
    fi
    }
User.Opts.Apps.All.Backup.Remove()
    {
    [[ ${_object_user_opts_apps_all_backup_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_backup_array_=("${_object_user_opts_apps_all_backup_array_[@]/$1}")
    }
User.Opts.Apps.All.Backup.Set()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_backup_flag_=true
    DebugVar _object_user_opts_apps_all_backup_flag_
    }
User.Opts.Apps.All.Backup.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_backup_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_backup_text_"
    fi
    }
User.Opts.Apps.All.Backup.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_backup_value_=$2
    else
        echo -n $_object_user_opts_apps_all_backup_value_
    fi
    }
User.Opts.Apps.All.Backup.Init

User.Opts.Apps.All.Install.Add()
    {
    [[ ${_object_user_opts_apps_all_install_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_install_array_+=("$1")
    }
User.Opts.Apps.All.Install.Array()
    {
    echo -n "${_object_user_opts_apps_all_install_array_[@]}"
    }
User.Opts.Apps.All.Install.Clear()
    {
    [[ $_object_user_opts_apps_all_install_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_install_flag_=false
    DebugVar _object_user_opts_apps_all_install_flag_
    }
User.Opts.Apps.All.Install.Count()
    {
    echo "${#_object_user_opts_apps_all_install_array_[@]}"
    }
User.Opts.Apps.All.Install.Disable()
    {
    [[ $_object_user_opts_apps_all_install_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_install_enable_=false
    DebugVar _object_user_opts_apps_all_install_enable_
    }
User.Opts.Apps.All.Install.Enable()
    {
    [[ $_object_user_opts_apps_all_install_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_install_enable_=true
    DebugVar _object_user_opts_apps_all_install_enable_
    }
User.Opts.Apps.All.Install.Enumerate()
    {
    ((_object_user_opts_apps_all_install_array_index_++))
    if [[ $_object_user_opts_apps_all_install_array_index_ -gt ${#_object_user_opts_apps_all_install_array_[@]} ]]; then
        _object_user_opts_apps_all_install_array_index_=1
    fi
    }
User.Opts.Apps.All.Install.Exist()
    {
    [[ ${_object_user_opts_apps_all_install_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Install.First()
    {
    echo "${_object_user_opts_apps_all_install_array_[0]}"
    }
User.Opts.Apps.All.Install.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_install_array_[((_object_user_opts_apps_all_install_array_index_-1))]}"
    }
User.Opts.Apps.All.Install.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_install_array_[@]} ]] && index=${#_object_user_opts_apps_all_install_array_[@]}
    echo -n "${_object_user_opts_apps_all_install_array_[((index-1))]}"
    }
User.Opts.Apps.All.Install.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_install_array_[@]} ]]; then
            _object_user_opts_apps_all_install_array_index_=${#_object_user_opts_apps_all_install_array_[@]}
        else
            _object_user_opts_apps_all_install_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_install_array_index_
    fi
    }
User.Opts.Apps.All.Install.Init()
    {
    _object_user_opts_apps_all_install_value_=0
    _object_user_opts_apps_all_install_text_=''
    _object_user_opts_apps_all_install_flag_=false
    _object_user_opts_apps_all_install_enable_=false
    _object_user_opts_apps_all_install_array_+=()
    _object_user_opts_apps_all_install_array_index_=1
    _object_user_opts_apps_all_install_path_=''
    }
User.Opts.Apps.All.Install.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_install_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Install.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_install_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Install.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_install_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Install.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_install_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Install.IsNot()
    {
    [[ $_object_user_opts_apps_all_install_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Install.IsSet()
    {
    [[ $_object_user_opts_apps_all_install_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Install.List()
    {
    echo -n "${_object_user_opts_apps_all_install_array_[*]}"
    }
User.Opts.Apps.All.Install.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_install_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Install.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_install_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_install_path_"
    fi
    }
User.Opts.Apps.All.Install.Remove()
    {
    [[ ${_object_user_opts_apps_all_install_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_install_array_=("${_object_user_opts_apps_all_install_array_[@]/$1}")
    }
User.Opts.Apps.All.Install.Set()
    {
    [[ $_object_user_opts_apps_all_install_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_install_flag_=true
    DebugVar _object_user_opts_apps_all_install_flag_
    }
User.Opts.Apps.All.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_install_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_install_text_"
    fi
    }
User.Opts.Apps.All.Install.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_install_value_=$2
    else
        echo -n $_object_user_opts_apps_all_install_value_
    fi
    }
User.Opts.Apps.All.Install.Init

User.Opts.Apps.All.Reinstall.Add()
    {
    [[ ${_object_user_opts_apps_all_reinstall_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_reinstall_array_+=("$1")
    }
User.Opts.Apps.All.Reinstall.Array()
    {
    echo -n "${_object_user_opts_apps_all_reinstall_array_[@]}"
    }
User.Opts.Apps.All.Reinstall.Clear()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_reinstall_flag_=false
    DebugVar _object_user_opts_apps_all_reinstall_flag_
    }
User.Opts.Apps.All.Reinstall.Count()
    {
    echo "${#_object_user_opts_apps_all_reinstall_array_[@]}"
    }
User.Opts.Apps.All.Reinstall.Disable()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_reinstall_enable_=false
    DebugVar _object_user_opts_apps_all_reinstall_enable_
    }
User.Opts.Apps.All.Reinstall.Enable()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_reinstall_enable_=true
    DebugVar _object_user_opts_apps_all_reinstall_enable_
    }
User.Opts.Apps.All.Reinstall.Enumerate()
    {
    ((_object_user_opts_apps_all_reinstall_array_index_++))
    if [[ $_object_user_opts_apps_all_reinstall_array_index_ -gt ${#_object_user_opts_apps_all_reinstall_array_[@]} ]]; then
        _object_user_opts_apps_all_reinstall_array_index_=1
    fi
    }
User.Opts.Apps.All.Reinstall.Exist()
    {
    [[ ${_object_user_opts_apps_all_reinstall_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Reinstall.First()
    {
    echo "${_object_user_opts_apps_all_reinstall_array_[0]}"
    }
User.Opts.Apps.All.Reinstall.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_reinstall_array_[((_object_user_opts_apps_all_reinstall_array_index_-1))]}"
    }
User.Opts.Apps.All.Reinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_reinstall_array_[@]} ]] && index=${#_object_user_opts_apps_all_reinstall_array_[@]}
    echo -n "${_object_user_opts_apps_all_reinstall_array_[((index-1))]}"
    }
User.Opts.Apps.All.Reinstall.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_reinstall_array_[@]} ]]; then
            _object_user_opts_apps_all_reinstall_array_index_=${#_object_user_opts_apps_all_reinstall_array_[@]}
        else
            _object_user_opts_apps_all_reinstall_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_reinstall_array_index_
    fi
    }
User.Opts.Apps.All.Reinstall.Init()
    {
    _object_user_opts_apps_all_reinstall_value_=0
    _object_user_opts_apps_all_reinstall_text_=''
    _object_user_opts_apps_all_reinstall_flag_=false
    _object_user_opts_apps_all_reinstall_enable_=false
    _object_user_opts_apps_all_reinstall_array_+=()
    _object_user_opts_apps_all_reinstall_array_index_=1
    _object_user_opts_apps_all_reinstall_path_=''
    }
User.Opts.Apps.All.Reinstall.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_reinstall_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Reinstall.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_reinstall_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Reinstall.IsNot()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsSet()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Reinstall.List()
    {
    echo -n "${_object_user_opts_apps_all_reinstall_array_[*]}"
    }
User.Opts.Apps.All.Reinstall.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_reinstall_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Reinstall.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_reinstall_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_reinstall_path_"
    fi
    }
User.Opts.Apps.All.Reinstall.Remove()
    {
    [[ ${_object_user_opts_apps_all_reinstall_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_reinstall_array_=("${_object_user_opts_apps_all_reinstall_array_[@]/$1}")
    }
User.Opts.Apps.All.Reinstall.Set()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_reinstall_flag_=true
    DebugVar _object_user_opts_apps_all_reinstall_flag_
    }
User.Opts.Apps.All.Reinstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_reinstall_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_reinstall_text_"
    fi
    }
User.Opts.Apps.All.Reinstall.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_reinstall_value_=$2
    else
        echo -n $_object_user_opts_apps_all_reinstall_value_
    fi
    }
User.Opts.Apps.All.Reinstall.Init

User.Opts.Apps.All.Restart.Add()
    {
    [[ ${_object_user_opts_apps_all_restart_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_restart_array_+=("$1")
    }
User.Opts.Apps.All.Restart.Array()
    {
    echo -n "${_object_user_opts_apps_all_restart_array_[@]}"
    }
User.Opts.Apps.All.Restart.Clear()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restart_flag_=false
    DebugVar _object_user_opts_apps_all_restart_flag_
    }
User.Opts.Apps.All.Restart.Count()
    {
    echo "${#_object_user_opts_apps_all_restart_array_[@]}"
    }
User.Opts.Apps.All.Restart.Disable()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_restart_enable_=false
    DebugVar _object_user_opts_apps_all_restart_enable_
    }
User.Opts.Apps.All.Restart.Enable()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_restart_enable_=true
    DebugVar _object_user_opts_apps_all_restart_enable_
    }
User.Opts.Apps.All.Restart.Enumerate()
    {
    ((_object_user_opts_apps_all_restart_array_index_++))
    if [[ $_object_user_opts_apps_all_restart_array_index_ -gt ${#_object_user_opts_apps_all_restart_array_[@]} ]]; then
        _object_user_opts_apps_all_restart_array_index_=1
    fi
    }
User.Opts.Apps.All.Restart.Exist()
    {
    [[ ${_object_user_opts_apps_all_restart_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Restart.First()
    {
    echo "${_object_user_opts_apps_all_restart_array_[0]}"
    }
User.Opts.Apps.All.Restart.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_restart_array_[((_object_user_opts_apps_all_restart_array_index_-1))]}"
    }
User.Opts.Apps.All.Restart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_restart_array_[@]} ]] && index=${#_object_user_opts_apps_all_restart_array_[@]}
    echo -n "${_object_user_opts_apps_all_restart_array_[((index-1))]}"
    }
User.Opts.Apps.All.Restart.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_restart_array_[@]} ]]; then
            _object_user_opts_apps_all_restart_array_index_=${#_object_user_opts_apps_all_restart_array_[@]}
        else
            _object_user_opts_apps_all_restart_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_restart_array_index_
    fi
    }
User.Opts.Apps.All.Restart.Init()
    {
    _object_user_opts_apps_all_restart_value_=0
    _object_user_opts_apps_all_restart_text_=''
    _object_user_opts_apps_all_restart_flag_=false
    _object_user_opts_apps_all_restart_enable_=false
    _object_user_opts_apps_all_restart_array_+=()
    _object_user_opts_apps_all_restart_array_index_=1
    _object_user_opts_apps_all_restart_path_=''
    }
User.Opts.Apps.All.Restart.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_restart_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Restart.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Restart.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Restart.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_restart_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Restart.IsNot()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Restart.IsSet()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Restart.List()
    {
    echo -n "${_object_user_opts_apps_all_restart_array_[*]}"
    }
User.Opts.Apps.All.Restart.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_restart_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Restart.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restart_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_restart_path_"
    fi
    }
User.Opts.Apps.All.Restart.Remove()
    {
    [[ ${_object_user_opts_apps_all_restart_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_restart_array_=("${_object_user_opts_apps_all_restart_array_[@]/$1}")
    }
User.Opts.Apps.All.Restart.Set()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restart_flag_=true
    DebugVar _object_user_opts_apps_all_restart_flag_
    }
User.Opts.Apps.All.Restart.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restart_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_restart_text_"
    fi
    }
User.Opts.Apps.All.Restart.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restart_value_=$2
    else
        echo -n $_object_user_opts_apps_all_restart_value_
    fi
    }
User.Opts.Apps.All.Restart.Init

User.Opts.Apps.All.Restore.Add()
    {
    [[ ${_object_user_opts_apps_all_restore_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_restore_array_+=("$1")
    }
User.Opts.Apps.All.Restore.Array()
    {
    echo -n "${_object_user_opts_apps_all_restore_array_[@]}"
    }
User.Opts.Apps.All.Restore.Clear()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restore_flag_=false
    DebugVar _object_user_opts_apps_all_restore_flag_
    }
User.Opts.Apps.All.Restore.Count()
    {
    echo "${#_object_user_opts_apps_all_restore_array_[@]}"
    }
User.Opts.Apps.All.Restore.Disable()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_restore_enable_=false
    DebugVar _object_user_opts_apps_all_restore_enable_
    }
User.Opts.Apps.All.Restore.Enable()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_restore_enable_=true
    DebugVar _object_user_opts_apps_all_restore_enable_
    }
User.Opts.Apps.All.Restore.Enumerate()
    {
    ((_object_user_opts_apps_all_restore_array_index_++))
    if [[ $_object_user_opts_apps_all_restore_array_index_ -gt ${#_object_user_opts_apps_all_restore_array_[@]} ]]; then
        _object_user_opts_apps_all_restore_array_index_=1
    fi
    }
User.Opts.Apps.All.Restore.Exist()
    {
    [[ ${_object_user_opts_apps_all_restore_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Restore.First()
    {
    echo "${_object_user_opts_apps_all_restore_array_[0]}"
    }
User.Opts.Apps.All.Restore.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_restore_array_[((_object_user_opts_apps_all_restore_array_index_-1))]}"
    }
User.Opts.Apps.All.Restore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_restore_array_[@]} ]] && index=${#_object_user_opts_apps_all_restore_array_[@]}
    echo -n "${_object_user_opts_apps_all_restore_array_[((index-1))]}"
    }
User.Opts.Apps.All.Restore.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_restore_array_[@]} ]]; then
            _object_user_opts_apps_all_restore_array_index_=${#_object_user_opts_apps_all_restore_array_[@]}
        else
            _object_user_opts_apps_all_restore_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_restore_array_index_
    fi
    }
User.Opts.Apps.All.Restore.Init()
    {
    _object_user_opts_apps_all_restore_value_=0
    _object_user_opts_apps_all_restore_text_=''
    _object_user_opts_apps_all_restore_flag_=false
    _object_user_opts_apps_all_restore_enable_=false
    _object_user_opts_apps_all_restore_array_+=()
    _object_user_opts_apps_all_restore_array_index_=1
    _object_user_opts_apps_all_restore_path_=''
    }
User.Opts.Apps.All.Restore.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_restore_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Restore.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Restore.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Restore.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_restore_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Restore.IsNot()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Restore.IsSet()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Restore.List()
    {
    echo -n "${_object_user_opts_apps_all_restore_array_[*]}"
    }
User.Opts.Apps.All.Restore.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_restore_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Restore.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restore_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_restore_path_"
    fi
    }
User.Opts.Apps.All.Restore.Remove()
    {
    [[ ${_object_user_opts_apps_all_restore_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_restore_array_=("${_object_user_opts_apps_all_restore_array_[@]/$1}")
    }
User.Opts.Apps.All.Restore.Set()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restore_flag_=true
    DebugVar _object_user_opts_apps_all_restore_flag_
    }
User.Opts.Apps.All.Restore.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restore_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_restore_text_"
    fi
    }
User.Opts.Apps.All.Restore.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restore_value_=$2
    else
        echo -n $_object_user_opts_apps_all_restore_value_
    fi
    }
User.Opts.Apps.All.Restore.Init

User.Opts.Apps.All.Uninstall.Add()
    {
    [[ ${_object_user_opts_apps_all_uninstall_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_uninstall_array_+=("$1")
    }
User.Opts.Apps.All.Uninstall.Array()
    {
    echo -n "${_object_user_opts_apps_all_uninstall_array_[@]}"
    }
User.Opts.Apps.All.Uninstall.Clear()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_uninstall_flag_=false
    DebugVar _object_user_opts_apps_all_uninstall_flag_
    }
User.Opts.Apps.All.Uninstall.Count()
    {
    echo "${#_object_user_opts_apps_all_uninstall_array_[@]}"
    }
User.Opts.Apps.All.Uninstall.Disable()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_uninstall_enable_=false
    DebugVar _object_user_opts_apps_all_uninstall_enable_
    }
User.Opts.Apps.All.Uninstall.Enable()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_uninstall_enable_=true
    DebugVar _object_user_opts_apps_all_uninstall_enable_
    }
User.Opts.Apps.All.Uninstall.Enumerate()
    {
    ((_object_user_opts_apps_all_uninstall_array_index_++))
    if [[ $_object_user_opts_apps_all_uninstall_array_index_ -gt ${#_object_user_opts_apps_all_uninstall_array_[@]} ]]; then
        _object_user_opts_apps_all_uninstall_array_index_=1
    fi
    }
User.Opts.Apps.All.Uninstall.Exist()
    {
    [[ ${_object_user_opts_apps_all_uninstall_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Uninstall.First()
    {
    echo "${_object_user_opts_apps_all_uninstall_array_[0]}"
    }
User.Opts.Apps.All.Uninstall.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_uninstall_array_[((_object_user_opts_apps_all_uninstall_array_index_-1))]}"
    }
User.Opts.Apps.All.Uninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_uninstall_array_[@]} ]] && index=${#_object_user_opts_apps_all_uninstall_array_[@]}
    echo -n "${_object_user_opts_apps_all_uninstall_array_[((index-1))]}"
    }
User.Opts.Apps.All.Uninstall.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_uninstall_array_[@]} ]]; then
            _object_user_opts_apps_all_uninstall_array_index_=${#_object_user_opts_apps_all_uninstall_array_[@]}
        else
            _object_user_opts_apps_all_uninstall_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_uninstall_array_index_
    fi
    }
User.Opts.Apps.All.Uninstall.Init()
    {
    _object_user_opts_apps_all_uninstall_value_=0
    _object_user_opts_apps_all_uninstall_text_=''
    _object_user_opts_apps_all_uninstall_flag_=false
    _object_user_opts_apps_all_uninstall_enable_=false
    _object_user_opts_apps_all_uninstall_array_+=()
    _object_user_opts_apps_all_uninstall_array_index_=1
    _object_user_opts_apps_all_uninstall_path_=''
    }
User.Opts.Apps.All.Uninstall.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_uninstall_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Uninstall.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_uninstall_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Uninstall.IsNot()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsSet()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Uninstall.List()
    {
    echo -n "${_object_user_opts_apps_all_uninstall_array_[*]}"
    }
User.Opts.Apps.All.Uninstall.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_uninstall_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Uninstall.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_uninstall_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_uninstall_path_"
    fi
    }
User.Opts.Apps.All.Uninstall.Remove()
    {
    [[ ${_object_user_opts_apps_all_uninstall_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_uninstall_array_=("${_object_user_opts_apps_all_uninstall_array_[@]/$1}")
    }
User.Opts.Apps.All.Uninstall.Set()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_uninstall_flag_=true
    DebugVar _object_user_opts_apps_all_uninstall_flag_
    }
User.Opts.Apps.All.Uninstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_uninstall_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_uninstall_text_"
    fi
    }
User.Opts.Apps.All.Uninstall.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_uninstall_value_=$2
    else
        echo -n $_object_user_opts_apps_all_uninstall_value_
    fi
    }
User.Opts.Apps.All.Uninstall.Init

User.Opts.Apps.All.Upgrade.Add()
    {
    [[ ${_object_user_opts_apps_all_upgrade_array_[*]} != *"$1"* ]] && _object_user_opts_apps_all_upgrade_array_+=("$1")
    }
User.Opts.Apps.All.Upgrade.Array()
    {
    echo -n "${_object_user_opts_apps_all_upgrade_array_[@]}"
    }
User.Opts.Apps.All.Upgrade.Clear()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_upgrade_flag_=false
    DebugVar _object_user_opts_apps_all_upgrade_flag_
    }
User.Opts.Apps.All.Upgrade.Count()
    {
    echo "${#_object_user_opts_apps_all_upgrade_array_[@]}"
    }
User.Opts.Apps.All.Upgrade.Disable()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_upgrade_enable_=false
    DebugVar _object_user_opts_apps_all_upgrade_enable_
    }
User.Opts.Apps.All.Upgrade.Enable()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_upgrade_enable_=true
    DebugVar _object_user_opts_apps_all_upgrade_enable_
    }
User.Opts.Apps.All.Upgrade.Enumerate()
    {
    ((_object_user_opts_apps_all_upgrade_array_index_++))
    if [[ $_object_user_opts_apps_all_upgrade_array_index_ -gt ${#_object_user_opts_apps_all_upgrade_array_[@]} ]]; then
        _object_user_opts_apps_all_upgrade_array_index_=1
    fi
    }
User.Opts.Apps.All.Upgrade.Exist()
    {
    [[ ${_object_user_opts_apps_all_upgrade_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.All.Upgrade.First()
    {
    echo "${_object_user_opts_apps_all_upgrade_array_[0]}"
    }
User.Opts.Apps.All.Upgrade.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_all_upgrade_array_[((_object_user_opts_apps_all_upgrade_array_index_-1))]}"
    }
User.Opts.Apps.All.Upgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_all_upgrade_array_[@]} ]] && index=${#_object_user_opts_apps_all_upgrade_array_[@]}
    echo -n "${_object_user_opts_apps_all_upgrade_array_[((index-1))]}"
    }
User.Opts.Apps.All.Upgrade.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_all_upgrade_array_[@]} ]]; then
            _object_user_opts_apps_all_upgrade_array_index_=${#_object_user_opts_apps_all_upgrade_array_[@]}
        else
            _object_user_opts_apps_all_upgrade_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_all_upgrade_array_index_
    fi
    }
User.Opts.Apps.All.Upgrade.Init()
    {
    _object_user_opts_apps_all_upgrade_value_=0
    _object_user_opts_apps_all_upgrade_text_=''
    _object_user_opts_apps_all_upgrade_flag_=false
    _object_user_opts_apps_all_upgrade_enable_=false
    _object_user_opts_apps_all_upgrade_array_+=()
    _object_user_opts_apps_all_upgrade_array_index_=1
    _object_user_opts_apps_all_upgrade_path_=''
    }
User.Opts.Apps.All.Upgrade.IsAny()
    {
    [[ ${#_object_user_opts_apps_all_upgrade_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.All.Upgrade.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsNone()
    {
    [[ ${#_object_user_opts_apps_all_upgrade_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.All.Upgrade.IsNot()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsSet()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Upgrade.List()
    {
    echo -n "${_object_user_opts_apps_all_upgrade_array_[*]}"
    }
User.Opts.Apps.All.Upgrade.ListComma()
    {
    echo -n "${_object_user_opts_apps_all_upgrade_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.All.Upgrade.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_upgrade_path_="$2"
    else
        echo -n "$_object_user_opts_apps_all_upgrade_path_"
    fi
    }
User.Opts.Apps.All.Upgrade.Remove()
    {
    [[ ${_object_user_opts_apps_all_upgrade_array_[*]} == *"$1"* ]] && _object_user_opts_apps_all_upgrade_array_=("${_object_user_opts_apps_all_upgrade_array_[@]/$1}")
    }
User.Opts.Apps.All.Upgrade.Set()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_upgrade_flag_=true
    DebugVar _object_user_opts_apps_all_upgrade_flag_
    }
User.Opts.Apps.All.Upgrade.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_upgrade_text_="$2"
    else
        echo -n "$_object_user_opts_apps_all_upgrade_text_"
    fi
    }
User.Opts.Apps.All.Upgrade.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_upgrade_value_=$2
    else
        echo -n $_object_user_opts_apps_all_upgrade_value_
    fi
    }
User.Opts.Apps.All.Upgrade.Init

User.Opts.Apps.List.All.Add()
    {
    [[ ${_object_user_opts_apps_list_all_array_[*]} != *"$1"* ]] && _object_user_opts_apps_list_all_array_+=("$1")
    }
User.Opts.Apps.List.All.Array()
    {
    echo -n "${_object_user_opts_apps_list_all_array_[@]}"
    }
User.Opts.Apps.List.All.Clear()
    {
    [[ $_object_user_opts_apps_list_all_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_all_flag_=false
    DebugVar _object_user_opts_apps_list_all_flag_
    }
User.Opts.Apps.List.All.Count()
    {
    echo "${#_object_user_opts_apps_list_all_array_[@]}"
    }
User.Opts.Apps.List.All.Disable()
    {
    [[ $_object_user_opts_apps_list_all_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_all_enable_=false
    DebugVar _object_user_opts_apps_list_all_enable_
    }
User.Opts.Apps.List.All.Enable()
    {
    [[ $_object_user_opts_apps_list_all_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_all_enable_=true
    DebugVar _object_user_opts_apps_list_all_enable_
    }
User.Opts.Apps.List.All.Enumerate()
    {
    ((_object_user_opts_apps_list_all_array_index_++))
    if [[ $_object_user_opts_apps_list_all_array_index_ -gt ${#_object_user_opts_apps_list_all_array_[@]} ]]; then
        _object_user_opts_apps_list_all_array_index_=1
    fi
    }
User.Opts.Apps.List.All.Exist()
    {
    [[ ${_object_user_opts_apps_list_all_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.List.All.First()
    {
    echo "${_object_user_opts_apps_list_all_array_[0]}"
    }
User.Opts.Apps.List.All.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_list_all_array_[((_object_user_opts_apps_list_all_array_index_-1))]}"
    }
User.Opts.Apps.List.All.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_list_all_array_[@]} ]] && index=${#_object_user_opts_apps_list_all_array_[@]}
    echo -n "${_object_user_opts_apps_list_all_array_[((index-1))]}"
    }
User.Opts.Apps.List.All.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_list_all_array_[@]} ]]; then
            _object_user_opts_apps_list_all_array_index_=${#_object_user_opts_apps_list_all_array_[@]}
        else
            _object_user_opts_apps_list_all_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_list_all_array_index_
    fi
    }
User.Opts.Apps.List.All.Init()
    {
    _object_user_opts_apps_list_all_value_=0
    _object_user_opts_apps_list_all_text_=''
    _object_user_opts_apps_list_all_flag_=false
    _object_user_opts_apps_list_all_enable_=false
    _object_user_opts_apps_list_all_array_+=()
    _object_user_opts_apps_list_all_array_index_=1
    _object_user_opts_apps_list_all_path_=''
    }
User.Opts.Apps.List.All.IsAny()
    {
    [[ ${#_object_user_opts_apps_list_all_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.List.All.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_all_enable_ != 'true' ]]
    }
User.Opts.Apps.List.All.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_all_enable_ = 'true' ]]
    }
User.Opts.Apps.List.All.IsNone()
    {
    [[ ${#_object_user_opts_apps_list_all_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.List.All.IsNot()
    {
    [[ $_object_user_opts_apps_list_all_flag_ != 'true' ]]
    }
User.Opts.Apps.List.All.IsSet()
    {
    [[ $_object_user_opts_apps_list_all_flag_ = 'true' ]]
    }
User.Opts.Apps.List.All.List()
    {
    echo -n "${_object_user_opts_apps_list_all_array_[*]}"
    }
User.Opts.Apps.List.All.ListComma()
    {
    echo -n "${_object_user_opts_apps_list_all_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.List.All.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_all_path_="$2"
    else
        echo -n "$_object_user_opts_apps_list_all_path_"
    fi
    }
User.Opts.Apps.List.All.Remove()
    {
    [[ ${_object_user_opts_apps_list_all_array_[*]} == *"$1"* ]] && _object_user_opts_apps_list_all_array_=("${_object_user_opts_apps_list_all_array_[@]/$1}")
    }
User.Opts.Apps.List.All.Set()
    {
    [[ $_object_user_opts_apps_list_all_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_all_flag_=true
    DebugVar _object_user_opts_apps_list_all_flag_
    }
User.Opts.Apps.List.All.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_all_text_="$2"
    else
        echo -n "$_object_user_opts_apps_list_all_text_"
    fi
    }
User.Opts.Apps.List.All.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_all_value_=$2
    else
        echo -n $_object_user_opts_apps_list_all_value_
    fi
    }
User.Opts.Apps.List.All.Init

User.Opts.Apps.List.Installed.Add()
    {
    [[ ${_object_user_opts_apps_list_installed_array_[*]} != *"$1"* ]] && _object_user_opts_apps_list_installed_array_+=("$1")
    }
User.Opts.Apps.List.Installed.Array()
    {
    echo -n "${_object_user_opts_apps_list_installed_array_[@]}"
    }
User.Opts.Apps.List.Installed.Clear()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_installed_flag_=false
    DebugVar _object_user_opts_apps_list_installed_flag_
    }
User.Opts.Apps.List.Installed.Count()
    {
    echo "${#_object_user_opts_apps_list_installed_array_[@]}"
    }
User.Opts.Apps.List.Installed.Disable()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_installed_enable_=false
    DebugVar _object_user_opts_apps_list_installed_enable_
    }
User.Opts.Apps.List.Installed.Enable()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_installed_enable_=true
    DebugVar _object_user_opts_apps_list_installed_enable_
    }
User.Opts.Apps.List.Installed.Enumerate()
    {
    ((_object_user_opts_apps_list_installed_array_index_++))
    if [[ $_object_user_opts_apps_list_installed_array_index_ -gt ${#_object_user_opts_apps_list_installed_array_[@]} ]]; then
        _object_user_opts_apps_list_installed_array_index_=1
    fi
    }
User.Opts.Apps.List.Installed.Exist()
    {
    [[ ${_object_user_opts_apps_list_installed_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.List.Installed.First()
    {
    echo "${_object_user_opts_apps_list_installed_array_[0]}"
    }
User.Opts.Apps.List.Installed.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_list_installed_array_[((_object_user_opts_apps_list_installed_array_index_-1))]}"
    }
User.Opts.Apps.List.Installed.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_list_installed_array_[@]} ]] && index=${#_object_user_opts_apps_list_installed_array_[@]}
    echo -n "${_object_user_opts_apps_list_installed_array_[((index-1))]}"
    }
User.Opts.Apps.List.Installed.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_list_installed_array_[@]} ]]; then
            _object_user_opts_apps_list_installed_array_index_=${#_object_user_opts_apps_list_installed_array_[@]}
        else
            _object_user_opts_apps_list_installed_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_list_installed_array_index_
    fi
    }
User.Opts.Apps.List.Installed.Init()
    {
    _object_user_opts_apps_list_installed_value_=0
    _object_user_opts_apps_list_installed_text_=''
    _object_user_opts_apps_list_installed_flag_=false
    _object_user_opts_apps_list_installed_enable_=false
    _object_user_opts_apps_list_installed_array_+=()
    _object_user_opts_apps_list_installed_array_index_=1
    _object_user_opts_apps_list_installed_path_=''
    }
User.Opts.Apps.List.Installed.IsAny()
    {
    [[ ${#_object_user_opts_apps_list_installed_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.List.Installed.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Installed.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Installed.IsNone()
    {
    [[ ${#_object_user_opts_apps_list_installed_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.List.Installed.IsNot()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Installed.IsSet()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Installed.List()
    {
    echo -n "${_object_user_opts_apps_list_installed_array_[*]}"
    }
User.Opts.Apps.List.Installed.ListComma()
    {
    echo -n "${_object_user_opts_apps_list_installed_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.List.Installed.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_installed_path_="$2"
    else
        echo -n "$_object_user_opts_apps_list_installed_path_"
    fi
    }
User.Opts.Apps.List.Installed.Remove()
    {
    [[ ${_object_user_opts_apps_list_installed_array_[*]} == *"$1"* ]] && _object_user_opts_apps_list_installed_array_=("${_object_user_opts_apps_list_installed_array_[@]/$1}")
    }
User.Opts.Apps.List.Installed.Set()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_installed_flag_=true
    DebugVar _object_user_opts_apps_list_installed_flag_
    }
User.Opts.Apps.List.Installed.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_installed_text_="$2"
    else
        echo -n "$_object_user_opts_apps_list_installed_text_"
    fi
    }
User.Opts.Apps.List.Installed.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_installed_value_=$2
    else
        echo -n $_object_user_opts_apps_list_installed_value_
    fi
    }
User.Opts.Apps.List.Installed.Init

User.Opts.Apps.List.NotInstalled.Add()
    {
    [[ ${_object_user_opts_apps_list_notinstalled_array_[*]} != *"$1"* ]] && _object_user_opts_apps_list_notinstalled_array_+=("$1")
    }
User.Opts.Apps.List.NotInstalled.Array()
    {
    echo -n "${_object_user_opts_apps_list_notinstalled_array_[@]}"
    }
User.Opts.Apps.List.NotInstalled.Clear()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_flag_=false
    DebugVar _object_user_opts_apps_list_notinstalled_flag_
    }
User.Opts.Apps.List.NotInstalled.Count()
    {
    echo "${#_object_user_opts_apps_list_notinstalled_array_[@]}"
    }
User.Opts.Apps.List.NotInstalled.Disable()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_enable_=false
    DebugVar _object_user_opts_apps_list_notinstalled_enable_
    }
User.Opts.Apps.List.NotInstalled.Enable()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_enable_=true
    DebugVar _object_user_opts_apps_list_notinstalled_enable_
    }
User.Opts.Apps.List.NotInstalled.Enumerate()
    {
    ((_object_user_opts_apps_list_notinstalled_array_index_++))
    if [[ $_object_user_opts_apps_list_notinstalled_array_index_ -gt ${#_object_user_opts_apps_list_notinstalled_array_[@]} ]]; then
        _object_user_opts_apps_list_notinstalled_array_index_=1
    fi
    }
User.Opts.Apps.List.NotInstalled.Exist()
    {
    [[ ${_object_user_opts_apps_list_notinstalled_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.List.NotInstalled.First()
    {
    echo "${_object_user_opts_apps_list_notinstalled_array_[0]}"
    }
User.Opts.Apps.List.NotInstalled.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_list_notinstalled_array_[((_object_user_opts_apps_list_notinstalled_array_index_-1))]}"
    }
User.Opts.Apps.List.NotInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_list_notinstalled_array_[@]} ]] && index=${#_object_user_opts_apps_list_notinstalled_array_[@]}
    echo -n "${_object_user_opts_apps_list_notinstalled_array_[((index-1))]}"
    }
User.Opts.Apps.List.NotInstalled.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_list_notinstalled_array_[@]} ]]; then
            _object_user_opts_apps_list_notinstalled_array_index_=${#_object_user_opts_apps_list_notinstalled_array_[@]}
        else
            _object_user_opts_apps_list_notinstalled_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_list_notinstalled_array_index_
    fi
    }
User.Opts.Apps.List.NotInstalled.Init()
    {
    _object_user_opts_apps_list_notinstalled_value_=0
    _object_user_opts_apps_list_notinstalled_text_=''
    _object_user_opts_apps_list_notinstalled_flag_=false
    _object_user_opts_apps_list_notinstalled_enable_=false
    _object_user_opts_apps_list_notinstalled_array_+=()
    _object_user_opts_apps_list_notinstalled_array_index_=1
    _object_user_opts_apps_list_notinstalled_path_=''
    }
User.Opts.Apps.List.NotInstalled.IsAny()
    {
    [[ ${#_object_user_opts_apps_list_notinstalled_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.List.NotInstalled.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ != 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ = 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsNone()
    {
    [[ ${#_object_user_opts_apps_list_notinstalled_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.List.NotInstalled.IsNot()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ != 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsSet()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ = 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.List()
    {
    echo -n "${_object_user_opts_apps_list_notinstalled_array_[*]}"
    }
User.Opts.Apps.List.NotInstalled.ListComma()
    {
    echo -n "${_object_user_opts_apps_list_notinstalled_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.List.NotInstalled.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_notinstalled_path_="$2"
    else
        echo -n "$_object_user_opts_apps_list_notinstalled_path_"
    fi
    }
User.Opts.Apps.List.NotInstalled.Remove()
    {
    [[ ${_object_user_opts_apps_list_notinstalled_array_[*]} == *"$1"* ]] && _object_user_opts_apps_list_notinstalled_array_=("${_object_user_opts_apps_list_notinstalled_array_[@]/$1}")
    }
User.Opts.Apps.List.NotInstalled.Set()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_flag_=true
    DebugVar _object_user_opts_apps_list_notinstalled_flag_
    }
User.Opts.Apps.List.NotInstalled.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_notinstalled_text_="$2"
    else
        echo -n "$_object_user_opts_apps_list_notinstalled_text_"
    fi
    }
User.Opts.Apps.List.NotInstalled.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_notinstalled_value_=$2
    else
        echo -n $_object_user_opts_apps_list_notinstalled_value_
    fi
    }
User.Opts.Apps.List.NotInstalled.Init

User.Opts.Apps.List.Upgradable.Add()
    {
    [[ ${_object_user_opts_apps_list_upgradable_array_[*]} != *"$1"* ]] && _object_user_opts_apps_list_upgradable_array_+=("$1")
    }
User.Opts.Apps.List.Upgradable.Array()
    {
    echo -n "${_object_user_opts_apps_list_upgradable_array_[@]}"
    }
User.Opts.Apps.List.Upgradable.Clear()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_upgradable_flag_=false
    DebugVar _object_user_opts_apps_list_upgradable_flag_
    }
User.Opts.Apps.List.Upgradable.Count()
    {
    echo "${#_object_user_opts_apps_list_upgradable_array_[@]}"
    }
User.Opts.Apps.List.Upgradable.Disable()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_upgradable_enable_=false
    DebugVar _object_user_opts_apps_list_upgradable_enable_
    }
User.Opts.Apps.List.Upgradable.Enable()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_upgradable_enable_=true
    DebugVar _object_user_opts_apps_list_upgradable_enable_
    }
User.Opts.Apps.List.Upgradable.Enumerate()
    {
    ((_object_user_opts_apps_list_upgradable_array_index_++))
    if [[ $_object_user_opts_apps_list_upgradable_array_index_ -gt ${#_object_user_opts_apps_list_upgradable_array_[@]} ]]; then
        _object_user_opts_apps_list_upgradable_array_index_=1
    fi
    }
User.Opts.Apps.List.Upgradable.Exist()
    {
    [[ ${_object_user_opts_apps_list_upgradable_array_[*]} == *"$1"* ]]
    }
User.Opts.Apps.List.Upgradable.First()
    {
    echo "${_object_user_opts_apps_list_upgradable_array_[0]}"
    }
User.Opts.Apps.List.Upgradable.GetCurrent()
    {
    echo -n "${_object_user_opts_apps_list_upgradable_array_[((_object_user_opts_apps_list_upgradable_array_index_-1))]}"
    }
User.Opts.Apps.List.Upgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_user_opts_apps_list_upgradable_array_[@]} ]] && index=${#_object_user_opts_apps_list_upgradable_array_[@]}
    echo -n "${_object_user_opts_apps_list_upgradable_array_[((index-1))]}"
    }
User.Opts.Apps.List.Upgradable.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_user_opts_apps_list_upgradable_array_[@]} ]]; then
            _object_user_opts_apps_list_upgradable_array_index_=${#_object_user_opts_apps_list_upgradable_array_[@]}
        else
            _object_user_opts_apps_list_upgradable_array_index_=$2
        fi
    else
        echo -n $_object_user_opts_apps_list_upgradable_array_index_
    fi
    }
User.Opts.Apps.List.Upgradable.Init()
    {
    _object_user_opts_apps_list_upgradable_value_=0
    _object_user_opts_apps_list_upgradable_text_=''
    _object_user_opts_apps_list_upgradable_flag_=false
    _object_user_opts_apps_list_upgradable_enable_=false
    _object_user_opts_apps_list_upgradable_array_+=()
    _object_user_opts_apps_list_upgradable_array_index_=1
    _object_user_opts_apps_list_upgradable_path_=''
    }
User.Opts.Apps.List.Upgradable.IsAny()
    {
    [[ ${#_object_user_opts_apps_list_upgradable_array_[@]} -gt 0 ]]
    }
User.Opts.Apps.List.Upgradable.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsNone()
    {
    [[ ${#_object_user_opts_apps_list_upgradable_array_[@]} -eq 0 ]]
    }
User.Opts.Apps.List.Upgradable.IsNot()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsSet()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Upgradable.List()
    {
    echo -n "${_object_user_opts_apps_list_upgradable_array_[*]}"
    }
User.Opts.Apps.List.Upgradable.ListComma()
    {
    echo -n "${_object_user_opts_apps_list_upgradable_array_[*]}" | tr ' ' ','
    }
User.Opts.Apps.List.Upgradable.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_upgradable_path_="$2"
    else
        echo -n "$_object_user_opts_apps_list_upgradable_path_"
    fi
    }
User.Opts.Apps.List.Upgradable.Remove()
    {
    [[ ${_object_user_opts_apps_list_upgradable_array_[*]} == *"$1"* ]] && _object_user_opts_apps_list_upgradable_array_=("${_object_user_opts_apps_list_upgradable_array_[@]/$1}")
    }
User.Opts.Apps.List.Upgradable.Set()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_upgradable_flag_=true
    DebugVar _object_user_opts_apps_list_upgradable_flag_
    }
User.Opts.Apps.List.Upgradable.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_upgradable_text_="$2"
    else
        echo -n "$_object_user_opts_apps_list_upgradable_text_"
    fi
    }
User.Opts.Apps.List.Upgradable.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_upgradable_value_=$2
    else
        echo -n $_object_user_opts_apps_list_upgradable_value_
    fi
    }
User.Opts.Apps.List.Upgradable.Init

QPKGs.Dependant.Add()
    {
    [[ ${_object_qpkgs_dependant_array_[*]} != *"$1"* ]] && _object_qpkgs_dependant_array_+=("$1")
    }
QPKGs.Dependant.Array()
    {
    echo -n "${_object_qpkgs_dependant_array_[@]}"
    }
QPKGs.Dependant.Clear()
    {
    [[ $_object_qpkgs_dependant_flag_ != 'true' ]] && return
    _object_qpkgs_dependant_flag_=false
    DebugVar _object_qpkgs_dependant_flag_
    }
QPKGs.Dependant.Count()
    {
    echo "${#_object_qpkgs_dependant_array_[@]}"
    }
QPKGs.Dependant.Disable()
    {
    [[ $_object_qpkgs_dependant_enable_ != 'true' ]] && return
    _object_qpkgs_dependant_enable_=false
    DebugVar _object_qpkgs_dependant_enable_
    }
QPKGs.Dependant.Enable()
    {
    [[ $_object_qpkgs_dependant_enable_ = 'true' ]] && return
    _object_qpkgs_dependant_enable_=true
    DebugVar _object_qpkgs_dependant_enable_
    }
QPKGs.Dependant.Enumerate()
    {
    ((_object_qpkgs_dependant_array_index_++))
    if [[ $_object_qpkgs_dependant_array_index_ -gt ${#_object_qpkgs_dependant_array_[@]} ]]; then
        _object_qpkgs_dependant_array_index_=1
    fi
    }
QPKGs.Dependant.Exist()
    {
    [[ ${_object_qpkgs_dependant_array_[*]} == *"$1"* ]]
    }
QPKGs.Dependant.First()
    {
    echo "${_object_qpkgs_dependant_array_[0]}"
    }
QPKGs.Dependant.GetCurrent()
    {
    echo -n "${_object_qpkgs_dependant_array_[((_object_qpkgs_dependant_array_index_-1))]}"
    }
QPKGs.Dependant.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_dependant_array_[@]} ]] && index=${#_object_qpkgs_dependant_array_[@]}
    echo -n "${_object_qpkgs_dependant_array_[((index-1))]}"
    }
QPKGs.Dependant.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_dependant_array_[@]} ]]; then
            _object_qpkgs_dependant_array_index_=${#_object_qpkgs_dependant_array_[@]}
        else
            _object_qpkgs_dependant_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_dependant_array_index_
    fi
    }
QPKGs.Dependant.Init()
    {
    _object_qpkgs_dependant_value_=0
    _object_qpkgs_dependant_text_=''
    _object_qpkgs_dependant_flag_=false
    _object_qpkgs_dependant_enable_=false
    _object_qpkgs_dependant_array_+=()
    _object_qpkgs_dependant_array_index_=1
    _object_qpkgs_dependant_path_=''
    }
QPKGs.Dependant.IsAny()
    {
    [[ ${#_object_qpkgs_dependant_array_[@]} -gt 0 ]]
    }
QPKGs.Dependant.IsDisabled()
    {
    [[ $_object_qpkgs_dependant_enable_ != 'true' ]]
    }
QPKGs.Dependant.IsEnabled()
    {
    [[ $_object_qpkgs_dependant_enable_ = 'true' ]]
    }
QPKGs.Dependant.IsNone()
    {
    [[ ${#_object_qpkgs_dependant_array_[@]} -eq 0 ]]
    }
QPKGs.Dependant.IsNot()
    {
    [[ $_object_qpkgs_dependant_flag_ != 'true' ]]
    }
QPKGs.Dependant.IsSet()
    {
    [[ $_object_qpkgs_dependant_flag_ = 'true' ]]
    }
QPKGs.Dependant.List()
    {
    echo -n "${_object_qpkgs_dependant_array_[*]}"
    }
QPKGs.Dependant.ListComma()
    {
    echo -n "${_object_qpkgs_dependant_array_[*]}" | tr ' ' ','
    }
QPKGs.Dependant.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_dependant_path_="$2"
    else
        echo -n "$_object_qpkgs_dependant_path_"
    fi
    }
QPKGs.Dependant.Remove()
    {
    [[ ${_object_qpkgs_dependant_array_[*]} == *"$1"* ]] && _object_qpkgs_dependant_array_=("${_object_qpkgs_dependant_array_[@]/$1}")
    }
QPKGs.Dependant.Set()
    {
    [[ $_object_qpkgs_dependant_flag_ = 'true' ]] && return
    _object_qpkgs_dependant_flag_=true
    DebugVar _object_qpkgs_dependant_flag_
    }
QPKGs.Dependant.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_dependant_text_="$2"
    else
        echo -n "$_object_qpkgs_dependant_text_"
    fi
    }
QPKGs.Dependant.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_dependant_value_=$2
    else
        echo -n $_object_qpkgs_dependant_value_
    fi
    }
QPKGs.Dependant.Init

QPKGs.Independent.Add()
    {
    [[ ${_object_qpkgs_independent_array_[*]} != *"$1"* ]] && _object_qpkgs_independent_array_+=("$1")
    }
QPKGs.Independent.Array()
    {
    echo -n "${_object_qpkgs_independent_array_[@]}"
    }
QPKGs.Independent.Clear()
    {
    [[ $_object_qpkgs_independent_flag_ != 'true' ]] && return
    _object_qpkgs_independent_flag_=false
    DebugVar _object_qpkgs_independent_flag_
    }
QPKGs.Independent.Count()
    {
    echo "${#_object_qpkgs_independent_array_[@]}"
    }
QPKGs.Independent.Disable()
    {
    [[ $_object_qpkgs_independent_enable_ != 'true' ]] && return
    _object_qpkgs_independent_enable_=false
    DebugVar _object_qpkgs_independent_enable_
    }
QPKGs.Independent.Enable()
    {
    [[ $_object_qpkgs_independent_enable_ = 'true' ]] && return
    _object_qpkgs_independent_enable_=true
    DebugVar _object_qpkgs_independent_enable_
    }
QPKGs.Independent.Enumerate()
    {
    ((_object_qpkgs_independent_array_index_++))
    if [[ $_object_qpkgs_independent_array_index_ -gt ${#_object_qpkgs_independent_array_[@]} ]]; then
        _object_qpkgs_independent_array_index_=1
    fi
    }
QPKGs.Independent.Exist()
    {
    [[ ${_object_qpkgs_independent_array_[*]} == *"$1"* ]]
    }
QPKGs.Independent.First()
    {
    echo "${_object_qpkgs_independent_array_[0]}"
    }
QPKGs.Independent.GetCurrent()
    {
    echo -n "${_object_qpkgs_independent_array_[((_object_qpkgs_independent_array_index_-1))]}"
    }
QPKGs.Independent.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_independent_array_[@]} ]] && index=${#_object_qpkgs_independent_array_[@]}
    echo -n "${_object_qpkgs_independent_array_[((index-1))]}"
    }
QPKGs.Independent.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_independent_array_[@]} ]]; then
            _object_qpkgs_independent_array_index_=${#_object_qpkgs_independent_array_[@]}
        else
            _object_qpkgs_independent_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_independent_array_index_
    fi
    }
QPKGs.Independent.Init()
    {
    _object_qpkgs_independent_value_=0
    _object_qpkgs_independent_text_=''
    _object_qpkgs_independent_flag_=false
    _object_qpkgs_independent_enable_=false
    _object_qpkgs_independent_array_+=()
    _object_qpkgs_independent_array_index_=1
    _object_qpkgs_independent_path_=''
    }
QPKGs.Independent.IsAny()
    {
    [[ ${#_object_qpkgs_independent_array_[@]} -gt 0 ]]
    }
QPKGs.Independent.IsDisabled()
    {
    [[ $_object_qpkgs_independent_enable_ != 'true' ]]
    }
QPKGs.Independent.IsEnabled()
    {
    [[ $_object_qpkgs_independent_enable_ = 'true' ]]
    }
QPKGs.Independent.IsNone()
    {
    [[ ${#_object_qpkgs_independent_array_[@]} -eq 0 ]]
    }
QPKGs.Independent.IsNot()
    {
    [[ $_object_qpkgs_independent_flag_ != 'true' ]]
    }
QPKGs.Independent.IsSet()
    {
    [[ $_object_qpkgs_independent_flag_ = 'true' ]]
    }
QPKGs.Independent.List()
    {
    echo -n "${_object_qpkgs_independent_array_[*]}"
    }
QPKGs.Independent.ListComma()
    {
    echo -n "${_object_qpkgs_independent_array_[*]}" | tr ' ' ','
    }
QPKGs.Independent.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_independent_path_="$2"
    else
        echo -n "$_object_qpkgs_independent_path_"
    fi
    }
QPKGs.Independent.Remove()
    {
    [[ ${_object_qpkgs_independent_array_[*]} == *"$1"* ]] && _object_qpkgs_independent_array_=("${_object_qpkgs_independent_array_[@]/$1}")
    }
QPKGs.Independent.Set()
    {
    [[ $_object_qpkgs_independent_flag_ = 'true' ]] && return
    _object_qpkgs_independent_flag_=true
    DebugVar _object_qpkgs_independent_flag_
    }
QPKGs.Independent.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_independent_text_="$2"
    else
        echo -n "$_object_qpkgs_independent_text_"
    fi
    }
QPKGs.Independent.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_independent_value_=$2
    else
        echo -n $_object_qpkgs_independent_value_
    fi
    }
QPKGs.Independent.Init

QPKGs.Installable.Add()
    {
    [[ ${_object_qpkgs_installable_array_[*]} != *"$1"* ]] && _object_qpkgs_installable_array_+=("$1")
    }
QPKGs.Installable.Array()
    {
    echo -n "${_object_qpkgs_installable_array_[@]}"
    }
QPKGs.Installable.Clear()
    {
    [[ $_object_qpkgs_installable_flag_ != 'true' ]] && return
    _object_qpkgs_installable_flag_=false
    DebugVar _object_qpkgs_installable_flag_
    }
QPKGs.Installable.Count()
    {
    echo "${#_object_qpkgs_installable_array_[@]}"
    }
QPKGs.Installable.Disable()
    {
    [[ $_object_qpkgs_installable_enable_ != 'true' ]] && return
    _object_qpkgs_installable_enable_=false
    DebugVar _object_qpkgs_installable_enable_
    }
QPKGs.Installable.Enable()
    {
    [[ $_object_qpkgs_installable_enable_ = 'true' ]] && return
    _object_qpkgs_installable_enable_=true
    DebugVar _object_qpkgs_installable_enable_
    }
QPKGs.Installable.Enumerate()
    {
    ((_object_qpkgs_installable_array_index_++))
    if [[ $_object_qpkgs_installable_array_index_ -gt ${#_object_qpkgs_installable_array_[@]} ]]; then
        _object_qpkgs_installable_array_index_=1
    fi
    }
QPKGs.Installable.Exist()
    {
    [[ ${_object_qpkgs_installable_array_[*]} == *"$1"* ]]
    }
QPKGs.Installable.First()
    {
    echo "${_object_qpkgs_installable_array_[0]}"
    }
QPKGs.Installable.GetCurrent()
    {
    echo -n "${_object_qpkgs_installable_array_[((_object_qpkgs_installable_array_index_-1))]}"
    }
QPKGs.Installable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_installable_array_[@]} ]] && index=${#_object_qpkgs_installable_array_[@]}
    echo -n "${_object_qpkgs_installable_array_[((index-1))]}"
    }
QPKGs.Installable.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_installable_array_[@]} ]]; then
            _object_qpkgs_installable_array_index_=${#_object_qpkgs_installable_array_[@]}
        else
            _object_qpkgs_installable_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_installable_array_index_
    fi
    }
QPKGs.Installable.Init()
    {
    _object_qpkgs_installable_value_=0
    _object_qpkgs_installable_text_=''
    _object_qpkgs_installable_flag_=false
    _object_qpkgs_installable_enable_=false
    _object_qpkgs_installable_array_+=()
    _object_qpkgs_installable_array_index_=1
    _object_qpkgs_installable_path_=''
    }
QPKGs.Installable.IsAny()
    {
    [[ ${#_object_qpkgs_installable_array_[@]} -gt 0 ]]
    }
QPKGs.Installable.IsDisabled()
    {
    [[ $_object_qpkgs_installable_enable_ != 'true' ]]
    }
QPKGs.Installable.IsEnabled()
    {
    [[ $_object_qpkgs_installable_enable_ = 'true' ]]
    }
QPKGs.Installable.IsNone()
    {
    [[ ${#_object_qpkgs_installable_array_[@]} -eq 0 ]]
    }
QPKGs.Installable.IsNot()
    {
    [[ $_object_qpkgs_installable_flag_ != 'true' ]]
    }
QPKGs.Installable.IsSet()
    {
    [[ $_object_qpkgs_installable_flag_ = 'true' ]]
    }
QPKGs.Installable.List()
    {
    echo -n "${_object_qpkgs_installable_array_[*]}"
    }
QPKGs.Installable.ListComma()
    {
    echo -n "${_object_qpkgs_installable_array_[*]}" | tr ' ' ','
    }
QPKGs.Installable.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installable_path_="$2"
    else
        echo -n "$_object_qpkgs_installable_path_"
    fi
    }
QPKGs.Installable.Remove()
    {
    [[ ${_object_qpkgs_installable_array_[*]} == *"$1"* ]] && _object_qpkgs_installable_array_=("${_object_qpkgs_installable_array_[@]/$1}")
    }
QPKGs.Installable.Set()
    {
    [[ $_object_qpkgs_installable_flag_ = 'true' ]] && return
    _object_qpkgs_installable_flag_=true
    DebugVar _object_qpkgs_installable_flag_
    }
QPKGs.Installable.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installable_text_="$2"
    else
        echo -n "$_object_qpkgs_installable_text_"
    fi
    }
QPKGs.Installable.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installable_value_=$2
    else
        echo -n $_object_qpkgs_installable_value_
    fi
    }
QPKGs.Installable.Init

QPKGs.Installed.Add()
    {
    [[ ${_object_qpkgs_installed_array_[*]} != *"$1"* ]] && _object_qpkgs_installed_array_+=("$1")
    }
QPKGs.Installed.Array()
    {
    echo -n "${_object_qpkgs_installed_array_[@]}"
    }
QPKGs.Installed.Clear()
    {
    [[ $_object_qpkgs_installed_flag_ != 'true' ]] && return
    _object_qpkgs_installed_flag_=false
    DebugVar _object_qpkgs_installed_flag_
    }
QPKGs.Installed.Count()
    {
    echo "${#_object_qpkgs_installed_array_[@]}"
    }
QPKGs.Installed.Disable()
    {
    [[ $_object_qpkgs_installed_enable_ != 'true' ]] && return
    _object_qpkgs_installed_enable_=false
    DebugVar _object_qpkgs_installed_enable_
    }
QPKGs.Installed.Enable()
    {
    [[ $_object_qpkgs_installed_enable_ = 'true' ]] && return
    _object_qpkgs_installed_enable_=true
    DebugVar _object_qpkgs_installed_enable_
    }
QPKGs.Installed.Enumerate()
    {
    ((_object_qpkgs_installed_array_index_++))
    if [[ $_object_qpkgs_installed_array_index_ -gt ${#_object_qpkgs_installed_array_[@]} ]]; then
        _object_qpkgs_installed_array_index_=1
    fi
    }
QPKGs.Installed.Exist()
    {
    [[ ${_object_qpkgs_installed_array_[*]} == *"$1"* ]]
    }
QPKGs.Installed.First()
    {
    echo "${_object_qpkgs_installed_array_[0]}"
    }
QPKGs.Installed.GetCurrent()
    {
    echo -n "${_object_qpkgs_installed_array_[((_object_qpkgs_installed_array_index_-1))]}"
    }
QPKGs.Installed.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_installed_array_[@]} ]] && index=${#_object_qpkgs_installed_array_[@]}
    echo -n "${_object_qpkgs_installed_array_[((index-1))]}"
    }
QPKGs.Installed.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_installed_array_[@]} ]]; then
            _object_qpkgs_installed_array_index_=${#_object_qpkgs_installed_array_[@]}
        else
            _object_qpkgs_installed_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_installed_array_index_
    fi
    }
QPKGs.Installed.Init()
    {
    _object_qpkgs_installed_value_=0
    _object_qpkgs_installed_text_=''
    _object_qpkgs_installed_flag_=false
    _object_qpkgs_installed_enable_=false
    _object_qpkgs_installed_array_+=()
    _object_qpkgs_installed_array_index_=1
    _object_qpkgs_installed_path_=''
    }
QPKGs.Installed.IsAny()
    {
    [[ ${#_object_qpkgs_installed_array_[@]} -gt 0 ]]
    }
QPKGs.Installed.IsDisabled()
    {
    [[ $_object_qpkgs_installed_enable_ != 'true' ]]
    }
QPKGs.Installed.IsEnabled()
    {
    [[ $_object_qpkgs_installed_enable_ = 'true' ]]
    }
QPKGs.Installed.IsNone()
    {
    [[ ${#_object_qpkgs_installed_array_[@]} -eq 0 ]]
    }
QPKGs.Installed.IsNot()
    {
    [[ $_object_qpkgs_installed_flag_ != 'true' ]]
    }
QPKGs.Installed.IsSet()
    {
    [[ $_object_qpkgs_installed_flag_ = 'true' ]]
    }
QPKGs.Installed.List()
    {
    echo -n "${_object_qpkgs_installed_array_[*]}"
    }
QPKGs.Installed.ListComma()
    {
    echo -n "${_object_qpkgs_installed_array_[*]}" | tr ' ' ','
    }
QPKGs.Installed.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installed_path_="$2"
    else
        echo -n "$_object_qpkgs_installed_path_"
    fi
    }
QPKGs.Installed.Remove()
    {
    [[ ${_object_qpkgs_installed_array_[*]} == *"$1"* ]] && _object_qpkgs_installed_array_=("${_object_qpkgs_installed_array_[@]/$1}")
    }
QPKGs.Installed.Set()
    {
    [[ $_object_qpkgs_installed_flag_ = 'true' ]] && return
    _object_qpkgs_installed_flag_=true
    DebugVar _object_qpkgs_installed_flag_
    }
QPKGs.Installed.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installed_text_="$2"
    else
        echo -n "$_object_qpkgs_installed_text_"
    fi
    }
QPKGs.Installed.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_installed_value_=$2
    else
        echo -n $_object_qpkgs_installed_value_
    fi
    }
QPKGs.Installed.Init

QPKGs.JustInstalled.Add()
    {
    [[ ${_object_qpkgs_justinstalled_array_[*]} != *"$1"* ]] && _object_qpkgs_justinstalled_array_+=("$1")
    }
QPKGs.JustInstalled.Array()
    {
    echo -n "${_object_qpkgs_justinstalled_array_[@]}"
    }
QPKGs.JustInstalled.Clear()
    {
    [[ $_object_qpkgs_justinstalled_flag_ != 'true' ]] && return
    _object_qpkgs_justinstalled_flag_=false
    DebugVar _object_qpkgs_justinstalled_flag_
    }
QPKGs.JustInstalled.Count()
    {
    echo "${#_object_qpkgs_justinstalled_array_[@]}"
    }
QPKGs.JustInstalled.Disable()
    {
    [[ $_object_qpkgs_justinstalled_enable_ != 'true' ]] && return
    _object_qpkgs_justinstalled_enable_=false
    DebugVar _object_qpkgs_justinstalled_enable_
    }
QPKGs.JustInstalled.Enable()
    {
    [[ $_object_qpkgs_justinstalled_enable_ = 'true' ]] && return
    _object_qpkgs_justinstalled_enable_=true
    DebugVar _object_qpkgs_justinstalled_enable_
    }
QPKGs.JustInstalled.Enumerate()
    {
    ((_object_qpkgs_justinstalled_array_index_++))
    if [[ $_object_qpkgs_justinstalled_array_index_ -gt ${#_object_qpkgs_justinstalled_array_[@]} ]]; then
        _object_qpkgs_justinstalled_array_index_=1
    fi
    }
QPKGs.JustInstalled.Exist()
    {
    [[ ${_object_qpkgs_justinstalled_array_[*]} == *"$1"* ]]
    }
QPKGs.JustInstalled.First()
    {
    echo "${_object_qpkgs_justinstalled_array_[0]}"
    }
QPKGs.JustInstalled.GetCurrent()
    {
    echo -n "${_object_qpkgs_justinstalled_array_[((_object_qpkgs_justinstalled_array_index_-1))]}"
    }
QPKGs.JustInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_justinstalled_array_[@]} ]] && index=${#_object_qpkgs_justinstalled_array_[@]}
    echo -n "${_object_qpkgs_justinstalled_array_[((index-1))]}"
    }
QPKGs.JustInstalled.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_justinstalled_array_[@]} ]]; then
            _object_qpkgs_justinstalled_array_index_=${#_object_qpkgs_justinstalled_array_[@]}
        else
            _object_qpkgs_justinstalled_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_justinstalled_array_index_
    fi
    }
QPKGs.JustInstalled.Init()
    {
    _object_qpkgs_justinstalled_value_=0
    _object_qpkgs_justinstalled_text_=''
    _object_qpkgs_justinstalled_flag_=false
    _object_qpkgs_justinstalled_enable_=false
    _object_qpkgs_justinstalled_array_+=()
    _object_qpkgs_justinstalled_array_index_=1
    _object_qpkgs_justinstalled_path_=''
    }
QPKGs.JustInstalled.IsAny()
    {
    [[ ${#_object_qpkgs_justinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.JustInstalled.IsDisabled()
    {
    [[ $_object_qpkgs_justinstalled_enable_ != 'true' ]]
    }
QPKGs.JustInstalled.IsEnabled()
    {
    [[ $_object_qpkgs_justinstalled_enable_ = 'true' ]]
    }
QPKGs.JustInstalled.IsNone()
    {
    [[ ${#_object_qpkgs_justinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.JustInstalled.IsNot()
    {
    [[ $_object_qpkgs_justinstalled_flag_ != 'true' ]]
    }
QPKGs.JustInstalled.IsSet()
    {
    [[ $_object_qpkgs_justinstalled_flag_ = 'true' ]]
    }
QPKGs.JustInstalled.List()
    {
    echo -n "${_object_qpkgs_justinstalled_array_[*]}"
    }
QPKGs.JustInstalled.ListComma()
    {
    echo -n "${_object_qpkgs_justinstalled_array_[*]}" | tr ' ' ','
    }
QPKGs.JustInstalled.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_justinstalled_path_="$2"
    else
        echo -n "$_object_qpkgs_justinstalled_path_"
    fi
    }
QPKGs.JustInstalled.Remove()
    {
    [[ ${_object_qpkgs_justinstalled_array_[*]} == *"$1"* ]] && _object_qpkgs_justinstalled_array_=("${_object_qpkgs_justinstalled_array_[@]/$1}")
    }
QPKGs.JustInstalled.Set()
    {
    [[ $_object_qpkgs_justinstalled_flag_ = 'true' ]] && return
    _object_qpkgs_justinstalled_flag_=true
    DebugVar _object_qpkgs_justinstalled_flag_
    }
QPKGs.JustInstalled.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_justinstalled_text_="$2"
    else
        echo -n "$_object_qpkgs_justinstalled_text_"
    fi
    }
QPKGs.JustInstalled.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_justinstalled_value_=$2
    else
        echo -n $_object_qpkgs_justinstalled_value_
    fi
    }
QPKGs.JustInstalled.Init

QPKGs.Names.Add()
    {
    [[ ${_object_qpkgs_names_array_[*]} != *"$1"* ]] && _object_qpkgs_names_array_+=("$1")
    }
QPKGs.Names.Array()
    {
    echo -n "${_object_qpkgs_names_array_[@]}"
    }
QPKGs.Names.Clear()
    {
    [[ $_object_qpkgs_names_flag_ != 'true' ]] && return
    _object_qpkgs_names_flag_=false
    DebugVar _object_qpkgs_names_flag_
    }
QPKGs.Names.Count()
    {
    echo "${#_object_qpkgs_names_array_[@]}"
    }
QPKGs.Names.Disable()
    {
    [[ $_object_qpkgs_names_enable_ != 'true' ]] && return
    _object_qpkgs_names_enable_=false
    DebugVar _object_qpkgs_names_enable_
    }
QPKGs.Names.Enable()
    {
    [[ $_object_qpkgs_names_enable_ = 'true' ]] && return
    _object_qpkgs_names_enable_=true
    DebugVar _object_qpkgs_names_enable_
    }
QPKGs.Names.Enumerate()
    {
    ((_object_qpkgs_names_array_index_++))
    if [[ $_object_qpkgs_names_array_index_ -gt ${#_object_qpkgs_names_array_[@]} ]]; then
        _object_qpkgs_names_array_index_=1
    fi
    }
QPKGs.Names.Exist()
    {
    [[ ${_object_qpkgs_names_array_[*]} == *"$1"* ]]
    }
QPKGs.Names.First()
    {
    echo "${_object_qpkgs_names_array_[0]}"
    }
QPKGs.Names.GetCurrent()
    {
    echo -n "${_object_qpkgs_names_array_[((_object_qpkgs_names_array_index_-1))]}"
    }
QPKGs.Names.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_names_array_[@]} ]] && index=${#_object_qpkgs_names_array_[@]}
    echo -n "${_object_qpkgs_names_array_[((index-1))]}"
    }
QPKGs.Names.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_names_array_[@]} ]]; then
            _object_qpkgs_names_array_index_=${#_object_qpkgs_names_array_[@]}
        else
            _object_qpkgs_names_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_names_array_index_
    fi
    }
QPKGs.Names.Init()
    {
    _object_qpkgs_names_value_=0
    _object_qpkgs_names_text_=''
    _object_qpkgs_names_flag_=false
    _object_qpkgs_names_enable_=false
    _object_qpkgs_names_array_+=()
    _object_qpkgs_names_array_index_=1
    _object_qpkgs_names_path_=''
    }
QPKGs.Names.IsAny()
    {
    [[ ${#_object_qpkgs_names_array_[@]} -gt 0 ]]
    }
QPKGs.Names.IsDisabled()
    {
    [[ $_object_qpkgs_names_enable_ != 'true' ]]
    }
QPKGs.Names.IsEnabled()
    {
    [[ $_object_qpkgs_names_enable_ = 'true' ]]
    }
QPKGs.Names.IsNone()
    {
    [[ ${#_object_qpkgs_names_array_[@]} -eq 0 ]]
    }
QPKGs.Names.IsNot()
    {
    [[ $_object_qpkgs_names_flag_ != 'true' ]]
    }
QPKGs.Names.IsSet()
    {
    [[ $_object_qpkgs_names_flag_ = 'true' ]]
    }
QPKGs.Names.List()
    {
    echo -n "${_object_qpkgs_names_array_[*]}"
    }
QPKGs.Names.ListComma()
    {
    echo -n "${_object_qpkgs_names_array_[*]}" | tr ' ' ','
    }
QPKGs.Names.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_names_path_="$2"
    else
        echo -n "$_object_qpkgs_names_path_"
    fi
    }
QPKGs.Names.Remove()
    {
    [[ ${_object_qpkgs_names_array_[*]} == *"$1"* ]] && _object_qpkgs_names_array_=("${_object_qpkgs_names_array_[@]/$1}")
    }
QPKGs.Names.Set()
    {
    [[ $_object_qpkgs_names_flag_ = 'true' ]] && return
    _object_qpkgs_names_flag_=true
    DebugVar _object_qpkgs_names_flag_
    }
QPKGs.Names.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_names_text_="$2"
    else
        echo -n "$_object_qpkgs_names_text_"
    fi
    }
QPKGs.Names.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_names_value_=$2
    else
        echo -n $_object_qpkgs_names_value_
    fi
    }
QPKGs.Names.Init

QPKGs.NotInstalled.Add()
    {
    [[ ${_object_qpkgs_notinstalled_array_[*]} != *"$1"* ]] && _object_qpkgs_notinstalled_array_+=("$1")
    }
QPKGs.NotInstalled.Array()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[@]}"
    }
QPKGs.NotInstalled.Clear()
    {
    [[ $_object_qpkgs_notinstalled_flag_ != 'true' ]] && return
    _object_qpkgs_notinstalled_flag_=false
    DebugVar _object_qpkgs_notinstalled_flag_
    }
QPKGs.NotInstalled.Count()
    {
    echo "${#_object_qpkgs_notinstalled_array_[@]}"
    }
QPKGs.NotInstalled.Disable()
    {
    [[ $_object_qpkgs_notinstalled_enable_ != 'true' ]] && return
    _object_qpkgs_notinstalled_enable_=false
    DebugVar _object_qpkgs_notinstalled_enable_
    }
QPKGs.NotInstalled.Enable()
    {
    [[ $_object_qpkgs_notinstalled_enable_ = 'true' ]] && return
    _object_qpkgs_notinstalled_enable_=true
    DebugVar _object_qpkgs_notinstalled_enable_
    }
QPKGs.NotInstalled.Enumerate()
    {
    ((_object_qpkgs_notinstalled_array_index_++))
    if [[ $_object_qpkgs_notinstalled_array_index_ -gt ${#_object_qpkgs_notinstalled_array_[@]} ]]; then
        _object_qpkgs_notinstalled_array_index_=1
    fi
    }
QPKGs.NotInstalled.Exist()
    {
    [[ ${_object_qpkgs_notinstalled_array_[*]} == *"$1"* ]]
    }
QPKGs.NotInstalled.First()
    {
    echo "${_object_qpkgs_notinstalled_array_[0]}"
    }
QPKGs.NotInstalled.GetCurrent()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[((_object_qpkgs_notinstalled_array_index_-1))]}"
    }
QPKGs.NotInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_notinstalled_array_[@]} ]] && index=${#_object_qpkgs_notinstalled_array_[@]}
    echo -n "${_object_qpkgs_notinstalled_array_[((index-1))]}"
    }
QPKGs.NotInstalled.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_notinstalled_array_[@]} ]]; then
            _object_qpkgs_notinstalled_array_index_=${#_object_qpkgs_notinstalled_array_[@]}
        else
            _object_qpkgs_notinstalled_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_notinstalled_array_index_
    fi
    }
QPKGs.NotInstalled.Init()
    {
    _object_qpkgs_notinstalled_value_=0
    _object_qpkgs_notinstalled_text_=''
    _object_qpkgs_notinstalled_flag_=false
    _object_qpkgs_notinstalled_enable_=false
    _object_qpkgs_notinstalled_array_+=()
    _object_qpkgs_notinstalled_array_index_=1
    _object_qpkgs_notinstalled_path_=''
    }
QPKGs.NotInstalled.IsAny()
    {
    [[ ${#_object_qpkgs_notinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.NotInstalled.IsDisabled()
    {
    [[ $_object_qpkgs_notinstalled_enable_ != 'true' ]]
    }
QPKGs.NotInstalled.IsEnabled()
    {
    [[ $_object_qpkgs_notinstalled_enable_ = 'true' ]]
    }
QPKGs.NotInstalled.IsNone()
    {
    [[ ${#_object_qpkgs_notinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.NotInstalled.IsNot()
    {
    [[ $_object_qpkgs_notinstalled_flag_ != 'true' ]]
    }
QPKGs.NotInstalled.IsSet()
    {
    [[ $_object_qpkgs_notinstalled_flag_ = 'true' ]]
    }
QPKGs.NotInstalled.List()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[*]}"
    }
QPKGs.NotInstalled.ListComma()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[*]}" | tr ' ' ','
    }
QPKGs.NotInstalled.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_notinstalled_path_="$2"
    else
        echo -n "$_object_qpkgs_notinstalled_path_"
    fi
    }
QPKGs.NotInstalled.Remove()
    {
    [[ ${_object_qpkgs_notinstalled_array_[*]} == *"$1"* ]] && _object_qpkgs_notinstalled_array_=("${_object_qpkgs_notinstalled_array_[@]/$1}")
    }
QPKGs.NotInstalled.Set()
    {
    [[ $_object_qpkgs_notinstalled_flag_ = 'true' ]] && return
    _object_qpkgs_notinstalled_flag_=true
    DebugVar _object_qpkgs_notinstalled_flag_
    }
QPKGs.NotInstalled.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_notinstalled_text_="$2"
    else
        echo -n "$_object_qpkgs_notinstalled_text_"
    fi
    }
QPKGs.NotInstalled.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_notinstalled_value_=$2
    else
        echo -n $_object_qpkgs_notinstalled_value_
    fi
    }
QPKGs.NotInstalled.Init

QPKGs.ToBackup.Add()
    {
    [[ ${_object_qpkgs_tobackup_array_[*]} != *"$1"* ]] && _object_qpkgs_tobackup_array_+=("$1")
    }
QPKGs.ToBackup.Array()
    {
    echo -n "${_object_qpkgs_tobackup_array_[@]}"
    }
QPKGs.ToBackup.Clear()
    {
    [[ $_object_qpkgs_tobackup_flag_ != 'true' ]] && return
    _object_qpkgs_tobackup_flag_=false
    DebugVar _object_qpkgs_tobackup_flag_
    }
QPKGs.ToBackup.Count()
    {
    echo "${#_object_qpkgs_tobackup_array_[@]}"
    }
QPKGs.ToBackup.Disable()
    {
    [[ $_object_qpkgs_tobackup_enable_ != 'true' ]] && return
    _object_qpkgs_tobackup_enable_=false
    DebugVar _object_qpkgs_tobackup_enable_
    }
QPKGs.ToBackup.Enable()
    {
    [[ $_object_qpkgs_tobackup_enable_ = 'true' ]] && return
    _object_qpkgs_tobackup_enable_=true
    DebugVar _object_qpkgs_tobackup_enable_
    }
QPKGs.ToBackup.Enumerate()
    {
    ((_object_qpkgs_tobackup_array_index_++))
    if [[ $_object_qpkgs_tobackup_array_index_ -gt ${#_object_qpkgs_tobackup_array_[@]} ]]; then
        _object_qpkgs_tobackup_array_index_=1
    fi
    }
QPKGs.ToBackup.Exist()
    {
    [[ ${_object_qpkgs_tobackup_array_[*]} == *"$1"* ]]
    }
QPKGs.ToBackup.First()
    {
    echo "${_object_qpkgs_tobackup_array_[0]}"
    }
QPKGs.ToBackup.GetCurrent()
    {
    echo -n "${_object_qpkgs_tobackup_array_[((_object_qpkgs_tobackup_array_index_-1))]}"
    }
QPKGs.ToBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_tobackup_array_[@]} ]] && index=${#_object_qpkgs_tobackup_array_[@]}
    echo -n "${_object_qpkgs_tobackup_array_[((index-1))]}"
    }
QPKGs.ToBackup.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_tobackup_array_[@]} ]]; then
            _object_qpkgs_tobackup_array_index_=${#_object_qpkgs_tobackup_array_[@]}
        else
            _object_qpkgs_tobackup_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_tobackup_array_index_
    fi
    }
QPKGs.ToBackup.Init()
    {
    _object_qpkgs_tobackup_value_=0
    _object_qpkgs_tobackup_text_=''
    _object_qpkgs_tobackup_flag_=false
    _object_qpkgs_tobackup_enable_=false
    _object_qpkgs_tobackup_array_+=()
    _object_qpkgs_tobackup_array_index_=1
    _object_qpkgs_tobackup_path_=''
    }
QPKGs.ToBackup.IsAny()
    {
    [[ ${#_object_qpkgs_tobackup_array_[@]} -gt 0 ]]
    }
QPKGs.ToBackup.IsDisabled()
    {
    [[ $_object_qpkgs_tobackup_enable_ != 'true' ]]
    }
QPKGs.ToBackup.IsEnabled()
    {
    [[ $_object_qpkgs_tobackup_enable_ = 'true' ]]
    }
QPKGs.ToBackup.IsNone()
    {
    [[ ${#_object_qpkgs_tobackup_array_[@]} -eq 0 ]]
    }
QPKGs.ToBackup.IsNot()
    {
    [[ $_object_qpkgs_tobackup_flag_ != 'true' ]]
    }
QPKGs.ToBackup.IsSet()
    {
    [[ $_object_qpkgs_tobackup_flag_ = 'true' ]]
    }
QPKGs.ToBackup.List()
    {
    echo -n "${_object_qpkgs_tobackup_array_[*]}"
    }
QPKGs.ToBackup.ListComma()
    {
    echo -n "${_object_qpkgs_tobackup_array_[*]}" | tr ' ' ','
    }
QPKGs.ToBackup.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_tobackup_path_="$2"
    else
        echo -n "$_object_qpkgs_tobackup_path_"
    fi
    }
QPKGs.ToBackup.Remove()
    {
    [[ ${_object_qpkgs_tobackup_array_[*]} == *"$1"* ]] && _object_qpkgs_tobackup_array_=("${_object_qpkgs_tobackup_array_[@]/$1}")
    }
QPKGs.ToBackup.Set()
    {
    [[ $_object_qpkgs_tobackup_flag_ = 'true' ]] && return
    _object_qpkgs_tobackup_flag_=true
    DebugVar _object_qpkgs_tobackup_flag_
    }
QPKGs.ToBackup.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_tobackup_text_="$2"
    else
        echo -n "$_object_qpkgs_tobackup_text_"
    fi
    }
QPKGs.ToBackup.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_tobackup_value_=$2
    else
        echo -n $_object_qpkgs_tobackup_value_
    fi
    }
QPKGs.ToBackup.Init

QPKGs.ToDownload.Add()
    {
    [[ ${_object_qpkgs_todownload_array_[*]} != *"$1"* ]] && _object_qpkgs_todownload_array_+=("$1")
    }
QPKGs.ToDownload.Array()
    {
    echo -n "${_object_qpkgs_todownload_array_[@]}"
    }
QPKGs.ToDownload.Clear()
    {
    [[ $_object_qpkgs_todownload_flag_ != 'true' ]] && return
    _object_qpkgs_todownload_flag_=false
    DebugVar _object_qpkgs_todownload_flag_
    }
QPKGs.ToDownload.Count()
    {
    echo "${#_object_qpkgs_todownload_array_[@]}"
    }
QPKGs.ToDownload.Disable()
    {
    [[ $_object_qpkgs_todownload_enable_ != 'true' ]] && return
    _object_qpkgs_todownload_enable_=false
    DebugVar _object_qpkgs_todownload_enable_
    }
QPKGs.ToDownload.Enable()
    {
    [[ $_object_qpkgs_todownload_enable_ = 'true' ]] && return
    _object_qpkgs_todownload_enable_=true
    DebugVar _object_qpkgs_todownload_enable_
    }
QPKGs.ToDownload.Enumerate()
    {
    ((_object_qpkgs_todownload_array_index_++))
    if [[ $_object_qpkgs_todownload_array_index_ -gt ${#_object_qpkgs_todownload_array_[@]} ]]; then
        _object_qpkgs_todownload_array_index_=1
    fi
    }
QPKGs.ToDownload.Exist()
    {
    [[ ${_object_qpkgs_todownload_array_[*]} == *"$1"* ]]
    }
QPKGs.ToDownload.First()
    {
    echo "${_object_qpkgs_todownload_array_[0]}"
    }
QPKGs.ToDownload.GetCurrent()
    {
    echo -n "${_object_qpkgs_todownload_array_[((_object_qpkgs_todownload_array_index_-1))]}"
    }
QPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_todownload_array_[@]} ]] && index=${#_object_qpkgs_todownload_array_[@]}
    echo -n "${_object_qpkgs_todownload_array_[((index-1))]}"
    }
QPKGs.ToDownload.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_todownload_array_[@]} ]]; then
            _object_qpkgs_todownload_array_index_=${#_object_qpkgs_todownload_array_[@]}
        else
            _object_qpkgs_todownload_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_todownload_array_index_
    fi
    }
QPKGs.ToDownload.Init()
    {
    _object_qpkgs_todownload_value_=0
    _object_qpkgs_todownload_text_=''
    _object_qpkgs_todownload_flag_=false
    _object_qpkgs_todownload_enable_=false
    _object_qpkgs_todownload_array_+=()
    _object_qpkgs_todownload_array_index_=1
    _object_qpkgs_todownload_path_=''
    }
QPKGs.ToDownload.IsAny()
    {
    [[ ${#_object_qpkgs_todownload_array_[@]} -gt 0 ]]
    }
QPKGs.ToDownload.IsDisabled()
    {
    [[ $_object_qpkgs_todownload_enable_ != 'true' ]]
    }
QPKGs.ToDownload.IsEnabled()
    {
    [[ $_object_qpkgs_todownload_enable_ = 'true' ]]
    }
QPKGs.ToDownload.IsNone()
    {
    [[ ${#_object_qpkgs_todownload_array_[@]} -eq 0 ]]
    }
QPKGs.ToDownload.IsNot()
    {
    [[ $_object_qpkgs_todownload_flag_ != 'true' ]]
    }
QPKGs.ToDownload.IsSet()
    {
    [[ $_object_qpkgs_todownload_flag_ = 'true' ]]
    }
QPKGs.ToDownload.List()
    {
    echo -n "${_object_qpkgs_todownload_array_[*]}"
    }
QPKGs.ToDownload.ListComma()
    {
    echo -n "${_object_qpkgs_todownload_array_[*]}" | tr ' ' ','
    }
QPKGs.ToDownload.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_todownload_path_="$2"
    else
        echo -n "$_object_qpkgs_todownload_path_"
    fi
    }
QPKGs.ToDownload.Remove()
    {
    [[ ${_object_qpkgs_todownload_array_[*]} == *"$1"* ]] && _object_qpkgs_todownload_array_=("${_object_qpkgs_todownload_array_[@]/$1}")
    }
QPKGs.ToDownload.Set()
    {
    [[ $_object_qpkgs_todownload_flag_ = 'true' ]] && return
    _object_qpkgs_todownload_flag_=true
    DebugVar _object_qpkgs_todownload_flag_
    }
QPKGs.ToDownload.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_todownload_text_="$2"
    else
        echo -n "$_object_qpkgs_todownload_text_"
    fi
    }
QPKGs.ToDownload.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_todownload_value_=$2
    else
        echo -n $_object_qpkgs_todownload_value_
    fi
    }
QPKGs.ToDownload.Init

QPKGs.ToForceUpgrade.Add()
    {
    [[ ${_object_qpkgs_toforceupgrade_array_[*]} != *"$1"* ]] && _object_qpkgs_toforceupgrade_array_+=("$1")
    }
QPKGs.ToForceUpgrade.Array()
    {
    echo -n "${_object_qpkgs_toforceupgrade_array_[@]}"
    }
QPKGs.ToForceUpgrade.Clear()
    {
    [[ $_object_qpkgs_toforceupgrade_flag_ != 'true' ]] && return
    _object_qpkgs_toforceupgrade_flag_=false
    DebugVar _object_qpkgs_toforceupgrade_flag_
    }
QPKGs.ToForceUpgrade.Count()
    {
    echo "${#_object_qpkgs_toforceupgrade_array_[@]}"
    }
QPKGs.ToForceUpgrade.Disable()
    {
    [[ $_object_qpkgs_toforceupgrade_enable_ != 'true' ]] && return
    _object_qpkgs_toforceupgrade_enable_=false
    DebugVar _object_qpkgs_toforceupgrade_enable_
    }
QPKGs.ToForceUpgrade.Enable()
    {
    [[ $_object_qpkgs_toforceupgrade_enable_ = 'true' ]] && return
    _object_qpkgs_toforceupgrade_enable_=true
    DebugVar _object_qpkgs_toforceupgrade_enable_
    }
QPKGs.ToForceUpgrade.Enumerate()
    {
    ((_object_qpkgs_toforceupgrade_array_index_++))
    if [[ $_object_qpkgs_toforceupgrade_array_index_ -gt ${#_object_qpkgs_toforceupgrade_array_[@]} ]]; then
        _object_qpkgs_toforceupgrade_array_index_=1
    fi
    }
QPKGs.ToForceUpgrade.Exist()
    {
    [[ ${_object_qpkgs_toforceupgrade_array_[*]} == *"$1"* ]]
    }
QPKGs.ToForceUpgrade.First()
    {
    echo "${_object_qpkgs_toforceupgrade_array_[0]}"
    }
QPKGs.ToForceUpgrade.GetCurrent()
    {
    echo -n "${_object_qpkgs_toforceupgrade_array_[((_object_qpkgs_toforceupgrade_array_index_-1))]}"
    }
QPKGs.ToForceUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toforceupgrade_array_[@]} ]] && index=${#_object_qpkgs_toforceupgrade_array_[@]}
    echo -n "${_object_qpkgs_toforceupgrade_array_[((index-1))]}"
    }
QPKGs.ToForceUpgrade.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_toforceupgrade_array_[@]} ]]; then
            _object_qpkgs_toforceupgrade_array_index_=${#_object_qpkgs_toforceupgrade_array_[@]}
        else
            _object_qpkgs_toforceupgrade_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_toforceupgrade_array_index_
    fi
    }
QPKGs.ToForceUpgrade.Init()
    {
    _object_qpkgs_toforceupgrade_value_=0
    _object_qpkgs_toforceupgrade_text_=''
    _object_qpkgs_toforceupgrade_flag_=false
    _object_qpkgs_toforceupgrade_enable_=false
    _object_qpkgs_toforceupgrade_array_+=()
    _object_qpkgs_toforceupgrade_array_index_=1
    _object_qpkgs_toforceupgrade_path_=''
    }
QPKGs.ToForceUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_toforceupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ToForceUpgrade.IsDisabled()
    {
    [[ $_object_qpkgs_toforceupgrade_enable_ != 'true' ]]
    }
QPKGs.ToForceUpgrade.IsEnabled()
    {
    [[ $_object_qpkgs_toforceupgrade_enable_ = 'true' ]]
    }
QPKGs.ToForceUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_toforceupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ToForceUpgrade.IsNot()
    {
    [[ $_object_qpkgs_toforceupgrade_flag_ != 'true' ]]
    }
QPKGs.ToForceUpgrade.IsSet()
    {
    [[ $_object_qpkgs_toforceupgrade_flag_ = 'true' ]]
    }
QPKGs.ToForceUpgrade.List()
    {
    echo -n "${_object_qpkgs_toforceupgrade_array_[*]}"
    }
QPKGs.ToForceUpgrade.ListComma()
    {
    echo -n "${_object_qpkgs_toforceupgrade_array_[*]}" | tr ' ' ','
    }
QPKGs.ToForceUpgrade.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toforceupgrade_path_="$2"
    else
        echo -n "$_object_qpkgs_toforceupgrade_path_"
    fi
    }
QPKGs.ToForceUpgrade.Remove()
    {
    [[ ${_object_qpkgs_toforceupgrade_array_[*]} == *"$1"* ]] && _object_qpkgs_toforceupgrade_array_=("${_object_qpkgs_toforceupgrade_array_[@]/$1}")
    }
QPKGs.ToForceUpgrade.Set()
    {
    [[ $_object_qpkgs_toforceupgrade_flag_ = 'true' ]] && return
    _object_qpkgs_toforceupgrade_flag_=true
    DebugVar _object_qpkgs_toforceupgrade_flag_
    }
QPKGs.ToForceUpgrade.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toforceupgrade_text_="$2"
    else
        echo -n "$_object_qpkgs_toforceupgrade_text_"
    fi
    }
QPKGs.ToForceUpgrade.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toforceupgrade_value_=$2
    else
        echo -n $_object_qpkgs_toforceupgrade_value_
    fi
    }
QPKGs.ToForceUpgrade.Init

QPKGs.ToInstall.Add()
    {
    [[ ${_object_qpkgs_toinstall_array_[*]} != *"$1"* ]] && _object_qpkgs_toinstall_array_+=("$1")
    }
QPKGs.ToInstall.Array()
    {
    echo -n "${_object_qpkgs_toinstall_array_[@]}"
    }
QPKGs.ToInstall.Clear()
    {
    [[ $_object_qpkgs_toinstall_flag_ != 'true' ]] && return
    _object_qpkgs_toinstall_flag_=false
    DebugVar _object_qpkgs_toinstall_flag_
    }
QPKGs.ToInstall.Count()
    {
    echo "${#_object_qpkgs_toinstall_array_[@]}"
    }
QPKGs.ToInstall.Disable()
    {
    [[ $_object_qpkgs_toinstall_enable_ != 'true' ]] && return
    _object_qpkgs_toinstall_enable_=false
    DebugVar _object_qpkgs_toinstall_enable_
    }
QPKGs.ToInstall.Enable()
    {
    [[ $_object_qpkgs_toinstall_enable_ = 'true' ]] && return
    _object_qpkgs_toinstall_enable_=true
    DebugVar _object_qpkgs_toinstall_enable_
    }
QPKGs.ToInstall.Enumerate()
    {
    ((_object_qpkgs_toinstall_array_index_++))
    if [[ $_object_qpkgs_toinstall_array_index_ -gt ${#_object_qpkgs_toinstall_array_[@]} ]]; then
        _object_qpkgs_toinstall_array_index_=1
    fi
    }
QPKGs.ToInstall.Exist()
    {
    [[ ${_object_qpkgs_toinstall_array_[*]} == *"$1"* ]]
    }
QPKGs.ToInstall.First()
    {
    echo "${_object_qpkgs_toinstall_array_[0]}"
    }
QPKGs.ToInstall.GetCurrent()
    {
    echo -n "${_object_qpkgs_toinstall_array_[((_object_qpkgs_toinstall_array_index_-1))]}"
    }
QPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toinstall_array_[@]} ]] && index=${#_object_qpkgs_toinstall_array_[@]}
    echo -n "${_object_qpkgs_toinstall_array_[((index-1))]}"
    }
QPKGs.ToInstall.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_toinstall_array_[@]} ]]; then
            _object_qpkgs_toinstall_array_index_=${#_object_qpkgs_toinstall_array_[@]}
        else
            _object_qpkgs_toinstall_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_toinstall_array_index_
    fi
    }
QPKGs.ToInstall.Init()
    {
    _object_qpkgs_toinstall_value_=0
    _object_qpkgs_toinstall_text_=''
    _object_qpkgs_toinstall_flag_=false
    _object_qpkgs_toinstall_enable_=false
    _object_qpkgs_toinstall_array_+=()
    _object_qpkgs_toinstall_array_index_=1
    _object_qpkgs_toinstall_path_=''
    }
QPKGs.ToInstall.IsAny()
    {
    [[ ${#_object_qpkgs_toinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToInstall.IsDisabled()
    {
    [[ $_object_qpkgs_toinstall_enable_ != 'true' ]]
    }
QPKGs.ToInstall.IsEnabled()
    {
    [[ $_object_qpkgs_toinstall_enable_ = 'true' ]]
    }
QPKGs.ToInstall.IsNone()
    {
    [[ ${#_object_qpkgs_toinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToInstall.IsNot()
    {
    [[ $_object_qpkgs_toinstall_flag_ != 'true' ]]
    }
QPKGs.ToInstall.IsSet()
    {
    [[ $_object_qpkgs_toinstall_flag_ = 'true' ]]
    }
QPKGs.ToInstall.List()
    {
    echo -n "${_object_qpkgs_toinstall_array_[*]}"
    }
QPKGs.ToInstall.ListComma()
    {
    echo -n "${_object_qpkgs_toinstall_array_[*]}" | tr ' ' ','
    }
QPKGs.ToInstall.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toinstall_path_="$2"
    else
        echo -n "$_object_qpkgs_toinstall_path_"
    fi
    }
QPKGs.ToInstall.Remove()
    {
    [[ ${_object_qpkgs_toinstall_array_[*]} == *"$1"* ]] && _object_qpkgs_toinstall_array_=("${_object_qpkgs_toinstall_array_[@]/$1}")
    }
QPKGs.ToInstall.Set()
    {
    [[ $_object_qpkgs_toinstall_flag_ = 'true' ]] && return
    _object_qpkgs_toinstall_flag_=true
    DebugVar _object_qpkgs_toinstall_flag_
    }
QPKGs.ToInstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toinstall_text_="$2"
    else
        echo -n "$_object_qpkgs_toinstall_text_"
    fi
    }
QPKGs.ToInstall.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toinstall_value_=$2
    else
        echo -n $_object_qpkgs_toinstall_value_
    fi
    }
QPKGs.ToInstall.Init

QPKGs.ToReinstall.Add()
    {
    [[ ${_object_qpkgs_toreinstall_array_[*]} != *"$1"* ]] && _object_qpkgs_toreinstall_array_+=("$1")
    }
QPKGs.ToReinstall.Array()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[@]}"
    }
QPKGs.ToReinstall.Clear()
    {
    [[ $_object_qpkgs_toreinstall_flag_ != 'true' ]] && return
    _object_qpkgs_toreinstall_flag_=false
    DebugVar _object_qpkgs_toreinstall_flag_
    }
QPKGs.ToReinstall.Count()
    {
    echo "${#_object_qpkgs_toreinstall_array_[@]}"
    }
QPKGs.ToReinstall.Disable()
    {
    [[ $_object_qpkgs_toreinstall_enable_ != 'true' ]] && return
    _object_qpkgs_toreinstall_enable_=false
    DebugVar _object_qpkgs_toreinstall_enable_
    }
QPKGs.ToReinstall.Enable()
    {
    [[ $_object_qpkgs_toreinstall_enable_ = 'true' ]] && return
    _object_qpkgs_toreinstall_enable_=true
    DebugVar _object_qpkgs_toreinstall_enable_
    }
QPKGs.ToReinstall.Enumerate()
    {
    ((_object_qpkgs_toreinstall_array_index_++))
    if [[ $_object_qpkgs_toreinstall_array_index_ -gt ${#_object_qpkgs_toreinstall_array_[@]} ]]; then
        _object_qpkgs_toreinstall_array_index_=1
    fi
    }
QPKGs.ToReinstall.Exist()
    {
    [[ ${_object_qpkgs_toreinstall_array_[*]} == *"$1"* ]]
    }
QPKGs.ToReinstall.First()
    {
    echo "${_object_qpkgs_toreinstall_array_[0]}"
    }
QPKGs.ToReinstall.GetCurrent()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[((_object_qpkgs_toreinstall_array_index_-1))]}"
    }
QPKGs.ToReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toreinstall_array_[@]} ]] && index=${#_object_qpkgs_toreinstall_array_[@]}
    echo -n "${_object_qpkgs_toreinstall_array_[((index-1))]}"
    }
QPKGs.ToReinstall.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_toreinstall_array_[@]} ]]; then
            _object_qpkgs_toreinstall_array_index_=${#_object_qpkgs_toreinstall_array_[@]}
        else
            _object_qpkgs_toreinstall_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_toreinstall_array_index_
    fi
    }
QPKGs.ToReinstall.Init()
    {
    _object_qpkgs_toreinstall_value_=0
    _object_qpkgs_toreinstall_text_=''
    _object_qpkgs_toreinstall_flag_=false
    _object_qpkgs_toreinstall_enable_=false
    _object_qpkgs_toreinstall_array_+=()
    _object_qpkgs_toreinstall_array_index_=1
    _object_qpkgs_toreinstall_path_=''
    }
QPKGs.ToReinstall.IsAny()
    {
    [[ ${#_object_qpkgs_toreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToReinstall.IsDisabled()
    {
    [[ $_object_qpkgs_toreinstall_enable_ != 'true' ]]
    }
QPKGs.ToReinstall.IsEnabled()
    {
    [[ $_object_qpkgs_toreinstall_enable_ = 'true' ]]
    }
QPKGs.ToReinstall.IsNone()
    {
    [[ ${#_object_qpkgs_toreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToReinstall.IsNot()
    {
    [[ $_object_qpkgs_toreinstall_flag_ != 'true' ]]
    }
QPKGs.ToReinstall.IsSet()
    {
    [[ $_object_qpkgs_toreinstall_flag_ = 'true' ]]
    }
QPKGs.ToReinstall.List()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[*]}"
    }
QPKGs.ToReinstall.ListComma()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[*]}" | tr ' ' ','
    }
QPKGs.ToReinstall.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toreinstall_path_="$2"
    else
        echo -n "$_object_qpkgs_toreinstall_path_"
    fi
    }
QPKGs.ToReinstall.Remove()
    {
    [[ ${_object_qpkgs_toreinstall_array_[*]} == *"$1"* ]] && _object_qpkgs_toreinstall_array_=("${_object_qpkgs_toreinstall_array_[@]/$1}")
    }
QPKGs.ToReinstall.Set()
    {
    [[ $_object_qpkgs_toreinstall_flag_ = 'true' ]] && return
    _object_qpkgs_toreinstall_flag_=true
    DebugVar _object_qpkgs_toreinstall_flag_
    }
QPKGs.ToReinstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toreinstall_text_="$2"
    else
        echo -n "$_object_qpkgs_toreinstall_text_"
    fi
    }
QPKGs.ToReinstall.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toreinstall_value_=$2
    else
        echo -n $_object_qpkgs_toreinstall_value_
    fi
    }
QPKGs.ToReinstall.Init

QPKGs.ToRestart.Add()
    {
    [[ ${_object_qpkgs_torestart_array_[*]} != *"$1"* ]] && _object_qpkgs_torestart_array_+=("$1")
    }
QPKGs.ToRestart.Array()
    {
    echo -n "${_object_qpkgs_torestart_array_[@]}"
    }
QPKGs.ToRestart.Clear()
    {
    [[ $_object_qpkgs_torestart_flag_ != 'true' ]] && return
    _object_qpkgs_torestart_flag_=false
    DebugVar _object_qpkgs_torestart_flag_
    }
QPKGs.ToRestart.Count()
    {
    echo "${#_object_qpkgs_torestart_array_[@]}"
    }
QPKGs.ToRestart.Disable()
    {
    [[ $_object_qpkgs_torestart_enable_ != 'true' ]] && return
    _object_qpkgs_torestart_enable_=false
    DebugVar _object_qpkgs_torestart_enable_
    }
QPKGs.ToRestart.Enable()
    {
    [[ $_object_qpkgs_torestart_enable_ = 'true' ]] && return
    _object_qpkgs_torestart_enable_=true
    DebugVar _object_qpkgs_torestart_enable_
    }
QPKGs.ToRestart.Enumerate()
    {
    ((_object_qpkgs_torestart_array_index_++))
    if [[ $_object_qpkgs_torestart_array_index_ -gt ${#_object_qpkgs_torestart_array_[@]} ]]; then
        _object_qpkgs_torestart_array_index_=1
    fi
    }
QPKGs.ToRestart.Exist()
    {
    [[ ${_object_qpkgs_torestart_array_[*]} == *"$1"* ]]
    }
QPKGs.ToRestart.First()
    {
    echo "${_object_qpkgs_torestart_array_[0]}"
    }
QPKGs.ToRestart.GetCurrent()
    {
    echo -n "${_object_qpkgs_torestart_array_[((_object_qpkgs_torestart_array_index_-1))]}"
    }
QPKGs.ToRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_torestart_array_[@]} ]] && index=${#_object_qpkgs_torestart_array_[@]}
    echo -n "${_object_qpkgs_torestart_array_[((index-1))]}"
    }
QPKGs.ToRestart.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_torestart_array_[@]} ]]; then
            _object_qpkgs_torestart_array_index_=${#_object_qpkgs_torestart_array_[@]}
        else
            _object_qpkgs_torestart_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_torestart_array_index_
    fi
    }
QPKGs.ToRestart.Init()
    {
    _object_qpkgs_torestart_value_=0
    _object_qpkgs_torestart_text_=''
    _object_qpkgs_torestart_flag_=false
    _object_qpkgs_torestart_enable_=false
    _object_qpkgs_torestart_array_+=()
    _object_qpkgs_torestart_array_index_=1
    _object_qpkgs_torestart_path_=''
    }
QPKGs.ToRestart.IsAny()
    {
    [[ ${#_object_qpkgs_torestart_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestart.IsDisabled()
    {
    [[ $_object_qpkgs_torestart_enable_ != 'true' ]]
    }
QPKGs.ToRestart.IsEnabled()
    {
    [[ $_object_qpkgs_torestart_enable_ = 'true' ]]
    }
QPKGs.ToRestart.IsNone()
    {
    [[ ${#_object_qpkgs_torestart_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestart.IsNot()
    {
    [[ $_object_qpkgs_torestart_flag_ != 'true' ]]
    }
QPKGs.ToRestart.IsSet()
    {
    [[ $_object_qpkgs_torestart_flag_ = 'true' ]]
    }
QPKGs.ToRestart.List()
    {
    echo -n "${_object_qpkgs_torestart_array_[*]}"
    }
QPKGs.ToRestart.ListComma()
    {
    echo -n "${_object_qpkgs_torestart_array_[*]}" | tr ' ' ','
    }
QPKGs.ToRestart.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestart_path_="$2"
    else
        echo -n "$_object_qpkgs_torestart_path_"
    fi
    }
QPKGs.ToRestart.Remove()
    {
    [[ ${_object_qpkgs_torestart_array_[*]} == *"$1"* ]] && _object_qpkgs_torestart_array_=("${_object_qpkgs_torestart_array_[@]/$1}")
    }
QPKGs.ToRestart.Set()
    {
    [[ $_object_qpkgs_torestart_flag_ = 'true' ]] && return
    _object_qpkgs_torestart_flag_=true
    DebugVar _object_qpkgs_torestart_flag_
    }
QPKGs.ToRestart.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestart_text_="$2"
    else
        echo -n "$_object_qpkgs_torestart_text_"
    fi
    }
QPKGs.ToRestart.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestart_value_=$2
    else
        echo -n $_object_qpkgs_torestart_value_
    fi
    }
QPKGs.ToRestart.Init

QPKGs.ToRestore.Add()
    {
    [[ ${_object_qpkgs_torestore_array_[*]} != *"$1"* ]] && _object_qpkgs_torestore_array_+=("$1")
    }
QPKGs.ToRestore.Array()
    {
    echo -n "${_object_qpkgs_torestore_array_[@]}"
    }
QPKGs.ToRestore.Clear()
    {
    [[ $_object_qpkgs_torestore_flag_ != 'true' ]] && return
    _object_qpkgs_torestore_flag_=false
    DebugVar _object_qpkgs_torestore_flag_
    }
QPKGs.ToRestore.Count()
    {
    echo "${#_object_qpkgs_torestore_array_[@]}"
    }
QPKGs.ToRestore.Disable()
    {
    [[ $_object_qpkgs_torestore_enable_ != 'true' ]] && return
    _object_qpkgs_torestore_enable_=false
    DebugVar _object_qpkgs_torestore_enable_
    }
QPKGs.ToRestore.Enable()
    {
    [[ $_object_qpkgs_torestore_enable_ = 'true' ]] && return
    _object_qpkgs_torestore_enable_=true
    DebugVar _object_qpkgs_torestore_enable_
    }
QPKGs.ToRestore.Enumerate()
    {
    ((_object_qpkgs_torestore_array_index_++))
    if [[ $_object_qpkgs_torestore_array_index_ -gt ${#_object_qpkgs_torestore_array_[@]} ]]; then
        _object_qpkgs_torestore_array_index_=1
    fi
    }
QPKGs.ToRestore.Exist()
    {
    [[ ${_object_qpkgs_torestore_array_[*]} == *"$1"* ]]
    }
QPKGs.ToRestore.First()
    {
    echo "${_object_qpkgs_torestore_array_[0]}"
    }
QPKGs.ToRestore.GetCurrent()
    {
    echo -n "${_object_qpkgs_torestore_array_[((_object_qpkgs_torestore_array_index_-1))]}"
    }
QPKGs.ToRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_torestore_array_[@]} ]] && index=${#_object_qpkgs_torestore_array_[@]}
    echo -n "${_object_qpkgs_torestore_array_[((index-1))]}"
    }
QPKGs.ToRestore.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_torestore_array_[@]} ]]; then
            _object_qpkgs_torestore_array_index_=${#_object_qpkgs_torestore_array_[@]}
        else
            _object_qpkgs_torestore_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_torestore_array_index_
    fi
    }
QPKGs.ToRestore.Init()
    {
    _object_qpkgs_torestore_value_=0
    _object_qpkgs_torestore_text_=''
    _object_qpkgs_torestore_flag_=false
    _object_qpkgs_torestore_enable_=false
    _object_qpkgs_torestore_array_+=()
    _object_qpkgs_torestore_array_index_=1
    _object_qpkgs_torestore_path_=''
    }
QPKGs.ToRestore.IsAny()
    {
    [[ ${#_object_qpkgs_torestore_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestore.IsDisabled()
    {
    [[ $_object_qpkgs_torestore_enable_ != 'true' ]]
    }
QPKGs.ToRestore.IsEnabled()
    {
    [[ $_object_qpkgs_torestore_enable_ = 'true' ]]
    }
QPKGs.ToRestore.IsNone()
    {
    [[ ${#_object_qpkgs_torestore_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestore.IsNot()
    {
    [[ $_object_qpkgs_torestore_flag_ != 'true' ]]
    }
QPKGs.ToRestore.IsSet()
    {
    [[ $_object_qpkgs_torestore_flag_ = 'true' ]]
    }
QPKGs.ToRestore.List()
    {
    echo -n "${_object_qpkgs_torestore_array_[*]}"
    }
QPKGs.ToRestore.ListComma()
    {
    echo -n "${_object_qpkgs_torestore_array_[*]}" | tr ' ' ','
    }
QPKGs.ToRestore.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestore_path_="$2"
    else
        echo -n "$_object_qpkgs_torestore_path_"
    fi
    }
QPKGs.ToRestore.Remove()
    {
    [[ ${_object_qpkgs_torestore_array_[*]} == *"$1"* ]] && _object_qpkgs_torestore_array_=("${_object_qpkgs_torestore_array_[@]/$1}")
    }
QPKGs.ToRestore.Set()
    {
    [[ $_object_qpkgs_torestore_flag_ = 'true' ]] && return
    _object_qpkgs_torestore_flag_=true
    DebugVar _object_qpkgs_torestore_flag_
    }
QPKGs.ToRestore.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestore_text_="$2"
    else
        echo -n "$_object_qpkgs_torestore_text_"
    fi
    }
QPKGs.ToRestore.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_torestore_value_=$2
    else
        echo -n $_object_qpkgs_torestore_value_
    fi
    }
QPKGs.ToRestore.Init

QPKGs.ToUninstall.Add()
    {
    [[ ${_object_qpkgs_touninstall_array_[*]} != *"$1"* ]] && _object_qpkgs_touninstall_array_+=("$1")
    }
QPKGs.ToUninstall.Array()
    {
    echo -n "${_object_qpkgs_touninstall_array_[@]}"
    }
QPKGs.ToUninstall.Clear()
    {
    [[ $_object_qpkgs_touninstall_flag_ != 'true' ]] && return
    _object_qpkgs_touninstall_flag_=false
    DebugVar _object_qpkgs_touninstall_flag_
    }
QPKGs.ToUninstall.Count()
    {
    echo "${#_object_qpkgs_touninstall_array_[@]}"
    }
QPKGs.ToUninstall.Disable()
    {
    [[ $_object_qpkgs_touninstall_enable_ != 'true' ]] && return
    _object_qpkgs_touninstall_enable_=false
    DebugVar _object_qpkgs_touninstall_enable_
    }
QPKGs.ToUninstall.Enable()
    {
    [[ $_object_qpkgs_touninstall_enable_ = 'true' ]] && return
    _object_qpkgs_touninstall_enable_=true
    DebugVar _object_qpkgs_touninstall_enable_
    }
QPKGs.ToUninstall.Enumerate()
    {
    ((_object_qpkgs_touninstall_array_index_++))
    if [[ $_object_qpkgs_touninstall_array_index_ -gt ${#_object_qpkgs_touninstall_array_[@]} ]]; then
        _object_qpkgs_touninstall_array_index_=1
    fi
    }
QPKGs.ToUninstall.Exist()
    {
    [[ ${_object_qpkgs_touninstall_array_[*]} == *"$1"* ]]
    }
QPKGs.ToUninstall.First()
    {
    echo "${_object_qpkgs_touninstall_array_[0]}"
    }
QPKGs.ToUninstall.GetCurrent()
    {
    echo -n "${_object_qpkgs_touninstall_array_[((_object_qpkgs_touninstall_array_index_-1))]}"
    }
QPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_touninstall_array_[@]} ]] && index=${#_object_qpkgs_touninstall_array_[@]}
    echo -n "${_object_qpkgs_touninstall_array_[((index-1))]}"
    }
QPKGs.ToUninstall.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_touninstall_array_[@]} ]]; then
            _object_qpkgs_touninstall_array_index_=${#_object_qpkgs_touninstall_array_[@]}
        else
            _object_qpkgs_touninstall_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_touninstall_array_index_
    fi
    }
QPKGs.ToUninstall.Init()
    {
    _object_qpkgs_touninstall_value_=0
    _object_qpkgs_touninstall_text_=''
    _object_qpkgs_touninstall_flag_=false
    _object_qpkgs_touninstall_enable_=false
    _object_qpkgs_touninstall_array_+=()
    _object_qpkgs_touninstall_array_index_=1
    _object_qpkgs_touninstall_path_=''
    }
QPKGs.ToUninstall.IsAny()
    {
    [[ ${#_object_qpkgs_touninstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToUninstall.IsDisabled()
    {
    [[ $_object_qpkgs_touninstall_enable_ != 'true' ]]
    }
QPKGs.ToUninstall.IsEnabled()
    {
    [[ $_object_qpkgs_touninstall_enable_ = 'true' ]]
    }
QPKGs.ToUninstall.IsNone()
    {
    [[ ${#_object_qpkgs_touninstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToUninstall.IsNot()
    {
    [[ $_object_qpkgs_touninstall_flag_ != 'true' ]]
    }
QPKGs.ToUninstall.IsSet()
    {
    [[ $_object_qpkgs_touninstall_flag_ = 'true' ]]
    }
QPKGs.ToUninstall.List()
    {
    echo -n "${_object_qpkgs_touninstall_array_[*]}"
    }
QPKGs.ToUninstall.ListComma()
    {
    echo -n "${_object_qpkgs_touninstall_array_[*]}" | tr ' ' ','
    }
QPKGs.ToUninstall.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_touninstall_path_="$2"
    else
        echo -n "$_object_qpkgs_touninstall_path_"
    fi
    }
QPKGs.ToUninstall.Remove()
    {
    [[ ${_object_qpkgs_touninstall_array_[*]} == *"$1"* ]] && _object_qpkgs_touninstall_array_=("${_object_qpkgs_touninstall_array_[@]/$1}")
    }
QPKGs.ToUninstall.Set()
    {
    [[ $_object_qpkgs_touninstall_flag_ = 'true' ]] && return
    _object_qpkgs_touninstall_flag_=true
    DebugVar _object_qpkgs_touninstall_flag_
    }
QPKGs.ToUninstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_touninstall_text_="$2"
    else
        echo -n "$_object_qpkgs_touninstall_text_"
    fi
    }
QPKGs.ToUninstall.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_touninstall_value_=$2
    else
        echo -n $_object_qpkgs_touninstall_value_
    fi
    }
QPKGs.ToUninstall.Init

QPKGs.ToUpgrade.Add()
    {
    [[ ${_object_qpkgs_toupgrade_array_[*]} != *"$1"* ]] && _object_qpkgs_toupgrade_array_+=("$1")
    }
QPKGs.ToUpgrade.Array()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[@]}"
    }
QPKGs.ToUpgrade.Clear()
    {
    [[ $_object_qpkgs_toupgrade_flag_ != 'true' ]] && return
    _object_qpkgs_toupgrade_flag_=false
    DebugVar _object_qpkgs_toupgrade_flag_
    }
QPKGs.ToUpgrade.Count()
    {
    echo "${#_object_qpkgs_toupgrade_array_[@]}"
    }
QPKGs.ToUpgrade.Disable()
    {
    [[ $_object_qpkgs_toupgrade_enable_ != 'true' ]] && return
    _object_qpkgs_toupgrade_enable_=false
    DebugVar _object_qpkgs_toupgrade_enable_
    }
QPKGs.ToUpgrade.Enable()
    {
    [[ $_object_qpkgs_toupgrade_enable_ = 'true' ]] && return
    _object_qpkgs_toupgrade_enable_=true
    DebugVar _object_qpkgs_toupgrade_enable_
    }
QPKGs.ToUpgrade.Enumerate()
    {
    ((_object_qpkgs_toupgrade_array_index_++))
    if [[ $_object_qpkgs_toupgrade_array_index_ -gt ${#_object_qpkgs_toupgrade_array_[@]} ]]; then
        _object_qpkgs_toupgrade_array_index_=1
    fi
    }
QPKGs.ToUpgrade.Exist()
    {
    [[ ${_object_qpkgs_toupgrade_array_[*]} == *"$1"* ]]
    }
QPKGs.ToUpgrade.First()
    {
    echo "${_object_qpkgs_toupgrade_array_[0]}"
    }
QPKGs.ToUpgrade.GetCurrent()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[((_object_qpkgs_toupgrade_array_index_-1))]}"
    }
QPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toupgrade_array_[@]} ]] && index=${#_object_qpkgs_toupgrade_array_[@]}
    echo -n "${_object_qpkgs_toupgrade_array_[((index-1))]}"
    }
QPKGs.ToUpgrade.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_toupgrade_array_[@]} ]]; then
            _object_qpkgs_toupgrade_array_index_=${#_object_qpkgs_toupgrade_array_[@]}
        else
            _object_qpkgs_toupgrade_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_toupgrade_array_index_
    fi
    }
QPKGs.ToUpgrade.Init()
    {
    _object_qpkgs_toupgrade_value_=0
    _object_qpkgs_toupgrade_text_=''
    _object_qpkgs_toupgrade_flag_=false
    _object_qpkgs_toupgrade_enable_=false
    _object_qpkgs_toupgrade_array_+=()
    _object_qpkgs_toupgrade_array_index_=1
    _object_qpkgs_toupgrade_path_=''
    }
QPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_toupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ToUpgrade.IsDisabled()
    {
    [[ $_object_qpkgs_toupgrade_enable_ != 'true' ]]
    }
QPKGs.ToUpgrade.IsEnabled()
    {
    [[ $_object_qpkgs_toupgrade_enable_ = 'true' ]]
    }
QPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_toupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ToUpgrade.IsNot()
    {
    [[ $_object_qpkgs_toupgrade_flag_ != 'true' ]]
    }
QPKGs.ToUpgrade.IsSet()
    {
    [[ $_object_qpkgs_toupgrade_flag_ = 'true' ]]
    }
QPKGs.ToUpgrade.List()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[*]}"
    }
QPKGs.ToUpgrade.ListComma()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[*]}" | tr ' ' ','
    }
QPKGs.ToUpgrade.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toupgrade_path_="$2"
    else
        echo -n "$_object_qpkgs_toupgrade_path_"
    fi
    }
QPKGs.ToUpgrade.Remove()
    {
    [[ ${_object_qpkgs_toupgrade_array_[*]} == *"$1"* ]] && _object_qpkgs_toupgrade_array_=("${_object_qpkgs_toupgrade_array_[@]/$1}")
    }
QPKGs.ToUpgrade.Set()
    {
    [[ $_object_qpkgs_toupgrade_flag_ = 'true' ]] && return
    _object_qpkgs_toupgrade_flag_=true
    DebugVar _object_qpkgs_toupgrade_flag_
    }
QPKGs.ToUpgrade.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toupgrade_text_="$2"
    else
        echo -n "$_object_qpkgs_toupgrade_text_"
    fi
    }
QPKGs.ToUpgrade.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_toupgrade_value_=$2
    else
        echo -n $_object_qpkgs_toupgrade_value_
    fi
    }
QPKGs.ToUpgrade.Init

QPKGs.Upgradable.Add()
    {
    [[ ${_object_qpkgs_upgradable_array_[*]} != *"$1"* ]] && _object_qpkgs_upgradable_array_+=("$1")
    }
QPKGs.Upgradable.Array()
    {
    echo -n "${_object_qpkgs_upgradable_array_[@]}"
    }
QPKGs.Upgradable.Clear()
    {
    [[ $_object_qpkgs_upgradable_flag_ != 'true' ]] && return
    _object_qpkgs_upgradable_flag_=false
    DebugVar _object_qpkgs_upgradable_flag_
    }
QPKGs.Upgradable.Count()
    {
    echo "${#_object_qpkgs_upgradable_array_[@]}"
    }
QPKGs.Upgradable.Disable()
    {
    [[ $_object_qpkgs_upgradable_enable_ != 'true' ]] && return
    _object_qpkgs_upgradable_enable_=false
    DebugVar _object_qpkgs_upgradable_enable_
    }
QPKGs.Upgradable.Enable()
    {
    [[ $_object_qpkgs_upgradable_enable_ = 'true' ]] && return
    _object_qpkgs_upgradable_enable_=true
    DebugVar _object_qpkgs_upgradable_enable_
    }
QPKGs.Upgradable.Enumerate()
    {
    ((_object_qpkgs_upgradable_array_index_++))
    if [[ $_object_qpkgs_upgradable_array_index_ -gt ${#_object_qpkgs_upgradable_array_[@]} ]]; then
        _object_qpkgs_upgradable_array_index_=1
    fi
    }
QPKGs.Upgradable.Exist()
    {
    [[ ${_object_qpkgs_upgradable_array_[*]} == *"$1"* ]]
    }
QPKGs.Upgradable.First()
    {
    echo "${_object_qpkgs_upgradable_array_[0]}"
    }
QPKGs.Upgradable.GetCurrent()
    {
    echo -n "${_object_qpkgs_upgradable_array_[((_object_qpkgs_upgradable_array_index_-1))]}"
    }
QPKGs.Upgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_upgradable_array_[@]} ]] && index=${#_object_qpkgs_upgradable_array_[@]}
    echo -n "${_object_qpkgs_upgradable_array_[((index-1))]}"
    }
QPKGs.Upgradable.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_qpkgs_upgradable_array_[@]} ]]; then
            _object_qpkgs_upgradable_array_index_=${#_object_qpkgs_upgradable_array_[@]}
        else
            _object_qpkgs_upgradable_array_index_=$2
        fi
    else
        echo -n $_object_qpkgs_upgradable_array_index_
    fi
    }
QPKGs.Upgradable.Init()
    {
    _object_qpkgs_upgradable_value_=0
    _object_qpkgs_upgradable_text_=''
    _object_qpkgs_upgradable_flag_=false
    _object_qpkgs_upgradable_enable_=false
    _object_qpkgs_upgradable_array_+=()
    _object_qpkgs_upgradable_array_index_=1
    _object_qpkgs_upgradable_path_=''
    }
QPKGs.Upgradable.IsAny()
    {
    [[ ${#_object_qpkgs_upgradable_array_[@]} -gt 0 ]]
    }
QPKGs.Upgradable.IsDisabled()
    {
    [[ $_object_qpkgs_upgradable_enable_ != 'true' ]]
    }
QPKGs.Upgradable.IsEnabled()
    {
    [[ $_object_qpkgs_upgradable_enable_ = 'true' ]]
    }
QPKGs.Upgradable.IsNone()
    {
    [[ ${#_object_qpkgs_upgradable_array_[@]} -eq 0 ]]
    }
QPKGs.Upgradable.IsNot()
    {
    [[ $_object_qpkgs_upgradable_flag_ != 'true' ]]
    }
QPKGs.Upgradable.IsSet()
    {
    [[ $_object_qpkgs_upgradable_flag_ = 'true' ]]
    }
QPKGs.Upgradable.List()
    {
    echo -n "${_object_qpkgs_upgradable_array_[*]}"
    }
QPKGs.Upgradable.ListComma()
    {
    echo -n "${_object_qpkgs_upgradable_array_[*]}" | tr ' ' ','
    }
QPKGs.Upgradable.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_upgradable_path_="$2"
    else
        echo -n "$_object_qpkgs_upgradable_path_"
    fi
    }
QPKGs.Upgradable.Remove()
    {
    [[ ${_object_qpkgs_upgradable_array_[*]} == *"$1"* ]] && _object_qpkgs_upgradable_array_=("${_object_qpkgs_upgradable_array_[@]/$1}")
    }
QPKGs.Upgradable.Set()
    {
    [[ $_object_qpkgs_upgradable_flag_ = 'true' ]] && return
    _object_qpkgs_upgradable_flag_=true
    DebugVar _object_qpkgs_upgradable_flag_
    }
QPKGs.Upgradable.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_upgradable_text_="$2"
    else
        echo -n "$_object_qpkgs_upgradable_text_"
    fi
    }
QPKGs.Upgradable.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_qpkgs_upgradable_value_=$2
    else
        echo -n $_object_qpkgs_upgradable_value_
    fi
    }
QPKGs.Upgradable.Init

Session.Backup.Add()
    {
    [[ ${_object_session_backup_array_[*]} != *"$1"* ]] && _object_session_backup_array_+=("$1")
    }
Session.Backup.Array()
    {
    echo -n "${_object_session_backup_array_[@]}"
    }
Session.Backup.Clear()
    {
    [[ $_object_session_backup_flag_ != 'true' ]] && return
    _object_session_backup_flag_=false
    DebugVar _object_session_backup_flag_
    }
Session.Backup.Count()
    {
    echo "${#_object_session_backup_array_[@]}"
    }
Session.Backup.Disable()
    {
    [[ $_object_session_backup_enable_ != 'true' ]] && return
    _object_session_backup_enable_=false
    DebugVar _object_session_backup_enable_
    }
Session.Backup.Enable()
    {
    [[ $_object_session_backup_enable_ = 'true' ]] && return
    _object_session_backup_enable_=true
    DebugVar _object_session_backup_enable_
    }
Session.Backup.Enumerate()
    {
    ((_object_session_backup_array_index_++))
    if [[ $_object_session_backup_array_index_ -gt ${#_object_session_backup_array_[@]} ]]; then
        _object_session_backup_array_index_=1
    fi
    }
Session.Backup.Exist()
    {
    [[ ${_object_session_backup_array_[*]} == *"$1"* ]]
    }
Session.Backup.First()
    {
    echo "${_object_session_backup_array_[0]}"
    }
Session.Backup.GetCurrent()
    {
    echo -n "${_object_session_backup_array_[((_object_session_backup_array_index_-1))]}"
    }
Session.Backup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_backup_array_[@]} ]] && index=${#_object_session_backup_array_[@]}
    echo -n "${_object_session_backup_array_[((index-1))]}"
    }
Session.Backup.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_backup_array_[@]} ]]; then
            _object_session_backup_array_index_=${#_object_session_backup_array_[@]}
        else
            _object_session_backup_array_index_=$2
        fi
    else
        echo -n $_object_session_backup_array_index_
    fi
    }
Session.Backup.Init()
    {
    _object_session_backup_value_=0
    _object_session_backup_text_=''
    _object_session_backup_flag_=false
    _object_session_backup_enable_=false
    _object_session_backup_array_+=()
    _object_session_backup_array_index_=1
    _object_session_backup_path_=''
    }
Session.Backup.IsAny()
    {
    [[ ${#_object_session_backup_array_[@]} -gt 0 ]]
    }
Session.Backup.IsDisabled()
    {
    [[ $_object_session_backup_enable_ != 'true' ]]
    }
Session.Backup.IsEnabled()
    {
    [[ $_object_session_backup_enable_ = 'true' ]]
    }
Session.Backup.IsNone()
    {
    [[ ${#_object_session_backup_array_[@]} -eq 0 ]]
    }
Session.Backup.IsNot()
    {
    [[ $_object_session_backup_flag_ != 'true' ]]
    }
Session.Backup.IsSet()
    {
    [[ $_object_session_backup_flag_ = 'true' ]]
    }
Session.Backup.List()
    {
    echo -n "${_object_session_backup_array_[*]}"
    }
Session.Backup.ListComma()
    {
    echo -n "${_object_session_backup_array_[*]}" | tr ' ' ','
    }
Session.Backup.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_backup_path_="$2"
    else
        echo -n "$_object_session_backup_path_"
    fi
    }
Session.Backup.Remove()
    {
    [[ ${_object_session_backup_array_[*]} == *"$1"* ]] && _object_session_backup_array_=("${_object_session_backup_array_[@]/$1}")
    }
Session.Backup.Set()
    {
    [[ $_object_session_backup_flag_ = 'true' ]] && return
    _object_session_backup_flag_=true
    DebugVar _object_session_backup_flag_
    }
Session.Backup.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_backup_text_="$2"
    else
        echo -n "$_object_session_backup_text_"
    fi
    }
Session.Backup.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_backup_value_=$2
    else
        echo -n $_object_session_backup_value_
    fi
    }
Session.Backup.Init

Session.Debug.To.File.Add()
    {
    [[ ${_object_session_debug_to_file_array_[*]} != *"$1"* ]] && _object_session_debug_to_file_array_+=("$1")
    }
Session.Debug.To.File.Array()
    {
    echo -n "${_object_session_debug_to_file_array_[@]}"
    }
Session.Debug.To.File.Clear()
    {
    [[ $_object_session_debug_to_file_flag_ != 'true' ]] && return
    _object_session_debug_to_file_flag_=false
    DebugVar _object_session_debug_to_file_flag_
    }
Session.Debug.To.File.Count()
    {
    echo "${#_object_session_debug_to_file_array_[@]}"
    }
Session.Debug.To.File.Disable()
    {
    [[ $_object_session_debug_to_file_enable_ != 'true' ]] && return
    _object_session_debug_to_file_enable_=false
    DebugVar _object_session_debug_to_file_enable_
    }
Session.Debug.To.File.Enable()
    {
    [[ $_object_session_debug_to_file_enable_ = 'true' ]] && return
    _object_session_debug_to_file_enable_=true
    DebugVar _object_session_debug_to_file_enable_
    }
Session.Debug.To.File.Enumerate()
    {
    ((_object_session_debug_to_file_array_index_++))
    if [[ $_object_session_debug_to_file_array_index_ -gt ${#_object_session_debug_to_file_array_[@]} ]]; then
        _object_session_debug_to_file_array_index_=1
    fi
    }
Session.Debug.To.File.Exist()
    {
    [[ ${_object_session_debug_to_file_array_[*]} == *"$1"* ]]
    }
Session.Debug.To.File.First()
    {
    echo "${_object_session_debug_to_file_array_[0]}"
    }
Session.Debug.To.File.GetCurrent()
    {
    echo -n "${_object_session_debug_to_file_array_[((_object_session_debug_to_file_array_index_-1))]}"
    }
Session.Debug.To.File.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_debug_to_file_array_[@]} ]] && index=${#_object_session_debug_to_file_array_[@]}
    echo -n "${_object_session_debug_to_file_array_[((index-1))]}"
    }
Session.Debug.To.File.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_debug_to_file_array_[@]} ]]; then
            _object_session_debug_to_file_array_index_=${#_object_session_debug_to_file_array_[@]}
        else
            _object_session_debug_to_file_array_index_=$2
        fi
    else
        echo -n $_object_session_debug_to_file_array_index_
    fi
    }
Session.Debug.To.File.Init()
    {
    _object_session_debug_to_file_value_=0
    _object_session_debug_to_file_text_=''
    _object_session_debug_to_file_flag_=false
    _object_session_debug_to_file_enable_=false
    _object_session_debug_to_file_array_+=()
    _object_session_debug_to_file_array_index_=1
    _object_session_debug_to_file_path_=''
    }
Session.Debug.To.File.IsAny()
    {
    [[ ${#_object_session_debug_to_file_array_[@]} -gt 0 ]]
    }
Session.Debug.To.File.IsDisabled()
    {
    [[ $_object_session_debug_to_file_enable_ != 'true' ]]
    }
Session.Debug.To.File.IsEnabled()
    {
    [[ $_object_session_debug_to_file_enable_ = 'true' ]]
    }
Session.Debug.To.File.IsNone()
    {
    [[ ${#_object_session_debug_to_file_array_[@]} -eq 0 ]]
    }
Session.Debug.To.File.IsNot()
    {
    [[ $_object_session_debug_to_file_flag_ != 'true' ]]
    }
Session.Debug.To.File.IsSet()
    {
    [[ $_object_session_debug_to_file_flag_ = 'true' ]]
    }
Session.Debug.To.File.List()
    {
    echo -n "${_object_session_debug_to_file_array_[*]}"
    }
Session.Debug.To.File.ListComma()
    {
    echo -n "${_object_session_debug_to_file_array_[*]}" | tr ' ' ','
    }
Session.Debug.To.File.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_file_path_="$2"
    else
        echo -n "$_object_session_debug_to_file_path_"
    fi
    }
Session.Debug.To.File.Remove()
    {
    [[ ${_object_session_debug_to_file_array_[*]} == *"$1"* ]] && _object_session_debug_to_file_array_=("${_object_session_debug_to_file_array_[@]/$1}")
    }
Session.Debug.To.File.Set()
    {
    [[ $_object_session_debug_to_file_flag_ = 'true' ]] && return
    _object_session_debug_to_file_flag_=true
    DebugVar _object_session_debug_to_file_flag_
    }
Session.Debug.To.File.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_file_text_="$2"
    else
        echo -n "$_object_session_debug_to_file_text_"
    fi
    }
Session.Debug.To.File.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_file_value_=$2
    else
        echo -n $_object_session_debug_to_file_value_
    fi
    }
Session.Debug.To.File.Init

Session.Debug.To.Screen.Add()
    {
    [[ ${_object_session_debug_to_screen_array_[*]} != *"$1"* ]] && _object_session_debug_to_screen_array_+=("$1")
    }
Session.Debug.To.Screen.Array()
    {
    echo -n "${_object_session_debug_to_screen_array_[@]}"
    }
Session.Debug.To.Screen.Clear()
    {
    [[ $_object_session_debug_to_screen_flag_ != 'true' ]] && return
    _object_session_debug_to_screen_flag_=false
    DebugVar _object_session_debug_to_screen_flag_
    }
Session.Debug.To.Screen.Count()
    {
    echo "${#_object_session_debug_to_screen_array_[@]}"
    }
Session.Debug.To.Screen.Disable()
    {
    [[ $_object_session_debug_to_screen_enable_ != 'true' ]] && return
    _object_session_debug_to_screen_enable_=false
    DebugVar _object_session_debug_to_screen_enable_
    }
Session.Debug.To.Screen.Enable()
    {
    [[ $_object_session_debug_to_screen_enable_ = 'true' ]] && return
    _object_session_debug_to_screen_enable_=true
    DebugVar _object_session_debug_to_screen_enable_
    }
Session.Debug.To.Screen.Enumerate()
    {
    ((_object_session_debug_to_screen_array_index_++))
    if [[ $_object_session_debug_to_screen_array_index_ -gt ${#_object_session_debug_to_screen_array_[@]} ]]; then
        _object_session_debug_to_screen_array_index_=1
    fi
    }
Session.Debug.To.Screen.Exist()
    {
    [[ ${_object_session_debug_to_screen_array_[*]} == *"$1"* ]]
    }
Session.Debug.To.Screen.First()
    {
    echo "${_object_session_debug_to_screen_array_[0]}"
    }
Session.Debug.To.Screen.GetCurrent()
    {
    echo -n "${_object_session_debug_to_screen_array_[((_object_session_debug_to_screen_array_index_-1))]}"
    }
Session.Debug.To.Screen.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_debug_to_screen_array_[@]} ]] && index=${#_object_session_debug_to_screen_array_[@]}
    echo -n "${_object_session_debug_to_screen_array_[((index-1))]}"
    }
Session.Debug.To.Screen.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_debug_to_screen_array_[@]} ]]; then
            _object_session_debug_to_screen_array_index_=${#_object_session_debug_to_screen_array_[@]}
        else
            _object_session_debug_to_screen_array_index_=$2
        fi
    else
        echo -n $_object_session_debug_to_screen_array_index_
    fi
    }
Session.Debug.To.Screen.Init()
    {
    _object_session_debug_to_screen_value_=0
    _object_session_debug_to_screen_text_=''
    _object_session_debug_to_screen_flag_=false
    _object_session_debug_to_screen_enable_=false
    _object_session_debug_to_screen_array_+=()
    _object_session_debug_to_screen_array_index_=1
    _object_session_debug_to_screen_path_=''
    }
Session.Debug.To.Screen.IsAny()
    {
    [[ ${#_object_session_debug_to_screen_array_[@]} -gt 0 ]]
    }
Session.Debug.To.Screen.IsDisabled()
    {
    [[ $_object_session_debug_to_screen_enable_ != 'true' ]]
    }
Session.Debug.To.Screen.IsEnabled()
    {
    [[ $_object_session_debug_to_screen_enable_ = 'true' ]]
    }
Session.Debug.To.Screen.IsNone()
    {
    [[ ${#_object_session_debug_to_screen_array_[@]} -eq 0 ]]
    }
Session.Debug.To.Screen.IsNot()
    {
    [[ $_object_session_debug_to_screen_flag_ != 'true' ]]
    }
Session.Debug.To.Screen.IsSet()
    {
    [[ $_object_session_debug_to_screen_flag_ = 'true' ]]
    }
Session.Debug.To.Screen.List()
    {
    echo -n "${_object_session_debug_to_screen_array_[*]}"
    }
Session.Debug.To.Screen.ListComma()
    {
    echo -n "${_object_session_debug_to_screen_array_[*]}" | tr ' ' ','
    }
Session.Debug.To.Screen.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_screen_path_="$2"
    else
        echo -n "$_object_session_debug_to_screen_path_"
    fi
    }
Session.Debug.To.Screen.Remove()
    {
    [[ ${_object_session_debug_to_screen_array_[*]} == *"$1"* ]] && _object_session_debug_to_screen_array_=("${_object_session_debug_to_screen_array_[@]/$1}")
    }
Session.Debug.To.Screen.Set()
    {
    [[ $_object_session_debug_to_screen_flag_ = 'true' ]] && return
    _object_session_debug_to_screen_flag_=true
    DebugVar _object_session_debug_to_screen_flag_
    }
Session.Debug.To.Screen.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_screen_text_="$2"
    else
        echo -n "$_object_session_debug_to_screen_text_"
    fi
    }
Session.Debug.To.Screen.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_screen_value_=$2
    else
        echo -n $_object_session_debug_to_screen_value_
    fi
    }
Session.Debug.To.Screen.Init

Session.Display.Clean.Add()
    {
    [[ ${_object_session_display_clean_array_[*]} != *"$1"* ]] && _object_session_display_clean_array_+=("$1")
    }
Session.Display.Clean.Array()
    {
    echo -n "${_object_session_display_clean_array_[@]}"
    }
Session.Display.Clean.Clear()
    {
    [[ $_object_session_display_clean_flag_ != 'true' ]] && return
    _object_session_display_clean_flag_=false
    DebugVar _object_session_display_clean_flag_
    }
Session.Display.Clean.Count()
    {
    echo "${#_object_session_display_clean_array_[@]}"
    }
Session.Display.Clean.Disable()
    {
    [[ $_object_session_display_clean_enable_ != 'true' ]] && return
    _object_session_display_clean_enable_=false
    DebugVar _object_session_display_clean_enable_
    }
Session.Display.Clean.Enable()
    {
    [[ $_object_session_display_clean_enable_ = 'true' ]] && return
    _object_session_display_clean_enable_=true
    DebugVar _object_session_display_clean_enable_
    }
Session.Display.Clean.Enumerate()
    {
    ((_object_session_display_clean_array_index_++))
    if [[ $_object_session_display_clean_array_index_ -gt ${#_object_session_display_clean_array_[@]} ]]; then
        _object_session_display_clean_array_index_=1
    fi
    }
Session.Display.Clean.Exist()
    {
    [[ ${_object_session_display_clean_array_[*]} == *"$1"* ]]
    }
Session.Display.Clean.First()
    {
    echo "${_object_session_display_clean_array_[0]}"
    }
Session.Display.Clean.GetCurrent()
    {
    echo -n "${_object_session_display_clean_array_[((_object_session_display_clean_array_index_-1))]}"
    }
Session.Display.Clean.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_display_clean_array_[@]} ]] && index=${#_object_session_display_clean_array_[@]}
    echo -n "${_object_session_display_clean_array_[((index-1))]}"
    }
Session.Display.Clean.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_display_clean_array_[@]} ]]; then
            _object_session_display_clean_array_index_=${#_object_session_display_clean_array_[@]}
        else
            _object_session_display_clean_array_index_=$2
        fi
    else
        echo -n $_object_session_display_clean_array_index_
    fi
    }
Session.Display.Clean.Init()
    {
    _object_session_display_clean_value_=0
    _object_session_display_clean_text_=''
    _object_session_display_clean_flag_=false
    _object_session_display_clean_enable_=false
    _object_session_display_clean_array_+=()
    _object_session_display_clean_array_index_=1
    _object_session_display_clean_path_=''
    }
Session.Display.Clean.IsAny()
    {
    [[ ${#_object_session_display_clean_array_[@]} -gt 0 ]]
    }
Session.Display.Clean.IsDisabled()
    {
    [[ $_object_session_display_clean_enable_ != 'true' ]]
    }
Session.Display.Clean.IsEnabled()
    {
    [[ $_object_session_display_clean_enable_ = 'true' ]]
    }
Session.Display.Clean.IsNone()
    {
    [[ ${#_object_session_display_clean_array_[@]} -eq 0 ]]
    }
Session.Display.Clean.IsNot()
    {
    [[ $_object_session_display_clean_flag_ != 'true' ]]
    }
Session.Display.Clean.IsSet()
    {
    [[ $_object_session_display_clean_flag_ = 'true' ]]
    }
Session.Display.Clean.List()
    {
    echo -n "${_object_session_display_clean_array_[*]}"
    }
Session.Display.Clean.ListComma()
    {
    echo -n "${_object_session_display_clean_array_[*]}" | tr ' ' ','
    }
Session.Display.Clean.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_display_clean_path_="$2"
    else
        echo -n "$_object_session_display_clean_path_"
    fi
    }
Session.Display.Clean.Remove()
    {
    [[ ${_object_session_display_clean_array_[*]} == *"$1"* ]] && _object_session_display_clean_array_=("${_object_session_display_clean_array_[@]/$1}")
    }
Session.Display.Clean.Set()
    {
    [[ $_object_session_display_clean_flag_ = 'true' ]] && return
    _object_session_display_clean_flag_=true
    DebugVar _object_session_display_clean_flag_
    }
Session.Display.Clean.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_display_clean_text_="$2"
    else
        echo -n "$_object_session_display_clean_text_"
    fi
    }
Session.Display.Clean.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_display_clean_value_=$2
    else
        echo -n $_object_session_display_clean_value_
    fi
    }
Session.Display.Clean.Init

Session.IPKGs.Install.Add()
    {
    [[ ${_object_session_ipkgs_install_array_[*]} != *"$1"* ]] && _object_session_ipkgs_install_array_+=("$1")
    }
Session.IPKGs.Install.Array()
    {
    echo -n "${_object_session_ipkgs_install_array_[@]}"
    }
Session.IPKGs.Install.Clear()
    {
    [[ $_object_session_ipkgs_install_flag_ != 'true' ]] && return
    _object_session_ipkgs_install_flag_=false
    DebugVar _object_session_ipkgs_install_flag_
    }
Session.IPKGs.Install.Count()
    {
    echo "${#_object_session_ipkgs_install_array_[@]}"
    }
Session.IPKGs.Install.Disable()
    {
    [[ $_object_session_ipkgs_install_enable_ != 'true' ]] && return
    _object_session_ipkgs_install_enable_=false
    DebugVar _object_session_ipkgs_install_enable_
    }
Session.IPKGs.Install.Enable()
    {
    [[ $_object_session_ipkgs_install_enable_ = 'true' ]] && return
    _object_session_ipkgs_install_enable_=true
    DebugVar _object_session_ipkgs_install_enable_
    }
Session.IPKGs.Install.Enumerate()
    {
    ((_object_session_ipkgs_install_array_index_++))
    if [[ $_object_session_ipkgs_install_array_index_ -gt ${#_object_session_ipkgs_install_array_[@]} ]]; then
        _object_session_ipkgs_install_array_index_=1
    fi
    }
Session.IPKGs.Install.Exist()
    {
    [[ ${_object_session_ipkgs_install_array_[*]} == *"$1"* ]]
    }
Session.IPKGs.Install.First()
    {
    echo "${_object_session_ipkgs_install_array_[0]}"
    }
Session.IPKGs.Install.GetCurrent()
    {
    echo -n "${_object_session_ipkgs_install_array_[((_object_session_ipkgs_install_array_index_-1))]}"
    }
Session.IPKGs.Install.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_ipkgs_install_array_[@]} ]] && index=${#_object_session_ipkgs_install_array_[@]}
    echo -n "${_object_session_ipkgs_install_array_[((index-1))]}"
    }
Session.IPKGs.Install.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_ipkgs_install_array_[@]} ]]; then
            _object_session_ipkgs_install_array_index_=${#_object_session_ipkgs_install_array_[@]}
        else
            _object_session_ipkgs_install_array_index_=$2
        fi
    else
        echo -n $_object_session_ipkgs_install_array_index_
    fi
    }
Session.IPKGs.Install.Init()
    {
    _object_session_ipkgs_install_value_=0
    _object_session_ipkgs_install_text_=''
    _object_session_ipkgs_install_flag_=false
    _object_session_ipkgs_install_enable_=false
    _object_session_ipkgs_install_array_+=()
    _object_session_ipkgs_install_array_index_=1
    _object_session_ipkgs_install_path_=''
    }
Session.IPKGs.Install.IsAny()
    {
    [[ ${#_object_session_ipkgs_install_array_[@]} -gt 0 ]]
    }
Session.IPKGs.Install.IsDisabled()
    {
    [[ $_object_session_ipkgs_install_enable_ != 'true' ]]
    }
Session.IPKGs.Install.IsEnabled()
    {
    [[ $_object_session_ipkgs_install_enable_ = 'true' ]]
    }
Session.IPKGs.Install.IsNone()
    {
    [[ ${#_object_session_ipkgs_install_array_[@]} -eq 0 ]]
    }
Session.IPKGs.Install.IsNot()
    {
    [[ $_object_session_ipkgs_install_flag_ != 'true' ]]
    }
Session.IPKGs.Install.IsSet()
    {
    [[ $_object_session_ipkgs_install_flag_ = 'true' ]]
    }
Session.IPKGs.Install.List()
    {
    echo -n "${_object_session_ipkgs_install_array_[*]}"
    }
Session.IPKGs.Install.ListComma()
    {
    echo -n "${_object_session_ipkgs_install_array_[*]}" | tr ' ' ','
    }
Session.IPKGs.Install.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_ipkgs_install_path_="$2"
    else
        echo -n "$_object_session_ipkgs_install_path_"
    fi
    }
Session.IPKGs.Install.Remove()
    {
    [[ ${_object_session_ipkgs_install_array_[*]} == *"$1"* ]] && _object_session_ipkgs_install_array_=("${_object_session_ipkgs_install_array_[@]/$1}")
    }
Session.IPKGs.Install.Set()
    {
    [[ $_object_session_ipkgs_install_flag_ = 'true' ]] && return
    _object_session_ipkgs_install_flag_=true
    DebugVar _object_session_ipkgs_install_flag_
    }
Session.IPKGs.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_ipkgs_install_text_="$2"
    else
        echo -n "$_object_session_ipkgs_install_text_"
    fi
    }
Session.IPKGs.Install.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_ipkgs_install_value_=$2
    else
        echo -n $_object_session_ipkgs_install_value_
    fi
    }
Session.IPKGs.Install.Init

Session.LineSpace.Add()
    {
    [[ ${_object_session_linespace_array_[*]} != *"$1"* ]] && _object_session_linespace_array_+=("$1")
    }
Session.LineSpace.Array()
    {
    echo -n "${_object_session_linespace_array_[@]}"
    }
Session.LineSpace.Clear()
    {
    [[ $_object_session_linespace_flag_ != 'true' ]] && return
    _object_session_linespace_flag_=false
    DebugVar _object_session_linespace_flag_
    }
Session.LineSpace.Count()
    {
    echo "${#_object_session_linespace_array_[@]}"
    }
Session.LineSpace.Disable()
    {
    [[ $_object_session_linespace_enable_ != 'true' ]] && return
    _object_session_linespace_enable_=false
    DebugVar _object_session_linespace_enable_
    }
Session.LineSpace.Enable()
    {
    [[ $_object_session_linespace_enable_ = 'true' ]] && return
    _object_session_linespace_enable_=true
    DebugVar _object_session_linespace_enable_
    }
Session.LineSpace.Enumerate()
    {
    ((_object_session_linespace_array_index_++))
    if [[ $_object_session_linespace_array_index_ -gt ${#_object_session_linespace_array_[@]} ]]; then
        _object_session_linespace_array_index_=1
    fi
    }
Session.LineSpace.Exist()
    {
    [[ ${_object_session_linespace_array_[*]} == *"$1"* ]]
    }
Session.LineSpace.First()
    {
    echo "${_object_session_linespace_array_[0]}"
    }
Session.LineSpace.GetCurrent()
    {
    echo -n "${_object_session_linespace_array_[((_object_session_linespace_array_index_-1))]}"
    }
Session.LineSpace.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_linespace_array_[@]} ]] && index=${#_object_session_linespace_array_[@]}
    echo -n "${_object_session_linespace_array_[((index-1))]}"
    }
Session.LineSpace.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_linespace_array_[@]} ]]; then
            _object_session_linespace_array_index_=${#_object_session_linespace_array_[@]}
        else
            _object_session_linespace_array_index_=$2
        fi
    else
        echo -n $_object_session_linespace_array_index_
    fi
    }
Session.LineSpace.Init()
    {
    _object_session_linespace_value_=0
    _object_session_linespace_text_=''
    _object_session_linespace_flag_=false
    _object_session_linespace_enable_=false
    _object_session_linespace_array_+=()
    _object_session_linespace_array_index_=1
    _object_session_linespace_path_=''
    }
Session.LineSpace.IsAny()
    {
    [[ ${#_object_session_linespace_array_[@]} -gt 0 ]]
    }
Session.LineSpace.IsDisabled()
    {
    [[ $_object_session_linespace_enable_ != 'true' ]]
    }
Session.LineSpace.IsEnabled()
    {
    [[ $_object_session_linespace_enable_ = 'true' ]]
    }
Session.LineSpace.IsNone()
    {
    [[ ${#_object_session_linespace_array_[@]} -eq 0 ]]
    }
Session.LineSpace.IsNot()
    {
    [[ $_object_session_linespace_flag_ != 'true' ]]
    }
Session.LineSpace.IsSet()
    {
    [[ $_object_session_linespace_flag_ = 'true' ]]
    }
Session.LineSpace.List()
    {
    echo -n "${_object_session_linespace_array_[*]}"
    }
Session.LineSpace.ListComma()
    {
    echo -n "${_object_session_linespace_array_[*]}" | tr ' ' ','
    }
Session.LineSpace.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_linespace_path_="$2"
    else
        echo -n "$_object_session_linespace_path_"
    fi
    }
Session.LineSpace.Remove()
    {
    [[ ${_object_session_linespace_array_[*]} == *"$1"* ]] && _object_session_linespace_array_=("${_object_session_linespace_array_[@]/$1}")
    }
Session.LineSpace.Set()
    {
    [[ $_object_session_linespace_flag_ = 'true' ]] && return
    _object_session_linespace_flag_=true
    DebugVar _object_session_linespace_flag_
    }
Session.LineSpace.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_linespace_text_="$2"
    else
        echo -n "$_object_session_linespace_text_"
    fi
    }
Session.LineSpace.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_linespace_value_=$2
    else
        echo -n $_object_session_linespace_value_
    fi
    }
Session.LineSpace.Init

Session.PIPs.Install.Add()
    {
    [[ ${_object_session_pips_install_array_[*]} != *"$1"* ]] && _object_session_pips_install_array_+=("$1")
    }
Session.PIPs.Install.Array()
    {
    echo -n "${_object_session_pips_install_array_[@]}"
    }
Session.PIPs.Install.Clear()
    {
    [[ $_object_session_pips_install_flag_ != 'true' ]] && return
    _object_session_pips_install_flag_=false
    DebugVar _object_session_pips_install_flag_
    }
Session.PIPs.Install.Count()
    {
    echo "${#_object_session_pips_install_array_[@]}"
    }
Session.PIPs.Install.Disable()
    {
    [[ $_object_session_pips_install_enable_ != 'true' ]] && return
    _object_session_pips_install_enable_=false
    DebugVar _object_session_pips_install_enable_
    }
Session.PIPs.Install.Enable()
    {
    [[ $_object_session_pips_install_enable_ = 'true' ]] && return
    _object_session_pips_install_enable_=true
    DebugVar _object_session_pips_install_enable_
    }
Session.PIPs.Install.Enumerate()
    {
    ((_object_session_pips_install_array_index_++))
    if [[ $_object_session_pips_install_array_index_ -gt ${#_object_session_pips_install_array_[@]} ]]; then
        _object_session_pips_install_array_index_=1
    fi
    }
Session.PIPs.Install.Exist()
    {
    [[ ${_object_session_pips_install_array_[*]} == *"$1"* ]]
    }
Session.PIPs.Install.First()
    {
    echo "${_object_session_pips_install_array_[0]}"
    }
Session.PIPs.Install.GetCurrent()
    {
    echo -n "${_object_session_pips_install_array_[((_object_session_pips_install_array_index_-1))]}"
    }
Session.PIPs.Install.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_pips_install_array_[@]} ]] && index=${#_object_session_pips_install_array_[@]}
    echo -n "${_object_session_pips_install_array_[((index-1))]}"
    }
Session.PIPs.Install.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_pips_install_array_[@]} ]]; then
            _object_session_pips_install_array_index_=${#_object_session_pips_install_array_[@]}
        else
            _object_session_pips_install_array_index_=$2
        fi
    else
        echo -n $_object_session_pips_install_array_index_
    fi
    }
Session.PIPs.Install.Init()
    {
    _object_session_pips_install_value_=0
    _object_session_pips_install_text_=''
    _object_session_pips_install_flag_=false
    _object_session_pips_install_enable_=false
    _object_session_pips_install_array_+=()
    _object_session_pips_install_array_index_=1
    _object_session_pips_install_path_=''
    }
Session.PIPs.Install.IsAny()
    {
    [[ ${#_object_session_pips_install_array_[@]} -gt 0 ]]
    }
Session.PIPs.Install.IsDisabled()
    {
    [[ $_object_session_pips_install_enable_ != 'true' ]]
    }
Session.PIPs.Install.IsEnabled()
    {
    [[ $_object_session_pips_install_enable_ = 'true' ]]
    }
Session.PIPs.Install.IsNone()
    {
    [[ ${#_object_session_pips_install_array_[@]} -eq 0 ]]
    }
Session.PIPs.Install.IsNot()
    {
    [[ $_object_session_pips_install_flag_ != 'true' ]]
    }
Session.PIPs.Install.IsSet()
    {
    [[ $_object_session_pips_install_flag_ = 'true' ]]
    }
Session.PIPs.Install.List()
    {
    echo -n "${_object_session_pips_install_array_[*]}"
    }
Session.PIPs.Install.ListComma()
    {
    echo -n "${_object_session_pips_install_array_[*]}" | tr ' ' ','
    }
Session.PIPs.Install.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_pips_install_path_="$2"
    else
        echo -n "$_object_session_pips_install_path_"
    fi
    }
Session.PIPs.Install.Remove()
    {
    [[ ${_object_session_pips_install_array_[*]} == *"$1"* ]] && _object_session_pips_install_array_=("${_object_session_pips_install_array_[@]/$1}")
    }
Session.PIPs.Install.Set()
    {
    [[ $_object_session_pips_install_flag_ = 'true' ]] && return
    _object_session_pips_install_flag_=true
    DebugVar _object_session_pips_install_flag_
    }
Session.PIPs.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_pips_install_text_="$2"
    else
        echo -n "$_object_session_pips_install_text_"
    fi
    }
Session.PIPs.Install.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_pips_install_value_=$2
    else
        echo -n $_object_session_pips_install_value_
    fi
    }
Session.PIPs.Install.Init

Session.ShowBackupLocation.Add()
    {
    [[ ${_object_session_showbackuplocation_array_[*]} != *"$1"* ]] && _object_session_showbackuplocation_array_+=("$1")
    }
Session.ShowBackupLocation.Array()
    {
    echo -n "${_object_session_showbackuplocation_array_[@]}"
    }
Session.ShowBackupLocation.Clear()
    {
    [[ $_object_session_showbackuplocation_flag_ != 'true' ]] && return
    _object_session_showbackuplocation_flag_=false
    DebugVar _object_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Count()
    {
    echo "${#_object_session_showbackuplocation_array_[@]}"
    }
Session.ShowBackupLocation.Disable()
    {
    [[ $_object_session_showbackuplocation_enable_ != 'true' ]] && return
    _object_session_showbackuplocation_enable_=false
    DebugVar _object_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.Enable()
    {
    [[ $_object_session_showbackuplocation_enable_ = 'true' ]] && return
    _object_session_showbackuplocation_enable_=true
    DebugVar _object_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.Enumerate()
    {
    ((_object_session_showbackuplocation_array_index_++))
    if [[ $_object_session_showbackuplocation_array_index_ -gt ${#_object_session_showbackuplocation_array_[@]} ]]; then
        _object_session_showbackuplocation_array_index_=1
    fi
    }
Session.ShowBackupLocation.Exist()
    {
    [[ ${_object_session_showbackuplocation_array_[*]} == *"$1"* ]]
    }
Session.ShowBackupLocation.First()
    {
    echo "${_object_session_showbackuplocation_array_[0]}"
    }
Session.ShowBackupLocation.GetCurrent()
    {
    echo -n "${_object_session_showbackuplocation_array_[((_object_session_showbackuplocation_array_index_-1))]}"
    }
Session.ShowBackupLocation.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_showbackuplocation_array_[@]} ]] && index=${#_object_session_showbackuplocation_array_[@]}
    echo -n "${_object_session_showbackuplocation_array_[((index-1))]}"
    }
Session.ShowBackupLocation.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_showbackuplocation_array_[@]} ]]; then
            _object_session_showbackuplocation_array_index_=${#_object_session_showbackuplocation_array_[@]}
        else
            _object_session_showbackuplocation_array_index_=$2
        fi
    else
        echo -n $_object_session_showbackuplocation_array_index_
    fi
    }
Session.ShowBackupLocation.Init()
    {
    _object_session_showbackuplocation_value_=0
    _object_session_showbackuplocation_text_=''
    _object_session_showbackuplocation_flag_=false
    _object_session_showbackuplocation_enable_=false
    _object_session_showbackuplocation_array_+=()
    _object_session_showbackuplocation_array_index_=1
    _object_session_showbackuplocation_path_=''
    }
Session.ShowBackupLocation.IsAny()
    {
    [[ ${#_object_session_showbackuplocation_array_[@]} -gt 0 ]]
    }
Session.ShowBackupLocation.IsDisabled()
    {
    [[ $_object_session_showbackuplocation_enable_ != 'true' ]]
    }
Session.ShowBackupLocation.IsEnabled()
    {
    [[ $_object_session_showbackuplocation_enable_ = 'true' ]]
    }
Session.ShowBackupLocation.IsNone()
    {
    [[ ${#_object_session_showbackuplocation_array_[@]} -eq 0 ]]
    }
Session.ShowBackupLocation.IsNot()
    {
    [[ $_object_session_showbackuplocation_flag_ != 'true' ]]
    }
Session.ShowBackupLocation.IsSet()
    {
    [[ $_object_session_showbackuplocation_flag_ = 'true' ]]
    }
Session.ShowBackupLocation.List()
    {
    echo -n "${_object_session_showbackuplocation_array_[*]}"
    }
Session.ShowBackupLocation.ListComma()
    {
    echo -n "${_object_session_showbackuplocation_array_[*]}" | tr ' ' ','
    }
Session.ShowBackupLocation.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_showbackuplocation_path_="$2"
    else
        echo -n "$_object_session_showbackuplocation_path_"
    fi
    }
Session.ShowBackupLocation.Remove()
    {
    [[ ${_object_session_showbackuplocation_array_[*]} == *"$1"* ]] && _object_session_showbackuplocation_array_=("${_object_session_showbackuplocation_array_[@]/$1}")
    }
Session.ShowBackupLocation.Set()
    {
    [[ $_object_session_showbackuplocation_flag_ = 'true' ]] && return
    _object_session_showbackuplocation_flag_=true
    DebugVar _object_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_showbackuplocation_text_="$2"
    else
        echo -n "$_object_session_showbackuplocation_text_"
    fi
    }
Session.ShowBackupLocation.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_showbackuplocation_value_=$2
    else
        echo -n $_object_session_showbackuplocation_value_
    fi
    }
Session.ShowBackupLocation.Init

Session.SkipPackageProcessing.Add()
    {
    [[ ${_object_session_skippackageprocessing_array_[*]} != *"$1"* ]] && _object_session_skippackageprocessing_array_+=("$1")
    }
Session.SkipPackageProcessing.Array()
    {
    echo -n "${_object_session_skippackageprocessing_array_[@]}"
    }
Session.SkipPackageProcessing.Clear()
    {
    [[ $_object_session_skippackageprocessing_flag_ != 'true' ]] && return
    _object_session_skippackageprocessing_flag_=false
    DebugVar _object_session_skippackageprocessing_flag_
    }
Session.SkipPackageProcessing.Count()
    {
    echo "${#_object_session_skippackageprocessing_array_[@]}"
    }
Session.SkipPackageProcessing.Disable()
    {
    [[ $_object_session_skippackageprocessing_enable_ != 'true' ]] && return
    _object_session_skippackageprocessing_enable_=false
    DebugVar _object_session_skippackageprocessing_enable_
    }
Session.SkipPackageProcessing.Enable()
    {
    [[ $_object_session_skippackageprocessing_enable_ = 'true' ]] && return
    _object_session_skippackageprocessing_enable_=true
    DebugVar _object_session_skippackageprocessing_enable_
    }
Session.SkipPackageProcessing.Enumerate()
    {
    ((_object_session_skippackageprocessing_array_index_++))
    if [[ $_object_session_skippackageprocessing_array_index_ -gt ${#_object_session_skippackageprocessing_array_[@]} ]]; then
        _object_session_skippackageprocessing_array_index_=1
    fi
    }
Session.SkipPackageProcessing.Exist()
    {
    [[ ${_object_session_skippackageprocessing_array_[*]} == *"$1"* ]]
    }
Session.SkipPackageProcessing.First()
    {
    echo "${_object_session_skippackageprocessing_array_[0]}"
    }
Session.SkipPackageProcessing.GetCurrent()
    {
    echo -n "${_object_session_skippackageprocessing_array_[((_object_session_skippackageprocessing_array_index_-1))]}"
    }
Session.SkipPackageProcessing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_skippackageprocessing_array_[@]} ]] && index=${#_object_session_skippackageprocessing_array_[@]}
    echo -n "${_object_session_skippackageprocessing_array_[((index-1))]}"
    }
Session.SkipPackageProcessing.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_skippackageprocessing_array_[@]} ]]; then
            _object_session_skippackageprocessing_array_index_=${#_object_session_skippackageprocessing_array_[@]}
        else
            _object_session_skippackageprocessing_array_index_=$2
        fi
    else
        echo -n $_object_session_skippackageprocessing_array_index_
    fi
    }
Session.SkipPackageProcessing.Init()
    {
    _object_session_skippackageprocessing_value_=0
    _object_session_skippackageprocessing_text_=''
    _object_session_skippackageprocessing_flag_=false
    _object_session_skippackageprocessing_enable_=false
    _object_session_skippackageprocessing_array_+=()
    _object_session_skippackageprocessing_array_index_=1
    _object_session_skippackageprocessing_path_=''
    }
Session.SkipPackageProcessing.IsAny()
    {
    [[ ${#_object_session_skippackageprocessing_array_[@]} -gt 0 ]]
    }
Session.SkipPackageProcessing.IsDisabled()
    {
    [[ $_object_session_skippackageprocessing_enable_ != 'true' ]]
    }
Session.SkipPackageProcessing.IsEnabled()
    {
    [[ $_object_session_skippackageprocessing_enable_ = 'true' ]]
    }
Session.SkipPackageProcessing.IsNone()
    {
    [[ ${#_object_session_skippackageprocessing_array_[@]} -eq 0 ]]
    }
Session.SkipPackageProcessing.IsNot()
    {
    [[ $_object_session_skippackageprocessing_flag_ != 'true' ]]
    }
Session.SkipPackageProcessing.IsSet()
    {
    [[ $_object_session_skippackageprocessing_flag_ = 'true' ]]
    }
Session.SkipPackageProcessing.List()
    {
    echo -n "${_object_session_skippackageprocessing_array_[*]}"
    }
Session.SkipPackageProcessing.ListComma()
    {
    echo -n "${_object_session_skippackageprocessing_array_[*]}" | tr ' ' ','
    }
Session.SkipPackageProcessing.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_skippackageprocessing_path_="$2"
    else
        echo -n "$_object_session_skippackageprocessing_path_"
    fi
    }
Session.SkipPackageProcessing.Remove()
    {
    [[ ${_object_session_skippackageprocessing_array_[*]} == *"$1"* ]] && _object_session_skippackageprocessing_array_=("${_object_session_skippackageprocessing_array_[@]/$1}")
    }
Session.SkipPackageProcessing.Set()
    {
    [[ $_object_session_skippackageprocessing_flag_ = 'true' ]] && return
    _object_session_skippackageprocessing_flag_=true
    DebugVar _object_session_skippackageprocessing_flag_
    }
Session.SkipPackageProcessing.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_skippackageprocessing_text_="$2"
    else
        echo -n "$_object_session_skippackageprocessing_text_"
    fi
    }
Session.SkipPackageProcessing.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_skippackageprocessing_value_=$2
    else
        echo -n $_object_session_skippackageprocessing_value_
    fi
    }
Session.SkipPackageProcessing.Init

Session.SuggestIssue.Add()
    {
    [[ ${_object_session_suggestissue_array_[*]} != *"$1"* ]] && _object_session_suggestissue_array_+=("$1")
    }
Session.SuggestIssue.Array()
    {
    echo -n "${_object_session_suggestissue_array_[@]}"
    }
Session.SuggestIssue.Clear()
    {
    [[ $_object_session_suggestissue_flag_ != 'true' ]] && return
    _object_session_suggestissue_flag_=false
    DebugVar _object_session_suggestissue_flag_
    }
Session.SuggestIssue.Count()
    {
    echo "${#_object_session_suggestissue_array_[@]}"
    }
Session.SuggestIssue.Disable()
    {
    [[ $_object_session_suggestissue_enable_ != 'true' ]] && return
    _object_session_suggestissue_enable_=false
    DebugVar _object_session_suggestissue_enable_
    }
Session.SuggestIssue.Enable()
    {
    [[ $_object_session_suggestissue_enable_ = 'true' ]] && return
    _object_session_suggestissue_enable_=true
    DebugVar _object_session_suggestissue_enable_
    }
Session.SuggestIssue.Enumerate()
    {
    ((_object_session_suggestissue_array_index_++))
    if [[ $_object_session_suggestissue_array_index_ -gt ${#_object_session_suggestissue_array_[@]} ]]; then
        _object_session_suggestissue_array_index_=1
    fi
    }
Session.SuggestIssue.Exist()
    {
    [[ ${_object_session_suggestissue_array_[*]} == *"$1"* ]]
    }
Session.SuggestIssue.First()
    {
    echo "${_object_session_suggestissue_array_[0]}"
    }
Session.SuggestIssue.GetCurrent()
    {
    echo -n "${_object_session_suggestissue_array_[((_object_session_suggestissue_array_index_-1))]}"
    }
Session.SuggestIssue.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_suggestissue_array_[@]} ]] && index=${#_object_session_suggestissue_array_[@]}
    echo -n "${_object_session_suggestissue_array_[((index-1))]}"
    }
Session.SuggestIssue.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_suggestissue_array_[@]} ]]; then
            _object_session_suggestissue_array_index_=${#_object_session_suggestissue_array_[@]}
        else
            _object_session_suggestissue_array_index_=$2
        fi
    else
        echo -n $_object_session_suggestissue_array_index_
    fi
    }
Session.SuggestIssue.Init()
    {
    _object_session_suggestissue_value_=0
    _object_session_suggestissue_text_=''
    _object_session_suggestissue_flag_=false
    _object_session_suggestissue_enable_=false
    _object_session_suggestissue_array_+=()
    _object_session_suggestissue_array_index_=1
    _object_session_suggestissue_path_=''
    }
Session.SuggestIssue.IsAny()
    {
    [[ ${#_object_session_suggestissue_array_[@]} -gt 0 ]]
    }
Session.SuggestIssue.IsDisabled()
    {
    [[ $_object_session_suggestissue_enable_ != 'true' ]]
    }
Session.SuggestIssue.IsEnabled()
    {
    [[ $_object_session_suggestissue_enable_ = 'true' ]]
    }
Session.SuggestIssue.IsNone()
    {
    [[ ${#_object_session_suggestissue_array_[@]} -eq 0 ]]
    }
Session.SuggestIssue.IsNot()
    {
    [[ $_object_session_suggestissue_flag_ != 'true' ]]
    }
Session.SuggestIssue.IsSet()
    {
    [[ $_object_session_suggestissue_flag_ = 'true' ]]
    }
Session.SuggestIssue.List()
    {
    echo -n "${_object_session_suggestissue_array_[*]}"
    }
Session.SuggestIssue.ListComma()
    {
    echo -n "${_object_session_suggestissue_array_[*]}" | tr ' ' ','
    }
Session.SuggestIssue.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_suggestissue_path_="$2"
    else
        echo -n "$_object_session_suggestissue_path_"
    fi
    }
Session.SuggestIssue.Remove()
    {
    [[ ${_object_session_suggestissue_array_[*]} == *"$1"* ]] && _object_session_suggestissue_array_=("${_object_session_suggestissue_array_[@]/$1}")
    }
Session.SuggestIssue.Set()
    {
    [[ $_object_session_suggestissue_flag_ = 'true' ]] && return
    _object_session_suggestissue_flag_=true
    DebugVar _object_session_suggestissue_flag_
    }
Session.SuggestIssue.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_suggestissue_text_="$2"
    else
        echo -n "$_object_session_suggestissue_text_"
    fi
    }
Session.SuggestIssue.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_suggestissue_value_=$2
    else
        echo -n $_object_session_suggestissue_value_
    fi
    }
Session.SuggestIssue.Init

Session.Summary.Add()
    {
    [[ ${_object_session_summary_array_[*]} != *"$1"* ]] && _object_session_summary_array_+=("$1")
    }
Session.Summary.Array()
    {
    echo -n "${_object_session_summary_array_[@]}"
    }
Session.Summary.Clear()
    {
    [[ $_object_session_summary_flag_ != 'true' ]] && return
    _object_session_summary_flag_=false
    DebugVar _object_session_summary_flag_
    }
Session.Summary.Count()
    {
    echo "${#_object_session_summary_array_[@]}"
    }
Session.Summary.Disable()
    {
    [[ $_object_session_summary_enable_ != 'true' ]] && return
    _object_session_summary_enable_=false
    DebugVar _object_session_summary_enable_
    }
Session.Summary.Enable()
    {
    [[ $_object_session_summary_enable_ = 'true' ]] && return
    _object_session_summary_enable_=true
    DebugVar _object_session_summary_enable_
    }
Session.Summary.Enumerate()
    {
    ((_object_session_summary_array_index_++))
    if [[ $_object_session_summary_array_index_ -gt ${#_object_session_summary_array_[@]} ]]; then
        _object_session_summary_array_index_=1
    fi
    }
Session.Summary.Exist()
    {
    [[ ${_object_session_summary_array_[*]} == *"$1"* ]]
    }
Session.Summary.First()
    {
    echo "${_object_session_summary_array_[0]}"
    }
Session.Summary.GetCurrent()
    {
    echo -n "${_object_session_summary_array_[((_object_session_summary_array_index_-1))]}"
    }
Session.Summary.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_session_summary_array_[@]} ]] && index=${#_object_session_summary_array_[@]}
    echo -n "${_object_session_summary_array_[((index-1))]}"
    }
Session.Summary.Index()
    {
    if [[ -n $1 && $1 = '=' ]]; then
        if [[ $2 -gt ${#_object_session_summary_array_[@]} ]]; then
            _object_session_summary_array_index_=${#_object_session_summary_array_[@]}
        else
            _object_session_summary_array_index_=$2
        fi
    else
        echo -n $_object_session_summary_array_index_
    fi
    }
Session.Summary.Init()
    {
    _object_session_summary_value_=0
    _object_session_summary_text_=''
    _object_session_summary_flag_=false
    _object_session_summary_enable_=false
    _object_session_summary_array_+=()
    _object_session_summary_array_index_=1
    _object_session_summary_path_=''
    }
Session.Summary.IsAny()
    {
    [[ ${#_object_session_summary_array_[@]} -gt 0 ]]
    }
Session.Summary.IsDisabled()
    {
    [[ $_object_session_summary_enable_ != 'true' ]]
    }
Session.Summary.IsEnabled()
    {
    [[ $_object_session_summary_enable_ = 'true' ]]
    }
Session.Summary.IsNone()
    {
    [[ ${#_object_session_summary_array_[@]} -eq 0 ]]
    }
Session.Summary.IsNot()
    {
    [[ $_object_session_summary_flag_ != 'true' ]]
    }
Session.Summary.IsSet()
    {
    [[ $_object_session_summary_flag_ = 'true' ]]
    }
Session.Summary.List()
    {
    echo -n "${_object_session_summary_array_[*]}"
    }
Session.Summary.ListComma()
    {
    echo -n "${_object_session_summary_array_[*]}" | tr ' ' ','
    }
Session.Summary.Path()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_summary_path_="$2"
    else
        echo -n "$_object_session_summary_path_"
    fi
    }
Session.Summary.Remove()
    {
    [[ ${_object_session_summary_array_[*]} == *"$1"* ]] && _object_session_summary_array_=("${_object_session_summary_array_[@]/$1}")
    }
Session.Summary.Set()
    {
    [[ $_object_session_summary_flag_ = 'true' ]] && return
    _object_session_summary_flag_=true
    DebugVar _object_session_summary_flag_
    }
Session.Summary.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_summary_text_="$2"
    else
        echo -n "$_object_session_summary_text_"
    fi
    }
Session.Summary.Value()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_summary_value_=$2
    else
        echo -n $_object_session_summary_value_
    fi
    }
Session.Summary.Init

