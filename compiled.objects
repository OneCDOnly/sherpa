Session.Display.Clean.Clear()
    {
    [[ $_obj_session_display_clean_flag_ != 'true' ]] && return
    _obj_session_display_clean_flag_=false
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_flag_
    }
Session.Display.Clean.Disable()
    {
    [[ $_obj_session_display_clean_enable_ != 'true' ]] && return
    _obj_session_display_clean_enable_=false
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_enable_
    }
Session.Display.Clean.DontLogChanges()
    {
    [[ $_obj_session_display_clean_changes_flag_ != 'true' ]] && return
    _obj_session_display_clean_changes_flag_=false
    }
Session.Display.Clean.Enable()
    {
    [[ $_obj_session_display_clean_enable_ = 'true' ]] && return
    _obj_session_display_clean_enable_=true
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_enable_
    }
Session.Display.Clean.Init()
    {
    _obj_session_display_clean_text_=''
    _obj_session_display_clean_flag_=false
    _obj_session_display_clean_changes_flag_=true
    _obj_session_display_clean_enable_=false
    }
Session.Display.Clean.IsDisabled()
    {
    [[ $_obj_session_display_clean_enable_ != 'true' ]]
    }
Session.Display.Clean.IsEnabled()
    {
    [[ $_obj_session_display_clean_enable_ = 'true' ]]
    }
Session.Display.Clean.IsNot()
    {
    [[ $_obj_session_display_clean_flag_ != 'true' ]]
    }
Session.Display.Clean.IsSet()
    {
    [[ $_obj_session_display_clean_flag_ = 'true' ]]
    }
Session.Display.Clean.LogChanges()
    {
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && return
    _obj_session_display_clean_changes_flag_=true
    }
Session.Display.Clean.Set()
    {
    [[ $_obj_session_display_clean_flag_ = 'true' ]] && return
    _obj_session_display_clean_flag_=true
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_flag_
    }
Session.Display.Clean.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_display_clean_text_=$2
    else
        echo -n "$_obj_session_display_clean_text_"
    fi
    }
Session.Display.Clean.Init

Session.LineSpace.Clear()
    {
    [[ $_obj_session_linespace_flag_ != 'true' ]] && return
    _obj_session_linespace_flag_=false
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_flag_
    }
Session.LineSpace.Disable()
    {
    [[ $_obj_session_linespace_enable_ != 'true' ]] && return
    _obj_session_linespace_enable_=false
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_enable_
    }
Session.LineSpace.DontLogChanges()
    {
    [[ $_obj_session_linespace_changes_flag_ != 'true' ]] && return
    _obj_session_linespace_changes_flag_=false
    }
Session.LineSpace.Enable()
    {
    [[ $_obj_session_linespace_enable_ = 'true' ]] && return
    _obj_session_linespace_enable_=true
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_enable_
    }
Session.LineSpace.Init()
    {
    _obj_session_linespace_text_=''
    _obj_session_linespace_flag_=false
    _obj_session_linespace_changes_flag_=true
    _obj_session_linespace_enable_=false
    }
Session.LineSpace.IsDisabled()
    {
    [[ $_obj_session_linespace_enable_ != 'true' ]]
    }
Session.LineSpace.IsEnabled()
    {
    [[ $_obj_session_linespace_enable_ = 'true' ]]
    }
Session.LineSpace.IsNot()
    {
    [[ $_obj_session_linespace_flag_ != 'true' ]]
    }
Session.LineSpace.IsSet()
    {
    [[ $_obj_session_linespace_flag_ = 'true' ]]
    }
Session.LineSpace.LogChanges()
    {
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && return
    _obj_session_linespace_changes_flag_=true
    }
Session.LineSpace.Set()
    {
    [[ $_obj_session_linespace_flag_ = 'true' ]] && return
    _obj_session_linespace_flag_=true
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_flag_
    }
Session.LineSpace.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_linespace_text_=$2
    else
        echo -n "$_obj_session_linespace_text_"
    fi
    }
Session.LineSpace.Init

Session.ShowBackupLocation.Clear()
    {
    [[ $_obj_session_showbackuplocation_flag_ != 'true' ]] && return
    _obj_session_showbackuplocation_flag_=false
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Disable()
    {
    [[ $_obj_session_showbackuplocation_enable_ != 'true' ]] && return
    _obj_session_showbackuplocation_enable_=false
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.DontLogChanges()
    {
    [[ $_obj_session_showbackuplocation_changes_flag_ != 'true' ]] && return
    _obj_session_showbackuplocation_changes_flag_=false
    }
Session.ShowBackupLocation.Enable()
    {
    [[ $_obj_session_showbackuplocation_enable_ = 'true' ]] && return
    _obj_session_showbackuplocation_enable_=true
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.Init()
    {
    _obj_session_showbackuplocation_text_=''
    _obj_session_showbackuplocation_flag_=false
    _obj_session_showbackuplocation_changes_flag_=true
    _obj_session_showbackuplocation_enable_=false
    }
Session.ShowBackupLocation.IsDisabled()
    {
    [[ $_obj_session_showbackuplocation_enable_ != 'true' ]]
    }
Session.ShowBackupLocation.IsEnabled()
    {
    [[ $_obj_session_showbackuplocation_enable_ = 'true' ]]
    }
Session.ShowBackupLocation.IsNot()
    {
    [[ $_obj_session_showbackuplocation_flag_ != 'true' ]]
    }
Session.ShowBackupLocation.IsSet()
    {
    [[ $_obj_session_showbackuplocation_flag_ = 'true' ]]
    }
Session.ShowBackupLocation.LogChanges()
    {
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && return
    _obj_session_showbackuplocation_changes_flag_=true
    }
Session.ShowBackupLocation.Set()
    {
    [[ $_obj_session_showbackuplocation_flag_ = 'true' ]] && return
    _obj_session_showbackuplocation_flag_=true
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_showbackuplocation_text_=$2
    else
        echo -n "$_obj_session_showbackuplocation_text_"
    fi
    }
Session.ShowBackupLocation.Init

Session.SuggestIssue.Clear()
    {
    [[ $_obj_session_suggestissue_flag_ != 'true' ]] && return
    _obj_session_suggestissue_flag_=false
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_flag_
    }
Session.SuggestIssue.Disable()
    {
    [[ $_obj_session_suggestissue_enable_ != 'true' ]] && return
    _obj_session_suggestissue_enable_=false
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_enable_
    }
Session.SuggestIssue.DontLogChanges()
    {
    [[ $_obj_session_suggestissue_changes_flag_ != 'true' ]] && return
    _obj_session_suggestissue_changes_flag_=false
    }
Session.SuggestIssue.Enable()
    {
    [[ $_obj_session_suggestissue_enable_ = 'true' ]] && return
    _obj_session_suggestissue_enable_=true
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_enable_
    }
Session.SuggestIssue.Init()
    {
    _obj_session_suggestissue_text_=''
    _obj_session_suggestissue_flag_=false
    _obj_session_suggestissue_changes_flag_=true
    _obj_session_suggestissue_enable_=false
    }
Session.SuggestIssue.IsDisabled()
    {
    [[ $_obj_session_suggestissue_enable_ != 'true' ]]
    }
Session.SuggestIssue.IsEnabled()
    {
    [[ $_obj_session_suggestissue_enable_ = 'true' ]]
    }
Session.SuggestIssue.IsNot()
    {
    [[ $_obj_session_suggestissue_flag_ != 'true' ]]
    }
Session.SuggestIssue.IsSet()
    {
    [[ $_obj_session_suggestissue_flag_ = 'true' ]]
    }
Session.SuggestIssue.LogChanges()
    {
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && return
    _obj_session_suggestissue_changes_flag_=true
    }
Session.SuggestIssue.Set()
    {
    [[ $_obj_session_suggestissue_flag_ = 'true' ]] && return
    _obj_session_suggestissue_flag_=true
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_flag_
    }
Session.SuggestIssue.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_suggestissue_text_=$2
    else
        echo -n "$_obj_session_suggestissue_text_"
    fi
    }
Session.SuggestIssue.Init

Session.Summary.Clear()
    {
    [[ $_obj_session_summary_flag_ != 'true' ]] && return
    _obj_session_summary_flag_=false
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_flag_
    }
Session.Summary.Disable()
    {
    [[ $_obj_session_summary_enable_ != 'true' ]] && return
    _obj_session_summary_enable_=false
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_enable_
    }
Session.Summary.DontLogChanges()
    {
    [[ $_obj_session_summary_changes_flag_ != 'true' ]] && return
    _obj_session_summary_changes_flag_=false
    }
Session.Summary.Enable()
    {
    [[ $_obj_session_summary_enable_ = 'true' ]] && return
    _obj_session_summary_enable_=true
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_enable_
    }
Session.Summary.Init()
    {
    _obj_session_summary_text_=''
    _obj_session_summary_flag_=false
    _obj_session_summary_changes_flag_=true
    _obj_session_summary_enable_=false
    }
Session.Summary.IsDisabled()
    {
    [[ $_obj_session_summary_enable_ != 'true' ]]
    }
Session.Summary.IsEnabled()
    {
    [[ $_obj_session_summary_enable_ = 'true' ]]
    }
Session.Summary.IsNot()
    {
    [[ $_obj_session_summary_flag_ != 'true' ]]
    }
Session.Summary.IsSet()
    {
    [[ $_obj_session_summary_flag_ = 'true' ]]
    }
Session.Summary.LogChanges()
    {
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && return
    _obj_session_summary_changes_flag_=true
    }
Session.Summary.Set()
    {
    [[ $_obj_session_summary_flag_ = 'true' ]] && return
    _obj_session_summary_flag_=true
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_flag_
    }
Session.Summary.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_summary_text_=$2
    else
        echo -n "$_obj_session_summary_text_"
    fi
    }
Session.Summary.Init

Session.Debug.ToArchive.Clear()
    {
    [[ $_obj_session_debug_toarchive_flag_ != 'true' ]] && return
    _obj_session_debug_toarchive_flag_=false
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_flag_
    }
Session.Debug.ToArchive.Disable()
    {
    [[ $_obj_session_debug_toarchive_enable_ != 'true' ]] && return
    _obj_session_debug_toarchive_enable_=false
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_enable_
    }
Session.Debug.ToArchive.DontLogChanges()
    {
    [[ $_obj_session_debug_toarchive_changes_flag_ != 'true' ]] && return
    _obj_session_debug_toarchive_changes_flag_=false
    }
Session.Debug.ToArchive.Enable()
    {
    [[ $_obj_session_debug_toarchive_enable_ = 'true' ]] && return
    _obj_session_debug_toarchive_enable_=true
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_enable_
    }
Session.Debug.ToArchive.Init()
    {
    _obj_session_debug_toarchive_text_=''
    _obj_session_debug_toarchive_flag_=false
    _obj_session_debug_toarchive_changes_flag_=true
    _obj_session_debug_toarchive_enable_=false
    }
Session.Debug.ToArchive.IsDisabled()
    {
    [[ $_obj_session_debug_toarchive_enable_ != 'true' ]]
    }
Session.Debug.ToArchive.IsEnabled()
    {
    [[ $_obj_session_debug_toarchive_enable_ = 'true' ]]
    }
Session.Debug.ToArchive.IsNot()
    {
    [[ $_obj_session_debug_toarchive_flag_ != 'true' ]]
    }
Session.Debug.ToArchive.IsSet()
    {
    [[ $_obj_session_debug_toarchive_flag_ = 'true' ]]
    }
Session.Debug.ToArchive.LogChanges()
    {
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && return
    _obj_session_debug_toarchive_changes_flag_=true
    }
Session.Debug.ToArchive.Set()
    {
    [[ $_obj_session_debug_toarchive_flag_ = 'true' ]] && return
    _obj_session_debug_toarchive_flag_=true
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_flag_
    }
Session.Debug.ToArchive.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_toarchive_text_=$2
    else
        echo -n "$_obj_session_debug_toarchive_text_"
    fi
    }
Session.Debug.ToArchive.Init

Session.Debug.ToFile.Clear()
    {
    [[ $_obj_session_debug_tofile_flag_ != 'true' ]] && return
    _obj_session_debug_tofile_flag_=false
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_flag_
    }
Session.Debug.ToFile.Disable()
    {
    [[ $_obj_session_debug_tofile_enable_ != 'true' ]] && return
    _obj_session_debug_tofile_enable_=false
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_enable_
    }
Session.Debug.ToFile.DontLogChanges()
    {
    [[ $_obj_session_debug_tofile_changes_flag_ != 'true' ]] && return
    _obj_session_debug_tofile_changes_flag_=false
    }
Session.Debug.ToFile.Enable()
    {
    [[ $_obj_session_debug_tofile_enable_ = 'true' ]] && return
    _obj_session_debug_tofile_enable_=true
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_enable_
    }
Session.Debug.ToFile.Init()
    {
    _obj_session_debug_tofile_text_=''
    _obj_session_debug_tofile_flag_=false
    _obj_session_debug_tofile_changes_flag_=true
    _obj_session_debug_tofile_enable_=false
    }
Session.Debug.ToFile.IsDisabled()
    {
    [[ $_obj_session_debug_tofile_enable_ != 'true' ]]
    }
Session.Debug.ToFile.IsEnabled()
    {
    [[ $_obj_session_debug_tofile_enable_ = 'true' ]]
    }
Session.Debug.ToFile.IsNot()
    {
    [[ $_obj_session_debug_tofile_flag_ != 'true' ]]
    }
Session.Debug.ToFile.IsSet()
    {
    [[ $_obj_session_debug_tofile_flag_ = 'true' ]]
    }
Session.Debug.ToFile.LogChanges()
    {
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && return
    _obj_session_debug_tofile_changes_flag_=true
    }
Session.Debug.ToFile.Set()
    {
    [[ $_obj_session_debug_tofile_flag_ = 'true' ]] && return
    _obj_session_debug_tofile_flag_=true
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_flag_
    }
Session.Debug.ToFile.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_tofile_text_=$2
    else
        echo -n "$_obj_session_debug_tofile_text_"
    fi
    }
Session.Debug.ToFile.Init

Session.Debug.ToScreen.Clear()
    {
    [[ $_obj_session_debug_toscreen_flag_ != 'true' ]] && return
    _obj_session_debug_toscreen_flag_=false
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_flag_
    }
Session.Debug.ToScreen.Disable()
    {
    [[ $_obj_session_debug_toscreen_enable_ != 'true' ]] && return
    _obj_session_debug_toscreen_enable_=false
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_enable_
    }
Session.Debug.ToScreen.DontLogChanges()
    {
    [[ $_obj_session_debug_toscreen_changes_flag_ != 'true' ]] && return
    _obj_session_debug_toscreen_changes_flag_=false
    }
Session.Debug.ToScreen.Enable()
    {
    [[ $_obj_session_debug_toscreen_enable_ = 'true' ]] && return
    _obj_session_debug_toscreen_enable_=true
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_enable_
    }
Session.Debug.ToScreen.Init()
    {
    _obj_session_debug_toscreen_text_=''
    _obj_session_debug_toscreen_flag_=false
    _obj_session_debug_toscreen_changes_flag_=true
    _obj_session_debug_toscreen_enable_=false
    }
Session.Debug.ToScreen.IsDisabled()
    {
    [[ $_obj_session_debug_toscreen_enable_ != 'true' ]]
    }
Session.Debug.ToScreen.IsEnabled()
    {
    [[ $_obj_session_debug_toscreen_enable_ = 'true' ]]
    }
Session.Debug.ToScreen.IsNot()
    {
    [[ $_obj_session_debug_toscreen_flag_ != 'true' ]]
    }
Session.Debug.ToScreen.IsSet()
    {
    [[ $_obj_session_debug_toscreen_flag_ = 'true' ]]
    }
Session.Debug.ToScreen.LogChanges()
    {
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && return
    _obj_session_debug_toscreen_changes_flag_=true
    }
Session.Debug.ToScreen.Set()
    {
    [[ $_obj_session_debug_toscreen_flag_ = 'true' ]] && return
    _obj_session_debug_toscreen_flag_=true
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_flag_
    }
Session.Debug.ToScreen.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_toscreen_text_=$2
    else
        echo -n "$_obj_session_debug_toscreen_text_"
    fi
    }
Session.Debug.ToScreen.Init

QPKGs.States.Built.Clear()
    {
    [[ $_obj_qpkgs_states_built_flag_ != 'true' ]] && return
    _obj_qpkgs_states_built_flag_=false
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_flag_
    }
QPKGs.States.Built.Disable()
    {
    [[ $_obj_qpkgs_states_built_enable_ != 'true' ]] && return
    _obj_qpkgs_states_built_enable_=false
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_enable_
    }
QPKGs.States.Built.DontLogChanges()
    {
    [[ $_obj_qpkgs_states_built_changes_flag_ != 'true' ]] && return
    _obj_qpkgs_states_built_changes_flag_=false
    }
QPKGs.States.Built.Enable()
    {
    [[ $_obj_qpkgs_states_built_enable_ = 'true' ]] && return
    _obj_qpkgs_states_built_enable_=true
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_enable_
    }
QPKGs.States.Built.Init()
    {
    _obj_qpkgs_states_built_text_=''
    _obj_qpkgs_states_built_flag_=false
    _obj_qpkgs_states_built_changes_flag_=true
    _obj_qpkgs_states_built_enable_=false
    }
QPKGs.States.Built.IsDisabled()
    {
    [[ $_obj_qpkgs_states_built_enable_ != 'true' ]]
    }
QPKGs.States.Built.IsEnabled()
    {
    [[ $_obj_qpkgs_states_built_enable_ = 'true' ]]
    }
QPKGs.States.Built.IsNot()
    {
    [[ $_obj_qpkgs_states_built_flag_ != 'true' ]]
    }
QPKGs.States.Built.IsSet()
    {
    [[ $_obj_qpkgs_states_built_flag_ = 'true' ]]
    }
QPKGs.States.Built.LogChanges()
    {
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && return
    _obj_qpkgs_states_built_changes_flag_=true
    }
QPKGs.States.Built.Set()
    {
    [[ $_obj_qpkgs_states_built_flag_ = 'true' ]] && return
    _obj_qpkgs_states_built_flag_=true
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_flag_
    }
QPKGs.States.Built.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_qpkgs_states_built_text_=$2
    else
        echo -n "$_obj_qpkgs_states_built_text_"
    fi
    }
QPKGs.States.Built.Init

QPKGs.SkipProcessing.Clear()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_flag_=false
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_flag_
    }
QPKGs.SkipProcessing.Disable()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_enable_=false
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_enable_
    }
QPKGs.SkipProcessing.DontLogChanges()
    {
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_changes_flag_=false
    }
QPKGs.SkipProcessing.Enable()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_enable_=true
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_enable_
    }
QPKGs.SkipProcessing.Init()
    {
    _obj_qpkgs_skipprocessing_text_=''
    _obj_qpkgs_skipprocessing_flag_=false
    _obj_qpkgs_skipprocessing_changes_flag_=true
    _obj_qpkgs_skipprocessing_enable_=false
    }
QPKGs.SkipProcessing.IsDisabled()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ != 'true' ]]
    }
QPKGs.SkipProcessing.IsEnabled()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ = 'true' ]]
    }
QPKGs.SkipProcessing.IsNot()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ != 'true' ]]
    }
QPKGs.SkipProcessing.IsSet()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ = 'true' ]]
    }
QPKGs.SkipProcessing.LogChanges()
    {
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_changes_flag_=true
    }
QPKGs.SkipProcessing.Set()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_flag_=true
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_flag_
    }
QPKGs.SkipProcessing.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_qpkgs_skipprocessing_text_=$2
    else
        echo -n "$_obj_qpkgs_skipprocessing_text_"
    fi
    }
QPKGs.SkipProcessing.Init

IPKGs.Upgrade.Clear()
    {
    [[ $_obj_ipkgs_upgrade_flag_ != 'true' ]] && return
    _obj_ipkgs_upgrade_flag_=false
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_flag_
    }
IPKGs.Upgrade.Disable()
    {
    [[ $_obj_ipkgs_upgrade_enable_ != 'true' ]] && return
    _obj_ipkgs_upgrade_enable_=false
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_enable_
    }
IPKGs.Upgrade.DontLogChanges()
    {
    [[ $_obj_ipkgs_upgrade_changes_flag_ != 'true' ]] && return
    _obj_ipkgs_upgrade_changes_flag_=false
    }
IPKGs.Upgrade.Enable()
    {
    [[ $_obj_ipkgs_upgrade_enable_ = 'true' ]] && return
    _obj_ipkgs_upgrade_enable_=true
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_enable_
    }
IPKGs.Upgrade.Init()
    {
    _obj_ipkgs_upgrade_text_=''
    _obj_ipkgs_upgrade_flag_=false
    _obj_ipkgs_upgrade_changes_flag_=true
    _obj_ipkgs_upgrade_enable_=false
    }
IPKGs.Upgrade.IsDisabled()
    {
    [[ $_obj_ipkgs_upgrade_enable_ != 'true' ]]
    }
IPKGs.Upgrade.IsEnabled()
    {
    [[ $_obj_ipkgs_upgrade_enable_ = 'true' ]]
    }
IPKGs.Upgrade.IsNot()
    {
    [[ $_obj_ipkgs_upgrade_flag_ != 'true' ]]
    }
IPKGs.Upgrade.IsSet()
    {
    [[ $_obj_ipkgs_upgrade_flag_ = 'true' ]]
    }
IPKGs.Upgrade.LogChanges()
    {
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && return
    _obj_ipkgs_upgrade_changes_flag_=true
    }
IPKGs.Upgrade.Set()
    {
    [[ $_obj_ipkgs_upgrade_flag_ = 'true' ]] && return
    _obj_ipkgs_upgrade_flag_=true
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_flag_
    }
IPKGs.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_ipkgs_upgrade_text_=$2
    else
        echo -n "$_obj_ipkgs_upgrade_text_"
    fi
    }
IPKGs.Upgrade.Init

IPKGs.Install.Clear()
    {
    [[ $_obj_ipkgs_install_flag_ != 'true' ]] && return
    _obj_ipkgs_install_flag_=false
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_flag_
    }
IPKGs.Install.Disable()
    {
    [[ $_obj_ipkgs_install_enable_ != 'true' ]] && return
    _obj_ipkgs_install_enable_=false
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_enable_
    }
IPKGs.Install.DontLogChanges()
    {
    [[ $_obj_ipkgs_install_changes_flag_ != 'true' ]] && return
    _obj_ipkgs_install_changes_flag_=false
    }
IPKGs.Install.Enable()
    {
    [[ $_obj_ipkgs_install_enable_ = 'true' ]] && return
    _obj_ipkgs_install_enable_=true
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_enable_
    }
IPKGs.Install.Init()
    {
    _obj_ipkgs_install_text_=''
    _obj_ipkgs_install_flag_=false
    _obj_ipkgs_install_changes_flag_=true
    _obj_ipkgs_install_enable_=false
    }
IPKGs.Install.IsDisabled()
    {
    [[ $_obj_ipkgs_install_enable_ != 'true' ]]
    }
IPKGs.Install.IsEnabled()
    {
    [[ $_obj_ipkgs_install_enable_ = 'true' ]]
    }
IPKGs.Install.IsNot()
    {
    [[ $_obj_ipkgs_install_flag_ != 'true' ]]
    }
IPKGs.Install.IsSet()
    {
    [[ $_obj_ipkgs_install_flag_ = 'true' ]]
    }
IPKGs.Install.LogChanges()
    {
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && return
    _obj_ipkgs_install_changes_flag_=true
    }
IPKGs.Install.Set()
    {
    [[ $_obj_ipkgs_install_flag_ = 'true' ]] && return
    _obj_ipkgs_install_flag_=true
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_flag_
    }
IPKGs.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_ipkgs_install_text_=$2
    else
        echo -n "$_obj_ipkgs_install_text_"
    fi
    }
IPKGs.Install.Init

PIPs.Install.Clear()
    {
    [[ $_obj_pips_install_flag_ != 'true' ]] && return
    _obj_pips_install_flag_=false
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_flag_
    }
PIPs.Install.Disable()
    {
    [[ $_obj_pips_install_enable_ != 'true' ]] && return
    _obj_pips_install_enable_=false
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_enable_
    }
PIPs.Install.DontLogChanges()
    {
    [[ $_obj_pips_install_changes_flag_ != 'true' ]] && return
    _obj_pips_install_changes_flag_=false
    }
PIPs.Install.Enable()
    {
    [[ $_obj_pips_install_enable_ = 'true' ]] && return
    _obj_pips_install_enable_=true
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_enable_
    }
PIPs.Install.Init()
    {
    _obj_pips_install_text_=''
    _obj_pips_install_flag_=false
    _obj_pips_install_changes_flag_=true
    _obj_pips_install_enable_=false
    }
PIPs.Install.IsDisabled()
    {
    [[ $_obj_pips_install_enable_ != 'true' ]]
    }
PIPs.Install.IsEnabled()
    {
    [[ $_obj_pips_install_enable_ = 'true' ]]
    }
PIPs.Install.IsNot()
    {
    [[ $_obj_pips_install_flag_ != 'true' ]]
    }
PIPs.Install.IsSet()
    {
    [[ $_obj_pips_install_flag_ = 'true' ]]
    }
PIPs.Install.LogChanges()
    {
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && return
    _obj_pips_install_changes_flag_=true
    }
PIPs.Install.Set()
    {
    [[ $_obj_pips_install_flag_ = 'true' ]] && return
    _obj_pips_install_flag_=true
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_flag_
    }
PIPs.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_pips_install_text_=$2
    else
        echo -n "$_obj_pips_install_text_"
    fi
    }
PIPs.Install.Init

Opts.Dependencies.Check.Clear()
    {
    [[ $_obj_opts_dependencies_check_flag_ != 'true' ]] && return
    _obj_opts_dependencies_check_flag_=false
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_flag_
    }
Opts.Dependencies.Check.Disable()
    {
    [[ $_obj_opts_dependencies_check_enable_ != 'true' ]] && return
    _obj_opts_dependencies_check_enable_=false
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_enable_
    }
Opts.Dependencies.Check.DontLogChanges()
    {
    [[ $_obj_opts_dependencies_check_changes_flag_ != 'true' ]] && return
    _obj_opts_dependencies_check_changes_flag_=false
    }
Opts.Dependencies.Check.Enable()
    {
    [[ $_obj_opts_dependencies_check_enable_ = 'true' ]] && return
    _obj_opts_dependencies_check_enable_=true
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_enable_
    }
Opts.Dependencies.Check.Init()
    {
    _obj_opts_dependencies_check_text_=''
    _obj_opts_dependencies_check_flag_=false
    _obj_opts_dependencies_check_changes_flag_=true
    _obj_opts_dependencies_check_enable_=false
    }
Opts.Dependencies.Check.IsDisabled()
    {
    [[ $_obj_opts_dependencies_check_enable_ != 'true' ]]
    }
Opts.Dependencies.Check.IsEnabled()
    {
    [[ $_obj_opts_dependencies_check_enable_ = 'true' ]]
    }
Opts.Dependencies.Check.IsNot()
    {
    [[ $_obj_opts_dependencies_check_flag_ != 'true' ]]
    }
Opts.Dependencies.Check.IsSet()
    {
    [[ $_obj_opts_dependencies_check_flag_ = 'true' ]]
    }
Opts.Dependencies.Check.LogChanges()
    {
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && return
    _obj_opts_dependencies_check_changes_flag_=true
    }
Opts.Dependencies.Check.Set()
    {
    [[ $_obj_opts_dependencies_check_flag_ = 'true' ]] && return
    _obj_opts_dependencies_check_flag_=true
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_flag_
    }
Opts.Dependencies.Check.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_dependencies_check_text_=$2
    else
        echo -n "$_obj_opts_dependencies_check_text_"
    fi
    }
Opts.Dependencies.Check.Init

Opts.IgnoreFreeSpace.Clear()
    {
    [[ $_obj_opts_ignorefreespace_flag_ != 'true' ]] && return
    _obj_opts_ignorefreespace_flag_=false
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_flag_
    }
Opts.IgnoreFreeSpace.Disable()
    {
    [[ $_obj_opts_ignorefreespace_enable_ != 'true' ]] && return
    _obj_opts_ignorefreespace_enable_=false
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_enable_
    }
Opts.IgnoreFreeSpace.DontLogChanges()
    {
    [[ $_obj_opts_ignorefreespace_changes_flag_ != 'true' ]] && return
    _obj_opts_ignorefreespace_changes_flag_=false
    }
Opts.IgnoreFreeSpace.Enable()
    {
    [[ $_obj_opts_ignorefreespace_enable_ = 'true' ]] && return
    _obj_opts_ignorefreespace_enable_=true
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_enable_
    }
Opts.IgnoreFreeSpace.Init()
    {
    _obj_opts_ignorefreespace_text_=''
    _obj_opts_ignorefreespace_flag_=false
    _obj_opts_ignorefreespace_changes_flag_=true
    _obj_opts_ignorefreespace_enable_=false
    }
Opts.IgnoreFreeSpace.IsDisabled()
    {
    [[ $_obj_opts_ignorefreespace_enable_ != 'true' ]]
    }
Opts.IgnoreFreeSpace.IsEnabled()
    {
    [[ $_obj_opts_ignorefreespace_enable_ = 'true' ]]
    }
Opts.IgnoreFreeSpace.IsNot()
    {
    [[ $_obj_opts_ignorefreespace_flag_ != 'true' ]]
    }
Opts.IgnoreFreeSpace.IsSet()
    {
    [[ $_obj_opts_ignorefreespace_flag_ = 'true' ]]
    }
Opts.IgnoreFreeSpace.LogChanges()
    {
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && return
    _obj_opts_ignorefreespace_changes_flag_=true
    }
Opts.IgnoreFreeSpace.Set()
    {
    [[ $_obj_opts_ignorefreespace_flag_ = 'true' ]] && return
    _obj_opts_ignorefreespace_flag_=true
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_flag_
    }
Opts.IgnoreFreeSpace.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_ignorefreespace_text_=$2
    else
        echo -n "$_obj_opts_ignorefreespace_text_"
    fi
    }
Opts.IgnoreFreeSpace.Init

Opts.Versions.View.Clear()
    {
    [[ $_obj_opts_versions_view_flag_ != 'true' ]] && return
    _obj_opts_versions_view_flag_=false
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_flag_
    }
Opts.Versions.View.Disable()
    {
    [[ $_obj_opts_versions_view_enable_ != 'true' ]] && return
    _obj_opts_versions_view_enable_=false
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_enable_
    }
Opts.Versions.View.DontLogChanges()
    {
    [[ $_obj_opts_versions_view_changes_flag_ != 'true' ]] && return
    _obj_opts_versions_view_changes_flag_=false
    }
Opts.Versions.View.Enable()
    {
    [[ $_obj_opts_versions_view_enable_ = 'true' ]] && return
    _obj_opts_versions_view_enable_=true
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_enable_
    }
Opts.Versions.View.Init()
    {
    _obj_opts_versions_view_text_=''
    _obj_opts_versions_view_flag_=false
    _obj_opts_versions_view_changes_flag_=true
    _obj_opts_versions_view_enable_=false
    }
Opts.Versions.View.IsDisabled()
    {
    [[ $_obj_opts_versions_view_enable_ != 'true' ]]
    }
Opts.Versions.View.IsEnabled()
    {
    [[ $_obj_opts_versions_view_enable_ = 'true' ]]
    }
Opts.Versions.View.IsNot()
    {
    [[ $_obj_opts_versions_view_flag_ != 'true' ]]
    }
Opts.Versions.View.IsSet()
    {
    [[ $_obj_opts_versions_view_flag_ = 'true' ]]
    }
Opts.Versions.View.LogChanges()
    {
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && return
    _obj_opts_versions_view_changes_flag_=true
    }
Opts.Versions.View.Set()
    {
    [[ $_obj_opts_versions_view_flag_ = 'true' ]] && return
    _obj_opts_versions_view_flag_=true
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_flag_
    }
Opts.Versions.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_versions_view_text_=$2
    else
        echo -n "$_obj_opts_versions_view_text_"
    fi
    }
Opts.Versions.View.Init

Opts.Help.Abbreviations.Clear()
    {
    [[ $_obj_opts_help_abbreviations_flag_ != 'true' ]] && return
    _obj_opts_help_abbreviations_flag_=false
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_flag_
    }
Opts.Help.Abbreviations.Disable()
    {
    [[ $_obj_opts_help_abbreviations_enable_ != 'true' ]] && return
    _obj_opts_help_abbreviations_enable_=false
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_enable_
    }
Opts.Help.Abbreviations.DontLogChanges()
    {
    [[ $_obj_opts_help_abbreviations_changes_flag_ != 'true' ]] && return
    _obj_opts_help_abbreviations_changes_flag_=false
    }
Opts.Help.Abbreviations.Enable()
    {
    [[ $_obj_opts_help_abbreviations_enable_ = 'true' ]] && return
    _obj_opts_help_abbreviations_enable_=true
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_enable_
    }
Opts.Help.Abbreviations.Init()
    {
    _obj_opts_help_abbreviations_text_=''
    _obj_opts_help_abbreviations_flag_=false
    _obj_opts_help_abbreviations_changes_flag_=true
    _obj_opts_help_abbreviations_enable_=false
    }
Opts.Help.Abbreviations.IsDisabled()
    {
    [[ $_obj_opts_help_abbreviations_enable_ != 'true' ]]
    }
Opts.Help.Abbreviations.IsEnabled()
    {
    [[ $_obj_opts_help_abbreviations_enable_ = 'true' ]]
    }
Opts.Help.Abbreviations.IsNot()
    {
    [[ $_obj_opts_help_abbreviations_flag_ != 'true' ]]
    }
Opts.Help.Abbreviations.IsSet()
    {
    [[ $_obj_opts_help_abbreviations_flag_ = 'true' ]]
    }
Opts.Help.Abbreviations.LogChanges()
    {
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && return
    _obj_opts_help_abbreviations_changes_flag_=true
    }
Opts.Help.Abbreviations.Set()
    {
    [[ $_obj_opts_help_abbreviations_flag_ = 'true' ]] && return
    _obj_opts_help_abbreviations_flag_=true
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_flag_
    }
Opts.Help.Abbreviations.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_abbreviations_text_=$2
    else
        echo -n "$_obj_opts_help_abbreviations_text_"
    fi
    }
Opts.Help.Abbreviations.Init

Opts.Help.Actions.Clear()
    {
    [[ $_obj_opts_help_actions_flag_ != 'true' ]] && return
    _obj_opts_help_actions_flag_=false
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_flag_
    }
Opts.Help.Actions.Disable()
    {
    [[ $_obj_opts_help_actions_enable_ != 'true' ]] && return
    _obj_opts_help_actions_enable_=false
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_enable_
    }
Opts.Help.Actions.DontLogChanges()
    {
    [[ $_obj_opts_help_actions_changes_flag_ != 'true' ]] && return
    _obj_opts_help_actions_changes_flag_=false
    }
Opts.Help.Actions.Enable()
    {
    [[ $_obj_opts_help_actions_enable_ = 'true' ]] && return
    _obj_opts_help_actions_enable_=true
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_enable_
    }
Opts.Help.Actions.Init()
    {
    _obj_opts_help_actions_text_=''
    _obj_opts_help_actions_flag_=false
    _obj_opts_help_actions_changes_flag_=true
    _obj_opts_help_actions_enable_=false
    }
Opts.Help.Actions.IsDisabled()
    {
    [[ $_obj_opts_help_actions_enable_ != 'true' ]]
    }
Opts.Help.Actions.IsEnabled()
    {
    [[ $_obj_opts_help_actions_enable_ = 'true' ]]
    }
Opts.Help.Actions.IsNot()
    {
    [[ $_obj_opts_help_actions_flag_ != 'true' ]]
    }
Opts.Help.Actions.IsSet()
    {
    [[ $_obj_opts_help_actions_flag_ = 'true' ]]
    }
Opts.Help.Actions.LogChanges()
    {
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && return
    _obj_opts_help_actions_changes_flag_=true
    }
Opts.Help.Actions.Set()
    {
    [[ $_obj_opts_help_actions_flag_ = 'true' ]] && return
    _obj_opts_help_actions_flag_=true
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_flag_
    }
Opts.Help.Actions.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_actions_text_=$2
    else
        echo -n "$_obj_opts_help_actions_text_"
    fi
    }
Opts.Help.Actions.Init

Opts.Help.ActionsAll.Clear()
    {
    [[ $_obj_opts_help_actionsall_flag_ != 'true' ]] && return
    _obj_opts_help_actionsall_flag_=false
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_flag_
    }
Opts.Help.ActionsAll.Disable()
    {
    [[ $_obj_opts_help_actionsall_enable_ != 'true' ]] && return
    _obj_opts_help_actionsall_enable_=false
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_enable_
    }
Opts.Help.ActionsAll.DontLogChanges()
    {
    [[ $_obj_opts_help_actionsall_changes_flag_ != 'true' ]] && return
    _obj_opts_help_actionsall_changes_flag_=false
    }
Opts.Help.ActionsAll.Enable()
    {
    [[ $_obj_opts_help_actionsall_enable_ = 'true' ]] && return
    _obj_opts_help_actionsall_enable_=true
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_enable_
    }
Opts.Help.ActionsAll.Init()
    {
    _obj_opts_help_actionsall_text_=''
    _obj_opts_help_actionsall_flag_=false
    _obj_opts_help_actionsall_changes_flag_=true
    _obj_opts_help_actionsall_enable_=false
    }
Opts.Help.ActionsAll.IsDisabled()
    {
    [[ $_obj_opts_help_actionsall_enable_ != 'true' ]]
    }
Opts.Help.ActionsAll.IsEnabled()
    {
    [[ $_obj_opts_help_actionsall_enable_ = 'true' ]]
    }
Opts.Help.ActionsAll.IsNot()
    {
    [[ $_obj_opts_help_actionsall_flag_ != 'true' ]]
    }
Opts.Help.ActionsAll.IsSet()
    {
    [[ $_obj_opts_help_actionsall_flag_ = 'true' ]]
    }
Opts.Help.ActionsAll.LogChanges()
    {
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && return
    _obj_opts_help_actionsall_changes_flag_=true
    }
Opts.Help.ActionsAll.Set()
    {
    [[ $_obj_opts_help_actionsall_flag_ = 'true' ]] && return
    _obj_opts_help_actionsall_flag_=true
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_flag_
    }
Opts.Help.ActionsAll.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_actionsall_text_=$2
    else
        echo -n "$_obj_opts_help_actionsall_text_"
    fi
    }
Opts.Help.ActionsAll.Init

Opts.Help.Backups.Clear()
    {
    [[ $_obj_opts_help_backups_flag_ != 'true' ]] && return
    _obj_opts_help_backups_flag_=false
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_flag_
    }
Opts.Help.Backups.Disable()
    {
    [[ $_obj_opts_help_backups_enable_ != 'true' ]] && return
    _obj_opts_help_backups_enable_=false
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_enable_
    }
Opts.Help.Backups.DontLogChanges()
    {
    [[ $_obj_opts_help_backups_changes_flag_ != 'true' ]] && return
    _obj_opts_help_backups_changes_flag_=false
    }
Opts.Help.Backups.Enable()
    {
    [[ $_obj_opts_help_backups_enable_ = 'true' ]] && return
    _obj_opts_help_backups_enable_=true
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_enable_
    }
Opts.Help.Backups.Init()
    {
    _obj_opts_help_backups_text_=''
    _obj_opts_help_backups_flag_=false
    _obj_opts_help_backups_changes_flag_=true
    _obj_opts_help_backups_enable_=false
    }
Opts.Help.Backups.IsDisabled()
    {
    [[ $_obj_opts_help_backups_enable_ != 'true' ]]
    }
Opts.Help.Backups.IsEnabled()
    {
    [[ $_obj_opts_help_backups_enable_ = 'true' ]]
    }
Opts.Help.Backups.IsNot()
    {
    [[ $_obj_opts_help_backups_flag_ != 'true' ]]
    }
Opts.Help.Backups.IsSet()
    {
    [[ $_obj_opts_help_backups_flag_ = 'true' ]]
    }
Opts.Help.Backups.LogChanges()
    {
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && return
    _obj_opts_help_backups_changes_flag_=true
    }
Opts.Help.Backups.Set()
    {
    [[ $_obj_opts_help_backups_flag_ = 'true' ]] && return
    _obj_opts_help_backups_flag_=true
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_flag_
    }
Opts.Help.Backups.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_backups_text_=$2
    else
        echo -n "$_obj_opts_help_backups_text_"
    fi
    }
Opts.Help.Backups.Init

Opts.Help.Basic.Clear()
    {
    [[ $_obj_opts_help_basic_flag_ != 'true' ]] && return
    _obj_opts_help_basic_flag_=false
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_flag_
    }
Opts.Help.Basic.Disable()
    {
    [[ $_obj_opts_help_basic_enable_ != 'true' ]] && return
    _obj_opts_help_basic_enable_=false
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_enable_
    }
Opts.Help.Basic.DontLogChanges()
    {
    [[ $_obj_opts_help_basic_changes_flag_ != 'true' ]] && return
    _obj_opts_help_basic_changes_flag_=false
    }
Opts.Help.Basic.Enable()
    {
    [[ $_obj_opts_help_basic_enable_ = 'true' ]] && return
    _obj_opts_help_basic_enable_=true
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_enable_
    }
Opts.Help.Basic.Init()
    {
    _obj_opts_help_basic_text_=''
    _obj_opts_help_basic_flag_=false
    _obj_opts_help_basic_changes_flag_=true
    _obj_opts_help_basic_enable_=false
    }
Opts.Help.Basic.IsDisabled()
    {
    [[ $_obj_opts_help_basic_enable_ != 'true' ]]
    }
Opts.Help.Basic.IsEnabled()
    {
    [[ $_obj_opts_help_basic_enable_ = 'true' ]]
    }
Opts.Help.Basic.IsNot()
    {
    [[ $_obj_opts_help_basic_flag_ != 'true' ]]
    }
Opts.Help.Basic.IsSet()
    {
    [[ $_obj_opts_help_basic_flag_ = 'true' ]]
    }
Opts.Help.Basic.LogChanges()
    {
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && return
    _obj_opts_help_basic_changes_flag_=true
    }
Opts.Help.Basic.Set()
    {
    [[ $_obj_opts_help_basic_flag_ = 'true' ]] && return
    _obj_opts_help_basic_flag_=true
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_flag_
    }
Opts.Help.Basic.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_basic_text_=$2
    else
        echo -n "$_obj_opts_help_basic_text_"
    fi
    }
Opts.Help.Basic.Init

Opts.Help.Options.Clear()
    {
    [[ $_obj_opts_help_options_flag_ != 'true' ]] && return
    _obj_opts_help_options_flag_=false
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_flag_
    }
Opts.Help.Options.Disable()
    {
    [[ $_obj_opts_help_options_enable_ != 'true' ]] && return
    _obj_opts_help_options_enable_=false
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_enable_
    }
Opts.Help.Options.DontLogChanges()
    {
    [[ $_obj_opts_help_options_changes_flag_ != 'true' ]] && return
    _obj_opts_help_options_changes_flag_=false
    }
Opts.Help.Options.Enable()
    {
    [[ $_obj_opts_help_options_enable_ = 'true' ]] && return
    _obj_opts_help_options_enable_=true
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_enable_
    }
Opts.Help.Options.Init()
    {
    _obj_opts_help_options_text_=''
    _obj_opts_help_options_flag_=false
    _obj_opts_help_options_changes_flag_=true
    _obj_opts_help_options_enable_=false
    }
Opts.Help.Options.IsDisabled()
    {
    [[ $_obj_opts_help_options_enable_ != 'true' ]]
    }
Opts.Help.Options.IsEnabled()
    {
    [[ $_obj_opts_help_options_enable_ = 'true' ]]
    }
Opts.Help.Options.IsNot()
    {
    [[ $_obj_opts_help_options_flag_ != 'true' ]]
    }
Opts.Help.Options.IsSet()
    {
    [[ $_obj_opts_help_options_flag_ = 'true' ]]
    }
Opts.Help.Options.LogChanges()
    {
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && return
    _obj_opts_help_options_changes_flag_=true
    }
Opts.Help.Options.Set()
    {
    [[ $_obj_opts_help_options_flag_ = 'true' ]] && return
    _obj_opts_help_options_flag_=true
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_flag_
    }
Opts.Help.Options.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_options_text_=$2
    else
        echo -n "$_obj_opts_help_options_text_"
    fi
    }
Opts.Help.Options.Init

Opts.Help.Packages.Clear()
    {
    [[ $_obj_opts_help_packages_flag_ != 'true' ]] && return
    _obj_opts_help_packages_flag_=false
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_flag_
    }
Opts.Help.Packages.Disable()
    {
    [[ $_obj_opts_help_packages_enable_ != 'true' ]] && return
    _obj_opts_help_packages_enable_=false
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_enable_
    }
Opts.Help.Packages.DontLogChanges()
    {
    [[ $_obj_opts_help_packages_changes_flag_ != 'true' ]] && return
    _obj_opts_help_packages_changes_flag_=false
    }
Opts.Help.Packages.Enable()
    {
    [[ $_obj_opts_help_packages_enable_ = 'true' ]] && return
    _obj_opts_help_packages_enable_=true
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_enable_
    }
Opts.Help.Packages.Init()
    {
    _obj_opts_help_packages_text_=''
    _obj_opts_help_packages_flag_=false
    _obj_opts_help_packages_changes_flag_=true
    _obj_opts_help_packages_enable_=false
    }
Opts.Help.Packages.IsDisabled()
    {
    [[ $_obj_opts_help_packages_enable_ != 'true' ]]
    }
Opts.Help.Packages.IsEnabled()
    {
    [[ $_obj_opts_help_packages_enable_ = 'true' ]]
    }
Opts.Help.Packages.IsNot()
    {
    [[ $_obj_opts_help_packages_flag_ != 'true' ]]
    }
Opts.Help.Packages.IsSet()
    {
    [[ $_obj_opts_help_packages_flag_ = 'true' ]]
    }
Opts.Help.Packages.LogChanges()
    {
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && return
    _obj_opts_help_packages_changes_flag_=true
    }
Opts.Help.Packages.Set()
    {
    [[ $_obj_opts_help_packages_flag_ = 'true' ]] && return
    _obj_opts_help_packages_flag_=true
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_flag_
    }
Opts.Help.Packages.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_packages_text_=$2
    else
        echo -n "$_obj_opts_help_packages_text_"
    fi
    }
Opts.Help.Packages.Init

Opts.Help.Problems.Clear()
    {
    [[ $_obj_opts_help_problems_flag_ != 'true' ]] && return
    _obj_opts_help_problems_flag_=false
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_flag_
    }
Opts.Help.Problems.Disable()
    {
    [[ $_obj_opts_help_problems_enable_ != 'true' ]] && return
    _obj_opts_help_problems_enable_=false
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_enable_
    }
Opts.Help.Problems.DontLogChanges()
    {
    [[ $_obj_opts_help_problems_changes_flag_ != 'true' ]] && return
    _obj_opts_help_problems_changes_flag_=false
    }
Opts.Help.Problems.Enable()
    {
    [[ $_obj_opts_help_problems_enable_ = 'true' ]] && return
    _obj_opts_help_problems_enable_=true
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_enable_
    }
Opts.Help.Problems.Init()
    {
    _obj_opts_help_problems_text_=''
    _obj_opts_help_problems_flag_=false
    _obj_opts_help_problems_changes_flag_=true
    _obj_opts_help_problems_enable_=false
    }
Opts.Help.Problems.IsDisabled()
    {
    [[ $_obj_opts_help_problems_enable_ != 'true' ]]
    }
Opts.Help.Problems.IsEnabled()
    {
    [[ $_obj_opts_help_problems_enable_ = 'true' ]]
    }
Opts.Help.Problems.IsNot()
    {
    [[ $_obj_opts_help_problems_flag_ != 'true' ]]
    }
Opts.Help.Problems.IsSet()
    {
    [[ $_obj_opts_help_problems_flag_ = 'true' ]]
    }
Opts.Help.Problems.LogChanges()
    {
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && return
    _obj_opts_help_problems_changes_flag_=true
    }
Opts.Help.Problems.Set()
    {
    [[ $_obj_opts_help_problems_flag_ = 'true' ]] && return
    _obj_opts_help_problems_flag_=true
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_flag_
    }
Opts.Help.Problems.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_problems_text_=$2
    else
        echo -n "$_obj_opts_help_problems_text_"
    fi
    }
Opts.Help.Problems.Init

Opts.Help.Status.Clear()
    {
    [[ $_obj_opts_help_status_flag_ != 'true' ]] && return
    _obj_opts_help_status_flag_=false
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_flag_
    }
Opts.Help.Status.Disable()
    {
    [[ $_obj_opts_help_status_enable_ != 'true' ]] && return
    _obj_opts_help_status_enable_=false
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_enable_
    }
Opts.Help.Status.DontLogChanges()
    {
    [[ $_obj_opts_help_status_changes_flag_ != 'true' ]] && return
    _obj_opts_help_status_changes_flag_=false
    }
Opts.Help.Status.Enable()
    {
    [[ $_obj_opts_help_status_enable_ = 'true' ]] && return
    _obj_opts_help_status_enable_=true
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_enable_
    }
Opts.Help.Status.Init()
    {
    _obj_opts_help_status_text_=''
    _obj_opts_help_status_flag_=false
    _obj_opts_help_status_changes_flag_=true
    _obj_opts_help_status_enable_=false
    }
Opts.Help.Status.IsDisabled()
    {
    [[ $_obj_opts_help_status_enable_ != 'true' ]]
    }
Opts.Help.Status.IsEnabled()
    {
    [[ $_obj_opts_help_status_enable_ = 'true' ]]
    }
Opts.Help.Status.IsNot()
    {
    [[ $_obj_opts_help_status_flag_ != 'true' ]]
    }
Opts.Help.Status.IsSet()
    {
    [[ $_obj_opts_help_status_flag_ = 'true' ]]
    }
Opts.Help.Status.LogChanges()
    {
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && return
    _obj_opts_help_status_changes_flag_=true
    }
Opts.Help.Status.Set()
    {
    [[ $_obj_opts_help_status_flag_ = 'true' ]] && return
    _obj_opts_help_status_flag_=true
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_flag_
    }
Opts.Help.Status.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_status_text_=$2
    else
        echo -n "$_obj_opts_help_status_text_"
    fi
    }
Opts.Help.Status.Init

Opts.Help.Tips.Clear()
    {
    [[ $_obj_opts_help_tips_flag_ != 'true' ]] && return
    _obj_opts_help_tips_flag_=false
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_flag_
    }
Opts.Help.Tips.Disable()
    {
    [[ $_obj_opts_help_tips_enable_ != 'true' ]] && return
    _obj_opts_help_tips_enable_=false
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_enable_
    }
Opts.Help.Tips.DontLogChanges()
    {
    [[ $_obj_opts_help_tips_changes_flag_ != 'true' ]] && return
    _obj_opts_help_tips_changes_flag_=false
    }
Opts.Help.Tips.Enable()
    {
    [[ $_obj_opts_help_tips_enable_ = 'true' ]] && return
    _obj_opts_help_tips_enable_=true
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_enable_
    }
Opts.Help.Tips.Init()
    {
    _obj_opts_help_tips_text_=''
    _obj_opts_help_tips_flag_=false
    _obj_opts_help_tips_changes_flag_=true
    _obj_opts_help_tips_enable_=false
    }
Opts.Help.Tips.IsDisabled()
    {
    [[ $_obj_opts_help_tips_enable_ != 'true' ]]
    }
Opts.Help.Tips.IsEnabled()
    {
    [[ $_obj_opts_help_tips_enable_ = 'true' ]]
    }
Opts.Help.Tips.IsNot()
    {
    [[ $_obj_opts_help_tips_flag_ != 'true' ]]
    }
Opts.Help.Tips.IsSet()
    {
    [[ $_obj_opts_help_tips_flag_ = 'true' ]]
    }
Opts.Help.Tips.LogChanges()
    {
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && return
    _obj_opts_help_tips_changes_flag_=true
    }
Opts.Help.Tips.Set()
    {
    [[ $_obj_opts_help_tips_flag_ = 'true' ]] && return
    _obj_opts_help_tips_flag_=true
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_flag_
    }
Opts.Help.Tips.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_tips_text_=$2
    else
        echo -n "$_obj_opts_help_tips_text_"
    fi
    }
Opts.Help.Tips.Init

Opts.Log.All.Paste.Clear()
    {
    [[ $_obj_opts_log_all_paste_flag_ != 'true' ]] && return
    _obj_opts_log_all_paste_flag_=false
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_flag_
    }
Opts.Log.All.Paste.Disable()
    {
    [[ $_obj_opts_log_all_paste_enable_ != 'true' ]] && return
    _obj_opts_log_all_paste_enable_=false
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_enable_
    }
Opts.Log.All.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_all_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_all_paste_changes_flag_=false
    }
Opts.Log.All.Paste.Enable()
    {
    [[ $_obj_opts_log_all_paste_enable_ = 'true' ]] && return
    _obj_opts_log_all_paste_enable_=true
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_enable_
    }
Opts.Log.All.Paste.Init()
    {
    _obj_opts_log_all_paste_text_=''
    _obj_opts_log_all_paste_flag_=false
    _obj_opts_log_all_paste_changes_flag_=true
    _obj_opts_log_all_paste_enable_=false
    }
Opts.Log.All.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_all_paste_enable_ != 'true' ]]
    }
Opts.Log.All.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_all_paste_enable_ = 'true' ]]
    }
Opts.Log.All.Paste.IsNot()
    {
    [[ $_obj_opts_log_all_paste_flag_ != 'true' ]]
    }
Opts.Log.All.Paste.IsSet()
    {
    [[ $_obj_opts_log_all_paste_flag_ = 'true' ]]
    }
Opts.Log.All.Paste.LogChanges()
    {
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_all_paste_changes_flag_=true
    }
Opts.Log.All.Paste.Set()
    {
    [[ $_obj_opts_log_all_paste_flag_ = 'true' ]] && return
    _obj_opts_log_all_paste_flag_=true
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_flag_
    }
Opts.Log.All.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_all_paste_text_=$2
    else
        echo -n "$_obj_opts_log_all_paste_text_"
    fi
    }
Opts.Log.All.Paste.Init

Opts.Log.All.View.Clear()
    {
    [[ $_obj_opts_log_all_view_flag_ != 'true' ]] && return
    _obj_opts_log_all_view_flag_=false
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_flag_
    }
Opts.Log.All.View.Disable()
    {
    [[ $_obj_opts_log_all_view_enable_ != 'true' ]] && return
    _obj_opts_log_all_view_enable_=false
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_enable_
    }
Opts.Log.All.View.DontLogChanges()
    {
    [[ $_obj_opts_log_all_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_all_view_changes_flag_=false
    }
Opts.Log.All.View.Enable()
    {
    [[ $_obj_opts_log_all_view_enable_ = 'true' ]] && return
    _obj_opts_log_all_view_enable_=true
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_enable_
    }
Opts.Log.All.View.Init()
    {
    _obj_opts_log_all_view_text_=''
    _obj_opts_log_all_view_flag_=false
    _obj_opts_log_all_view_changes_flag_=true
    _obj_opts_log_all_view_enable_=false
    }
Opts.Log.All.View.IsDisabled()
    {
    [[ $_obj_opts_log_all_view_enable_ != 'true' ]]
    }
Opts.Log.All.View.IsEnabled()
    {
    [[ $_obj_opts_log_all_view_enable_ = 'true' ]]
    }
Opts.Log.All.View.IsNot()
    {
    [[ $_obj_opts_log_all_view_flag_ != 'true' ]]
    }
Opts.Log.All.View.IsSet()
    {
    [[ $_obj_opts_log_all_view_flag_ = 'true' ]]
    }
Opts.Log.All.View.LogChanges()
    {
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_all_view_changes_flag_=true
    }
Opts.Log.All.View.Set()
    {
    [[ $_obj_opts_log_all_view_flag_ = 'true' ]] && return
    _obj_opts_log_all_view_flag_=true
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_flag_
    }
Opts.Log.All.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_all_view_text_=$2
    else
        echo -n "$_obj_opts_log_all_view_text_"
    fi
    }
Opts.Log.All.View.Init

Opts.Log.Last.Paste.Clear()
    {
    [[ $_obj_opts_log_last_paste_flag_ != 'true' ]] && return
    _obj_opts_log_last_paste_flag_=false
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_flag_
    }
Opts.Log.Last.Paste.Disable()
    {
    [[ $_obj_opts_log_last_paste_enable_ != 'true' ]] && return
    _obj_opts_log_last_paste_enable_=false
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_enable_
    }
Opts.Log.Last.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_last_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_last_paste_changes_flag_=false
    }
Opts.Log.Last.Paste.Enable()
    {
    [[ $_obj_opts_log_last_paste_enable_ = 'true' ]] && return
    _obj_opts_log_last_paste_enable_=true
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_enable_
    }
Opts.Log.Last.Paste.Init()
    {
    _obj_opts_log_last_paste_text_=''
    _obj_opts_log_last_paste_flag_=false
    _obj_opts_log_last_paste_changes_flag_=true
    _obj_opts_log_last_paste_enable_=false
    }
Opts.Log.Last.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_last_paste_enable_ != 'true' ]]
    }
Opts.Log.Last.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_last_paste_enable_ = 'true' ]]
    }
Opts.Log.Last.Paste.IsNot()
    {
    [[ $_obj_opts_log_last_paste_flag_ != 'true' ]]
    }
Opts.Log.Last.Paste.IsSet()
    {
    [[ $_obj_opts_log_last_paste_flag_ = 'true' ]]
    }
Opts.Log.Last.Paste.LogChanges()
    {
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_last_paste_changes_flag_=true
    }
Opts.Log.Last.Paste.Set()
    {
    [[ $_obj_opts_log_last_paste_flag_ = 'true' ]] && return
    _obj_opts_log_last_paste_flag_=true
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_flag_
    }
Opts.Log.Last.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_last_paste_text_=$2
    else
        echo -n "$_obj_opts_log_last_paste_text_"
    fi
    }
Opts.Log.Last.Paste.Init

Opts.Log.Last.View.Clear()
    {
    [[ $_obj_opts_log_last_view_flag_ != 'true' ]] && return
    _obj_opts_log_last_view_flag_=false
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_flag_
    }
Opts.Log.Last.View.Disable()
    {
    [[ $_obj_opts_log_last_view_enable_ != 'true' ]] && return
    _obj_opts_log_last_view_enable_=false
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_enable_
    }
Opts.Log.Last.View.DontLogChanges()
    {
    [[ $_obj_opts_log_last_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_last_view_changes_flag_=false
    }
Opts.Log.Last.View.Enable()
    {
    [[ $_obj_opts_log_last_view_enable_ = 'true' ]] && return
    _obj_opts_log_last_view_enable_=true
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_enable_
    }
Opts.Log.Last.View.Init()
    {
    _obj_opts_log_last_view_text_=''
    _obj_opts_log_last_view_flag_=false
    _obj_opts_log_last_view_changes_flag_=true
    _obj_opts_log_last_view_enable_=false
    }
Opts.Log.Last.View.IsDisabled()
    {
    [[ $_obj_opts_log_last_view_enable_ != 'true' ]]
    }
Opts.Log.Last.View.IsEnabled()
    {
    [[ $_obj_opts_log_last_view_enable_ = 'true' ]]
    }
Opts.Log.Last.View.IsNot()
    {
    [[ $_obj_opts_log_last_view_flag_ != 'true' ]]
    }
Opts.Log.Last.View.IsSet()
    {
    [[ $_obj_opts_log_last_view_flag_ = 'true' ]]
    }
Opts.Log.Last.View.LogChanges()
    {
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_last_view_changes_flag_=true
    }
Opts.Log.Last.View.Set()
    {
    [[ $_obj_opts_log_last_view_flag_ = 'true' ]] && return
    _obj_opts_log_last_view_flag_=true
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_flag_
    }
Opts.Log.Last.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_last_view_text_=$2
    else
        echo -n "$_obj_opts_log_last_view_text_"
    fi
    }
Opts.Log.Last.View.Init

Opts.Log.Tail.Paste.Clear()
    {
    [[ $_obj_opts_log_tail_paste_flag_ != 'true' ]] && return
    _obj_opts_log_tail_paste_flag_=false
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_flag_
    }
Opts.Log.Tail.Paste.Disable()
    {
    [[ $_obj_opts_log_tail_paste_enable_ != 'true' ]] && return
    _obj_opts_log_tail_paste_enable_=false
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_enable_
    }
Opts.Log.Tail.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_tail_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_tail_paste_changes_flag_=false
    }
Opts.Log.Tail.Paste.Enable()
    {
    [[ $_obj_opts_log_tail_paste_enable_ = 'true' ]] && return
    _obj_opts_log_tail_paste_enable_=true
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_enable_
    }
Opts.Log.Tail.Paste.Init()
    {
    _obj_opts_log_tail_paste_text_=''
    _obj_opts_log_tail_paste_flag_=false
    _obj_opts_log_tail_paste_changes_flag_=true
    _obj_opts_log_tail_paste_enable_=false
    }
Opts.Log.Tail.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_tail_paste_enable_ != 'true' ]]
    }
Opts.Log.Tail.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_tail_paste_enable_ = 'true' ]]
    }
Opts.Log.Tail.Paste.IsNot()
    {
    [[ $_obj_opts_log_tail_paste_flag_ != 'true' ]]
    }
Opts.Log.Tail.Paste.IsSet()
    {
    [[ $_obj_opts_log_tail_paste_flag_ = 'true' ]]
    }
Opts.Log.Tail.Paste.LogChanges()
    {
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_tail_paste_changes_flag_=true
    }
Opts.Log.Tail.Paste.Set()
    {
    [[ $_obj_opts_log_tail_paste_flag_ = 'true' ]] && return
    _obj_opts_log_tail_paste_flag_=true
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_flag_
    }
Opts.Log.Tail.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_tail_paste_text_=$2
    else
        echo -n "$_obj_opts_log_tail_paste_text_"
    fi
    }
Opts.Log.Tail.Paste.Init

Opts.Log.Tail.View.Clear()
    {
    [[ $_obj_opts_log_tail_view_flag_ != 'true' ]] && return
    _obj_opts_log_tail_view_flag_=false
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_flag_
    }
Opts.Log.Tail.View.Disable()
    {
    [[ $_obj_opts_log_tail_view_enable_ != 'true' ]] && return
    _obj_opts_log_tail_view_enable_=false
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_enable_
    }
Opts.Log.Tail.View.DontLogChanges()
    {
    [[ $_obj_opts_log_tail_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_tail_view_changes_flag_=false
    }
Opts.Log.Tail.View.Enable()
    {
    [[ $_obj_opts_log_tail_view_enable_ = 'true' ]] && return
    _obj_opts_log_tail_view_enable_=true
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_enable_
    }
Opts.Log.Tail.View.Init()
    {
    _obj_opts_log_tail_view_text_=''
    _obj_opts_log_tail_view_flag_=false
    _obj_opts_log_tail_view_changes_flag_=true
    _obj_opts_log_tail_view_enable_=false
    }
Opts.Log.Tail.View.IsDisabled()
    {
    [[ $_obj_opts_log_tail_view_enable_ != 'true' ]]
    }
Opts.Log.Tail.View.IsEnabled()
    {
    [[ $_obj_opts_log_tail_view_enable_ = 'true' ]]
    }
Opts.Log.Tail.View.IsNot()
    {
    [[ $_obj_opts_log_tail_view_flag_ != 'true' ]]
    }
Opts.Log.Tail.View.IsSet()
    {
    [[ $_obj_opts_log_tail_view_flag_ = 'true' ]]
    }
Opts.Log.Tail.View.LogChanges()
    {
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_tail_view_changes_flag_=true
    }
Opts.Log.Tail.View.Set()
    {
    [[ $_obj_opts_log_tail_view_flag_ = 'true' ]] && return
    _obj_opts_log_tail_view_flag_=true
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_flag_
    }
Opts.Log.Tail.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_tail_view_text_=$2
    else
        echo -n "$_obj_opts_log_tail_view_text_"
    fi
    }
Opts.Log.Tail.View.Init

Opts.Apps.All.Backup.Clear()
    {
    [[ $_obj_opts_apps_all_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_all_backup_flag_=false
    [[ $_obj_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_backup_flag_
    }
Opts.Apps.All.Backup.Disable()
    {
    [[ $_obj_opts_apps_all_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_all_backup_enable_=false
    [[ $_obj_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_backup_enable_
    }
Opts.Apps.All.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_backup_changes_flag_=false
    }
Opts.Apps.All.Backup.Enable()
    {
    [[ $_obj_opts_apps_all_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_all_backup_enable_=true
    [[ $_obj_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_backup_enable_
    }
Opts.Apps.All.Backup.Init()
    {
    _obj_opts_apps_all_backup_text_=''
    _obj_opts_apps_all_backup_flag_=false
    _obj_opts_apps_all_backup_changes_flag_=true
    _obj_opts_apps_all_backup_enable_=false
    }
Opts.Apps.All.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_all_backup_enable_ != 'true' ]]
    }
Opts.Apps.All.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_all_backup_enable_ = 'true' ]]
    }
Opts.Apps.All.Backup.IsNot()
    {
    [[ $_obj_opts_apps_all_backup_flag_ != 'true' ]]
    }
Opts.Apps.All.Backup.IsSet()
    {
    [[ $_obj_opts_apps_all_backup_flag_ = 'true' ]]
    }
Opts.Apps.All.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_all_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_backup_changes_flag_=true
    }
Opts.Apps.All.Backup.Set()
    {
    [[ $_obj_opts_apps_all_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_all_backup_flag_=true
    [[ $_obj_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_backup_flag_
    }
Opts.Apps.All.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_all_backup_text_"
    fi
    }
Opts.Apps.All.Backup.Init

Opts.Apps.All.Install.Clear()
    {
    [[ $_obj_opts_apps_all_install_flag_ != 'true' ]] && return
    _obj_opts_apps_all_install_flag_=false
    [[ $_obj_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_install_flag_
    }
Opts.Apps.All.Install.Disable()
    {
    [[ $_obj_opts_apps_all_install_enable_ != 'true' ]] && return
    _obj_opts_apps_all_install_enable_=false
    [[ $_obj_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_install_enable_
    }
Opts.Apps.All.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_install_changes_flag_=false
    }
Opts.Apps.All.Install.Enable()
    {
    [[ $_obj_opts_apps_all_install_enable_ = 'true' ]] && return
    _obj_opts_apps_all_install_enable_=true
    [[ $_obj_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_install_enable_
    }
Opts.Apps.All.Install.Init()
    {
    _obj_opts_apps_all_install_text_=''
    _obj_opts_apps_all_install_flag_=false
    _obj_opts_apps_all_install_changes_flag_=true
    _obj_opts_apps_all_install_enable_=false
    }
Opts.Apps.All.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_all_install_enable_ != 'true' ]]
    }
Opts.Apps.All.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_all_install_enable_ = 'true' ]]
    }
Opts.Apps.All.Install.IsNot()
    {
    [[ $_obj_opts_apps_all_install_flag_ != 'true' ]]
    }
Opts.Apps.All.Install.IsSet()
    {
    [[ $_obj_opts_apps_all_install_flag_ = 'true' ]]
    }
Opts.Apps.All.Install.LogChanges()
    {
    [[ $_obj_opts_apps_all_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_install_changes_flag_=true
    }
Opts.Apps.All.Install.Set()
    {
    [[ $_obj_opts_apps_all_install_flag_ = 'true' ]] && return
    _obj_opts_apps_all_install_flag_=true
    [[ $_obj_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_install_flag_
    }
Opts.Apps.All.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_install_text_=$2
    else
        echo -n "$_obj_opts_apps_all_install_text_"
    fi
    }
Opts.Apps.All.Install.Init

Opts.Apps.All.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_all_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_all_rebuild_flag_=false
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_rebuild_flag_
    }
Opts.Apps.All.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_all_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_all_rebuild_enable_=false
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_rebuild_enable_
    }
Opts.Apps.All.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_rebuild_changes_flag_=false
    }
Opts.Apps.All.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_all_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_all_rebuild_enable_=true
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_rebuild_enable_
    }
Opts.Apps.All.Rebuild.Init()
    {
    _obj_opts_apps_all_rebuild_text_=''
    _obj_opts_apps_all_rebuild_flag_=false
    _obj_opts_apps_all_rebuild_changes_flag_=true
    _obj_opts_apps_all_rebuild_enable_=false
    }
Opts.Apps.All.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_all_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.All.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_all_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.All.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_all_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.All.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_all_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.All.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_rebuild_changes_flag_=true
    }
Opts.Apps.All.Rebuild.Set()
    {
    [[ $_obj_opts_apps_all_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_all_rebuild_flag_=true
    [[ $_obj_opts_apps_all_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_rebuild_flag_
    }
Opts.Apps.All.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_all_rebuild_text_"
    fi
    }
Opts.Apps.All.Rebuild.Init

Opts.Apps.All.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_all_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_all_reinstall_flag_=false
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_reinstall_flag_
    }
Opts.Apps.All.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_all_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_all_reinstall_enable_=false
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_reinstall_enable_
    }
Opts.Apps.All.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_reinstall_changes_flag_=false
    }
Opts.Apps.All.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_all_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_all_reinstall_enable_=true
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_reinstall_enable_
    }
Opts.Apps.All.Reinstall.Init()
    {
    _obj_opts_apps_all_reinstall_text_=''
    _obj_opts_apps_all_reinstall_flag_=false
    _obj_opts_apps_all_reinstall_changes_flag_=true
    _obj_opts_apps_all_reinstall_enable_=false
    }
Opts.Apps.All.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_all_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.All.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_all_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.All.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_all_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.All.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_all_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.All.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_reinstall_changes_flag_=true
    }
Opts.Apps.All.Reinstall.Set()
    {
    [[ $_obj_opts_apps_all_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_all_reinstall_flag_=true
    [[ $_obj_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_reinstall_flag_
    }
Opts.Apps.All.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_all_reinstall_text_"
    fi
    }
Opts.Apps.All.Reinstall.Init

Opts.Apps.All.Restart.Clear()
    {
    [[ $_obj_opts_apps_all_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_all_restart_flag_=false
    [[ $_obj_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restart_flag_
    }
Opts.Apps.All.Restart.Disable()
    {
    [[ $_obj_opts_apps_all_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_all_restart_enable_=false
    [[ $_obj_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restart_enable_
    }
Opts.Apps.All.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_restart_changes_flag_=false
    }
Opts.Apps.All.Restart.Enable()
    {
    [[ $_obj_opts_apps_all_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_all_restart_enable_=true
    [[ $_obj_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restart_enable_
    }
Opts.Apps.All.Restart.Init()
    {
    _obj_opts_apps_all_restart_text_=''
    _obj_opts_apps_all_restart_flag_=false
    _obj_opts_apps_all_restart_changes_flag_=true
    _obj_opts_apps_all_restart_enable_=false
    }
Opts.Apps.All.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_all_restart_enable_ != 'true' ]]
    }
Opts.Apps.All.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_all_restart_enable_ = 'true' ]]
    }
Opts.Apps.All.Restart.IsNot()
    {
    [[ $_obj_opts_apps_all_restart_flag_ != 'true' ]]
    }
Opts.Apps.All.Restart.IsSet()
    {
    [[ $_obj_opts_apps_all_restart_flag_ = 'true' ]]
    }
Opts.Apps.All.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_all_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_restart_changes_flag_=true
    }
Opts.Apps.All.Restart.Set()
    {
    [[ $_obj_opts_apps_all_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_all_restart_flag_=true
    [[ $_obj_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restart_flag_
    }
Opts.Apps.All.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_all_restart_text_"
    fi
    }
Opts.Apps.All.Restart.Init

Opts.Apps.All.Restore.Clear()
    {
    [[ $_obj_opts_apps_all_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_all_restore_flag_=false
    [[ $_obj_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restore_flag_
    }
Opts.Apps.All.Restore.Disable()
    {
    [[ $_obj_opts_apps_all_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_all_restore_enable_=false
    [[ $_obj_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restore_enable_
    }
Opts.Apps.All.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_restore_changes_flag_=false
    }
Opts.Apps.All.Restore.Enable()
    {
    [[ $_obj_opts_apps_all_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_all_restore_enable_=true
    [[ $_obj_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restore_enable_
    }
Opts.Apps.All.Restore.Init()
    {
    _obj_opts_apps_all_restore_text_=''
    _obj_opts_apps_all_restore_flag_=false
    _obj_opts_apps_all_restore_changes_flag_=true
    _obj_opts_apps_all_restore_enable_=false
    }
Opts.Apps.All.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_all_restore_enable_ != 'true' ]]
    }
Opts.Apps.All.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_all_restore_enable_ = 'true' ]]
    }
Opts.Apps.All.Restore.IsNot()
    {
    [[ $_obj_opts_apps_all_restore_flag_ != 'true' ]]
    }
Opts.Apps.All.Restore.IsSet()
    {
    [[ $_obj_opts_apps_all_restore_flag_ = 'true' ]]
    }
Opts.Apps.All.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_all_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_restore_changes_flag_=true
    }
Opts.Apps.All.Restore.Set()
    {
    [[ $_obj_opts_apps_all_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_all_restore_flag_=true
    [[ $_obj_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_restore_flag_
    }
Opts.Apps.All.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_all_restore_text_"
    fi
    }
Opts.Apps.All.Restore.Init

Opts.Apps.All.Start.Clear()
    {
    [[ $_obj_opts_apps_all_start_flag_ != 'true' ]] && return
    _obj_opts_apps_all_start_flag_=false
    [[ $_obj_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_start_flag_
    }
Opts.Apps.All.Start.Disable()
    {
    [[ $_obj_opts_apps_all_start_enable_ != 'true' ]] && return
    _obj_opts_apps_all_start_enable_=false
    [[ $_obj_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_start_enable_
    }
Opts.Apps.All.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_start_changes_flag_=false
    }
Opts.Apps.All.Start.Enable()
    {
    [[ $_obj_opts_apps_all_start_enable_ = 'true' ]] && return
    _obj_opts_apps_all_start_enable_=true
    [[ $_obj_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_start_enable_
    }
Opts.Apps.All.Start.Init()
    {
    _obj_opts_apps_all_start_text_=''
    _obj_opts_apps_all_start_flag_=false
    _obj_opts_apps_all_start_changes_flag_=true
    _obj_opts_apps_all_start_enable_=false
    }
Opts.Apps.All.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_all_start_enable_ != 'true' ]]
    }
Opts.Apps.All.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_all_start_enable_ = 'true' ]]
    }
Opts.Apps.All.Start.IsNot()
    {
    [[ $_obj_opts_apps_all_start_flag_ != 'true' ]]
    }
Opts.Apps.All.Start.IsSet()
    {
    [[ $_obj_opts_apps_all_start_flag_ = 'true' ]]
    }
Opts.Apps.All.Start.LogChanges()
    {
    [[ $_obj_opts_apps_all_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_start_changes_flag_=true
    }
Opts.Apps.All.Start.Set()
    {
    [[ $_obj_opts_apps_all_start_flag_ = 'true' ]] && return
    _obj_opts_apps_all_start_flag_=true
    [[ $_obj_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_start_flag_
    }
Opts.Apps.All.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_start_text_=$2
    else
        echo -n "$_obj_opts_apps_all_start_text_"
    fi
    }
Opts.Apps.All.Start.Init

Opts.Apps.All.Stop.Clear()
    {
    [[ $_obj_opts_apps_all_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_all_stop_flag_=false
    [[ $_obj_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_stop_flag_
    }
Opts.Apps.All.Stop.Disable()
    {
    [[ $_obj_opts_apps_all_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_all_stop_enable_=false
    [[ $_obj_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_stop_enable_
    }
Opts.Apps.All.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_stop_changes_flag_=false
    }
Opts.Apps.All.Stop.Enable()
    {
    [[ $_obj_opts_apps_all_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_all_stop_enable_=true
    [[ $_obj_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_stop_enable_
    }
Opts.Apps.All.Stop.Init()
    {
    _obj_opts_apps_all_stop_text_=''
    _obj_opts_apps_all_stop_flag_=false
    _obj_opts_apps_all_stop_changes_flag_=true
    _obj_opts_apps_all_stop_enable_=false
    }
Opts.Apps.All.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_all_stop_enable_ != 'true' ]]
    }
Opts.Apps.All.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_all_stop_enable_ = 'true' ]]
    }
Opts.Apps.All.Stop.IsNot()
    {
    [[ $_obj_opts_apps_all_stop_flag_ != 'true' ]]
    }
Opts.Apps.All.Stop.IsSet()
    {
    [[ $_obj_opts_apps_all_stop_flag_ = 'true' ]]
    }
Opts.Apps.All.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_all_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_stop_changes_flag_=true
    }
Opts.Apps.All.Stop.Set()
    {
    [[ $_obj_opts_apps_all_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_all_stop_flag_=true
    [[ $_obj_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_stop_flag_
    }
Opts.Apps.All.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_all_stop_text_"
    fi
    }
Opts.Apps.All.Stop.Init

Opts.Apps.All.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_all_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_all_uninstall_flag_=false
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_uninstall_flag_
    }
Opts.Apps.All.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_all_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_all_uninstall_enable_=false
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_uninstall_enable_
    }
Opts.Apps.All.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_uninstall_changes_flag_=false
    }
Opts.Apps.All.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_all_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_all_uninstall_enable_=true
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_uninstall_enable_
    }
Opts.Apps.All.Uninstall.Init()
    {
    _obj_opts_apps_all_uninstall_text_=''
    _obj_opts_apps_all_uninstall_flag_=false
    _obj_opts_apps_all_uninstall_changes_flag_=true
    _obj_opts_apps_all_uninstall_enable_=false
    }
Opts.Apps.All.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_all_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.All.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_all_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.All.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_all_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.All.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_all_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.All.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_uninstall_changes_flag_=true
    }
Opts.Apps.All.Uninstall.Set()
    {
    [[ $_obj_opts_apps_all_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_all_uninstall_flag_=true
    [[ $_obj_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_uninstall_flag_
    }
Opts.Apps.All.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_all_uninstall_text_"
    fi
    }
Opts.Apps.All.Uninstall.Init

Opts.Apps.All.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_all_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_all_upgrade_flag_=false
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_upgrade_flag_
    }
Opts.Apps.All.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_all_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_all_upgrade_enable_=false
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_upgrade_enable_
    }
Opts.Apps.All.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_all_upgrade_changes_flag_=false
    }
Opts.Apps.All.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_all_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_all_upgrade_enable_=true
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_upgrade_enable_
    }
Opts.Apps.All.Upgrade.Init()
    {
    _obj_opts_apps_all_upgrade_text_=''
    _obj_opts_apps_all_upgrade_flag_=false
    _obj_opts_apps_all_upgrade_changes_flag_=true
    _obj_opts_apps_all_upgrade_enable_=false
    }
Opts.Apps.All.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_all_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.All.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_all_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.All.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_all_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.All.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_all_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.All.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_all_upgrade_changes_flag_=true
    }
Opts.Apps.All.Upgrade.Set()
    {
    [[ $_obj_opts_apps_all_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_all_upgrade_flag_=true
    [[ $_obj_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_all_upgrade_flag_
    }
Opts.Apps.All.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_all_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_all_upgrade_text_"
    fi
    }
Opts.Apps.All.Upgrade.Init

Opts.Apps.List.All.Clear()
    {
    [[ $_obj_opts_apps_list_all_flag_ != 'true' ]] && return
    _obj_opts_apps_list_all_flag_=false
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_flag_
    }
Opts.Apps.List.All.Disable()
    {
    [[ $_obj_opts_apps_list_all_enable_ != 'true' ]] && return
    _obj_opts_apps_list_all_enable_=false
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_enable_
    }
Opts.Apps.List.All.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_all_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_all_changes_flag_=false
    }
Opts.Apps.List.All.Enable()
    {
    [[ $_obj_opts_apps_list_all_enable_ = 'true' ]] && return
    _obj_opts_apps_list_all_enable_=true
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_enable_
    }
Opts.Apps.List.All.Init()
    {
    _obj_opts_apps_list_all_text_=''
    _obj_opts_apps_list_all_flag_=false
    _obj_opts_apps_list_all_changes_flag_=true
    _obj_opts_apps_list_all_enable_=false
    }
Opts.Apps.List.All.IsDisabled()
    {
    [[ $_obj_opts_apps_list_all_enable_ != 'true' ]]
    }
Opts.Apps.List.All.IsEnabled()
    {
    [[ $_obj_opts_apps_list_all_enable_ = 'true' ]]
    }
Opts.Apps.List.All.IsNot()
    {
    [[ $_obj_opts_apps_list_all_flag_ != 'true' ]]
    }
Opts.Apps.List.All.IsSet()
    {
    [[ $_obj_opts_apps_list_all_flag_ = 'true' ]]
    }
Opts.Apps.List.All.LogChanges()
    {
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_all_changes_flag_=true
    }
Opts.Apps.List.All.Set()
    {
    [[ $_obj_opts_apps_list_all_flag_ = 'true' ]] && return
    _obj_opts_apps_list_all_flag_=true
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_flag_
    }
Opts.Apps.List.All.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_all_text_=$2
    else
        echo -n "$_obj_opts_apps_list_all_text_"
    fi
    }
Opts.Apps.List.All.Init

Opts.Apps.List.Dependent.Clear()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_flag_=false
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_flag_
    }
Opts.Apps.List.Dependent.Disable()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_enable_=false
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_enable_
    }
Opts.Apps.List.Dependent.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_dependent_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_changes_flag_=false
    }
Opts.Apps.List.Dependent.Enable()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_enable_=true
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_enable_
    }
Opts.Apps.List.Dependent.Init()
    {
    _obj_opts_apps_list_dependent_text_=''
    _obj_opts_apps_list_dependent_flag_=false
    _obj_opts_apps_list_dependent_changes_flag_=true
    _obj_opts_apps_list_dependent_enable_=false
    }
Opts.Apps.List.Dependent.IsDisabled()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ != 'true' ]]
    }
Opts.Apps.List.Dependent.IsEnabled()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ = 'true' ]]
    }
Opts.Apps.List.Dependent.IsNot()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ != 'true' ]]
    }
Opts.Apps.List.Dependent.IsSet()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ = 'true' ]]
    }
Opts.Apps.List.Dependent.LogChanges()
    {
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_changes_flag_=true
    }
Opts.Apps.List.Dependent.Set()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_flag_=true
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_flag_
    }
Opts.Apps.List.Dependent.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_dependent_text_=$2
    else
        echo -n "$_obj_opts_apps_list_dependent_text_"
    fi
    }
Opts.Apps.List.Dependent.Init

Opts.Apps.List.Installable.Clear()
    {
    [[ $_obj_opts_apps_list_installable_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installable_flag_=false
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_flag_
    }
Opts.Apps.List.Installable.Disable()
    {
    [[ $_obj_opts_apps_list_installable_enable_ != 'true' ]] && return
    _obj_opts_apps_list_installable_enable_=false
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_enable_
    }
Opts.Apps.List.Installable.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_installable_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installable_changes_flag_=false
    }
Opts.Apps.List.Installable.Enable()
    {
    [[ $_obj_opts_apps_list_installable_enable_ = 'true' ]] && return
    _obj_opts_apps_list_installable_enable_=true
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_enable_
    }
Opts.Apps.List.Installable.Init()
    {
    _obj_opts_apps_list_installable_text_=''
    _obj_opts_apps_list_installable_flag_=false
    _obj_opts_apps_list_installable_changes_flag_=true
    _obj_opts_apps_list_installable_enable_=false
    }
Opts.Apps.List.Installable.IsDisabled()
    {
    [[ $_obj_opts_apps_list_installable_enable_ != 'true' ]]
    }
Opts.Apps.List.Installable.IsEnabled()
    {
    [[ $_obj_opts_apps_list_installable_enable_ = 'true' ]]
    }
Opts.Apps.List.Installable.IsNot()
    {
    [[ $_obj_opts_apps_list_installable_flag_ != 'true' ]]
    }
Opts.Apps.List.Installable.IsSet()
    {
    [[ $_obj_opts_apps_list_installable_flag_ = 'true' ]]
    }
Opts.Apps.List.Installable.LogChanges()
    {
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installable_changes_flag_=true
    }
Opts.Apps.List.Installable.Set()
    {
    [[ $_obj_opts_apps_list_installable_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installable_flag_=true
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_flag_
    }
Opts.Apps.List.Installable.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_installable_text_=$2
    else
        echo -n "$_obj_opts_apps_list_installable_text_"
    fi
    }
Opts.Apps.List.Installable.Init

Opts.Apps.List.Installed.Clear()
    {
    [[ $_obj_opts_apps_list_installed_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installed_flag_=false
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_flag_
    }
Opts.Apps.List.Installed.Disable()
    {
    [[ $_obj_opts_apps_list_installed_enable_ != 'true' ]] && return
    _obj_opts_apps_list_installed_enable_=false
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_enable_
    }
Opts.Apps.List.Installed.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_installed_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installed_changes_flag_=false
    }
Opts.Apps.List.Installed.Enable()
    {
    [[ $_obj_opts_apps_list_installed_enable_ = 'true' ]] && return
    _obj_opts_apps_list_installed_enable_=true
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_enable_
    }
Opts.Apps.List.Installed.Init()
    {
    _obj_opts_apps_list_installed_text_=''
    _obj_opts_apps_list_installed_flag_=false
    _obj_opts_apps_list_installed_changes_flag_=true
    _obj_opts_apps_list_installed_enable_=false
    }
Opts.Apps.List.Installed.IsDisabled()
    {
    [[ $_obj_opts_apps_list_installed_enable_ != 'true' ]]
    }
Opts.Apps.List.Installed.IsEnabled()
    {
    [[ $_obj_opts_apps_list_installed_enable_ = 'true' ]]
    }
Opts.Apps.List.Installed.IsNot()
    {
    [[ $_obj_opts_apps_list_installed_flag_ != 'true' ]]
    }
Opts.Apps.List.Installed.IsSet()
    {
    [[ $_obj_opts_apps_list_installed_flag_ = 'true' ]]
    }
Opts.Apps.List.Installed.LogChanges()
    {
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installed_changes_flag_=true
    }
Opts.Apps.List.Installed.Set()
    {
    [[ $_obj_opts_apps_list_installed_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installed_flag_=true
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_flag_
    }
Opts.Apps.List.Installed.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_installed_text_=$2
    else
        echo -n "$_obj_opts_apps_list_installed_text_"
    fi
    }
Opts.Apps.List.Installed.Init

Opts.Apps.List.NotInstalled.Clear()
    {
    [[ $_obj_opts_apps_list_notinstalled_flag_ != 'true' ]] && return
    _obj_opts_apps_list_notinstalled_flag_=false
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_notinstalled_flag_
    }
Opts.Apps.List.NotInstalled.Disable()
    {
    [[ $_obj_opts_apps_list_notinstalled_enable_ != 'true' ]] && return
    _obj_opts_apps_list_notinstalled_enable_=false
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_notinstalled_enable_
    }
Opts.Apps.List.NotInstalled.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_notinstalled_changes_flag_=false
    }
Opts.Apps.List.NotInstalled.Enable()
    {
    [[ $_obj_opts_apps_list_notinstalled_enable_ = 'true' ]] && return
    _obj_opts_apps_list_notinstalled_enable_=true
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_notinstalled_enable_
    }
Opts.Apps.List.NotInstalled.Init()
    {
    _obj_opts_apps_list_notinstalled_text_=''
    _obj_opts_apps_list_notinstalled_flag_=false
    _obj_opts_apps_list_notinstalled_changes_flag_=true
    _obj_opts_apps_list_notinstalled_enable_=false
    }
Opts.Apps.List.NotInstalled.IsDisabled()
    {
    [[ $_obj_opts_apps_list_notinstalled_enable_ != 'true' ]]
    }
Opts.Apps.List.NotInstalled.IsEnabled()
    {
    [[ $_obj_opts_apps_list_notinstalled_enable_ = 'true' ]]
    }
Opts.Apps.List.NotInstalled.IsNot()
    {
    [[ $_obj_opts_apps_list_notinstalled_flag_ != 'true' ]]
    }
Opts.Apps.List.NotInstalled.IsSet()
    {
    [[ $_obj_opts_apps_list_notinstalled_flag_ = 'true' ]]
    }
Opts.Apps.List.NotInstalled.LogChanges()
    {
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_notinstalled_changes_flag_=true
    }
Opts.Apps.List.NotInstalled.Set()
    {
    [[ $_obj_opts_apps_list_notinstalled_flag_ = 'true' ]] && return
    _obj_opts_apps_list_notinstalled_flag_=true
    [[ $_obj_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_notinstalled_flag_
    }
Opts.Apps.List.NotInstalled.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_notinstalled_text_=$2
    else
        echo -n "$_obj_opts_apps_list_notinstalled_text_"
    fi
    }
Opts.Apps.List.NotInstalled.Init

Opts.Apps.List.Standalone.Clear()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_flag_=false
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_flag_
    }
Opts.Apps.List.Standalone.Disable()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_enable_=false
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_enable_
    }
Opts.Apps.List.Standalone.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_standalone_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_changes_flag_=false
    }
Opts.Apps.List.Standalone.Enable()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_enable_=true
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_enable_
    }
Opts.Apps.List.Standalone.Init()
    {
    _obj_opts_apps_list_standalone_text_=''
    _obj_opts_apps_list_standalone_flag_=false
    _obj_opts_apps_list_standalone_changes_flag_=true
    _obj_opts_apps_list_standalone_enable_=false
    }
Opts.Apps.List.Standalone.IsDisabled()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ != 'true' ]]
    }
Opts.Apps.List.Standalone.IsEnabled()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ = 'true' ]]
    }
Opts.Apps.List.Standalone.IsNot()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ != 'true' ]]
    }
Opts.Apps.List.Standalone.IsSet()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ = 'true' ]]
    }
Opts.Apps.List.Standalone.LogChanges()
    {
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_changes_flag_=true
    }
Opts.Apps.List.Standalone.Set()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_flag_=true
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_flag_
    }
Opts.Apps.List.Standalone.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_standalone_text_=$2
    else
        echo -n "$_obj_opts_apps_list_standalone_text_"
    fi
    }
Opts.Apps.List.Standalone.Init

Opts.Apps.List.Started.Clear()
    {
    [[ $_obj_opts_apps_list_started_flag_ != 'true' ]] && return
    _obj_opts_apps_list_started_flag_=false
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_flag_
    }
Opts.Apps.List.Started.Disable()
    {
    [[ $_obj_opts_apps_list_started_enable_ != 'true' ]] && return
    _obj_opts_apps_list_started_enable_=false
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_enable_
    }
Opts.Apps.List.Started.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_started_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_started_changes_flag_=false
    }
Opts.Apps.List.Started.Enable()
    {
    [[ $_obj_opts_apps_list_started_enable_ = 'true' ]] && return
    _obj_opts_apps_list_started_enable_=true
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_enable_
    }
Opts.Apps.List.Started.Init()
    {
    _obj_opts_apps_list_started_text_=''
    _obj_opts_apps_list_started_flag_=false
    _obj_opts_apps_list_started_changes_flag_=true
    _obj_opts_apps_list_started_enable_=false
    }
Opts.Apps.List.Started.IsDisabled()
    {
    [[ $_obj_opts_apps_list_started_enable_ != 'true' ]]
    }
Opts.Apps.List.Started.IsEnabled()
    {
    [[ $_obj_opts_apps_list_started_enable_ = 'true' ]]
    }
Opts.Apps.List.Started.IsNot()
    {
    [[ $_obj_opts_apps_list_started_flag_ != 'true' ]]
    }
Opts.Apps.List.Started.IsSet()
    {
    [[ $_obj_opts_apps_list_started_flag_ = 'true' ]]
    }
Opts.Apps.List.Started.LogChanges()
    {
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_started_changes_flag_=true
    }
Opts.Apps.List.Started.Set()
    {
    [[ $_obj_opts_apps_list_started_flag_ = 'true' ]] && return
    _obj_opts_apps_list_started_flag_=true
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_flag_
    }
Opts.Apps.List.Started.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_started_text_=$2
    else
        echo -n "$_obj_opts_apps_list_started_text_"
    fi
    }
Opts.Apps.List.Started.Init

Opts.Apps.List.Stopped.Clear()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_flag_=false
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_flag_
    }
Opts.Apps.List.Stopped.Disable()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_enable_=false
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_enable_
    }
Opts.Apps.List.Stopped.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_stopped_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_changes_flag_=false
    }
Opts.Apps.List.Stopped.Enable()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_enable_=true
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_enable_
    }
Opts.Apps.List.Stopped.Init()
    {
    _obj_opts_apps_list_stopped_text_=''
    _obj_opts_apps_list_stopped_flag_=false
    _obj_opts_apps_list_stopped_changes_flag_=true
    _obj_opts_apps_list_stopped_enable_=false
    }
Opts.Apps.List.Stopped.IsDisabled()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ != 'true' ]]
    }
Opts.Apps.List.Stopped.IsEnabled()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ = 'true' ]]
    }
Opts.Apps.List.Stopped.IsNot()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ != 'true' ]]
    }
Opts.Apps.List.Stopped.IsSet()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ = 'true' ]]
    }
Opts.Apps.List.Stopped.LogChanges()
    {
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_changes_flag_=true
    }
Opts.Apps.List.Stopped.Set()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_flag_=true
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_flag_
    }
Opts.Apps.List.Stopped.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_stopped_text_=$2
    else
        echo -n "$_obj_opts_apps_list_stopped_text_"
    fi
    }
Opts.Apps.List.Stopped.Init

Opts.Apps.List.Upgradable.Clear()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_flag_=false
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_flag_
    }
Opts.Apps.List.Upgradable.Disable()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_enable_=false
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_enable_
    }
Opts.Apps.List.Upgradable.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_changes_flag_=false
    }
Opts.Apps.List.Upgradable.Enable()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_enable_=true
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_enable_
    }
Opts.Apps.List.Upgradable.Init()
    {
    _obj_opts_apps_list_upgradable_text_=''
    _obj_opts_apps_list_upgradable_flag_=false
    _obj_opts_apps_list_upgradable_changes_flag_=true
    _obj_opts_apps_list_upgradable_enable_=false
    }
Opts.Apps.List.Upgradable.IsDisabled()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ != 'true' ]]
    }
Opts.Apps.List.Upgradable.IsEnabled()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ = 'true' ]]
    }
Opts.Apps.List.Upgradable.IsNot()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ != 'true' ]]
    }
Opts.Apps.List.Upgradable.IsSet()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ = 'true' ]]
    }
Opts.Apps.List.Upgradable.LogChanges()
    {
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_changes_flag_=true
    }
Opts.Apps.List.Upgradable.Set()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_flag_=true
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_flag_
    }
Opts.Apps.List.Upgradable.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_upgradable_text_=$2
    else
        echo -n "$_obj_opts_apps_list_upgradable_text_"
    fi
    }
Opts.Apps.List.Upgradable.Init

Args.Unknown.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"} " != *"$item"* ]]; then
            _obj_args_unknown_array_+=("$item")
        fi
    done
    }
Args.Unknown.Array()
    {
    echo -n "${_obj_args_unknown_array_[@]+"${_obj_args_unknown_array_[@]}"}"
    }
Args.Unknown.Count()
    {
    echo "${#_obj_args_unknown_array_[@]}"
    }
Args.Unknown.Exist()
    {
    [[ ${_obj_args_unknown_array_[*]:-} == *"$1"* ]]
    }
Args.Unknown.First()
    {
    echo "${_obj_args_unknown_array_[0]}"
    }
Args.Unknown.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_args_unknown_array_[@]} ]] && index=${#_obj_args_unknown_array_[@]}
    echo -n "${_obj_args_unknown_array_[((index-1))]}"
    }
Args.Unknown.Init()
    {
    _obj_args_unknown_size_=0
    _obj_args_unknown_array_=()
    _obj_args_unknown_array_index_=1
    }
Args.Unknown.IsAny()
    {
    [[ ${#_obj_args_unknown_array_[@]} -gt 0 ]]
    }
Args.Unknown.IsNone()
    {
    [[ ${#_obj_args_unknown_array_[@]} -eq 0 ]]
    }
Args.Unknown.List()
    {
    echo -n "${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"}"
    }
Args.Unknown.ListCSV()
    {
    echo -n "${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"}" | tr ' ' ','
    }
Args.Unknown.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_args_unknown_array_[@]+"${_obj_args_unknown_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_args_unknown_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"} ]] && _obj_args_unknown_array_=()
    }
Args.Unknown.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_args_unknown_size_=$2
    else
        echo -n $_obj_args_unknown_size_
    fi
    }
Args.Unknown.Init

QPKGs.Names.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_names_array_+=("$item")
        fi
    done
    }
QPKGs.Names.Array()
    {
    echo -n "${_obj_qpkgs_names_array_[@]+"${_obj_qpkgs_names_array_[@]}"}"
    }
QPKGs.Names.Count()
    {
    echo "${#_obj_qpkgs_names_array_[@]}"
    }
QPKGs.Names.Exist()
    {
    [[ ${_obj_qpkgs_names_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Names.First()
    {
    echo "${_obj_qpkgs_names_array_[0]}"
    }
QPKGs.Names.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_names_array_[@]} ]] && index=${#_obj_qpkgs_names_array_[@]}
    echo -n "${_obj_qpkgs_names_array_[((index-1))]}"
    }
QPKGs.Names.Init()
    {
    _obj_qpkgs_names_size_=0
    _obj_qpkgs_names_array_=()
    _obj_qpkgs_names_array_index_=1
    }
QPKGs.Names.IsAny()
    {
    [[ ${#_obj_qpkgs_names_array_[@]} -gt 0 ]]
    }
QPKGs.Names.IsNone()
    {
    [[ ${#_obj_qpkgs_names_array_[@]} -eq 0 ]]
    }
QPKGs.Names.List()
    {
    echo -n "${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"}"
    }
QPKGs.Names.ListCSV()
    {
    echo -n "${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"}" | tr ' ' ','
    }
QPKGs.Names.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_names_array_[@]+"${_obj_qpkgs_names_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_names_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"} ]] && _obj_qpkgs_names_array_=()
    }
QPKGs.Names.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_names_size_=$2
    else
        echo -n $_obj_qpkgs_names_size_
    fi
    }
QPKGs.Names.Init

QPKGs.IsBackedUp.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isbackedup_array_+=("$item")
        fi
    done
    }
QPKGs.IsBackedUp.Array()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[@]+"${_obj_qpkgs_isbackedup_array_[@]}"}"
    }
QPKGs.IsBackedUp.Count()
    {
    echo "${#_obj_qpkgs_isbackedup_array_[@]}"
    }
QPKGs.IsBackedUp.Exist()
    {
    [[ ${_obj_qpkgs_isbackedup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsBackedUp.First()
    {
    echo "${_obj_qpkgs_isbackedup_array_[0]}"
    }
QPKGs.IsBackedUp.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isbackedup_array_[@]} ]] && index=${#_obj_qpkgs_isbackedup_array_[@]}
    echo -n "${_obj_qpkgs_isbackedup_array_[((index-1))]}"
    }
QPKGs.IsBackedUp.Init()
    {
    _obj_qpkgs_isbackedup_size_=0
    _obj_qpkgs_isbackedup_array_=()
    _obj_qpkgs_isbackedup_array_index_=1
    }
QPKGs.IsBackedUp.IsAny()
    {
    [[ ${#_obj_qpkgs_isbackedup_array_[@]} -gt 0 ]]
    }
QPKGs.IsBackedUp.IsNone()
    {
    [[ ${#_obj_qpkgs_isbackedup_array_[@]} -eq 0 ]]
    }
QPKGs.IsBackedUp.List()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"}"
    }
QPKGs.IsBackedUp.ListCSV()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsBackedUp.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isbackedup_array_[@]+"${_obj_qpkgs_isbackedup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isbackedup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"} ]] && _obj_qpkgs_isbackedup_array_=()
    }
QPKGs.IsBackedUp.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isbackedup_size_=$2
    else
        echo -n $_obj_qpkgs_isbackedup_size_
    fi
    }
QPKGs.IsBackedUp.Init

QPKGs.IsNotBackedUp.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotbackedup_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotBackedUp.Array()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[@]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"
    }
QPKGs.IsNotBackedUp.Count()
    {
    echo "${#_obj_qpkgs_isnotbackedup_array_[@]}"
    }
QPKGs.IsNotBackedUp.Exist()
    {
    [[ ${_obj_qpkgs_isnotbackedup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotBackedUp.First()
    {
    echo "${_obj_qpkgs_isnotbackedup_array_[0]}"
    }
QPKGs.IsNotBackedUp.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotbackedup_array_[@]} ]] && index=${#_obj_qpkgs_isnotbackedup_array_[@]}
    echo -n "${_obj_qpkgs_isnotbackedup_array_[((index-1))]}"
    }
QPKGs.IsNotBackedUp.Init()
    {
    _obj_qpkgs_isnotbackedup_size_=0
    _obj_qpkgs_isnotbackedup_array_=()
    _obj_qpkgs_isnotbackedup_array_index_=1
    }
QPKGs.IsNotBackedUp.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotbackedup_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotBackedUp.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotbackedup_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotBackedUp.List()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"
    }
QPKGs.IsNotBackedUp.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotBackedUp.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotbackedup_array_[@]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotbackedup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"} ]] && _obj_qpkgs_isnotbackedup_array_=()
    }
QPKGs.IsNotBackedUp.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotbackedup_size_=$2
    else
        echo -n $_obj_qpkgs_isnotbackedup_size_
    fi
    }
QPKGs.IsNotBackedUp.Init

QPKGs.IsDependent.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isdependent_array_+=("$item")
        fi
    done
    }
QPKGs.IsDependent.Array()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[@]+"${_obj_qpkgs_isdependent_array_[@]}"}"
    }
QPKGs.IsDependent.Count()
    {
    echo "${#_obj_qpkgs_isdependent_array_[@]}"
    }
QPKGs.IsDependent.Exist()
    {
    [[ ${_obj_qpkgs_isdependent_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsDependent.First()
    {
    echo "${_obj_qpkgs_isdependent_array_[0]}"
    }
QPKGs.IsDependent.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isdependent_array_[@]} ]] && index=${#_obj_qpkgs_isdependent_array_[@]}
    echo -n "${_obj_qpkgs_isdependent_array_[((index-1))]}"
    }
QPKGs.IsDependent.Init()
    {
    _obj_qpkgs_isdependent_size_=0
    _obj_qpkgs_isdependent_array_=()
    _obj_qpkgs_isdependent_array_index_=1
    }
QPKGs.IsDependent.IsAny()
    {
    [[ ${#_obj_qpkgs_isdependent_array_[@]} -gt 0 ]]
    }
QPKGs.IsDependent.IsNone()
    {
    [[ ${#_obj_qpkgs_isdependent_array_[@]} -eq 0 ]]
    }
QPKGs.IsDependent.List()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"}"
    }
QPKGs.IsDependent.ListCSV()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsDependent.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isdependent_array_[@]+"${_obj_qpkgs_isdependent_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isdependent_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"} ]] && _obj_qpkgs_isdependent_array_=()
    }
QPKGs.IsDependent.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isdependent_size_=$2
    else
        echo -n $_obj_qpkgs_isdependent_size_
    fi
    }
QPKGs.IsDependent.Init

QPKGs.IsNotDependent.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotdependent_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotDependent.Array()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[@]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"
    }
QPKGs.IsNotDependent.Count()
    {
    echo "${#_obj_qpkgs_isnotdependent_array_[@]}"
    }
QPKGs.IsNotDependent.Exist()
    {
    [[ ${_obj_qpkgs_isnotdependent_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotDependent.First()
    {
    echo "${_obj_qpkgs_isnotdependent_array_[0]}"
    }
QPKGs.IsNotDependent.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotdependent_array_[@]} ]] && index=${#_obj_qpkgs_isnotdependent_array_[@]}
    echo -n "${_obj_qpkgs_isnotdependent_array_[((index-1))]}"
    }
QPKGs.IsNotDependent.Init()
    {
    _obj_qpkgs_isnotdependent_size_=0
    _obj_qpkgs_isnotdependent_array_=()
    _obj_qpkgs_isnotdependent_array_index_=1
    }
QPKGs.IsNotDependent.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotdependent_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotDependent.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotdependent_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotDependent.List()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"
    }
QPKGs.IsNotDependent.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotDependent.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotdependent_array_[@]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotdependent_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"} ]] && _obj_qpkgs_isnotdependent_array_=()
    }
QPKGs.IsNotDependent.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotdependent_size_=$2
    else
        echo -n $_obj_qpkgs_isnotdependent_size_
    fi
    }
QPKGs.IsNotDependent.Init

QPKGs.IsInstalled.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isinstalled_array_+=("$item")
        fi
    done
    }
QPKGs.IsInstalled.Array()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[@]+"${_obj_qpkgs_isinstalled_array_[@]}"}"
    }
QPKGs.IsInstalled.Count()
    {
    echo "${#_obj_qpkgs_isinstalled_array_[@]}"
    }
QPKGs.IsInstalled.Exist()
    {
    [[ ${_obj_qpkgs_isinstalled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsInstalled.First()
    {
    echo "${_obj_qpkgs_isinstalled_array_[0]}"
    }
QPKGs.IsInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isinstalled_array_[@]} ]] && index=${#_obj_qpkgs_isinstalled_array_[@]}
    echo -n "${_obj_qpkgs_isinstalled_array_[((index-1))]}"
    }
QPKGs.IsInstalled.Init()
    {
    _obj_qpkgs_isinstalled_size_=0
    _obj_qpkgs_isinstalled_array_=()
    _obj_qpkgs_isinstalled_array_index_=1
    }
QPKGs.IsInstalled.IsAny()
    {
    [[ ${#_obj_qpkgs_isinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.IsInstalled.IsNone()
    {
    [[ ${#_obj_qpkgs_isinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.IsInstalled.List()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"}"
    }
QPKGs.IsInstalled.ListCSV()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsInstalled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isinstalled_array_[@]+"${_obj_qpkgs_isinstalled_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isinstalled_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"} ]] && _obj_qpkgs_isinstalled_array_=()
    }
QPKGs.IsInstalled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isinstalled_size_=$2
    else
        echo -n $_obj_qpkgs_isinstalled_size_
    fi
    }
QPKGs.IsInstalled.Init

QPKGs.IsNotInstalled.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotinstalled_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotInstalled.Array()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[@]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"
    }
QPKGs.IsNotInstalled.Count()
    {
    echo "${#_obj_qpkgs_isnotinstalled_array_[@]}"
    }
QPKGs.IsNotInstalled.Exist()
    {
    [[ ${_obj_qpkgs_isnotinstalled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotInstalled.First()
    {
    echo "${_obj_qpkgs_isnotinstalled_array_[0]}"
    }
QPKGs.IsNotInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotinstalled_array_[@]} ]] && index=${#_obj_qpkgs_isnotinstalled_array_[@]}
    echo -n "${_obj_qpkgs_isnotinstalled_array_[((index-1))]}"
    }
QPKGs.IsNotInstalled.Init()
    {
    _obj_qpkgs_isnotinstalled_size_=0
    _obj_qpkgs_isnotinstalled_array_=()
    _obj_qpkgs_isnotinstalled_array_index_=1
    }
QPKGs.IsNotInstalled.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotInstalled.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotInstalled.List()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"
    }
QPKGs.IsNotInstalled.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotInstalled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotinstalled_array_[@]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotinstalled_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"} ]] && _obj_qpkgs_isnotinstalled_array_=()
    }
QPKGs.IsNotInstalled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotinstalled_size_=$2
    else
        echo -n $_obj_qpkgs_isnotinstalled_size_
    fi
    }
QPKGs.IsNotInstalled.Init

QPKGs.IsInstallable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isinstallable_array_+=("$item")
        fi
    done
    }
QPKGs.IsInstallable.Array()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[@]+"${_obj_qpkgs_isinstallable_array_[@]}"}"
    }
QPKGs.IsInstallable.Count()
    {
    echo "${#_obj_qpkgs_isinstallable_array_[@]}"
    }
QPKGs.IsInstallable.Exist()
    {
    [[ ${_obj_qpkgs_isinstallable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsInstallable.First()
    {
    echo "${_obj_qpkgs_isinstallable_array_[0]}"
    }
QPKGs.IsInstallable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isinstallable_array_[@]} ]] && index=${#_obj_qpkgs_isinstallable_array_[@]}
    echo -n "${_obj_qpkgs_isinstallable_array_[((index-1))]}"
    }
QPKGs.IsInstallable.Init()
    {
    _obj_qpkgs_isinstallable_size_=0
    _obj_qpkgs_isinstallable_array_=()
    _obj_qpkgs_isinstallable_array_index_=1
    }
QPKGs.IsInstallable.IsAny()
    {
    [[ ${#_obj_qpkgs_isinstallable_array_[@]} -gt 0 ]]
    }
QPKGs.IsInstallable.IsNone()
    {
    [[ ${#_obj_qpkgs_isinstallable_array_[@]} -eq 0 ]]
    }
QPKGs.IsInstallable.List()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"}"
    }
QPKGs.IsInstallable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsInstallable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isinstallable_array_[@]+"${_obj_qpkgs_isinstallable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isinstallable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"} ]] && _obj_qpkgs_isinstallable_array_=()
    }
QPKGs.IsInstallable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isinstallable_size_=$2
    else
        echo -n $_obj_qpkgs_isinstallable_size_
    fi
    }
QPKGs.IsInstallable.Init

QPKGs.IsNotInstallable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotinstallable_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotInstallable.Array()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[@]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"
    }
QPKGs.IsNotInstallable.Count()
    {
    echo "${#_obj_qpkgs_isnotinstallable_array_[@]}"
    }
QPKGs.IsNotInstallable.Exist()
    {
    [[ ${_obj_qpkgs_isnotinstallable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotInstallable.First()
    {
    echo "${_obj_qpkgs_isnotinstallable_array_[0]}"
    }
QPKGs.IsNotInstallable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotinstallable_array_[@]} ]] && index=${#_obj_qpkgs_isnotinstallable_array_[@]}
    echo -n "${_obj_qpkgs_isnotinstallable_array_[((index-1))]}"
    }
QPKGs.IsNotInstallable.Init()
    {
    _obj_qpkgs_isnotinstallable_size_=0
    _obj_qpkgs_isnotinstallable_array_=()
    _obj_qpkgs_isnotinstallable_array_index_=1
    }
QPKGs.IsNotInstallable.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotinstallable_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotInstallable.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotinstallable_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotInstallable.List()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"
    }
QPKGs.IsNotInstallable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotInstallable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotinstallable_array_[@]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotinstallable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"} ]] && _obj_qpkgs_isnotinstallable_array_=()
    }
QPKGs.IsNotInstallable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotinstallable_size_=$2
    else
        echo -n $_obj_qpkgs_isnotinstallable_size_
    fi
    }
QPKGs.IsNotInstallable.Init

QPKGs.IsMissing.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_ismissing_array_+=("$item")
        fi
    done
    }
QPKGs.IsMissing.Array()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[@]+"${_obj_qpkgs_ismissing_array_[@]}"}"
    }
QPKGs.IsMissing.Count()
    {
    echo "${#_obj_qpkgs_ismissing_array_[@]}"
    }
QPKGs.IsMissing.Exist()
    {
    [[ ${_obj_qpkgs_ismissing_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsMissing.First()
    {
    echo "${_obj_qpkgs_ismissing_array_[0]}"
    }
QPKGs.IsMissing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_ismissing_array_[@]} ]] && index=${#_obj_qpkgs_ismissing_array_[@]}
    echo -n "${_obj_qpkgs_ismissing_array_[((index-1))]}"
    }
QPKGs.IsMissing.Init()
    {
    _obj_qpkgs_ismissing_size_=0
    _obj_qpkgs_ismissing_array_=()
    _obj_qpkgs_ismissing_array_index_=1
    }
QPKGs.IsMissing.IsAny()
    {
    [[ ${#_obj_qpkgs_ismissing_array_[@]} -gt 0 ]]
    }
QPKGs.IsMissing.IsNone()
    {
    [[ ${#_obj_qpkgs_ismissing_array_[@]} -eq 0 ]]
    }
QPKGs.IsMissing.List()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"}"
    }
QPKGs.IsMissing.ListCSV()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsMissing.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_ismissing_array_[@]+"${_obj_qpkgs_ismissing_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_ismissing_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"} ]] && _obj_qpkgs_ismissing_array_=()
    }
QPKGs.IsMissing.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_ismissing_size_=$2
    else
        echo -n $_obj_qpkgs_ismissing_size_
    fi
    }
QPKGs.IsMissing.Init

QPKGs.IsNotMissing.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotmissing_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotMissing.Array()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[@]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"
    }
QPKGs.IsNotMissing.Count()
    {
    echo "${#_obj_qpkgs_isnotmissing_array_[@]}"
    }
QPKGs.IsNotMissing.Exist()
    {
    [[ ${_obj_qpkgs_isnotmissing_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotMissing.First()
    {
    echo "${_obj_qpkgs_isnotmissing_array_[0]}"
    }
QPKGs.IsNotMissing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotmissing_array_[@]} ]] && index=${#_obj_qpkgs_isnotmissing_array_[@]}
    echo -n "${_obj_qpkgs_isnotmissing_array_[((index-1))]}"
    }
QPKGs.IsNotMissing.Init()
    {
    _obj_qpkgs_isnotmissing_size_=0
    _obj_qpkgs_isnotmissing_array_=()
    _obj_qpkgs_isnotmissing_array_index_=1
    }
QPKGs.IsNotMissing.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotmissing_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotMissing.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotmissing_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotMissing.List()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"
    }
QPKGs.IsNotMissing.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotMissing.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotmissing_array_[@]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotmissing_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"} ]] && _obj_qpkgs_isnotmissing_array_=()
    }
QPKGs.IsNotMissing.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotmissing_size_=$2
    else
        echo -n $_obj_qpkgs_isnotmissing_size_
    fi
    }
QPKGs.IsNotMissing.Init

QPKGs.IsNames.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnames_array_+=("$item")
        fi
    done
    }
QPKGs.IsNames.Array()
    {
    echo -n "${_obj_qpkgs_isnames_array_[@]+"${_obj_qpkgs_isnames_array_[@]}"}"
    }
QPKGs.IsNames.Count()
    {
    echo "${#_obj_qpkgs_isnames_array_[@]}"
    }
QPKGs.IsNames.Exist()
    {
    [[ ${_obj_qpkgs_isnames_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNames.First()
    {
    echo "${_obj_qpkgs_isnames_array_[0]}"
    }
QPKGs.IsNames.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnames_array_[@]} ]] && index=${#_obj_qpkgs_isnames_array_[@]}
    echo -n "${_obj_qpkgs_isnames_array_[((index-1))]}"
    }
QPKGs.IsNames.Init()
    {
    _obj_qpkgs_isnames_size_=0
    _obj_qpkgs_isnames_array_=()
    _obj_qpkgs_isnames_array_index_=1
    }
QPKGs.IsNames.IsAny()
    {
    [[ ${#_obj_qpkgs_isnames_array_[@]} -gt 0 ]]
    }
QPKGs.IsNames.IsNone()
    {
    [[ ${#_obj_qpkgs_isnames_array_[@]} -eq 0 ]]
    }
QPKGs.IsNames.List()
    {
    echo -n "${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"}"
    }
QPKGs.IsNames.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNames.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnames_array_[@]+"${_obj_qpkgs_isnames_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnames_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"} ]] && _obj_qpkgs_isnames_array_=()
    }
QPKGs.IsNames.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnames_size_=$2
    else
        echo -n $_obj_qpkgs_isnames_size_
    fi
    }
QPKGs.IsNames.Init

QPKGs.IsNotNames.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotnames_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotNames.Array()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[@]+"${_obj_qpkgs_isnotnames_array_[@]}"}"
    }
QPKGs.IsNotNames.Count()
    {
    echo "${#_obj_qpkgs_isnotnames_array_[@]}"
    }
QPKGs.IsNotNames.Exist()
    {
    [[ ${_obj_qpkgs_isnotnames_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotNames.First()
    {
    echo "${_obj_qpkgs_isnotnames_array_[0]}"
    }
QPKGs.IsNotNames.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotnames_array_[@]} ]] && index=${#_obj_qpkgs_isnotnames_array_[@]}
    echo -n "${_obj_qpkgs_isnotnames_array_[((index-1))]}"
    }
QPKGs.IsNotNames.Init()
    {
    _obj_qpkgs_isnotnames_size_=0
    _obj_qpkgs_isnotnames_array_=()
    _obj_qpkgs_isnotnames_array_index_=1
    }
QPKGs.IsNotNames.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotnames_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotNames.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotnames_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotNames.List()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"}"
    }
QPKGs.IsNotNames.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotNames.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotnames_array_[@]+"${_obj_qpkgs_isnotnames_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotnames_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"} ]] && _obj_qpkgs_isnotnames_array_=()
    }
QPKGs.IsNotNames.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotnames_size_=$2
    else
        echo -n $_obj_qpkgs_isnotnames_size_
    fi
    }
QPKGs.IsNotNames.Init

QPKGs.IsStandalone.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstandalone_array_+=("$item")
        fi
    done
    }
QPKGs.IsStandalone.Array()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[@]+"${_obj_qpkgs_isstandalone_array_[@]}"}"
    }
QPKGs.IsStandalone.Count()
    {
    echo "${#_obj_qpkgs_isstandalone_array_[@]}"
    }
QPKGs.IsStandalone.Exist()
    {
    [[ ${_obj_qpkgs_isstandalone_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStandalone.First()
    {
    echo "${_obj_qpkgs_isstandalone_array_[0]}"
    }
QPKGs.IsStandalone.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstandalone_array_[@]} ]] && index=${#_obj_qpkgs_isstandalone_array_[@]}
    echo -n "${_obj_qpkgs_isstandalone_array_[((index-1))]}"
    }
QPKGs.IsStandalone.Init()
    {
    _obj_qpkgs_isstandalone_size_=0
    _obj_qpkgs_isstandalone_array_=()
    _obj_qpkgs_isstandalone_array_index_=1
    }
QPKGs.IsStandalone.IsAny()
    {
    [[ ${#_obj_qpkgs_isstandalone_array_[@]} -gt 0 ]]
    }
QPKGs.IsStandalone.IsNone()
    {
    [[ ${#_obj_qpkgs_isstandalone_array_[@]} -eq 0 ]]
    }
QPKGs.IsStandalone.List()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"}"
    }
QPKGs.IsStandalone.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStandalone.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstandalone_array_[@]+"${_obj_qpkgs_isstandalone_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstandalone_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"} ]] && _obj_qpkgs_isstandalone_array_=()
    }
QPKGs.IsStandalone.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstandalone_size_=$2
    else
        echo -n $_obj_qpkgs_isstandalone_size_
    fi
    }
QPKGs.IsStandalone.Init

QPKGs.IsNotStandalone.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstandalone_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStandalone.Array()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[@]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"
    }
QPKGs.IsNotStandalone.Count()
    {
    echo "${#_obj_qpkgs_isnotstandalone_array_[@]}"
    }
QPKGs.IsNotStandalone.Exist()
    {
    [[ ${_obj_qpkgs_isnotstandalone_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStandalone.First()
    {
    echo "${_obj_qpkgs_isnotstandalone_array_[0]}"
    }
QPKGs.IsNotStandalone.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstandalone_array_[@]} ]] && index=${#_obj_qpkgs_isnotstandalone_array_[@]}
    echo -n "${_obj_qpkgs_isnotstandalone_array_[((index-1))]}"
    }
QPKGs.IsNotStandalone.Init()
    {
    _obj_qpkgs_isnotstandalone_size_=0
    _obj_qpkgs_isnotstandalone_array_=()
    _obj_qpkgs_isnotstandalone_array_index_=1
    }
QPKGs.IsNotStandalone.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstandalone_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStandalone.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstandalone_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStandalone.List()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"
    }
QPKGs.IsNotStandalone.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStandalone.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstandalone_array_[@]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstandalone_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"} ]] && _obj_qpkgs_isnotstandalone_array_=()
    }
QPKGs.IsNotStandalone.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstandalone_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstandalone_size_
    fi
    }
QPKGs.IsNotStandalone.Init

QPKGs.IsStarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsStarting.Array()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[@]+"${_obj_qpkgs_isstarting_array_[@]}"}"
    }
QPKGs.IsStarting.Count()
    {
    echo "${#_obj_qpkgs_isstarting_array_[@]}"
    }
QPKGs.IsStarting.Exist()
    {
    [[ ${_obj_qpkgs_isstarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStarting.First()
    {
    echo "${_obj_qpkgs_isstarting_array_[0]}"
    }
QPKGs.IsStarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstarting_array_[@]} ]] && index=${#_obj_qpkgs_isstarting_array_[@]}
    echo -n "${_obj_qpkgs_isstarting_array_[((index-1))]}"
    }
QPKGs.IsStarting.Init()
    {
    _obj_qpkgs_isstarting_size_=0
    _obj_qpkgs_isstarting_array_=()
    _obj_qpkgs_isstarting_array_index_=1
    }
QPKGs.IsStarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isstarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsStarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isstarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsStarting.List()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"}"
    }
QPKGs.IsStarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstarting_array_[@]+"${_obj_qpkgs_isstarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"} ]] && _obj_qpkgs_isstarting_array_=()
    }
QPKGs.IsStarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstarting_size_=$2
    else
        echo -n $_obj_qpkgs_isstarting_size_
    fi
    }
QPKGs.IsStarting.Init

QPKGs.IsNotStarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStarting.Array()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[@]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"
    }
QPKGs.IsNotStarting.Count()
    {
    echo "${#_obj_qpkgs_isnotstarting_array_[@]}"
    }
QPKGs.IsNotStarting.Exist()
    {
    [[ ${_obj_qpkgs_isnotstarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStarting.First()
    {
    echo "${_obj_qpkgs_isnotstarting_array_[0]}"
    }
QPKGs.IsNotStarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstarting_array_[@]} ]] && index=${#_obj_qpkgs_isnotstarting_array_[@]}
    echo -n "${_obj_qpkgs_isnotstarting_array_[((index-1))]}"
    }
QPKGs.IsNotStarting.Init()
    {
    _obj_qpkgs_isnotstarting_size_=0
    _obj_qpkgs_isnotstarting_array_=()
    _obj_qpkgs_isnotstarting_array_index_=1
    }
QPKGs.IsNotStarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStarting.List()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"
    }
QPKGs.IsNotStarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstarting_array_[@]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"} ]] && _obj_qpkgs_isnotstarting_array_=()
    }
QPKGs.IsNotStarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstarting_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstarting_size_
    fi
    }
QPKGs.IsNotStarting.Init

QPKGs.IsStarted.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstarted_array_+=("$item")
        fi
    done
    }
QPKGs.IsStarted.Array()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[@]+"${_obj_qpkgs_isstarted_array_[@]}"}"
    }
QPKGs.IsStarted.Count()
    {
    echo "${#_obj_qpkgs_isstarted_array_[@]}"
    }
QPKGs.IsStarted.Exist()
    {
    [[ ${_obj_qpkgs_isstarted_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStarted.First()
    {
    echo "${_obj_qpkgs_isstarted_array_[0]}"
    }
QPKGs.IsStarted.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstarted_array_[@]} ]] && index=${#_obj_qpkgs_isstarted_array_[@]}
    echo -n "${_obj_qpkgs_isstarted_array_[((index-1))]}"
    }
QPKGs.IsStarted.Init()
    {
    _obj_qpkgs_isstarted_size_=0
    _obj_qpkgs_isstarted_array_=()
    _obj_qpkgs_isstarted_array_index_=1
    }
QPKGs.IsStarted.IsAny()
    {
    [[ ${#_obj_qpkgs_isstarted_array_[@]} -gt 0 ]]
    }
QPKGs.IsStarted.IsNone()
    {
    [[ ${#_obj_qpkgs_isstarted_array_[@]} -eq 0 ]]
    }
QPKGs.IsStarted.List()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"}"
    }
QPKGs.IsStarted.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStarted.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstarted_array_[@]+"${_obj_qpkgs_isstarted_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstarted_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"} ]] && _obj_qpkgs_isstarted_array_=()
    }
QPKGs.IsStarted.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstarted_size_=$2
    else
        echo -n $_obj_qpkgs_isstarted_size_
    fi
    }
QPKGs.IsStarted.Init

QPKGs.IsNotStarted.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstarted_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStarted.Array()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[@]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"
    }
QPKGs.IsNotStarted.Count()
    {
    echo "${#_obj_qpkgs_isnotstarted_array_[@]}"
    }
QPKGs.IsNotStarted.Exist()
    {
    [[ ${_obj_qpkgs_isnotstarted_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStarted.First()
    {
    echo "${_obj_qpkgs_isnotstarted_array_[0]}"
    }
QPKGs.IsNotStarted.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstarted_array_[@]} ]] && index=${#_obj_qpkgs_isnotstarted_array_[@]}
    echo -n "${_obj_qpkgs_isnotstarted_array_[((index-1))]}"
    }
QPKGs.IsNotStarted.Init()
    {
    _obj_qpkgs_isnotstarted_size_=0
    _obj_qpkgs_isnotstarted_array_=()
    _obj_qpkgs_isnotstarted_array_index_=1
    }
QPKGs.IsNotStarted.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstarted_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStarted.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstarted_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStarted.List()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"
    }
QPKGs.IsNotStarted.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStarted.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstarted_array_[@]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstarted_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"} ]] && _obj_qpkgs_isnotstarted_array_=()
    }
QPKGs.IsNotStarted.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstarted_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstarted_size_
    fi
    }
QPKGs.IsNotStarted.Init

QPKGs.IsStopping.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstopping_array_+=("$item")
        fi
    done
    }
QPKGs.IsStopping.Array()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[@]+"${_obj_qpkgs_isstopping_array_[@]}"}"
    }
QPKGs.IsStopping.Count()
    {
    echo "${#_obj_qpkgs_isstopping_array_[@]}"
    }
QPKGs.IsStopping.Exist()
    {
    [[ ${_obj_qpkgs_isstopping_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStopping.First()
    {
    echo "${_obj_qpkgs_isstopping_array_[0]}"
    }
QPKGs.IsStopping.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstopping_array_[@]} ]] && index=${#_obj_qpkgs_isstopping_array_[@]}
    echo -n "${_obj_qpkgs_isstopping_array_[((index-1))]}"
    }
QPKGs.IsStopping.Init()
    {
    _obj_qpkgs_isstopping_size_=0
    _obj_qpkgs_isstopping_array_=()
    _obj_qpkgs_isstopping_array_index_=1
    }
QPKGs.IsStopping.IsAny()
    {
    [[ ${#_obj_qpkgs_isstopping_array_[@]} -gt 0 ]]
    }
QPKGs.IsStopping.IsNone()
    {
    [[ ${#_obj_qpkgs_isstopping_array_[@]} -eq 0 ]]
    }
QPKGs.IsStopping.List()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"}"
    }
QPKGs.IsStopping.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStopping.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstopping_array_[@]+"${_obj_qpkgs_isstopping_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstopping_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"} ]] && _obj_qpkgs_isstopping_array_=()
    }
QPKGs.IsStopping.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstopping_size_=$2
    else
        echo -n $_obj_qpkgs_isstopping_size_
    fi
    }
QPKGs.IsStopping.Init

QPKGs.IsNotStopping.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstopping_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStopping.Array()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[@]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"
    }
QPKGs.IsNotStopping.Count()
    {
    echo "${#_obj_qpkgs_isnotstopping_array_[@]}"
    }
QPKGs.IsNotStopping.Exist()
    {
    [[ ${_obj_qpkgs_isnotstopping_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStopping.First()
    {
    echo "${_obj_qpkgs_isnotstopping_array_[0]}"
    }
QPKGs.IsNotStopping.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstopping_array_[@]} ]] && index=${#_obj_qpkgs_isnotstopping_array_[@]}
    echo -n "${_obj_qpkgs_isnotstopping_array_[((index-1))]}"
    }
QPKGs.IsNotStopping.Init()
    {
    _obj_qpkgs_isnotstopping_size_=0
    _obj_qpkgs_isnotstopping_array_=()
    _obj_qpkgs_isnotstopping_array_index_=1
    }
QPKGs.IsNotStopping.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstopping_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStopping.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstopping_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStopping.List()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"
    }
QPKGs.IsNotStopping.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStopping.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstopping_array_[@]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstopping_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"} ]] && _obj_qpkgs_isnotstopping_array_=()
    }
QPKGs.IsNotStopping.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstopping_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstopping_size_
    fi
    }
QPKGs.IsNotStopping.Init

QPKGs.IsStopped.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstopped_array_+=("$item")
        fi
    done
    }
QPKGs.IsStopped.Array()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[@]+"${_obj_qpkgs_isstopped_array_[@]}"}"
    }
QPKGs.IsStopped.Count()
    {
    echo "${#_obj_qpkgs_isstopped_array_[@]}"
    }
QPKGs.IsStopped.Exist()
    {
    [[ ${_obj_qpkgs_isstopped_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStopped.First()
    {
    echo "${_obj_qpkgs_isstopped_array_[0]}"
    }
QPKGs.IsStopped.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstopped_array_[@]} ]] && index=${#_obj_qpkgs_isstopped_array_[@]}
    echo -n "${_obj_qpkgs_isstopped_array_[((index-1))]}"
    }
QPKGs.IsStopped.Init()
    {
    _obj_qpkgs_isstopped_size_=0
    _obj_qpkgs_isstopped_array_=()
    _obj_qpkgs_isstopped_array_index_=1
    }
QPKGs.IsStopped.IsAny()
    {
    [[ ${#_obj_qpkgs_isstopped_array_[@]} -gt 0 ]]
    }
QPKGs.IsStopped.IsNone()
    {
    [[ ${#_obj_qpkgs_isstopped_array_[@]} -eq 0 ]]
    }
QPKGs.IsStopped.List()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"}"
    }
QPKGs.IsStopped.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStopped.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstopped_array_[@]+"${_obj_qpkgs_isstopped_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstopped_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"} ]] && _obj_qpkgs_isstopped_array_=()
    }
QPKGs.IsStopped.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstopped_size_=$2
    else
        echo -n $_obj_qpkgs_isstopped_size_
    fi
    }
QPKGs.IsStopped.Init

QPKGs.IsNotStopped.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstopped_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStopped.Array()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[@]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"
    }
QPKGs.IsNotStopped.Count()
    {
    echo "${#_obj_qpkgs_isnotstopped_array_[@]}"
    }
QPKGs.IsNotStopped.Exist()
    {
    [[ ${_obj_qpkgs_isnotstopped_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStopped.First()
    {
    echo "${_obj_qpkgs_isnotstopped_array_[0]}"
    }
QPKGs.IsNotStopped.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstopped_array_[@]} ]] && index=${#_obj_qpkgs_isnotstopped_array_[@]}
    echo -n "${_obj_qpkgs_isnotstopped_array_[((index-1))]}"
    }
QPKGs.IsNotStopped.Init()
    {
    _obj_qpkgs_isnotstopped_size_=0
    _obj_qpkgs_isnotstopped_array_=()
    _obj_qpkgs_isnotstopped_array_index_=1
    }
QPKGs.IsNotStopped.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstopped_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStopped.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstopped_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStopped.List()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"
    }
QPKGs.IsNotStopped.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStopped.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstopped_array_[@]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstopped_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"} ]] && _obj_qpkgs_isnotstopped_array_=()
    }
QPKGs.IsNotStopped.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstopped_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstopped_size_
    fi
    }
QPKGs.IsNotStopped.Init

QPKGs.IsSupportBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_issupportbackup_array_+=("$item")
        fi
    done
    }
QPKGs.IsSupportBackup.Array()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[@]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"
    }
QPKGs.IsSupportBackup.Count()
    {
    echo "${#_obj_qpkgs_issupportbackup_array_[@]}"
    }
QPKGs.IsSupportBackup.Exist()
    {
    [[ ${_obj_qpkgs_issupportbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsSupportBackup.First()
    {
    echo "${_obj_qpkgs_issupportbackup_array_[0]}"
    }
QPKGs.IsSupportBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_issupportbackup_array_[@]} ]] && index=${#_obj_qpkgs_issupportbackup_array_[@]}
    echo -n "${_obj_qpkgs_issupportbackup_array_[((index-1))]}"
    }
QPKGs.IsSupportBackup.Init()
    {
    _obj_qpkgs_issupportbackup_size_=0
    _obj_qpkgs_issupportbackup_array_=()
    _obj_qpkgs_issupportbackup_array_index_=1
    }
QPKGs.IsSupportBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_issupportbackup_array_[@]} -gt 0 ]]
    }
QPKGs.IsSupportBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_issupportbackup_array_[@]} -eq 0 ]]
    }
QPKGs.IsSupportBackup.List()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"
    }
QPKGs.IsSupportBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsSupportBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_issupportbackup_array_[@]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_issupportbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"} ]] && _obj_qpkgs_issupportbackup_array_=()
    }
QPKGs.IsSupportBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_issupportbackup_size_=$2
    else
        echo -n $_obj_qpkgs_issupportbackup_size_
    fi
    }
QPKGs.IsSupportBackup.Init

QPKGs.IsNotSupportBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotsupportbackup_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotSupportBackup.Array()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[@]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"
    }
QPKGs.IsNotSupportBackup.Count()
    {
    echo "${#_obj_qpkgs_isnotsupportbackup_array_[@]}"
    }
QPKGs.IsNotSupportBackup.Exist()
    {
    [[ ${_obj_qpkgs_isnotsupportbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotSupportBackup.First()
    {
    echo "${_obj_qpkgs_isnotsupportbackup_array_[0]}"
    }
QPKGs.IsNotSupportBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotsupportbackup_array_[@]} ]] && index=${#_obj_qpkgs_isnotsupportbackup_array_[@]}
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[((index-1))]}"
    }
QPKGs.IsNotSupportBackup.Init()
    {
    _obj_qpkgs_isnotsupportbackup_size_=0
    _obj_qpkgs_isnotsupportbackup_array_=()
    _obj_qpkgs_isnotsupportbackup_array_index_=1
    }
QPKGs.IsNotSupportBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotsupportbackup_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotSupportBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotsupportbackup_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotSupportBackup.List()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"
    }
QPKGs.IsNotSupportBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotSupportBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotsupportbackup_array_[@]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotsupportbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"} ]] && _obj_qpkgs_isnotsupportbackup_array_=()
    }
QPKGs.IsNotSupportBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotsupportbackup_size_=$2
    else
        echo -n $_obj_qpkgs_isnotsupportbackup_size_
    fi
    }
QPKGs.IsNotSupportBackup.Init

QPKGs.IsSupportUpdateOnRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_issupportupdateonrestart_array_+=("$item")
        fi
    done
    }
QPKGs.IsSupportUpdateOnRestart.Array()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[@]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsSupportUpdateOnRestart.Count()
    {
    echo "${#_obj_qpkgs_issupportupdateonrestart_array_[@]}"
    }
QPKGs.IsSupportUpdateOnRestart.Exist()
    {
    [[ ${_obj_qpkgs_issupportupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsSupportUpdateOnRestart.First()
    {
    echo "${_obj_qpkgs_issupportupdateonrestart_array_[0]}"
    }
QPKGs.IsSupportUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} ]] && index=${#_obj_qpkgs_issupportupdateonrestart_array_[@]}
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[((index-1))]}"
    }
QPKGs.IsSupportUpdateOnRestart.Init()
    {
    _obj_qpkgs_issupportupdateonrestart_size_=0
    _obj_qpkgs_issupportupdateonrestart_array_=()
    _obj_qpkgs_issupportupdateonrestart_array_index_=1
    }
QPKGs.IsSupportUpdateOnRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} -gt 0 ]]
    }
QPKGs.IsSupportUpdateOnRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} -eq 0 ]]
    }
QPKGs.IsSupportUpdateOnRestart.List()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsSupportUpdateOnRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsSupportUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_issupportupdateonrestart_array_[@]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_issupportupdateonrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"} ]] && _obj_qpkgs_issupportupdateonrestart_array_=()
    }
QPKGs.IsSupportUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_issupportupdateonrestart_size_=$2
    else
        echo -n $_obj_qpkgs_issupportupdateonrestart_size_
    fi
    }
QPKGs.IsSupportUpdateOnRestart.Init

QPKGs.IsNotSupportUpdateOnRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotsupportupdateonrestart_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotSupportUpdateOnRestart.Array()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Count()
    {
    echo "${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Exist()
    {
    [[ ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.First()
    {
    echo "${_obj_qpkgs_isnotsupportupdateonrestart_array_[0]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} ]] && index=${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[((index-1))]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Init()
    {
    _obj_qpkgs_isnotsupportupdateonrestart_size_=0
    _obj_qpkgs_isnotsupportupdateonrestart_array_=()
    _obj_qpkgs_isnotsupportupdateonrestart_array_index_=1
    }
QPKGs.IsNotSupportUpdateOnRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.List()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsNotSupportUpdateOnRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotSupportUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotsupportupdateonrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"} ]] && _obj_qpkgs_isnotsupportupdateonrestart_array_=()
    }
QPKGs.IsNotSupportUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotsupportupdateonrestart_size_=$2
    else
        echo -n $_obj_qpkgs_isnotsupportupdateonrestart_size_
    fi
    }
QPKGs.IsNotSupportUpdateOnRestart.Init

QPKGs.IsRestarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isrestarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsRestarting.Array()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[@]+"${_obj_qpkgs_isrestarting_array_[@]}"}"
    }
QPKGs.IsRestarting.Count()
    {
    echo "${#_obj_qpkgs_isrestarting_array_[@]}"
    }
QPKGs.IsRestarting.Exist()
    {
    [[ ${_obj_qpkgs_isrestarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsRestarting.First()
    {
    echo "${_obj_qpkgs_isrestarting_array_[0]}"
    }
QPKGs.IsRestarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isrestarting_array_[@]} ]] && index=${#_obj_qpkgs_isrestarting_array_[@]}
    echo -n "${_obj_qpkgs_isrestarting_array_[((index-1))]}"
    }
QPKGs.IsRestarting.Init()
    {
    _obj_qpkgs_isrestarting_size_=0
    _obj_qpkgs_isrestarting_array_=()
    _obj_qpkgs_isrestarting_array_index_=1
    }
QPKGs.IsRestarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isrestarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsRestarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isrestarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsRestarting.List()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"}"
    }
QPKGs.IsRestarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsRestarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isrestarting_array_[@]+"${_obj_qpkgs_isrestarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isrestarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"} ]] && _obj_qpkgs_isrestarting_array_=()
    }
QPKGs.IsRestarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isrestarting_size_=$2
    else
        echo -n $_obj_qpkgs_isrestarting_size_
    fi
    }
QPKGs.IsRestarting.Init

QPKGs.IsNotRestarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotrestarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotRestarting.Array()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[@]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"
    }
QPKGs.IsNotRestarting.Count()
    {
    echo "${#_obj_qpkgs_isnotrestarting_array_[@]}"
    }
QPKGs.IsNotRestarting.Exist()
    {
    [[ ${_obj_qpkgs_isnotrestarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotRestarting.First()
    {
    echo "${_obj_qpkgs_isnotrestarting_array_[0]}"
    }
QPKGs.IsNotRestarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotrestarting_array_[@]} ]] && index=${#_obj_qpkgs_isnotrestarting_array_[@]}
    echo -n "${_obj_qpkgs_isnotrestarting_array_[((index-1))]}"
    }
QPKGs.IsNotRestarting.Init()
    {
    _obj_qpkgs_isnotrestarting_size_=0
    _obj_qpkgs_isnotrestarting_array_=()
    _obj_qpkgs_isnotrestarting_array_index_=1
    }
QPKGs.IsNotRestarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotrestarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotRestarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotrestarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotRestarting.List()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"
    }
QPKGs.IsNotRestarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotRestarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotrestarting_array_[@]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotrestarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"} ]] && _obj_qpkgs_isnotrestarting_array_=()
    }
QPKGs.IsNotRestarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotrestarting_size_=$2
    else
        echo -n $_obj_qpkgs_isnotrestarting_size_
    fi
    }
QPKGs.IsNotRestarting.Init

QPKGs.IsUpgradable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isupgradable_array_+=("$item")
        fi
    done
    }
QPKGs.IsUpgradable.Array()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[@]+"${_obj_qpkgs_isupgradable_array_[@]}"}"
    }
QPKGs.IsUpgradable.Count()
    {
    echo "${#_obj_qpkgs_isupgradable_array_[@]}"
    }
QPKGs.IsUpgradable.Exist()
    {
    [[ ${_obj_qpkgs_isupgradable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsUpgradable.First()
    {
    echo "${_obj_qpkgs_isupgradable_array_[0]}"
    }
QPKGs.IsUpgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isupgradable_array_[@]} ]] && index=${#_obj_qpkgs_isupgradable_array_[@]}
    echo -n "${_obj_qpkgs_isupgradable_array_[((index-1))]}"
    }
QPKGs.IsUpgradable.Init()
    {
    _obj_qpkgs_isupgradable_size_=0
    _obj_qpkgs_isupgradable_array_=()
    _obj_qpkgs_isupgradable_array_index_=1
    }
QPKGs.IsUpgradable.IsAny()
    {
    [[ ${#_obj_qpkgs_isupgradable_array_[@]} -gt 0 ]]
    }
QPKGs.IsUpgradable.IsNone()
    {
    [[ ${#_obj_qpkgs_isupgradable_array_[@]} -eq 0 ]]
    }
QPKGs.IsUpgradable.List()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"}"
    }
QPKGs.IsUpgradable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsUpgradable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isupgradable_array_[@]+"${_obj_qpkgs_isupgradable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isupgradable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"} ]] && _obj_qpkgs_isupgradable_array_=()
    }
QPKGs.IsUpgradable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isupgradable_size_=$2
    else
        echo -n $_obj_qpkgs_isupgradable_size_
    fi
    }
QPKGs.IsUpgradable.Init

QPKGs.IsNotUpgradable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotupgradable_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotUpgradable.Array()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[@]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"
    }
QPKGs.IsNotUpgradable.Count()
    {
    echo "${#_obj_qpkgs_isnotupgradable_array_[@]}"
    }
QPKGs.IsNotUpgradable.Exist()
    {
    [[ ${_obj_qpkgs_isnotupgradable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotUpgradable.First()
    {
    echo "${_obj_qpkgs_isnotupgradable_array_[0]}"
    }
QPKGs.IsNotUpgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotupgradable_array_[@]} ]] && index=${#_obj_qpkgs_isnotupgradable_array_[@]}
    echo -n "${_obj_qpkgs_isnotupgradable_array_[((index-1))]}"
    }
QPKGs.IsNotUpgradable.Init()
    {
    _obj_qpkgs_isnotupgradable_size_=0
    _obj_qpkgs_isnotupgradable_array_=()
    _obj_qpkgs_isnotupgradable_array_index_=1
    }
QPKGs.IsNotUpgradable.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotupgradable_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotUpgradable.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotupgradable_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotUpgradable.List()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"
    }
QPKGs.IsNotUpgradable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotUpgradable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotupgradable_array_[@]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotupgradable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"} ]] && _obj_qpkgs_isnotupgradable_array_=()
    }
QPKGs.IsNotUpgradable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotupgradable_size_=$2
    else
        echo -n $_obj_qpkgs_isnotupgradable_size_
    fi
    }
QPKGs.IsNotUpgradable.Init

QPKGs.ToBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tobackup_array_+=("$item")
        fi
    done
    }
QPKGs.ToBackup.Array()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[@]+"${_obj_qpkgs_tobackup_array_[@]}"}"
    }
QPKGs.ToBackup.Count()
    {
    echo "${#_obj_qpkgs_tobackup_array_[@]}"
    }
QPKGs.ToBackup.Exist()
    {
    [[ ${_obj_qpkgs_tobackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToBackup.First()
    {
    echo "${_obj_qpkgs_tobackup_array_[0]}"
    }
QPKGs.ToBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tobackup_array_[@]} ]] && index=${#_obj_qpkgs_tobackup_array_[@]}
    echo -n "${_obj_qpkgs_tobackup_array_[((index-1))]}"
    }
QPKGs.ToBackup.Init()
    {
    _obj_qpkgs_tobackup_size_=0
    _obj_qpkgs_tobackup_array_=()
    _obj_qpkgs_tobackup_array_index_=1
    }
QPKGs.ToBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_tobackup_array_[@]} -gt 0 ]]
    }
QPKGs.ToBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_tobackup_array_[@]} -eq 0 ]]
    }
QPKGs.ToBackup.List()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"}"
    }
QPKGs.ToBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tobackup_array_[@]+"${_obj_qpkgs_tobackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tobackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"} ]] && _obj_qpkgs_tobackup_array_=()
    }
QPKGs.ToBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tobackup_size_=$2
    else
        echo -n $_obj_qpkgs_tobackup_size_
    fi
    }
QPKGs.ToBackup.Init

QPKGs.OkBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okbackup_array_+=("$item")
        fi
    done
    }
QPKGs.OkBackup.Array()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[@]+"${_obj_qpkgs_okbackup_array_[@]}"}"
    }
QPKGs.OkBackup.Count()
    {
    echo "${#_obj_qpkgs_okbackup_array_[@]}"
    }
QPKGs.OkBackup.Exist()
    {
    [[ ${_obj_qpkgs_okbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkBackup.First()
    {
    echo "${_obj_qpkgs_okbackup_array_[0]}"
    }
QPKGs.OkBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okbackup_array_[@]} ]] && index=${#_obj_qpkgs_okbackup_array_[@]}
    echo -n "${_obj_qpkgs_okbackup_array_[((index-1))]}"
    }
QPKGs.OkBackup.Init()
    {
    _obj_qpkgs_okbackup_size_=0
    _obj_qpkgs_okbackup_array_=()
    _obj_qpkgs_okbackup_array_index_=1
    }
QPKGs.OkBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_okbackup_array_[@]} -gt 0 ]]
    }
QPKGs.OkBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_okbackup_array_[@]} -eq 0 ]]
    }
QPKGs.OkBackup.List()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"}"
    }
QPKGs.OkBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okbackup_array_[@]+"${_obj_qpkgs_okbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"} ]] && _obj_qpkgs_okbackup_array_=()
    }
QPKGs.OkBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okbackup_size_=$2
    else
        echo -n $_obj_qpkgs_okbackup_size_
    fi
    }
QPKGs.OkBackup.Init

QPKGs.ErBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erbackup_array_+=("$item")
        fi
    done
    }
QPKGs.ErBackup.Array()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[@]+"${_obj_qpkgs_erbackup_array_[@]}"}"
    }
QPKGs.ErBackup.Count()
    {
    echo "${#_obj_qpkgs_erbackup_array_[@]}"
    }
QPKGs.ErBackup.Exist()
    {
    [[ ${_obj_qpkgs_erbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErBackup.First()
    {
    echo "${_obj_qpkgs_erbackup_array_[0]}"
    }
QPKGs.ErBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erbackup_array_[@]} ]] && index=${#_obj_qpkgs_erbackup_array_[@]}
    echo -n "${_obj_qpkgs_erbackup_array_[((index-1))]}"
    }
QPKGs.ErBackup.Init()
    {
    _obj_qpkgs_erbackup_size_=0
    _obj_qpkgs_erbackup_array_=()
    _obj_qpkgs_erbackup_array_index_=1
    }
QPKGs.ErBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_erbackup_array_[@]} -gt 0 ]]
    }
QPKGs.ErBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_erbackup_array_[@]} -eq 0 ]]
    }
QPKGs.ErBackup.List()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"}"
    }
QPKGs.ErBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erbackup_array_[@]+"${_obj_qpkgs_erbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"} ]] && _obj_qpkgs_erbackup_array_=()
    }
QPKGs.ErBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erbackup_size_=$2
    else
        echo -n $_obj_qpkgs_erbackup_size_
    fi
    }
QPKGs.ErBackup.Init

QPKGs.SkBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skbackup_array_+=("$item")
        fi
    done
    }
QPKGs.SkBackup.Array()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[@]+"${_obj_qpkgs_skbackup_array_[@]}"}"
    }
QPKGs.SkBackup.Count()
    {
    echo "${#_obj_qpkgs_skbackup_array_[@]}"
    }
QPKGs.SkBackup.Exist()
    {
    [[ ${_obj_qpkgs_skbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkBackup.First()
    {
    echo "${_obj_qpkgs_skbackup_array_[0]}"
    }
QPKGs.SkBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skbackup_array_[@]} ]] && index=${#_obj_qpkgs_skbackup_array_[@]}
    echo -n "${_obj_qpkgs_skbackup_array_[((index-1))]}"
    }
QPKGs.SkBackup.Init()
    {
    _obj_qpkgs_skbackup_size_=0
    _obj_qpkgs_skbackup_array_=()
    _obj_qpkgs_skbackup_array_index_=1
    }
QPKGs.SkBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_skbackup_array_[@]} -gt 0 ]]
    }
QPKGs.SkBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_skbackup_array_[@]} -eq 0 ]]
    }
QPKGs.SkBackup.List()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"}"
    }
QPKGs.SkBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skbackup_array_[@]+"${_obj_qpkgs_skbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"} ]] && _obj_qpkgs_skbackup_array_=()
    }
QPKGs.SkBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skbackup_size_=$2
    else
        echo -n $_obj_qpkgs_skbackup_size_
    fi
    }
QPKGs.SkBackup.Init

QPKGs.ToDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_todownload_array_+=("$item")
        fi
    done
    }
QPKGs.ToDownload.Array()
    {
    echo -n "${_obj_qpkgs_todownload_array_[@]+"${_obj_qpkgs_todownload_array_[@]}"}"
    }
QPKGs.ToDownload.Count()
    {
    echo "${#_obj_qpkgs_todownload_array_[@]}"
    }
QPKGs.ToDownload.Exist()
    {
    [[ ${_obj_qpkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToDownload.First()
    {
    echo "${_obj_qpkgs_todownload_array_[0]}"
    }
QPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_todownload_array_[@]} ]] && index=${#_obj_qpkgs_todownload_array_[@]}
    echo -n "${_obj_qpkgs_todownload_array_[((index-1))]}"
    }
QPKGs.ToDownload.Init()
    {
    _obj_qpkgs_todownload_size_=0
    _obj_qpkgs_todownload_array_=()
    _obj_qpkgs_todownload_array_index_=1
    }
QPKGs.ToDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_todownload_array_[@]} -gt 0 ]]
    }
QPKGs.ToDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_todownload_array_[@]} -eq 0 ]]
    }
QPKGs.ToDownload.List()
    {
    echo -n "${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"}"
    }
QPKGs.ToDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_todownload_array_[@]+"${_obj_qpkgs_todownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_todownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"} ]] && _obj_qpkgs_todownload_array_=()
    }
QPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_todownload_size_=$2
    else
        echo -n $_obj_qpkgs_todownload_size_
    fi
    }
QPKGs.ToDownload.Init

QPKGs.OkDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okdownload_array_+=("$item")
        fi
    done
    }
QPKGs.OkDownload.Array()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[@]+"${_obj_qpkgs_okdownload_array_[@]}"}"
    }
QPKGs.OkDownload.Count()
    {
    echo "${#_obj_qpkgs_okdownload_array_[@]}"
    }
QPKGs.OkDownload.Exist()
    {
    [[ ${_obj_qpkgs_okdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkDownload.First()
    {
    echo "${_obj_qpkgs_okdownload_array_[0]}"
    }
QPKGs.OkDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okdownload_array_[@]} ]] && index=${#_obj_qpkgs_okdownload_array_[@]}
    echo -n "${_obj_qpkgs_okdownload_array_[((index-1))]}"
    }
QPKGs.OkDownload.Init()
    {
    _obj_qpkgs_okdownload_size_=0
    _obj_qpkgs_okdownload_array_=()
    _obj_qpkgs_okdownload_array_index_=1
    }
QPKGs.OkDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_okdownload_array_[@]} -gt 0 ]]
    }
QPKGs.OkDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_okdownload_array_[@]} -eq 0 ]]
    }
QPKGs.OkDownload.List()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"}"
    }
QPKGs.OkDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okdownload_array_[@]+"${_obj_qpkgs_okdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"} ]] && _obj_qpkgs_okdownload_array_=()
    }
QPKGs.OkDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okdownload_size_=$2
    else
        echo -n $_obj_qpkgs_okdownload_size_
    fi
    }
QPKGs.OkDownload.Init

QPKGs.ErDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erdownload_array_+=("$item")
        fi
    done
    }
QPKGs.ErDownload.Array()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[@]+"${_obj_qpkgs_erdownload_array_[@]}"}"
    }
QPKGs.ErDownload.Count()
    {
    echo "${#_obj_qpkgs_erdownload_array_[@]}"
    }
QPKGs.ErDownload.Exist()
    {
    [[ ${_obj_qpkgs_erdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErDownload.First()
    {
    echo "${_obj_qpkgs_erdownload_array_[0]}"
    }
QPKGs.ErDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erdownload_array_[@]} ]] && index=${#_obj_qpkgs_erdownload_array_[@]}
    echo -n "${_obj_qpkgs_erdownload_array_[((index-1))]}"
    }
QPKGs.ErDownload.Init()
    {
    _obj_qpkgs_erdownload_size_=0
    _obj_qpkgs_erdownload_array_=()
    _obj_qpkgs_erdownload_array_index_=1
    }
QPKGs.ErDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_erdownload_array_[@]} -gt 0 ]]
    }
QPKGs.ErDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_erdownload_array_[@]} -eq 0 ]]
    }
QPKGs.ErDownload.List()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"}"
    }
QPKGs.ErDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erdownload_array_[@]+"${_obj_qpkgs_erdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"} ]] && _obj_qpkgs_erdownload_array_=()
    }
QPKGs.ErDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erdownload_size_=$2
    else
        echo -n $_obj_qpkgs_erdownload_size_
    fi
    }
QPKGs.ErDownload.Init

QPKGs.SkDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skdownload_array_+=("$item")
        fi
    done
    }
QPKGs.SkDownload.Array()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[@]+"${_obj_qpkgs_skdownload_array_[@]}"}"
    }
QPKGs.SkDownload.Count()
    {
    echo "${#_obj_qpkgs_skdownload_array_[@]}"
    }
QPKGs.SkDownload.Exist()
    {
    [[ ${_obj_qpkgs_skdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkDownload.First()
    {
    echo "${_obj_qpkgs_skdownload_array_[0]}"
    }
QPKGs.SkDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skdownload_array_[@]} ]] && index=${#_obj_qpkgs_skdownload_array_[@]}
    echo -n "${_obj_qpkgs_skdownload_array_[((index-1))]}"
    }
QPKGs.SkDownload.Init()
    {
    _obj_qpkgs_skdownload_size_=0
    _obj_qpkgs_skdownload_array_=()
    _obj_qpkgs_skdownload_array_index_=1
    }
QPKGs.SkDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_skdownload_array_[@]} -gt 0 ]]
    }
QPKGs.SkDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_skdownload_array_[@]} -eq 0 ]]
    }
QPKGs.SkDownload.List()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"}"
    }
QPKGs.SkDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skdownload_array_[@]+"${_obj_qpkgs_skdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"} ]] && _obj_qpkgs_skdownload_array_=()
    }
QPKGs.SkDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skdownload_size_=$2
    else
        echo -n $_obj_qpkgs_skdownload_size_
    fi
    }
QPKGs.SkDownload.Init

QPKGs.ToInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToInstall.Array()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[@]+"${_obj_qpkgs_toinstall_array_[@]}"}"
    }
QPKGs.ToInstall.Count()
    {
    echo "${#_obj_qpkgs_toinstall_array_[@]}"
    }
QPKGs.ToInstall.Exist()
    {
    [[ ${_obj_qpkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToInstall.First()
    {
    echo "${_obj_qpkgs_toinstall_array_[0]}"
    }
QPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toinstall_array_[@]} ]] && index=${#_obj_qpkgs_toinstall_array_[@]}
    echo -n "${_obj_qpkgs_toinstall_array_[((index-1))]}"
    }
QPKGs.ToInstall.Init()
    {
    _obj_qpkgs_toinstall_size_=0
    _obj_qpkgs_toinstall_array_=()
    _obj_qpkgs_toinstall_array_index_=1
    }
QPKGs.ToInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_toinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_toinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToInstall.List()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"}"
    }
QPKGs.ToInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toinstall_array_[@]+"${_obj_qpkgs_toinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"} ]] && _obj_qpkgs_toinstall_array_=()
    }
QPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toinstall_size_=$2
    else
        echo -n $_obj_qpkgs_toinstall_size_
    fi
    }
QPKGs.ToInstall.Init

QPKGs.OkInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okinstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkInstall.Array()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[@]+"${_obj_qpkgs_okinstall_array_[@]}"}"
    }
QPKGs.OkInstall.Count()
    {
    echo "${#_obj_qpkgs_okinstall_array_[@]}"
    }
QPKGs.OkInstall.Exist()
    {
    [[ ${_obj_qpkgs_okinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkInstall.First()
    {
    echo "${_obj_qpkgs_okinstall_array_[0]}"
    }
QPKGs.OkInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okinstall_array_[@]} ]] && index=${#_obj_qpkgs_okinstall_array_[@]}
    echo -n "${_obj_qpkgs_okinstall_array_[((index-1))]}"
    }
QPKGs.OkInstall.Init()
    {
    _obj_qpkgs_okinstall_size_=0
    _obj_qpkgs_okinstall_array_=()
    _obj_qpkgs_okinstall_array_index_=1
    }
QPKGs.OkInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okinstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okinstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkInstall.List()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"}"
    }
QPKGs.OkInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okinstall_array_[@]+"${_obj_qpkgs_okinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"} ]] && _obj_qpkgs_okinstall_array_=()
    }
QPKGs.OkInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okinstall_size_=$2
    else
        echo -n $_obj_qpkgs_okinstall_size_
    fi
    }
QPKGs.OkInstall.Init

QPKGs.ErInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErInstall.Array()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[@]+"${_obj_qpkgs_erinstall_array_[@]}"}"
    }
QPKGs.ErInstall.Count()
    {
    echo "${#_obj_qpkgs_erinstall_array_[@]}"
    }
QPKGs.ErInstall.Exist()
    {
    [[ ${_obj_qpkgs_erinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErInstall.First()
    {
    echo "${_obj_qpkgs_erinstall_array_[0]}"
    }
QPKGs.ErInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erinstall_array_[@]} ]] && index=${#_obj_qpkgs_erinstall_array_[@]}
    echo -n "${_obj_qpkgs_erinstall_array_[((index-1))]}"
    }
QPKGs.ErInstall.Init()
    {
    _obj_qpkgs_erinstall_size_=0
    _obj_qpkgs_erinstall_array_=()
    _obj_qpkgs_erinstall_array_index_=1
    }
QPKGs.ErInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_erinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_erinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErInstall.List()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"}"
    }
QPKGs.ErInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erinstall_array_[@]+"${_obj_qpkgs_erinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"} ]] && _obj_qpkgs_erinstall_array_=()
    }
QPKGs.ErInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erinstall_size_=$2
    else
        echo -n $_obj_qpkgs_erinstall_size_
    fi
    }
QPKGs.ErInstall.Init

QPKGs.SkInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skinstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkInstall.Array()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[@]+"${_obj_qpkgs_skinstall_array_[@]}"}"
    }
QPKGs.SkInstall.Count()
    {
    echo "${#_obj_qpkgs_skinstall_array_[@]}"
    }
QPKGs.SkInstall.Exist()
    {
    [[ ${_obj_qpkgs_skinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkInstall.First()
    {
    echo "${_obj_qpkgs_skinstall_array_[0]}"
    }
QPKGs.SkInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skinstall_array_[@]} ]] && index=${#_obj_qpkgs_skinstall_array_[@]}
    echo -n "${_obj_qpkgs_skinstall_array_[((index-1))]}"
    }
QPKGs.SkInstall.Init()
    {
    _obj_qpkgs_skinstall_size_=0
    _obj_qpkgs_skinstall_array_=()
    _obj_qpkgs_skinstall_array_index_=1
    }
QPKGs.SkInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skinstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skinstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkInstall.List()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"}"
    }
QPKGs.SkInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skinstall_array_[@]+"${_obj_qpkgs_skinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"} ]] && _obj_qpkgs_skinstall_array_=()
    }
QPKGs.SkInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skinstall_size_=$2
    else
        echo -n $_obj_qpkgs_skinstall_size_
    fi
    }
QPKGs.SkInstall.Init

QPKGs.ToRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torebuild_array_+=("$item")
        fi
    done
    }
QPKGs.ToRebuild.Array()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[@]+"${_obj_qpkgs_torebuild_array_[@]}"}"
    }
QPKGs.ToRebuild.Count()
    {
    echo "${#_obj_qpkgs_torebuild_array_[@]}"
    }
QPKGs.ToRebuild.Exist()
    {
    [[ ${_obj_qpkgs_torebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRebuild.First()
    {
    echo "${_obj_qpkgs_torebuild_array_[0]}"
    }
QPKGs.ToRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torebuild_array_[@]} ]] && index=${#_obj_qpkgs_torebuild_array_[@]}
    echo -n "${_obj_qpkgs_torebuild_array_[((index-1))]}"
    }
QPKGs.ToRebuild.Init()
    {
    _obj_qpkgs_torebuild_size_=0
    _obj_qpkgs_torebuild_array_=()
    _obj_qpkgs_torebuild_array_index_=1
    }
QPKGs.ToRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_torebuild_array_[@]} -gt 0 ]]
    }
QPKGs.ToRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_torebuild_array_[@]} -eq 0 ]]
    }
QPKGs.ToRebuild.List()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"}"
    }
QPKGs.ToRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torebuild_array_[@]+"${_obj_qpkgs_torebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"} ]] && _obj_qpkgs_torebuild_array_=()
    }
QPKGs.ToRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torebuild_size_=$2
    else
        echo -n $_obj_qpkgs_torebuild_size_
    fi
    }
QPKGs.ToRebuild.Init

QPKGs.OkRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrebuild_array_+=("$item")
        fi
    done
    }
QPKGs.OkRebuild.Array()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[@]+"${_obj_qpkgs_okrebuild_array_[@]}"}"
    }
QPKGs.OkRebuild.Count()
    {
    echo "${#_obj_qpkgs_okrebuild_array_[@]}"
    }
QPKGs.OkRebuild.Exist()
    {
    [[ ${_obj_qpkgs_okrebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRebuild.First()
    {
    echo "${_obj_qpkgs_okrebuild_array_[0]}"
    }
QPKGs.OkRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrebuild_array_[@]} ]] && index=${#_obj_qpkgs_okrebuild_array_[@]}
    echo -n "${_obj_qpkgs_okrebuild_array_[((index-1))]}"
    }
QPKGs.OkRebuild.Init()
    {
    _obj_qpkgs_okrebuild_size_=0
    _obj_qpkgs_okrebuild_array_=()
    _obj_qpkgs_okrebuild_array_index_=1
    }
QPKGs.OkRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_okrebuild_array_[@]} -gt 0 ]]
    }
QPKGs.OkRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_okrebuild_array_[@]} -eq 0 ]]
    }
QPKGs.OkRebuild.List()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"}"
    }
QPKGs.OkRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrebuild_array_[@]+"${_obj_qpkgs_okrebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"} ]] && _obj_qpkgs_okrebuild_array_=()
    }
QPKGs.OkRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrebuild_size_=$2
    else
        echo -n $_obj_qpkgs_okrebuild_size_
    fi
    }
QPKGs.OkRebuild.Init

QPKGs.ErRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errebuild_array_+=("$item")
        fi
    done
    }
QPKGs.ErRebuild.Array()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[@]+"${_obj_qpkgs_errebuild_array_[@]}"}"
    }
QPKGs.ErRebuild.Count()
    {
    echo "${#_obj_qpkgs_errebuild_array_[@]}"
    }
QPKGs.ErRebuild.Exist()
    {
    [[ ${_obj_qpkgs_errebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRebuild.First()
    {
    echo "${_obj_qpkgs_errebuild_array_[0]}"
    }
QPKGs.ErRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errebuild_array_[@]} ]] && index=${#_obj_qpkgs_errebuild_array_[@]}
    echo -n "${_obj_qpkgs_errebuild_array_[((index-1))]}"
    }
QPKGs.ErRebuild.Init()
    {
    _obj_qpkgs_errebuild_size_=0
    _obj_qpkgs_errebuild_array_=()
    _obj_qpkgs_errebuild_array_index_=1
    }
QPKGs.ErRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_errebuild_array_[@]} -gt 0 ]]
    }
QPKGs.ErRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_errebuild_array_[@]} -eq 0 ]]
    }
QPKGs.ErRebuild.List()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"}"
    }
QPKGs.ErRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errebuild_array_[@]+"${_obj_qpkgs_errebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"} ]] && _obj_qpkgs_errebuild_array_=()
    }
QPKGs.ErRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errebuild_size_=$2
    else
        echo -n $_obj_qpkgs_errebuild_size_
    fi
    }
QPKGs.ErRebuild.Init

QPKGs.SkRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrebuild_array_+=("$item")
        fi
    done
    }
QPKGs.SkRebuild.Array()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[@]+"${_obj_qpkgs_skrebuild_array_[@]}"}"
    }
QPKGs.SkRebuild.Count()
    {
    echo "${#_obj_qpkgs_skrebuild_array_[@]}"
    }
QPKGs.SkRebuild.Exist()
    {
    [[ ${_obj_qpkgs_skrebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRebuild.First()
    {
    echo "${_obj_qpkgs_skrebuild_array_[0]}"
    }
QPKGs.SkRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrebuild_array_[@]} ]] && index=${#_obj_qpkgs_skrebuild_array_[@]}
    echo -n "${_obj_qpkgs_skrebuild_array_[((index-1))]}"
    }
QPKGs.SkRebuild.Init()
    {
    _obj_qpkgs_skrebuild_size_=0
    _obj_qpkgs_skrebuild_array_=()
    _obj_qpkgs_skrebuild_array_index_=1
    }
QPKGs.SkRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_skrebuild_array_[@]} -gt 0 ]]
    }
QPKGs.SkRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_skrebuild_array_[@]} -eq 0 ]]
    }
QPKGs.SkRebuild.List()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"}"
    }
QPKGs.SkRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrebuild_array_[@]+"${_obj_qpkgs_skrebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"} ]] && _obj_qpkgs_skrebuild_array_=()
    }
QPKGs.SkRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrebuild_size_=$2
    else
        echo -n $_obj_qpkgs_skrebuild_size_
    fi
    }
QPKGs.SkRebuild.Init

QPKGs.ToReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToReinstall.Array()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[@]+"${_obj_qpkgs_toreinstall_array_[@]}"}"
    }
QPKGs.ToReinstall.Count()
    {
    echo "${#_obj_qpkgs_toreinstall_array_[@]}"
    }
QPKGs.ToReinstall.Exist()
    {
    [[ ${_obj_qpkgs_toreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToReinstall.First()
    {
    echo "${_obj_qpkgs_toreinstall_array_[0]}"
    }
QPKGs.ToReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toreinstall_array_[@]} ]] && index=${#_obj_qpkgs_toreinstall_array_[@]}
    echo -n "${_obj_qpkgs_toreinstall_array_[((index-1))]}"
    }
QPKGs.ToReinstall.Init()
    {
    _obj_qpkgs_toreinstall_size_=0
    _obj_qpkgs_toreinstall_array_=()
    _obj_qpkgs_toreinstall_array_index_=1
    }
QPKGs.ToReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_toreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_toreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToReinstall.List()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"}"
    }
QPKGs.ToReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toreinstall_array_[@]+"${_obj_qpkgs_toreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"} ]] && _obj_qpkgs_toreinstall_array_=()
    }
QPKGs.ToReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_toreinstall_size_
    fi
    }
QPKGs.ToReinstall.Init

QPKGs.OkReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkReinstall.Array()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[@]+"${_obj_qpkgs_okreinstall_array_[@]}"}"
    }
QPKGs.OkReinstall.Count()
    {
    echo "${#_obj_qpkgs_okreinstall_array_[@]}"
    }
QPKGs.OkReinstall.Exist()
    {
    [[ ${_obj_qpkgs_okreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkReinstall.First()
    {
    echo "${_obj_qpkgs_okreinstall_array_[0]}"
    }
QPKGs.OkReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okreinstall_array_[@]} ]] && index=${#_obj_qpkgs_okreinstall_array_[@]}
    echo -n "${_obj_qpkgs_okreinstall_array_[((index-1))]}"
    }
QPKGs.OkReinstall.Init()
    {
    _obj_qpkgs_okreinstall_size_=0
    _obj_qpkgs_okreinstall_array_=()
    _obj_qpkgs_okreinstall_array_index_=1
    }
QPKGs.OkReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkReinstall.List()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"}"
    }
QPKGs.OkReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okreinstall_array_[@]+"${_obj_qpkgs_okreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"} ]] && _obj_qpkgs_okreinstall_array_=()
    }
QPKGs.OkReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_okreinstall_size_
    fi
    }
QPKGs.OkReinstall.Init

QPKGs.ErReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErReinstall.Array()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[@]+"${_obj_qpkgs_erreinstall_array_[@]}"}"
    }
QPKGs.ErReinstall.Count()
    {
    echo "${#_obj_qpkgs_erreinstall_array_[@]}"
    }
QPKGs.ErReinstall.Exist()
    {
    [[ ${_obj_qpkgs_erreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErReinstall.First()
    {
    echo "${_obj_qpkgs_erreinstall_array_[0]}"
    }
QPKGs.ErReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erreinstall_array_[@]} ]] && index=${#_obj_qpkgs_erreinstall_array_[@]}
    echo -n "${_obj_qpkgs_erreinstall_array_[((index-1))]}"
    }
QPKGs.ErReinstall.Init()
    {
    _obj_qpkgs_erreinstall_size_=0
    _obj_qpkgs_erreinstall_array_=()
    _obj_qpkgs_erreinstall_array_index_=1
    }
QPKGs.ErReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_erreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_erreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErReinstall.List()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"}"
    }
QPKGs.ErReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erreinstall_array_[@]+"${_obj_qpkgs_erreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"} ]] && _obj_qpkgs_erreinstall_array_=()
    }
QPKGs.ErReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_erreinstall_size_
    fi
    }
QPKGs.ErReinstall.Init

QPKGs.SkReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkReinstall.Array()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[@]+"${_obj_qpkgs_skreinstall_array_[@]}"}"
    }
QPKGs.SkReinstall.Count()
    {
    echo "${#_obj_qpkgs_skreinstall_array_[@]}"
    }
QPKGs.SkReinstall.Exist()
    {
    [[ ${_obj_qpkgs_skreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkReinstall.First()
    {
    echo "${_obj_qpkgs_skreinstall_array_[0]}"
    }
QPKGs.SkReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skreinstall_array_[@]} ]] && index=${#_obj_qpkgs_skreinstall_array_[@]}
    echo -n "${_obj_qpkgs_skreinstall_array_[((index-1))]}"
    }
QPKGs.SkReinstall.Init()
    {
    _obj_qpkgs_skreinstall_size_=0
    _obj_qpkgs_skreinstall_array_=()
    _obj_qpkgs_skreinstall_array_index_=1
    }
QPKGs.SkReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkReinstall.List()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"}"
    }
QPKGs.SkReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skreinstall_array_[@]+"${_obj_qpkgs_skreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"} ]] && _obj_qpkgs_skreinstall_array_=()
    }
QPKGs.SkReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_skreinstall_size_
    fi
    }
QPKGs.SkReinstall.Init

QPKGs.ToRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torestart_array_+=("$item")
        fi
    done
    }
QPKGs.ToRestart.Array()
    {
    echo -n "${_obj_qpkgs_torestart_array_[@]+"${_obj_qpkgs_torestart_array_[@]}"}"
    }
QPKGs.ToRestart.Count()
    {
    echo "${#_obj_qpkgs_torestart_array_[@]}"
    }
QPKGs.ToRestart.Exist()
    {
    [[ ${_obj_qpkgs_torestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestart.First()
    {
    echo "${_obj_qpkgs_torestart_array_[0]}"
    }
QPKGs.ToRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torestart_array_[@]} ]] && index=${#_obj_qpkgs_torestart_array_[@]}
    echo -n "${_obj_qpkgs_torestart_array_[((index-1))]}"
    }
QPKGs.ToRestart.Init()
    {
    _obj_qpkgs_torestart_size_=0
    _obj_qpkgs_torestart_array_=()
    _obj_qpkgs_torestart_array_index_=1
    }
QPKGs.ToRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_torestart_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_torestart_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestart.List()
    {
    echo -n "${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"}"
    }
QPKGs.ToRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torestart_array_[@]+"${_obj_qpkgs_torestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"} ]] && _obj_qpkgs_torestart_array_=()
    }
QPKGs.ToRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torestart_size_=$2
    else
        echo -n $_obj_qpkgs_torestart_size_
    fi
    }
QPKGs.ToRestart.Init

QPKGs.OkRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrestart_array_+=("$item")
        fi
    done
    }
QPKGs.OkRestart.Array()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[@]+"${_obj_qpkgs_okrestart_array_[@]}"}"
    }
QPKGs.OkRestart.Count()
    {
    echo "${#_obj_qpkgs_okrestart_array_[@]}"
    }
QPKGs.OkRestart.Exist()
    {
    [[ ${_obj_qpkgs_okrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRestart.First()
    {
    echo "${_obj_qpkgs_okrestart_array_[0]}"
    }
QPKGs.OkRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrestart_array_[@]} ]] && index=${#_obj_qpkgs_okrestart_array_[@]}
    echo -n "${_obj_qpkgs_okrestart_array_[((index-1))]}"
    }
QPKGs.OkRestart.Init()
    {
    _obj_qpkgs_okrestart_size_=0
    _obj_qpkgs_okrestart_array_=()
    _obj_qpkgs_okrestart_array_index_=1
    }
QPKGs.OkRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_okrestart_array_[@]} -gt 0 ]]
    }
QPKGs.OkRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_okrestart_array_[@]} -eq 0 ]]
    }
QPKGs.OkRestart.List()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"}"
    }
QPKGs.OkRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrestart_array_[@]+"${_obj_qpkgs_okrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"} ]] && _obj_qpkgs_okrestart_array_=()
    }
QPKGs.OkRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrestart_size_=$2
    else
        echo -n $_obj_qpkgs_okrestart_size_
    fi
    }
QPKGs.OkRestart.Init

QPKGs.ErRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errestart_array_+=("$item")
        fi
    done
    }
QPKGs.ErRestart.Array()
    {
    echo -n "${_obj_qpkgs_errestart_array_[@]+"${_obj_qpkgs_errestart_array_[@]}"}"
    }
QPKGs.ErRestart.Count()
    {
    echo "${#_obj_qpkgs_errestart_array_[@]}"
    }
QPKGs.ErRestart.Exist()
    {
    [[ ${_obj_qpkgs_errestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestart.First()
    {
    echo "${_obj_qpkgs_errestart_array_[0]}"
    }
QPKGs.ErRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errestart_array_[@]} ]] && index=${#_obj_qpkgs_errestart_array_[@]}
    echo -n "${_obj_qpkgs_errestart_array_[((index-1))]}"
    }
QPKGs.ErRestart.Init()
    {
    _obj_qpkgs_errestart_size_=0
    _obj_qpkgs_errestart_array_=()
    _obj_qpkgs_errestart_array_index_=1
    }
QPKGs.ErRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_errestart_array_[@]} -gt 0 ]]
    }
QPKGs.ErRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_errestart_array_[@]} -eq 0 ]]
    }
QPKGs.ErRestart.List()
    {
    echo -n "${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"}"
    }
QPKGs.ErRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errestart_array_[@]+"${_obj_qpkgs_errestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"} ]] && _obj_qpkgs_errestart_array_=()
    }
QPKGs.ErRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errestart_size_=$2
    else
        echo -n $_obj_qpkgs_errestart_size_
    fi
    }
QPKGs.ErRestart.Init

QPKGs.SkRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrestart_array_+=("$item")
        fi
    done
    }
QPKGs.SkRestart.Array()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[@]+"${_obj_qpkgs_skrestart_array_[@]}"}"
    }
QPKGs.SkRestart.Count()
    {
    echo "${#_obj_qpkgs_skrestart_array_[@]}"
    }
QPKGs.SkRestart.Exist()
    {
    [[ ${_obj_qpkgs_skrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestart.First()
    {
    echo "${_obj_qpkgs_skrestart_array_[0]}"
    }
QPKGs.SkRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrestart_array_[@]} ]] && index=${#_obj_qpkgs_skrestart_array_[@]}
    echo -n "${_obj_qpkgs_skrestart_array_[((index-1))]}"
    }
QPKGs.SkRestart.Init()
    {
    _obj_qpkgs_skrestart_size_=0
    _obj_qpkgs_skrestart_array_=()
    _obj_qpkgs_skrestart_array_index_=1
    }
QPKGs.SkRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_skrestart_array_[@]} -gt 0 ]]
    }
QPKGs.SkRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_skrestart_array_[@]} -eq 0 ]]
    }
QPKGs.SkRestart.List()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"}"
    }
QPKGs.SkRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrestart_array_[@]+"${_obj_qpkgs_skrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"} ]] && _obj_qpkgs_skrestart_array_=()
    }
QPKGs.SkRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrestart_size_=$2
    else
        echo -n $_obj_qpkgs_skrestart_size_
    fi
    }
QPKGs.SkRestart.Init

QPKGs.ToRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torestore_array_+=("$item")
        fi
    done
    }
QPKGs.ToRestore.Array()
    {
    echo -n "${_obj_qpkgs_torestore_array_[@]+"${_obj_qpkgs_torestore_array_[@]}"}"
    }
QPKGs.ToRestore.Count()
    {
    echo "${#_obj_qpkgs_torestore_array_[@]}"
    }
QPKGs.ToRestore.Exist()
    {
    [[ ${_obj_qpkgs_torestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestore.First()
    {
    echo "${_obj_qpkgs_torestore_array_[0]}"
    }
QPKGs.ToRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torestore_array_[@]} ]] && index=${#_obj_qpkgs_torestore_array_[@]}
    echo -n "${_obj_qpkgs_torestore_array_[((index-1))]}"
    }
QPKGs.ToRestore.Init()
    {
    _obj_qpkgs_torestore_size_=0
    _obj_qpkgs_torestore_array_=()
    _obj_qpkgs_torestore_array_index_=1
    }
QPKGs.ToRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_torestore_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_torestore_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestore.List()
    {
    echo -n "${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"}"
    }
QPKGs.ToRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torestore_array_[@]+"${_obj_qpkgs_torestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"} ]] && _obj_qpkgs_torestore_array_=()
    }
QPKGs.ToRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torestore_size_=$2
    else
        echo -n $_obj_qpkgs_torestore_size_
    fi
    }
QPKGs.ToRestore.Init

QPKGs.OkRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrestore_array_+=("$item")
        fi
    done
    }
QPKGs.OkRestore.Array()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[@]+"${_obj_qpkgs_okrestore_array_[@]}"}"
    }
QPKGs.OkRestore.Count()
    {
    echo "${#_obj_qpkgs_okrestore_array_[@]}"
    }
QPKGs.OkRestore.Exist()
    {
    [[ ${_obj_qpkgs_okrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRestore.First()
    {
    echo "${_obj_qpkgs_okrestore_array_[0]}"
    }
QPKGs.OkRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrestore_array_[@]} ]] && index=${#_obj_qpkgs_okrestore_array_[@]}
    echo -n "${_obj_qpkgs_okrestore_array_[((index-1))]}"
    }
QPKGs.OkRestore.Init()
    {
    _obj_qpkgs_okrestore_size_=0
    _obj_qpkgs_okrestore_array_=()
    _obj_qpkgs_okrestore_array_index_=1
    }
QPKGs.OkRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_okrestore_array_[@]} -gt 0 ]]
    }
QPKGs.OkRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_okrestore_array_[@]} -eq 0 ]]
    }
QPKGs.OkRestore.List()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"}"
    }
QPKGs.OkRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrestore_array_[@]+"${_obj_qpkgs_okrestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"} ]] && _obj_qpkgs_okrestore_array_=()
    }
QPKGs.OkRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrestore_size_=$2
    else
        echo -n $_obj_qpkgs_okrestore_size_
    fi
    }
QPKGs.OkRestore.Init

QPKGs.ErRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errestore_array_+=("$item")
        fi
    done
    }
QPKGs.ErRestore.Array()
    {
    echo -n "${_obj_qpkgs_errestore_array_[@]+"${_obj_qpkgs_errestore_array_[@]}"}"
    }
QPKGs.ErRestore.Count()
    {
    echo "${#_obj_qpkgs_errestore_array_[@]}"
    }
QPKGs.ErRestore.Exist()
    {
    [[ ${_obj_qpkgs_errestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestore.First()
    {
    echo "${_obj_qpkgs_errestore_array_[0]}"
    }
QPKGs.ErRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errestore_array_[@]} ]] && index=${#_obj_qpkgs_errestore_array_[@]}
    echo -n "${_obj_qpkgs_errestore_array_[((index-1))]}"
    }
QPKGs.ErRestore.Init()
    {
    _obj_qpkgs_errestore_size_=0
    _obj_qpkgs_errestore_array_=()
    _obj_qpkgs_errestore_array_index_=1
    }
QPKGs.ErRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_errestore_array_[@]} -gt 0 ]]
    }
QPKGs.ErRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_errestore_array_[@]} -eq 0 ]]
    }
QPKGs.ErRestore.List()
    {
    echo -n "${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"}"
    }
QPKGs.ErRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errestore_array_[@]+"${_obj_qpkgs_errestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"} ]] && _obj_qpkgs_errestore_array_=()
    }
QPKGs.ErRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errestore_size_=$2
    else
        echo -n $_obj_qpkgs_errestore_size_
    fi
    }
QPKGs.ErRestore.Init

QPKGs.SkRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrestore_array_+=("$item")
        fi
    done
    }
QPKGs.SkRestore.Array()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[@]+"${_obj_qpkgs_skrestore_array_[@]}"}"
    }
QPKGs.SkRestore.Count()
    {
    echo "${#_obj_qpkgs_skrestore_array_[@]}"
    }
QPKGs.SkRestore.Exist()
    {
    [[ ${_obj_qpkgs_skrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestore.First()
    {
    echo "${_obj_qpkgs_skrestore_array_[0]}"
    }
QPKGs.SkRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrestore_array_[@]} ]] && index=${#_obj_qpkgs_skrestore_array_[@]}
    echo -n "${_obj_qpkgs_skrestore_array_[((index-1))]}"
    }
QPKGs.SkRestore.Init()
    {
    _obj_qpkgs_skrestore_size_=0
    _obj_qpkgs_skrestore_array_=()
    _obj_qpkgs_skrestore_array_index_=1
    }
QPKGs.SkRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_skrestore_array_[@]} -gt 0 ]]
    }
QPKGs.SkRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_skrestore_array_[@]} -eq 0 ]]
    }
QPKGs.SkRestore.List()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"}"
    }
QPKGs.SkRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrestore_array_[@]+"${_obj_qpkgs_skrestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"} ]] && _obj_qpkgs_skrestore_array_=()
    }
QPKGs.SkRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrestore_size_=$2
    else
        echo -n $_obj_qpkgs_skrestore_size_
    fi
    }
QPKGs.SkRestore.Init

QPKGs.ToStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tostart_array_+=("$item")
        fi
    done
    }
QPKGs.ToStart.Array()
    {
    echo -n "${_obj_qpkgs_tostart_array_[@]+"${_obj_qpkgs_tostart_array_[@]}"}"
    }
QPKGs.ToStart.Count()
    {
    echo "${#_obj_qpkgs_tostart_array_[@]}"
    }
QPKGs.ToStart.Exist()
    {
    [[ ${_obj_qpkgs_tostart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStart.First()
    {
    echo "${_obj_qpkgs_tostart_array_[0]}"
    }
QPKGs.ToStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tostart_array_[@]} ]] && index=${#_obj_qpkgs_tostart_array_[@]}
    echo -n "${_obj_qpkgs_tostart_array_[((index-1))]}"
    }
QPKGs.ToStart.Init()
    {
    _obj_qpkgs_tostart_size_=0
    _obj_qpkgs_tostart_array_=()
    _obj_qpkgs_tostart_array_index_=1
    }
QPKGs.ToStart.IsAny()
    {
    [[ ${#_obj_qpkgs_tostart_array_[@]} -gt 0 ]]
    }
QPKGs.ToStart.IsNone()
    {
    [[ ${#_obj_qpkgs_tostart_array_[@]} -eq 0 ]]
    }
QPKGs.ToStart.List()
    {
    echo -n "${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"}"
    }
QPKGs.ToStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tostart_array_[@]+"${_obj_qpkgs_tostart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tostart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"} ]] && _obj_qpkgs_tostart_array_=()
    }
QPKGs.ToStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tostart_size_=$2
    else
        echo -n $_obj_qpkgs_tostart_size_
    fi
    }
QPKGs.ToStart.Init

QPKGs.OkStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okstart_array_+=("$item")
        fi
    done
    }
QPKGs.OkStart.Array()
    {
    echo -n "${_obj_qpkgs_okstart_array_[@]+"${_obj_qpkgs_okstart_array_[@]}"}"
    }
QPKGs.OkStart.Count()
    {
    echo "${#_obj_qpkgs_okstart_array_[@]}"
    }
QPKGs.OkStart.Exist()
    {
    [[ ${_obj_qpkgs_okstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkStart.First()
    {
    echo "${_obj_qpkgs_okstart_array_[0]}"
    }
QPKGs.OkStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okstart_array_[@]} ]] && index=${#_obj_qpkgs_okstart_array_[@]}
    echo -n "${_obj_qpkgs_okstart_array_[((index-1))]}"
    }
QPKGs.OkStart.Init()
    {
    _obj_qpkgs_okstart_size_=0
    _obj_qpkgs_okstart_array_=()
    _obj_qpkgs_okstart_array_index_=1
    }
QPKGs.OkStart.IsAny()
    {
    [[ ${#_obj_qpkgs_okstart_array_[@]} -gt 0 ]]
    }
QPKGs.OkStart.IsNone()
    {
    [[ ${#_obj_qpkgs_okstart_array_[@]} -eq 0 ]]
    }
QPKGs.OkStart.List()
    {
    echo -n "${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"}"
    }
QPKGs.OkStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okstart_array_[@]+"${_obj_qpkgs_okstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"} ]] && _obj_qpkgs_okstart_array_=()
    }
QPKGs.OkStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okstart_size_=$2
    else
        echo -n $_obj_qpkgs_okstart_size_
    fi
    }
QPKGs.OkStart.Init

QPKGs.ErStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erstart_array_+=("$item")
        fi
    done
    }
QPKGs.ErStart.Array()
    {
    echo -n "${_obj_qpkgs_erstart_array_[@]+"${_obj_qpkgs_erstart_array_[@]}"}"
    }
QPKGs.ErStart.Count()
    {
    echo "${#_obj_qpkgs_erstart_array_[@]}"
    }
QPKGs.ErStart.Exist()
    {
    [[ ${_obj_qpkgs_erstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStart.First()
    {
    echo "${_obj_qpkgs_erstart_array_[0]}"
    }
QPKGs.ErStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erstart_array_[@]} ]] && index=${#_obj_qpkgs_erstart_array_[@]}
    echo -n "${_obj_qpkgs_erstart_array_[((index-1))]}"
    }
QPKGs.ErStart.Init()
    {
    _obj_qpkgs_erstart_size_=0
    _obj_qpkgs_erstart_array_=()
    _obj_qpkgs_erstart_array_index_=1
    }
QPKGs.ErStart.IsAny()
    {
    [[ ${#_obj_qpkgs_erstart_array_[@]} -gt 0 ]]
    }
QPKGs.ErStart.IsNone()
    {
    [[ ${#_obj_qpkgs_erstart_array_[@]} -eq 0 ]]
    }
QPKGs.ErStart.List()
    {
    echo -n "${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"}"
    }
QPKGs.ErStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erstart_array_[@]+"${_obj_qpkgs_erstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"} ]] && _obj_qpkgs_erstart_array_=()
    }
QPKGs.ErStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erstart_size_=$2
    else
        echo -n $_obj_qpkgs_erstart_size_
    fi
    }
QPKGs.ErStart.Init

QPKGs.SkStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skstart_array_+=("$item")
        fi
    done
    }
QPKGs.SkStart.Array()
    {
    echo -n "${_obj_qpkgs_skstart_array_[@]+"${_obj_qpkgs_skstart_array_[@]}"}"
    }
QPKGs.SkStart.Count()
    {
    echo "${#_obj_qpkgs_skstart_array_[@]}"
    }
QPKGs.SkStart.Exist()
    {
    [[ ${_obj_qpkgs_skstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStart.First()
    {
    echo "${_obj_qpkgs_skstart_array_[0]}"
    }
QPKGs.SkStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skstart_array_[@]} ]] && index=${#_obj_qpkgs_skstart_array_[@]}
    echo -n "${_obj_qpkgs_skstart_array_[((index-1))]}"
    }
QPKGs.SkStart.Init()
    {
    _obj_qpkgs_skstart_size_=0
    _obj_qpkgs_skstart_array_=()
    _obj_qpkgs_skstart_array_index_=1
    }
QPKGs.SkStart.IsAny()
    {
    [[ ${#_obj_qpkgs_skstart_array_[@]} -gt 0 ]]
    }
QPKGs.SkStart.IsNone()
    {
    [[ ${#_obj_qpkgs_skstart_array_[@]} -eq 0 ]]
    }
QPKGs.SkStart.List()
    {
    echo -n "${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"}"
    }
QPKGs.SkStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skstart_array_[@]+"${_obj_qpkgs_skstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"} ]] && _obj_qpkgs_skstart_array_=()
    }
QPKGs.SkStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skstart_size_=$2
    else
        echo -n $_obj_qpkgs_skstart_size_
    fi
    }
QPKGs.SkStart.Init

QPKGs.ToStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tostop_array_+=("$item")
        fi
    done
    }
QPKGs.ToStop.Array()
    {
    echo -n "${_obj_qpkgs_tostop_array_[@]+"${_obj_qpkgs_tostop_array_[@]}"}"
    }
QPKGs.ToStop.Count()
    {
    echo "${#_obj_qpkgs_tostop_array_[@]}"
    }
QPKGs.ToStop.Exist()
    {
    [[ ${_obj_qpkgs_tostop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStop.First()
    {
    echo "${_obj_qpkgs_tostop_array_[0]}"
    }
QPKGs.ToStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tostop_array_[@]} ]] && index=${#_obj_qpkgs_tostop_array_[@]}
    echo -n "${_obj_qpkgs_tostop_array_[((index-1))]}"
    }
QPKGs.ToStop.Init()
    {
    _obj_qpkgs_tostop_size_=0
    _obj_qpkgs_tostop_array_=()
    _obj_qpkgs_tostop_array_index_=1
    }
QPKGs.ToStop.IsAny()
    {
    [[ ${#_obj_qpkgs_tostop_array_[@]} -gt 0 ]]
    }
QPKGs.ToStop.IsNone()
    {
    [[ ${#_obj_qpkgs_tostop_array_[@]} -eq 0 ]]
    }
QPKGs.ToStop.List()
    {
    echo -n "${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"}"
    }
QPKGs.ToStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tostop_array_[@]+"${_obj_qpkgs_tostop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tostop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"} ]] && _obj_qpkgs_tostop_array_=()
    }
QPKGs.ToStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tostop_size_=$2
    else
        echo -n $_obj_qpkgs_tostop_size_
    fi
    }
QPKGs.ToStop.Init

QPKGs.OkStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okstop_array_+=("$item")
        fi
    done
    }
QPKGs.OkStop.Array()
    {
    echo -n "${_obj_qpkgs_okstop_array_[@]+"${_obj_qpkgs_okstop_array_[@]}"}"
    }
QPKGs.OkStop.Count()
    {
    echo "${#_obj_qpkgs_okstop_array_[@]}"
    }
QPKGs.OkStop.Exist()
    {
    [[ ${_obj_qpkgs_okstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkStop.First()
    {
    echo "${_obj_qpkgs_okstop_array_[0]}"
    }
QPKGs.OkStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okstop_array_[@]} ]] && index=${#_obj_qpkgs_okstop_array_[@]}
    echo -n "${_obj_qpkgs_okstop_array_[((index-1))]}"
    }
QPKGs.OkStop.Init()
    {
    _obj_qpkgs_okstop_size_=0
    _obj_qpkgs_okstop_array_=()
    _obj_qpkgs_okstop_array_index_=1
    }
QPKGs.OkStop.IsAny()
    {
    [[ ${#_obj_qpkgs_okstop_array_[@]} -gt 0 ]]
    }
QPKGs.OkStop.IsNone()
    {
    [[ ${#_obj_qpkgs_okstop_array_[@]} -eq 0 ]]
    }
QPKGs.OkStop.List()
    {
    echo -n "${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"}"
    }
QPKGs.OkStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okstop_array_[@]+"${_obj_qpkgs_okstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"} ]] && _obj_qpkgs_okstop_array_=()
    }
QPKGs.OkStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okstop_size_=$2
    else
        echo -n $_obj_qpkgs_okstop_size_
    fi
    }
QPKGs.OkStop.Init

QPKGs.ErStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erstop_array_+=("$item")
        fi
    done
    }
QPKGs.ErStop.Array()
    {
    echo -n "${_obj_qpkgs_erstop_array_[@]+"${_obj_qpkgs_erstop_array_[@]}"}"
    }
QPKGs.ErStop.Count()
    {
    echo "${#_obj_qpkgs_erstop_array_[@]}"
    }
QPKGs.ErStop.Exist()
    {
    [[ ${_obj_qpkgs_erstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStop.First()
    {
    echo "${_obj_qpkgs_erstop_array_[0]}"
    }
QPKGs.ErStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erstop_array_[@]} ]] && index=${#_obj_qpkgs_erstop_array_[@]}
    echo -n "${_obj_qpkgs_erstop_array_[((index-1))]}"
    }
QPKGs.ErStop.Init()
    {
    _obj_qpkgs_erstop_size_=0
    _obj_qpkgs_erstop_array_=()
    _obj_qpkgs_erstop_array_index_=1
    }
QPKGs.ErStop.IsAny()
    {
    [[ ${#_obj_qpkgs_erstop_array_[@]} -gt 0 ]]
    }
QPKGs.ErStop.IsNone()
    {
    [[ ${#_obj_qpkgs_erstop_array_[@]} -eq 0 ]]
    }
QPKGs.ErStop.List()
    {
    echo -n "${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"}"
    }
QPKGs.ErStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erstop_array_[@]+"${_obj_qpkgs_erstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"} ]] && _obj_qpkgs_erstop_array_=()
    }
QPKGs.ErStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erstop_size_=$2
    else
        echo -n $_obj_qpkgs_erstop_size_
    fi
    }
QPKGs.ErStop.Init

QPKGs.SkStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skstop_array_+=("$item")
        fi
    done
    }
QPKGs.SkStop.Array()
    {
    echo -n "${_obj_qpkgs_skstop_array_[@]+"${_obj_qpkgs_skstop_array_[@]}"}"
    }
QPKGs.SkStop.Count()
    {
    echo "${#_obj_qpkgs_skstop_array_[@]}"
    }
QPKGs.SkStop.Exist()
    {
    [[ ${_obj_qpkgs_skstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStop.First()
    {
    echo "${_obj_qpkgs_skstop_array_[0]}"
    }
QPKGs.SkStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skstop_array_[@]} ]] && index=${#_obj_qpkgs_skstop_array_[@]}
    echo -n "${_obj_qpkgs_skstop_array_[((index-1))]}"
    }
QPKGs.SkStop.Init()
    {
    _obj_qpkgs_skstop_size_=0
    _obj_qpkgs_skstop_array_=()
    _obj_qpkgs_skstop_array_index_=1
    }
QPKGs.SkStop.IsAny()
    {
    [[ ${#_obj_qpkgs_skstop_array_[@]} -gt 0 ]]
    }
QPKGs.SkStop.IsNone()
    {
    [[ ${#_obj_qpkgs_skstop_array_[@]} -eq 0 ]]
    }
QPKGs.SkStop.List()
    {
    echo -n "${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"}"
    }
QPKGs.SkStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skstop_array_[@]+"${_obj_qpkgs_skstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"} ]] && _obj_qpkgs_skstop_array_=()
    }
QPKGs.SkStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skstop_size_=$2
    else
        echo -n $_obj_qpkgs_skstop_size_
    fi
    }
QPKGs.SkStop.Init

QPKGs.ToUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_touninstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToUninstall.Array()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[@]+"${_obj_qpkgs_touninstall_array_[@]}"}"
    }
QPKGs.ToUninstall.Count()
    {
    echo "${#_obj_qpkgs_touninstall_array_[@]}"
    }
QPKGs.ToUninstall.Exist()
    {
    [[ ${_obj_qpkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUninstall.First()
    {
    echo "${_obj_qpkgs_touninstall_array_[0]}"
    }
QPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_touninstall_array_[@]} ]] && index=${#_obj_qpkgs_touninstall_array_[@]}
    echo -n "${_obj_qpkgs_touninstall_array_[((index-1))]}"
    }
QPKGs.ToUninstall.Init()
    {
    _obj_qpkgs_touninstall_size_=0
    _obj_qpkgs_touninstall_array_=()
    _obj_qpkgs_touninstall_array_index_=1
    }
QPKGs.ToUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_touninstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_touninstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToUninstall.List()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"}"
    }
QPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_touninstall_array_[@]+"${_obj_qpkgs_touninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_touninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"} ]] && _obj_qpkgs_touninstall_array_=()
    }
QPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_touninstall_size_=$2
    else
        echo -n $_obj_qpkgs_touninstall_size_
    fi
    }
QPKGs.ToUninstall.Init

QPKGs.OkUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okuninstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkUninstall.Array()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[@]+"${_obj_qpkgs_okuninstall_array_[@]}"}"
    }
QPKGs.OkUninstall.Count()
    {
    echo "${#_obj_qpkgs_okuninstall_array_[@]}"
    }
QPKGs.OkUninstall.Exist()
    {
    [[ ${_obj_qpkgs_okuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkUninstall.First()
    {
    echo "${_obj_qpkgs_okuninstall_array_[0]}"
    }
QPKGs.OkUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okuninstall_array_[@]} ]] && index=${#_obj_qpkgs_okuninstall_array_[@]}
    echo -n "${_obj_qpkgs_okuninstall_array_[((index-1))]}"
    }
QPKGs.OkUninstall.Init()
    {
    _obj_qpkgs_okuninstall_size_=0
    _obj_qpkgs_okuninstall_array_=()
    _obj_qpkgs_okuninstall_array_index_=1
    }
QPKGs.OkUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okuninstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okuninstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkUninstall.List()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"}"
    }
QPKGs.OkUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okuninstall_array_[@]+"${_obj_qpkgs_okuninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okuninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"} ]] && _obj_qpkgs_okuninstall_array_=()
    }
QPKGs.OkUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okuninstall_size_=$2
    else
        echo -n $_obj_qpkgs_okuninstall_size_
    fi
    }
QPKGs.OkUninstall.Init

QPKGs.ErUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_eruninstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErUninstall.Array()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[@]+"${_obj_qpkgs_eruninstall_array_[@]}"}"
    }
QPKGs.ErUninstall.Count()
    {
    echo "${#_obj_qpkgs_eruninstall_array_[@]}"
    }
QPKGs.ErUninstall.Exist()
    {
    [[ ${_obj_qpkgs_eruninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUninstall.First()
    {
    echo "${_obj_qpkgs_eruninstall_array_[0]}"
    }
QPKGs.ErUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_eruninstall_array_[@]} ]] && index=${#_obj_qpkgs_eruninstall_array_[@]}
    echo -n "${_obj_qpkgs_eruninstall_array_[((index-1))]}"
    }
QPKGs.ErUninstall.Init()
    {
    _obj_qpkgs_eruninstall_size_=0
    _obj_qpkgs_eruninstall_array_=()
    _obj_qpkgs_eruninstall_array_index_=1
    }
QPKGs.ErUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_eruninstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_eruninstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErUninstall.List()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"}"
    }
QPKGs.ErUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_eruninstall_array_[@]+"${_obj_qpkgs_eruninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_eruninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"} ]] && _obj_qpkgs_eruninstall_array_=()
    }
QPKGs.ErUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_eruninstall_size_=$2
    else
        echo -n $_obj_qpkgs_eruninstall_size_
    fi
    }
QPKGs.ErUninstall.Init

QPKGs.SkUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skuninstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkUninstall.Array()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[@]+"${_obj_qpkgs_skuninstall_array_[@]}"}"
    }
QPKGs.SkUninstall.Count()
    {
    echo "${#_obj_qpkgs_skuninstall_array_[@]}"
    }
QPKGs.SkUninstall.Exist()
    {
    [[ ${_obj_qpkgs_skuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUninstall.First()
    {
    echo "${_obj_qpkgs_skuninstall_array_[0]}"
    }
QPKGs.SkUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skuninstall_array_[@]} ]] && index=${#_obj_qpkgs_skuninstall_array_[@]}
    echo -n "${_obj_qpkgs_skuninstall_array_[((index-1))]}"
    }
QPKGs.SkUninstall.Init()
    {
    _obj_qpkgs_skuninstall_size_=0
    _obj_qpkgs_skuninstall_array_=()
    _obj_qpkgs_skuninstall_array_index_=1
    }
QPKGs.SkUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skuninstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skuninstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkUninstall.List()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"}"
    }
QPKGs.SkUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skuninstall_array_[@]+"${_obj_qpkgs_skuninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skuninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"} ]] && _obj_qpkgs_skuninstall_array_=()
    }
QPKGs.SkUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skuninstall_size_=$2
    else
        echo -n $_obj_qpkgs_skuninstall_size_
    fi
    }
QPKGs.SkUninstall.Init

QPKGs.ToUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.ToUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[@]+"${_obj_qpkgs_toupgrade_array_[@]}"}"
    }
QPKGs.ToUpgrade.Count()
    {
    echo "${#_obj_qpkgs_toupgrade_array_[@]}"
    }
QPKGs.ToUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_toupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUpgrade.First()
    {
    echo "${_obj_qpkgs_toupgrade_array_[0]}"
    }
QPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toupgrade_array_[@]} ]] && index=${#_obj_qpkgs_toupgrade_array_[@]}
    echo -n "${_obj_qpkgs_toupgrade_array_[((index-1))]}"
    }
QPKGs.ToUpgrade.Init()
    {
    _obj_qpkgs_toupgrade_size_=0
    _obj_qpkgs_toupgrade_array_=()
    _obj_qpkgs_toupgrade_array_index_=1
    }
QPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_toupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_toupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ToUpgrade.List()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"}"
    }
QPKGs.ToUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toupgrade_array_[@]+"${_obj_qpkgs_toupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"} ]] && _obj_qpkgs_toupgrade_array_=()
    }
QPKGs.ToUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_toupgrade_size_
    fi
    }
QPKGs.ToUpgrade.Init

QPKGs.OkUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.OkUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[@]+"${_obj_qpkgs_okupgrade_array_[@]}"}"
    }
QPKGs.OkUpgrade.Count()
    {
    echo "${#_obj_qpkgs_okupgrade_array_[@]}"
    }
QPKGs.OkUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_okupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkUpgrade.First()
    {
    echo "${_obj_qpkgs_okupgrade_array_[0]}"
    }
QPKGs.OkUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okupgrade_array_[@]} ]] && index=${#_obj_qpkgs_okupgrade_array_[@]}
    echo -n "${_obj_qpkgs_okupgrade_array_[((index-1))]}"
    }
QPKGs.OkUpgrade.Init()
    {
    _obj_qpkgs_okupgrade_size_=0
    _obj_qpkgs_okupgrade_array_=()
    _obj_qpkgs_okupgrade_array_index_=1
    }
QPKGs.OkUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_okupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.OkUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_okupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.OkUpgrade.List()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"}"
    }
QPKGs.OkUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okupgrade_array_[@]+"${_obj_qpkgs_okupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"} ]] && _obj_qpkgs_okupgrade_array_=()
    }
QPKGs.OkUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_okupgrade_size_
    fi
    }
QPKGs.OkUpgrade.Init

QPKGs.ErUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.ErUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[@]+"${_obj_qpkgs_erupgrade_array_[@]}"}"
    }
QPKGs.ErUpgrade.Count()
    {
    echo "${#_obj_qpkgs_erupgrade_array_[@]}"
    }
QPKGs.ErUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_erupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUpgrade.First()
    {
    echo "${_obj_qpkgs_erupgrade_array_[0]}"
    }
QPKGs.ErUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erupgrade_array_[@]} ]] && index=${#_obj_qpkgs_erupgrade_array_[@]}
    echo -n "${_obj_qpkgs_erupgrade_array_[((index-1))]}"
    }
QPKGs.ErUpgrade.Init()
    {
    _obj_qpkgs_erupgrade_size_=0
    _obj_qpkgs_erupgrade_array_=()
    _obj_qpkgs_erupgrade_array_index_=1
    }
QPKGs.ErUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_erupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ErUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_erupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ErUpgrade.List()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"}"
    }
QPKGs.ErUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erupgrade_array_[@]+"${_obj_qpkgs_erupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"} ]] && _obj_qpkgs_erupgrade_array_=()
    }
QPKGs.ErUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_erupgrade_size_
    fi
    }
QPKGs.ErUpgrade.Init

QPKGs.SkUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.SkUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[@]+"${_obj_qpkgs_skupgrade_array_[@]}"}"
    }
QPKGs.SkUpgrade.Count()
    {
    echo "${#_obj_qpkgs_skupgrade_array_[@]}"
    }
QPKGs.SkUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_skupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUpgrade.First()
    {
    echo "${_obj_qpkgs_skupgrade_array_[0]}"
    }
QPKGs.SkUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skupgrade_array_[@]} ]] && index=${#_obj_qpkgs_skupgrade_array_[@]}
    echo -n "${_obj_qpkgs_skupgrade_array_[((index-1))]}"
    }
QPKGs.SkUpgrade.Init()
    {
    _obj_qpkgs_skupgrade_size_=0
    _obj_qpkgs_skupgrade_array_=()
    _obj_qpkgs_skupgrade_array_index_=1
    }
QPKGs.SkUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_skupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.SkUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_skupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.SkUpgrade.List()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"}"
    }
QPKGs.SkUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skupgrade_array_[@]+"${_obj_qpkgs_skupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"} ]] && _obj_qpkgs_skupgrade_array_=()
    }
QPKGs.SkUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_skupgrade_size_
    fi
    }
QPKGs.SkUpgrade.Init

IPKGs.ToDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_todownload_array_+=("$item")
        fi
    done
    }
IPKGs.ToDownload.Array()
    {
    echo -n "${_obj_ipkgs_todownload_array_[@]+"${_obj_ipkgs_todownload_array_[@]}"}"
    }
IPKGs.ToDownload.Count()
    {
    echo "${#_obj_ipkgs_todownload_array_[@]}"
    }
IPKGs.ToDownload.Exist()
    {
    [[ ${_obj_ipkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToDownload.First()
    {
    echo "${_obj_ipkgs_todownload_array_[0]}"
    }
IPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_todownload_array_[@]} ]] && index=${#_obj_ipkgs_todownload_array_[@]}
    echo -n "${_obj_ipkgs_todownload_array_[((index-1))]}"
    }
IPKGs.ToDownload.Init()
    {
    _obj_ipkgs_todownload_size_=0
    _obj_ipkgs_todownload_array_=()
    _obj_ipkgs_todownload_array_index_=1
    }
IPKGs.ToDownload.IsAny()
    {
    [[ ${#_obj_ipkgs_todownload_array_[@]} -gt 0 ]]
    }
IPKGs.ToDownload.IsNone()
    {
    [[ ${#_obj_ipkgs_todownload_array_[@]} -eq 0 ]]
    }
IPKGs.ToDownload.List()
    {
    echo -n "${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"}"
    }
IPKGs.ToDownload.ListCSV()
    {
    echo -n "${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_todownload_array_[@]+"${_obj_ipkgs_todownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_todownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"} ]] && _obj_ipkgs_todownload_array_=()
    }
IPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_todownload_size_=$2
    else
        echo -n $_obj_ipkgs_todownload_size_
    fi
    }
IPKGs.ToDownload.Init

IPKGs.ToInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_toinstall_array_+=("$item")
        fi
    done
    }
IPKGs.ToInstall.Array()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[@]+"${_obj_ipkgs_toinstall_array_[@]}"}"
    }
IPKGs.ToInstall.Count()
    {
    echo "${#_obj_ipkgs_toinstall_array_[@]}"
    }
IPKGs.ToInstall.Exist()
    {
    [[ ${_obj_ipkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToInstall.First()
    {
    echo "${_obj_ipkgs_toinstall_array_[0]}"
    }
IPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_toinstall_array_[@]} ]] && index=${#_obj_ipkgs_toinstall_array_[@]}
    echo -n "${_obj_ipkgs_toinstall_array_[((index-1))]}"
    }
IPKGs.ToInstall.Init()
    {
    _obj_ipkgs_toinstall_size_=0
    _obj_ipkgs_toinstall_array_=()
    _obj_ipkgs_toinstall_array_index_=1
    }
IPKGs.ToInstall.IsAny()
    {
    [[ ${#_obj_ipkgs_toinstall_array_[@]} -gt 0 ]]
    }
IPKGs.ToInstall.IsNone()
    {
    [[ ${#_obj_ipkgs_toinstall_array_[@]} -eq 0 ]]
    }
IPKGs.ToInstall.List()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"}"
    }
IPKGs.ToInstall.ListCSV()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_toinstall_array_[@]+"${_obj_ipkgs_toinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_toinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"} ]] && _obj_ipkgs_toinstall_array_=()
    }
IPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_toinstall_size_=$2
    else
        echo -n $_obj_ipkgs_toinstall_size_
    fi
    }
IPKGs.ToInstall.Init

IPKGs.ToUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_touninstall_array_+=("$item")
        fi
    done
    }
IPKGs.ToUninstall.Array()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[@]+"${_obj_ipkgs_touninstall_array_[@]}"}"
    }
IPKGs.ToUninstall.Count()
    {
    echo "${#_obj_ipkgs_touninstall_array_[@]}"
    }
IPKGs.ToUninstall.Exist()
    {
    [[ ${_obj_ipkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToUninstall.First()
    {
    echo "${_obj_ipkgs_touninstall_array_[0]}"
    }
IPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_touninstall_array_[@]} ]] && index=${#_obj_ipkgs_touninstall_array_[@]}
    echo -n "${_obj_ipkgs_touninstall_array_[((index-1))]}"
    }
IPKGs.ToUninstall.Init()
    {
    _obj_ipkgs_touninstall_size_=0
    _obj_ipkgs_touninstall_array_=()
    _obj_ipkgs_touninstall_array_index_=1
    }
IPKGs.ToUninstall.IsAny()
    {
    [[ ${#_obj_ipkgs_touninstall_array_[@]} -gt 0 ]]
    }
IPKGs.ToUninstall.IsNone()
    {
    [[ ${#_obj_ipkgs_touninstall_array_[@]} -eq 0 ]]
    }
IPKGs.ToUninstall.List()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"}"
    }
IPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_touninstall_array_[@]+"${_obj_ipkgs_touninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_touninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"} ]] && _obj_ipkgs_touninstall_array_=()
    }
IPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_touninstall_size_=$2
    else
        echo -n $_obj_ipkgs_touninstall_size_
    fi
    }
IPKGs.ToUninstall.Init

IPKGs.ToUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_toupgrade_array_+=("$item")
        fi
    done
    }
IPKGs.ToUpgrade.Array()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[@]+"${_obj_ipkgs_toupgrade_array_[@]}"}"
    }
IPKGs.ToUpgrade.Count()
    {
    echo "${#_obj_ipkgs_toupgrade_array_[@]}"
    }
IPKGs.ToUpgrade.Exist()
    {
    [[ ${_obj_ipkgs_toupgrade_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToUpgrade.First()
    {
    echo "${_obj_ipkgs_toupgrade_array_[0]}"
    }
IPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_toupgrade_array_[@]} ]] && index=${#_obj_ipkgs_toupgrade_array_[@]}
    echo -n "${_obj_ipkgs_toupgrade_array_[((index-1))]}"
    }
IPKGs.ToUpgrade.Init()
    {
    _obj_ipkgs_toupgrade_size_=0
    _obj_ipkgs_toupgrade_array_=()
    _obj_ipkgs_toupgrade_array_index_=1
    }
IPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_obj_ipkgs_toupgrade_array_[@]} -gt 0 ]]
    }
IPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_obj_ipkgs_toupgrade_array_[@]} -eq 0 ]]
    }
IPKGs.ToUpgrade.List()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"}"
    }
IPKGs.ToUpgrade.ListCSV()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_toupgrade_array_[@]+"${_obj_ipkgs_toupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_toupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"} ]] && _obj_ipkgs_toupgrade_array_=()
    }
IPKGs.ToUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_toupgrade_size_=$2
    else
        echo -n $_obj_ipkgs_toupgrade_size_
    fi
    }
IPKGs.ToUpgrade.Init

