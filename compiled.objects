Session.Debug.To.File.Clear()
    {
    [[ $_object_session_debug_to_file_flag_ != 'true' ]] && return
    _object_session_debug_to_file_flag_=false
    [[ $_object_session_debug_to_file_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_file_flag_
    }
Session.Debug.To.File.Disable()
    {
    [[ $_object_session_debug_to_file_enable_ != 'true' ]] && return
    _object_session_debug_to_file_enable_=false
    [[ $_object_session_debug_to_file_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_file_enable_
    }
Session.Debug.To.File.DontLogChanges()
    {
    [[ $_object_session_debug_to_file_changes_flag_ != 'true' ]] && return
    _object_session_debug_to_file_changes_flag_=false
    }
Session.Debug.To.File.Enable()
    {
    [[ $_object_session_debug_to_file_enable_ = 'true' ]] && return
    _object_session_debug_to_file_enable_=true
    [[ $_object_session_debug_to_file_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_file_enable_
    }
Session.Debug.To.File.Init()
    {
    _object_session_debug_to_file_text_=''
    _object_session_debug_to_file_flag_=false
    _object_session_debug_to_file_changes_flag_=true
    _object_session_debug_to_file_enable_=false
    }
Session.Debug.To.File.IsDisabled()
    {
    [[ $_object_session_debug_to_file_enable_ != 'true' ]]
    }
Session.Debug.To.File.IsEnabled()
    {
    [[ $_object_session_debug_to_file_enable_ = 'true' ]]
    }
Session.Debug.To.File.IsNot()
    {
    [[ $_object_session_debug_to_file_flag_ != 'true' ]]
    }
Session.Debug.To.File.IsSet()
    {
    [[ $_object_session_debug_to_file_flag_ = 'true' ]]
    }
Session.Debug.To.File.LogChanges()
    {
    [[ $_object_session_debug_to_file_changes_flag_ = 'true' ]] && return
    _object_session_debug_to_file_changes_flag_=true
    }
Session.Debug.To.File.Set()
    {
    [[ $_object_session_debug_to_file_flag_ = 'true' ]] && return
    _object_session_debug_to_file_flag_=true
    [[ $_object_session_debug_to_file_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_file_flag_
    }
Session.Debug.To.File.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_file_text_=$2
    else
        echo -n "$_object_session_debug_to_file_text_"
    fi
    }
Session.Debug.To.File.Init

Session.Debug.To.Screen.Clear()
    {
    [[ $_object_session_debug_to_screen_flag_ != 'true' ]] && return
    _object_session_debug_to_screen_flag_=false
    [[ $_object_session_debug_to_screen_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_screen_flag_
    }
Session.Debug.To.Screen.Disable()
    {
    [[ $_object_session_debug_to_screen_enable_ != 'true' ]] && return
    _object_session_debug_to_screen_enable_=false
    [[ $_object_session_debug_to_screen_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_screen_enable_
    }
Session.Debug.To.Screen.DontLogChanges()
    {
    [[ $_object_session_debug_to_screen_changes_flag_ != 'true' ]] && return
    _object_session_debug_to_screen_changes_flag_=false
    }
Session.Debug.To.Screen.Enable()
    {
    [[ $_object_session_debug_to_screen_enable_ = 'true' ]] && return
    _object_session_debug_to_screen_enable_=true
    [[ $_object_session_debug_to_screen_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_screen_enable_
    }
Session.Debug.To.Screen.Init()
    {
    _object_session_debug_to_screen_text_=''
    _object_session_debug_to_screen_flag_=false
    _object_session_debug_to_screen_changes_flag_=true
    _object_session_debug_to_screen_enable_=false
    }
Session.Debug.To.Screen.IsDisabled()
    {
    [[ $_object_session_debug_to_screen_enable_ != 'true' ]]
    }
Session.Debug.To.Screen.IsEnabled()
    {
    [[ $_object_session_debug_to_screen_enable_ = 'true' ]]
    }
Session.Debug.To.Screen.IsNot()
    {
    [[ $_object_session_debug_to_screen_flag_ != 'true' ]]
    }
Session.Debug.To.Screen.IsSet()
    {
    [[ $_object_session_debug_to_screen_flag_ = 'true' ]]
    }
Session.Debug.To.Screen.LogChanges()
    {
    [[ $_object_session_debug_to_screen_changes_flag_ = 'true' ]] && return
    _object_session_debug_to_screen_changes_flag_=true
    }
Session.Debug.To.Screen.Set()
    {
    [[ $_object_session_debug_to_screen_flag_ = 'true' ]] && return
    _object_session_debug_to_screen_flag_=true
    [[ $_object_session_debug_to_screen_changes_flag_ = 'true' ]] && DebugVar _object_session_debug_to_screen_flag_
    }
Session.Debug.To.Screen.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_debug_to_screen_text_=$2
    else
        echo -n "$_object_session_debug_to_screen_text_"
    fi
    }
Session.Debug.To.Screen.Init

Session.Display.Clean.Clear()
    {
    [[ $_object_session_display_clean_flag_ != 'true' ]] && return
    _object_session_display_clean_flag_=false
    [[ $_object_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _object_session_display_clean_flag_
    }
Session.Display.Clean.Disable()
    {
    [[ $_object_session_display_clean_enable_ != 'true' ]] && return
    _object_session_display_clean_enable_=false
    [[ $_object_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _object_session_display_clean_enable_
    }
Session.Display.Clean.DontLogChanges()
    {
    [[ $_object_session_display_clean_changes_flag_ != 'true' ]] && return
    _object_session_display_clean_changes_flag_=false
    }
Session.Display.Clean.Enable()
    {
    [[ $_object_session_display_clean_enable_ = 'true' ]] && return
    _object_session_display_clean_enable_=true
    [[ $_object_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _object_session_display_clean_enable_
    }
Session.Display.Clean.Init()
    {
    _object_session_display_clean_text_=''
    _object_session_display_clean_flag_=false
    _object_session_display_clean_changes_flag_=true
    _object_session_display_clean_enable_=false
    }
Session.Display.Clean.IsDisabled()
    {
    [[ $_object_session_display_clean_enable_ != 'true' ]]
    }
Session.Display.Clean.IsEnabled()
    {
    [[ $_object_session_display_clean_enable_ = 'true' ]]
    }
Session.Display.Clean.IsNot()
    {
    [[ $_object_session_display_clean_flag_ != 'true' ]]
    }
Session.Display.Clean.IsSet()
    {
    [[ $_object_session_display_clean_flag_ = 'true' ]]
    }
Session.Display.Clean.LogChanges()
    {
    [[ $_object_session_display_clean_changes_flag_ = 'true' ]] && return
    _object_session_display_clean_changes_flag_=true
    }
Session.Display.Clean.Set()
    {
    [[ $_object_session_display_clean_flag_ = 'true' ]] && return
    _object_session_display_clean_flag_=true
    [[ $_object_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _object_session_display_clean_flag_
    }
Session.Display.Clean.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_display_clean_text_=$2
    else
        echo -n "$_object_session_display_clean_text_"
    fi
    }
Session.Display.Clean.Init

Session.IPKGs.Install.Clear()
    {
    [[ $_object_session_ipkgs_install_flag_ != 'true' ]] && return
    _object_session_ipkgs_install_flag_=false
    [[ $_object_session_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _object_session_ipkgs_install_flag_
    }
Session.IPKGs.Install.Disable()
    {
    [[ $_object_session_ipkgs_install_enable_ != 'true' ]] && return
    _object_session_ipkgs_install_enable_=false
    [[ $_object_session_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _object_session_ipkgs_install_enable_
    }
Session.IPKGs.Install.DontLogChanges()
    {
    [[ $_object_session_ipkgs_install_changes_flag_ != 'true' ]] && return
    _object_session_ipkgs_install_changes_flag_=false
    }
Session.IPKGs.Install.Enable()
    {
    [[ $_object_session_ipkgs_install_enable_ = 'true' ]] && return
    _object_session_ipkgs_install_enable_=true
    [[ $_object_session_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _object_session_ipkgs_install_enable_
    }
Session.IPKGs.Install.Init()
    {
    _object_session_ipkgs_install_text_=''
    _object_session_ipkgs_install_flag_=false
    _object_session_ipkgs_install_changes_flag_=true
    _object_session_ipkgs_install_enable_=false
    }
Session.IPKGs.Install.IsDisabled()
    {
    [[ $_object_session_ipkgs_install_enable_ != 'true' ]]
    }
Session.IPKGs.Install.IsEnabled()
    {
    [[ $_object_session_ipkgs_install_enable_ = 'true' ]]
    }
Session.IPKGs.Install.IsNot()
    {
    [[ $_object_session_ipkgs_install_flag_ != 'true' ]]
    }
Session.IPKGs.Install.IsSet()
    {
    [[ $_object_session_ipkgs_install_flag_ = 'true' ]]
    }
Session.IPKGs.Install.LogChanges()
    {
    [[ $_object_session_ipkgs_install_changes_flag_ = 'true' ]] && return
    _object_session_ipkgs_install_changes_flag_=true
    }
Session.IPKGs.Install.Set()
    {
    [[ $_object_session_ipkgs_install_flag_ = 'true' ]] && return
    _object_session_ipkgs_install_flag_=true
    [[ $_object_session_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _object_session_ipkgs_install_flag_
    }
Session.IPKGs.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_ipkgs_install_text_=$2
    else
        echo -n "$_object_session_ipkgs_install_text_"
    fi
    }
Session.IPKGs.Install.Init

Session.LineSpace.Clear()
    {
    [[ $_object_session_linespace_flag_ != 'true' ]] && return
    _object_session_linespace_flag_=false
    [[ $_object_session_linespace_changes_flag_ = 'true' ]] && DebugVar _object_session_linespace_flag_
    }
Session.LineSpace.Disable()
    {
    [[ $_object_session_linespace_enable_ != 'true' ]] && return
    _object_session_linespace_enable_=false
    [[ $_object_session_linespace_changes_flag_ = 'true' ]] && DebugVar _object_session_linespace_enable_
    }
Session.LineSpace.DontLogChanges()
    {
    [[ $_object_session_linespace_changes_flag_ != 'true' ]] && return
    _object_session_linespace_changes_flag_=false
    }
Session.LineSpace.Enable()
    {
    [[ $_object_session_linespace_enable_ = 'true' ]] && return
    _object_session_linespace_enable_=true
    [[ $_object_session_linespace_changes_flag_ = 'true' ]] && DebugVar _object_session_linespace_enable_
    }
Session.LineSpace.Init()
    {
    _object_session_linespace_text_=''
    _object_session_linespace_flag_=false
    _object_session_linespace_changes_flag_=true
    _object_session_linespace_enable_=false
    }
Session.LineSpace.IsDisabled()
    {
    [[ $_object_session_linespace_enable_ != 'true' ]]
    }
Session.LineSpace.IsEnabled()
    {
    [[ $_object_session_linespace_enable_ = 'true' ]]
    }
Session.LineSpace.IsNot()
    {
    [[ $_object_session_linespace_flag_ != 'true' ]]
    }
Session.LineSpace.IsSet()
    {
    [[ $_object_session_linespace_flag_ = 'true' ]]
    }
Session.LineSpace.LogChanges()
    {
    [[ $_object_session_linespace_changes_flag_ = 'true' ]] && return
    _object_session_linespace_changes_flag_=true
    }
Session.LineSpace.Set()
    {
    [[ $_object_session_linespace_flag_ = 'true' ]] && return
    _object_session_linespace_flag_=true
    [[ $_object_session_linespace_changes_flag_ = 'true' ]] && DebugVar _object_session_linespace_flag_
    }
Session.LineSpace.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_linespace_text_=$2
    else
        echo -n "$_object_session_linespace_text_"
    fi
    }
Session.LineSpace.Init

Session.Lists.Built.Clear()
    {
    [[ $_object_session_lists_built_flag_ != 'true' ]] && return
    _object_session_lists_built_flag_=false
    [[ $_object_session_lists_built_changes_flag_ = 'true' ]] && DebugVar _object_session_lists_built_flag_
    }
Session.Lists.Built.Disable()
    {
    [[ $_object_session_lists_built_enable_ != 'true' ]] && return
    _object_session_lists_built_enable_=false
    [[ $_object_session_lists_built_changes_flag_ = 'true' ]] && DebugVar _object_session_lists_built_enable_
    }
Session.Lists.Built.DontLogChanges()
    {
    [[ $_object_session_lists_built_changes_flag_ != 'true' ]] && return
    _object_session_lists_built_changes_flag_=false
    }
Session.Lists.Built.Enable()
    {
    [[ $_object_session_lists_built_enable_ = 'true' ]] && return
    _object_session_lists_built_enable_=true
    [[ $_object_session_lists_built_changes_flag_ = 'true' ]] && DebugVar _object_session_lists_built_enable_
    }
Session.Lists.Built.Init()
    {
    _object_session_lists_built_text_=''
    _object_session_lists_built_flag_=false
    _object_session_lists_built_changes_flag_=true
    _object_session_lists_built_enable_=false
    }
Session.Lists.Built.IsDisabled()
    {
    [[ $_object_session_lists_built_enable_ != 'true' ]]
    }
Session.Lists.Built.IsEnabled()
    {
    [[ $_object_session_lists_built_enable_ = 'true' ]]
    }
Session.Lists.Built.IsNot()
    {
    [[ $_object_session_lists_built_flag_ != 'true' ]]
    }
Session.Lists.Built.IsSet()
    {
    [[ $_object_session_lists_built_flag_ = 'true' ]]
    }
Session.Lists.Built.LogChanges()
    {
    [[ $_object_session_lists_built_changes_flag_ = 'true' ]] && return
    _object_session_lists_built_changes_flag_=true
    }
Session.Lists.Built.Set()
    {
    [[ $_object_session_lists_built_flag_ = 'true' ]] && return
    _object_session_lists_built_flag_=true
    [[ $_object_session_lists_built_changes_flag_ = 'true' ]] && DebugVar _object_session_lists_built_flag_
    }
Session.Lists.Built.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_lists_built_text_=$2
    else
        echo -n "$_object_session_lists_built_text_"
    fi
    }
Session.Lists.Built.Init

Session.PIPs.Install.Clear()
    {
    [[ $_object_session_pips_install_flag_ != 'true' ]] && return
    _object_session_pips_install_flag_=false
    [[ $_object_session_pips_install_changes_flag_ = 'true' ]] && DebugVar _object_session_pips_install_flag_
    }
Session.PIPs.Install.Disable()
    {
    [[ $_object_session_pips_install_enable_ != 'true' ]] && return
    _object_session_pips_install_enable_=false
    [[ $_object_session_pips_install_changes_flag_ = 'true' ]] && DebugVar _object_session_pips_install_enable_
    }
Session.PIPs.Install.DontLogChanges()
    {
    [[ $_object_session_pips_install_changes_flag_ != 'true' ]] && return
    _object_session_pips_install_changes_flag_=false
    }
Session.PIPs.Install.Enable()
    {
    [[ $_object_session_pips_install_enable_ = 'true' ]] && return
    _object_session_pips_install_enable_=true
    [[ $_object_session_pips_install_changes_flag_ = 'true' ]] && DebugVar _object_session_pips_install_enable_
    }
Session.PIPs.Install.Init()
    {
    _object_session_pips_install_text_=''
    _object_session_pips_install_flag_=false
    _object_session_pips_install_changes_flag_=true
    _object_session_pips_install_enable_=false
    }
Session.PIPs.Install.IsDisabled()
    {
    [[ $_object_session_pips_install_enable_ != 'true' ]]
    }
Session.PIPs.Install.IsEnabled()
    {
    [[ $_object_session_pips_install_enable_ = 'true' ]]
    }
Session.PIPs.Install.IsNot()
    {
    [[ $_object_session_pips_install_flag_ != 'true' ]]
    }
Session.PIPs.Install.IsSet()
    {
    [[ $_object_session_pips_install_flag_ = 'true' ]]
    }
Session.PIPs.Install.LogChanges()
    {
    [[ $_object_session_pips_install_changes_flag_ = 'true' ]] && return
    _object_session_pips_install_changes_flag_=true
    }
Session.PIPs.Install.Set()
    {
    [[ $_object_session_pips_install_flag_ = 'true' ]] && return
    _object_session_pips_install_flag_=true
    [[ $_object_session_pips_install_changes_flag_ = 'true' ]] && DebugVar _object_session_pips_install_flag_
    }
Session.PIPs.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_pips_install_text_=$2
    else
        echo -n "$_object_session_pips_install_text_"
    fi
    }
Session.PIPs.Install.Init

Session.ShowBackupLocation.Clear()
    {
    [[ $_object_session_showbackuplocation_flag_ != 'true' ]] && return
    _object_session_showbackuplocation_flag_=false
    [[ $_object_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _object_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Disable()
    {
    [[ $_object_session_showbackuplocation_enable_ != 'true' ]] && return
    _object_session_showbackuplocation_enable_=false
    [[ $_object_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _object_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.DontLogChanges()
    {
    [[ $_object_session_showbackuplocation_changes_flag_ != 'true' ]] && return
    _object_session_showbackuplocation_changes_flag_=false
    }
Session.ShowBackupLocation.Enable()
    {
    [[ $_object_session_showbackuplocation_enable_ = 'true' ]] && return
    _object_session_showbackuplocation_enable_=true
    [[ $_object_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _object_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.Init()
    {
    _object_session_showbackuplocation_text_=''
    _object_session_showbackuplocation_flag_=false
    _object_session_showbackuplocation_changes_flag_=true
    _object_session_showbackuplocation_enable_=false
    }
Session.ShowBackupLocation.IsDisabled()
    {
    [[ $_object_session_showbackuplocation_enable_ != 'true' ]]
    }
Session.ShowBackupLocation.IsEnabled()
    {
    [[ $_object_session_showbackuplocation_enable_ = 'true' ]]
    }
Session.ShowBackupLocation.IsNot()
    {
    [[ $_object_session_showbackuplocation_flag_ != 'true' ]]
    }
Session.ShowBackupLocation.IsSet()
    {
    [[ $_object_session_showbackuplocation_flag_ = 'true' ]]
    }
Session.ShowBackupLocation.LogChanges()
    {
    [[ $_object_session_showbackuplocation_changes_flag_ = 'true' ]] && return
    _object_session_showbackuplocation_changes_flag_=true
    }
Session.ShowBackupLocation.Set()
    {
    [[ $_object_session_showbackuplocation_flag_ = 'true' ]] && return
    _object_session_showbackuplocation_flag_=true
    [[ $_object_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _object_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_showbackuplocation_text_=$2
    else
        echo -n "$_object_session_showbackuplocation_text_"
    fi
    }
Session.ShowBackupLocation.Init

Session.SkipPackageProcessing.Clear()
    {
    [[ $_object_session_skippackageprocessing_flag_ != 'true' ]] && return
    _object_session_skippackageprocessing_flag_=false
    [[ $_object_session_skippackageprocessing_changes_flag_ = 'true' ]] && DebugVar _object_session_skippackageprocessing_flag_
    }
Session.SkipPackageProcessing.Disable()
    {
    [[ $_object_session_skippackageprocessing_enable_ != 'true' ]] && return
    _object_session_skippackageprocessing_enable_=false
    [[ $_object_session_skippackageprocessing_changes_flag_ = 'true' ]] && DebugVar _object_session_skippackageprocessing_enable_
    }
Session.SkipPackageProcessing.DontLogChanges()
    {
    [[ $_object_session_skippackageprocessing_changes_flag_ != 'true' ]] && return
    _object_session_skippackageprocessing_changes_flag_=false
    }
Session.SkipPackageProcessing.Enable()
    {
    [[ $_object_session_skippackageprocessing_enable_ = 'true' ]] && return
    _object_session_skippackageprocessing_enable_=true
    [[ $_object_session_skippackageprocessing_changes_flag_ = 'true' ]] && DebugVar _object_session_skippackageprocessing_enable_
    }
Session.SkipPackageProcessing.Init()
    {
    _object_session_skippackageprocessing_text_=''
    _object_session_skippackageprocessing_flag_=false
    _object_session_skippackageprocessing_changes_flag_=true
    _object_session_skippackageprocessing_enable_=false
    }
Session.SkipPackageProcessing.IsDisabled()
    {
    [[ $_object_session_skippackageprocessing_enable_ != 'true' ]]
    }
Session.SkipPackageProcessing.IsEnabled()
    {
    [[ $_object_session_skippackageprocessing_enable_ = 'true' ]]
    }
Session.SkipPackageProcessing.IsNot()
    {
    [[ $_object_session_skippackageprocessing_flag_ != 'true' ]]
    }
Session.SkipPackageProcessing.IsSet()
    {
    [[ $_object_session_skippackageprocessing_flag_ = 'true' ]]
    }
Session.SkipPackageProcessing.LogChanges()
    {
    [[ $_object_session_skippackageprocessing_changes_flag_ = 'true' ]] && return
    _object_session_skippackageprocessing_changes_flag_=true
    }
Session.SkipPackageProcessing.Set()
    {
    [[ $_object_session_skippackageprocessing_flag_ = 'true' ]] && return
    _object_session_skippackageprocessing_flag_=true
    [[ $_object_session_skippackageprocessing_changes_flag_ = 'true' ]] && DebugVar _object_session_skippackageprocessing_flag_
    }
Session.SkipPackageProcessing.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_skippackageprocessing_text_=$2
    else
        echo -n "$_object_session_skippackageprocessing_text_"
    fi
    }
Session.SkipPackageProcessing.Init

Session.SuggestIssue.Clear()
    {
    [[ $_object_session_suggestissue_flag_ != 'true' ]] && return
    _object_session_suggestissue_flag_=false
    [[ $_object_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _object_session_suggestissue_flag_
    }
Session.SuggestIssue.Disable()
    {
    [[ $_object_session_suggestissue_enable_ != 'true' ]] && return
    _object_session_suggestissue_enable_=false
    [[ $_object_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _object_session_suggestissue_enable_
    }
Session.SuggestIssue.DontLogChanges()
    {
    [[ $_object_session_suggestissue_changes_flag_ != 'true' ]] && return
    _object_session_suggestissue_changes_flag_=false
    }
Session.SuggestIssue.Enable()
    {
    [[ $_object_session_suggestissue_enable_ = 'true' ]] && return
    _object_session_suggestissue_enable_=true
    [[ $_object_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _object_session_suggestissue_enable_
    }
Session.SuggestIssue.Init()
    {
    _object_session_suggestissue_text_=''
    _object_session_suggestissue_flag_=false
    _object_session_suggestissue_changes_flag_=true
    _object_session_suggestissue_enable_=false
    }
Session.SuggestIssue.IsDisabled()
    {
    [[ $_object_session_suggestissue_enable_ != 'true' ]]
    }
Session.SuggestIssue.IsEnabled()
    {
    [[ $_object_session_suggestissue_enable_ = 'true' ]]
    }
Session.SuggestIssue.IsNot()
    {
    [[ $_object_session_suggestissue_flag_ != 'true' ]]
    }
Session.SuggestIssue.IsSet()
    {
    [[ $_object_session_suggestissue_flag_ = 'true' ]]
    }
Session.SuggestIssue.LogChanges()
    {
    [[ $_object_session_suggestissue_changes_flag_ = 'true' ]] && return
    _object_session_suggestissue_changes_flag_=true
    }
Session.SuggestIssue.Set()
    {
    [[ $_object_session_suggestissue_flag_ = 'true' ]] && return
    _object_session_suggestissue_flag_=true
    [[ $_object_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _object_session_suggestissue_flag_
    }
Session.SuggestIssue.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_suggestissue_text_=$2
    else
        echo -n "$_object_session_suggestissue_text_"
    fi
    }
Session.SuggestIssue.Init

Session.Summary.Clear()
    {
    [[ $_object_session_summary_flag_ != 'true' ]] && return
    _object_session_summary_flag_=false
    [[ $_object_session_summary_changes_flag_ = 'true' ]] && DebugVar _object_session_summary_flag_
    }
Session.Summary.Disable()
    {
    [[ $_object_session_summary_enable_ != 'true' ]] && return
    _object_session_summary_enable_=false
    [[ $_object_session_summary_changes_flag_ = 'true' ]] && DebugVar _object_session_summary_enable_
    }
Session.Summary.DontLogChanges()
    {
    [[ $_object_session_summary_changes_flag_ != 'true' ]] && return
    _object_session_summary_changes_flag_=false
    }
Session.Summary.Enable()
    {
    [[ $_object_session_summary_enable_ = 'true' ]] && return
    _object_session_summary_enable_=true
    [[ $_object_session_summary_changes_flag_ = 'true' ]] && DebugVar _object_session_summary_enable_
    }
Session.Summary.Init()
    {
    _object_session_summary_text_=''
    _object_session_summary_flag_=false
    _object_session_summary_changes_flag_=true
    _object_session_summary_enable_=false
    }
Session.Summary.IsDisabled()
    {
    [[ $_object_session_summary_enable_ != 'true' ]]
    }
Session.Summary.IsEnabled()
    {
    [[ $_object_session_summary_enable_ = 'true' ]]
    }
Session.Summary.IsNot()
    {
    [[ $_object_session_summary_flag_ != 'true' ]]
    }
Session.Summary.IsSet()
    {
    [[ $_object_session_summary_flag_ = 'true' ]]
    }
Session.Summary.LogChanges()
    {
    [[ $_object_session_summary_changes_flag_ = 'true' ]] && return
    _object_session_summary_changes_flag_=true
    }
Session.Summary.Set()
    {
    [[ $_object_session_summary_flag_ = 'true' ]] && return
    _object_session_summary_flag_=true
    [[ $_object_session_summary_changes_flag_ = 'true' ]] && DebugVar _object_session_summary_flag_
    }
Session.Summary.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_session_summary_text_=$2
    else
        echo -n "$_object_session_summary_text_"
    fi
    }
Session.Summary.Init

User.Opts.Help.Abbreviations.Clear()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ != 'true' ]] && return
    _object_user_opts_help_abbreviations_flag_=false
    [[ $_object_user_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_abbreviations_flag_
    }
User.Opts.Help.Abbreviations.Disable()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ != 'true' ]] && return
    _object_user_opts_help_abbreviations_enable_=false
    [[ $_object_user_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_abbreviations_enable_
    }
User.Opts.Help.Abbreviations.DontLogChanges()
    {
    [[ $_object_user_opts_help_abbreviations_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_abbreviations_changes_flag_=false
    }
User.Opts.Help.Abbreviations.Enable()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ = 'true' ]] && return
    _object_user_opts_help_abbreviations_enable_=true
    [[ $_object_user_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_abbreviations_enable_
    }
User.Opts.Help.Abbreviations.Init()
    {
    _object_user_opts_help_abbreviations_text_=''
    _object_user_opts_help_abbreviations_flag_=false
    _object_user_opts_help_abbreviations_changes_flag_=true
    _object_user_opts_help_abbreviations_enable_=false
    }
User.Opts.Help.Abbreviations.IsDisabled()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ != 'true' ]]
    }
User.Opts.Help.Abbreviations.IsEnabled()
    {
    [[ $_object_user_opts_help_abbreviations_enable_ = 'true' ]]
    }
User.Opts.Help.Abbreviations.IsNot()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ != 'true' ]]
    }
User.Opts.Help.Abbreviations.IsSet()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ = 'true' ]]
    }
User.Opts.Help.Abbreviations.LogChanges()
    {
    [[ $_object_user_opts_help_abbreviations_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_abbreviations_changes_flag_=true
    }
User.Opts.Help.Abbreviations.Set()
    {
    [[ $_object_user_opts_help_abbreviations_flag_ = 'true' ]] && return
    _object_user_opts_help_abbreviations_flag_=true
    [[ $_object_user_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_abbreviations_flag_
    }
User.Opts.Help.Abbreviations.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_abbreviations_text_=$2
    else
        echo -n "$_object_user_opts_help_abbreviations_text_"
    fi
    }
User.Opts.Help.Abbreviations.Init

User.Opts.Help.Actions.Clear()
    {
    [[ $_object_user_opts_help_actions_flag_ != 'true' ]] && return
    _object_user_opts_help_actions_flag_=false
    [[ $_object_user_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actions_flag_
    }
User.Opts.Help.Actions.Disable()
    {
    [[ $_object_user_opts_help_actions_enable_ != 'true' ]] && return
    _object_user_opts_help_actions_enable_=false
    [[ $_object_user_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actions_enable_
    }
User.Opts.Help.Actions.DontLogChanges()
    {
    [[ $_object_user_opts_help_actions_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_actions_changes_flag_=false
    }
User.Opts.Help.Actions.Enable()
    {
    [[ $_object_user_opts_help_actions_enable_ = 'true' ]] && return
    _object_user_opts_help_actions_enable_=true
    [[ $_object_user_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actions_enable_
    }
User.Opts.Help.Actions.Init()
    {
    _object_user_opts_help_actions_text_=''
    _object_user_opts_help_actions_flag_=false
    _object_user_opts_help_actions_changes_flag_=true
    _object_user_opts_help_actions_enable_=false
    }
User.Opts.Help.Actions.IsDisabled()
    {
    [[ $_object_user_opts_help_actions_enable_ != 'true' ]]
    }
User.Opts.Help.Actions.IsEnabled()
    {
    [[ $_object_user_opts_help_actions_enable_ = 'true' ]]
    }
User.Opts.Help.Actions.IsNot()
    {
    [[ $_object_user_opts_help_actions_flag_ != 'true' ]]
    }
User.Opts.Help.Actions.IsSet()
    {
    [[ $_object_user_opts_help_actions_flag_ = 'true' ]]
    }
User.Opts.Help.Actions.LogChanges()
    {
    [[ $_object_user_opts_help_actions_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_actions_changes_flag_=true
    }
User.Opts.Help.Actions.Set()
    {
    [[ $_object_user_opts_help_actions_flag_ = 'true' ]] && return
    _object_user_opts_help_actions_flag_=true
    [[ $_object_user_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actions_flag_
    }
User.Opts.Help.Actions.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actions_text_=$2
    else
        echo -n "$_object_user_opts_help_actions_text_"
    fi
    }
User.Opts.Help.Actions.Init

User.Opts.Help.ActionsAll.Clear()
    {
    [[ $_object_user_opts_help_actionsall_flag_ != 'true' ]] && return
    _object_user_opts_help_actionsall_flag_=false
    [[ $_object_user_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actionsall_flag_
    }
User.Opts.Help.ActionsAll.Disable()
    {
    [[ $_object_user_opts_help_actionsall_enable_ != 'true' ]] && return
    _object_user_opts_help_actionsall_enable_=false
    [[ $_object_user_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actionsall_enable_
    }
User.Opts.Help.ActionsAll.DontLogChanges()
    {
    [[ $_object_user_opts_help_actionsall_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_actionsall_changes_flag_=false
    }
User.Opts.Help.ActionsAll.Enable()
    {
    [[ $_object_user_opts_help_actionsall_enable_ = 'true' ]] && return
    _object_user_opts_help_actionsall_enable_=true
    [[ $_object_user_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actionsall_enable_
    }
User.Opts.Help.ActionsAll.Init()
    {
    _object_user_opts_help_actionsall_text_=''
    _object_user_opts_help_actionsall_flag_=false
    _object_user_opts_help_actionsall_changes_flag_=true
    _object_user_opts_help_actionsall_enable_=false
    }
User.Opts.Help.ActionsAll.IsDisabled()
    {
    [[ $_object_user_opts_help_actionsall_enable_ != 'true' ]]
    }
User.Opts.Help.ActionsAll.IsEnabled()
    {
    [[ $_object_user_opts_help_actionsall_enable_ = 'true' ]]
    }
User.Opts.Help.ActionsAll.IsNot()
    {
    [[ $_object_user_opts_help_actionsall_flag_ != 'true' ]]
    }
User.Opts.Help.ActionsAll.IsSet()
    {
    [[ $_object_user_opts_help_actionsall_flag_ = 'true' ]]
    }
User.Opts.Help.ActionsAll.LogChanges()
    {
    [[ $_object_user_opts_help_actionsall_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_actionsall_changes_flag_=true
    }
User.Opts.Help.ActionsAll.Set()
    {
    [[ $_object_user_opts_help_actionsall_flag_ = 'true' ]] && return
    _object_user_opts_help_actionsall_flag_=true
    [[ $_object_user_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_actionsall_flag_
    }
User.Opts.Help.ActionsAll.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_actionsall_text_=$2
    else
        echo -n "$_object_user_opts_help_actionsall_text_"
    fi
    }
User.Opts.Help.ActionsAll.Init

User.Opts.Help.Backups.Clear()
    {
    [[ $_object_user_opts_help_backups_flag_ != 'true' ]] && return
    _object_user_opts_help_backups_flag_=false
    [[ $_object_user_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_backups_flag_
    }
User.Opts.Help.Backups.Disable()
    {
    [[ $_object_user_opts_help_backups_enable_ != 'true' ]] && return
    _object_user_opts_help_backups_enable_=false
    [[ $_object_user_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_backups_enable_
    }
User.Opts.Help.Backups.DontLogChanges()
    {
    [[ $_object_user_opts_help_backups_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_backups_changes_flag_=false
    }
User.Opts.Help.Backups.Enable()
    {
    [[ $_object_user_opts_help_backups_enable_ = 'true' ]] && return
    _object_user_opts_help_backups_enable_=true
    [[ $_object_user_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_backups_enable_
    }
User.Opts.Help.Backups.Init()
    {
    _object_user_opts_help_backups_text_=''
    _object_user_opts_help_backups_flag_=false
    _object_user_opts_help_backups_changes_flag_=true
    _object_user_opts_help_backups_enable_=false
    }
User.Opts.Help.Backups.IsDisabled()
    {
    [[ $_object_user_opts_help_backups_enable_ != 'true' ]]
    }
User.Opts.Help.Backups.IsEnabled()
    {
    [[ $_object_user_opts_help_backups_enable_ = 'true' ]]
    }
User.Opts.Help.Backups.IsNot()
    {
    [[ $_object_user_opts_help_backups_flag_ != 'true' ]]
    }
User.Opts.Help.Backups.IsSet()
    {
    [[ $_object_user_opts_help_backups_flag_ = 'true' ]]
    }
User.Opts.Help.Backups.LogChanges()
    {
    [[ $_object_user_opts_help_backups_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_backups_changes_flag_=true
    }
User.Opts.Help.Backups.Set()
    {
    [[ $_object_user_opts_help_backups_flag_ = 'true' ]] && return
    _object_user_opts_help_backups_flag_=true
    [[ $_object_user_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_backups_flag_
    }
User.Opts.Help.Backups.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_backups_text_=$2
    else
        echo -n "$_object_user_opts_help_backups_text_"
    fi
    }
User.Opts.Help.Backups.Init

User.Opts.Help.Basic.Clear()
    {
    [[ $_object_user_opts_help_basic_flag_ != 'true' ]] && return
    _object_user_opts_help_basic_flag_=false
    [[ $_object_user_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_basic_flag_
    }
User.Opts.Help.Basic.Disable()
    {
    [[ $_object_user_opts_help_basic_enable_ != 'true' ]] && return
    _object_user_opts_help_basic_enable_=false
    [[ $_object_user_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_basic_enable_
    }
User.Opts.Help.Basic.DontLogChanges()
    {
    [[ $_object_user_opts_help_basic_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_basic_changes_flag_=false
    }
User.Opts.Help.Basic.Enable()
    {
    [[ $_object_user_opts_help_basic_enable_ = 'true' ]] && return
    _object_user_opts_help_basic_enable_=true
    [[ $_object_user_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_basic_enable_
    }
User.Opts.Help.Basic.Init()
    {
    _object_user_opts_help_basic_text_=''
    _object_user_opts_help_basic_flag_=false
    _object_user_opts_help_basic_changes_flag_=true
    _object_user_opts_help_basic_enable_=false
    }
User.Opts.Help.Basic.IsDisabled()
    {
    [[ $_object_user_opts_help_basic_enable_ != 'true' ]]
    }
User.Opts.Help.Basic.IsEnabled()
    {
    [[ $_object_user_opts_help_basic_enable_ = 'true' ]]
    }
User.Opts.Help.Basic.IsNot()
    {
    [[ $_object_user_opts_help_basic_flag_ != 'true' ]]
    }
User.Opts.Help.Basic.IsSet()
    {
    [[ $_object_user_opts_help_basic_flag_ = 'true' ]]
    }
User.Opts.Help.Basic.LogChanges()
    {
    [[ $_object_user_opts_help_basic_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_basic_changes_flag_=true
    }
User.Opts.Help.Basic.Set()
    {
    [[ $_object_user_opts_help_basic_flag_ = 'true' ]] && return
    _object_user_opts_help_basic_flag_=true
    [[ $_object_user_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_basic_flag_
    }
User.Opts.Help.Basic.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_basic_text_=$2
    else
        echo -n "$_object_user_opts_help_basic_text_"
    fi
    }
User.Opts.Help.Basic.Init

User.Opts.Help.Options.Clear()
    {
    [[ $_object_user_opts_help_options_flag_ != 'true' ]] && return
    _object_user_opts_help_options_flag_=false
    [[ $_object_user_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_options_flag_
    }
User.Opts.Help.Options.Disable()
    {
    [[ $_object_user_opts_help_options_enable_ != 'true' ]] && return
    _object_user_opts_help_options_enable_=false
    [[ $_object_user_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_options_enable_
    }
User.Opts.Help.Options.DontLogChanges()
    {
    [[ $_object_user_opts_help_options_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_options_changes_flag_=false
    }
User.Opts.Help.Options.Enable()
    {
    [[ $_object_user_opts_help_options_enable_ = 'true' ]] && return
    _object_user_opts_help_options_enable_=true
    [[ $_object_user_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_options_enable_
    }
User.Opts.Help.Options.Init()
    {
    _object_user_opts_help_options_text_=''
    _object_user_opts_help_options_flag_=false
    _object_user_opts_help_options_changes_flag_=true
    _object_user_opts_help_options_enable_=false
    }
User.Opts.Help.Options.IsDisabled()
    {
    [[ $_object_user_opts_help_options_enable_ != 'true' ]]
    }
User.Opts.Help.Options.IsEnabled()
    {
    [[ $_object_user_opts_help_options_enable_ = 'true' ]]
    }
User.Opts.Help.Options.IsNot()
    {
    [[ $_object_user_opts_help_options_flag_ != 'true' ]]
    }
User.Opts.Help.Options.IsSet()
    {
    [[ $_object_user_opts_help_options_flag_ = 'true' ]]
    }
User.Opts.Help.Options.LogChanges()
    {
    [[ $_object_user_opts_help_options_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_options_changes_flag_=true
    }
User.Opts.Help.Options.Set()
    {
    [[ $_object_user_opts_help_options_flag_ = 'true' ]] && return
    _object_user_opts_help_options_flag_=true
    [[ $_object_user_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_options_flag_
    }
User.Opts.Help.Options.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_options_text_=$2
    else
        echo -n "$_object_user_opts_help_options_text_"
    fi
    }
User.Opts.Help.Options.Init

User.Opts.Help.Packages.Clear()
    {
    [[ $_object_user_opts_help_packages_flag_ != 'true' ]] && return
    _object_user_opts_help_packages_flag_=false
    [[ $_object_user_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_packages_flag_
    }
User.Opts.Help.Packages.Disable()
    {
    [[ $_object_user_opts_help_packages_enable_ != 'true' ]] && return
    _object_user_opts_help_packages_enable_=false
    [[ $_object_user_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_packages_enable_
    }
User.Opts.Help.Packages.DontLogChanges()
    {
    [[ $_object_user_opts_help_packages_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_packages_changes_flag_=false
    }
User.Opts.Help.Packages.Enable()
    {
    [[ $_object_user_opts_help_packages_enable_ = 'true' ]] && return
    _object_user_opts_help_packages_enable_=true
    [[ $_object_user_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_packages_enable_
    }
User.Opts.Help.Packages.Init()
    {
    _object_user_opts_help_packages_text_=''
    _object_user_opts_help_packages_flag_=false
    _object_user_opts_help_packages_changes_flag_=true
    _object_user_opts_help_packages_enable_=false
    }
User.Opts.Help.Packages.IsDisabled()
    {
    [[ $_object_user_opts_help_packages_enable_ != 'true' ]]
    }
User.Opts.Help.Packages.IsEnabled()
    {
    [[ $_object_user_opts_help_packages_enable_ = 'true' ]]
    }
User.Opts.Help.Packages.IsNot()
    {
    [[ $_object_user_opts_help_packages_flag_ != 'true' ]]
    }
User.Opts.Help.Packages.IsSet()
    {
    [[ $_object_user_opts_help_packages_flag_ = 'true' ]]
    }
User.Opts.Help.Packages.LogChanges()
    {
    [[ $_object_user_opts_help_packages_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_packages_changes_flag_=true
    }
User.Opts.Help.Packages.Set()
    {
    [[ $_object_user_opts_help_packages_flag_ = 'true' ]] && return
    _object_user_opts_help_packages_flag_=true
    [[ $_object_user_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_packages_flag_
    }
User.Opts.Help.Packages.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_packages_text_=$2
    else
        echo -n "$_object_user_opts_help_packages_text_"
    fi
    }
User.Opts.Help.Packages.Init

User.Opts.Help.Problems.Clear()
    {
    [[ $_object_user_opts_help_problems_flag_ != 'true' ]] && return
    _object_user_opts_help_problems_flag_=false
    [[ $_object_user_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_problems_flag_
    }
User.Opts.Help.Problems.Disable()
    {
    [[ $_object_user_opts_help_problems_enable_ != 'true' ]] && return
    _object_user_opts_help_problems_enable_=false
    [[ $_object_user_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_problems_enable_
    }
User.Opts.Help.Problems.DontLogChanges()
    {
    [[ $_object_user_opts_help_problems_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_problems_changes_flag_=false
    }
User.Opts.Help.Problems.Enable()
    {
    [[ $_object_user_opts_help_problems_enable_ = 'true' ]] && return
    _object_user_opts_help_problems_enable_=true
    [[ $_object_user_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_problems_enable_
    }
User.Opts.Help.Problems.Init()
    {
    _object_user_opts_help_problems_text_=''
    _object_user_opts_help_problems_flag_=false
    _object_user_opts_help_problems_changes_flag_=true
    _object_user_opts_help_problems_enable_=false
    }
User.Opts.Help.Problems.IsDisabled()
    {
    [[ $_object_user_opts_help_problems_enable_ != 'true' ]]
    }
User.Opts.Help.Problems.IsEnabled()
    {
    [[ $_object_user_opts_help_problems_enable_ = 'true' ]]
    }
User.Opts.Help.Problems.IsNot()
    {
    [[ $_object_user_opts_help_problems_flag_ != 'true' ]]
    }
User.Opts.Help.Problems.IsSet()
    {
    [[ $_object_user_opts_help_problems_flag_ = 'true' ]]
    }
User.Opts.Help.Problems.LogChanges()
    {
    [[ $_object_user_opts_help_problems_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_problems_changes_flag_=true
    }
User.Opts.Help.Problems.Set()
    {
    [[ $_object_user_opts_help_problems_flag_ = 'true' ]] && return
    _object_user_opts_help_problems_flag_=true
    [[ $_object_user_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_problems_flag_
    }
User.Opts.Help.Problems.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_problems_text_=$2
    else
        echo -n "$_object_user_opts_help_problems_text_"
    fi
    }
User.Opts.Help.Problems.Init

User.Opts.Help.Status.Clear()
    {
    [[ $_object_user_opts_help_status_flag_ != 'true' ]] && return
    _object_user_opts_help_status_flag_=false
    [[ $_object_user_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_status_flag_
    }
User.Opts.Help.Status.Disable()
    {
    [[ $_object_user_opts_help_status_enable_ != 'true' ]] && return
    _object_user_opts_help_status_enable_=false
    [[ $_object_user_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_status_enable_
    }
User.Opts.Help.Status.DontLogChanges()
    {
    [[ $_object_user_opts_help_status_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_status_changes_flag_=false
    }
User.Opts.Help.Status.Enable()
    {
    [[ $_object_user_opts_help_status_enable_ = 'true' ]] && return
    _object_user_opts_help_status_enable_=true
    [[ $_object_user_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_status_enable_
    }
User.Opts.Help.Status.Init()
    {
    _object_user_opts_help_status_text_=''
    _object_user_opts_help_status_flag_=false
    _object_user_opts_help_status_changes_flag_=true
    _object_user_opts_help_status_enable_=false
    }
User.Opts.Help.Status.IsDisabled()
    {
    [[ $_object_user_opts_help_status_enable_ != 'true' ]]
    }
User.Opts.Help.Status.IsEnabled()
    {
    [[ $_object_user_opts_help_status_enable_ = 'true' ]]
    }
User.Opts.Help.Status.IsNot()
    {
    [[ $_object_user_opts_help_status_flag_ != 'true' ]]
    }
User.Opts.Help.Status.IsSet()
    {
    [[ $_object_user_opts_help_status_flag_ = 'true' ]]
    }
User.Opts.Help.Status.LogChanges()
    {
    [[ $_object_user_opts_help_status_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_status_changes_flag_=true
    }
User.Opts.Help.Status.Set()
    {
    [[ $_object_user_opts_help_status_flag_ = 'true' ]] && return
    _object_user_opts_help_status_flag_=true
    [[ $_object_user_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_status_flag_
    }
User.Opts.Help.Status.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_status_text_=$2
    else
        echo -n "$_object_user_opts_help_status_text_"
    fi
    }
User.Opts.Help.Status.Init

User.Opts.Help.Tips.Clear()
    {
    [[ $_object_user_opts_help_tips_flag_ != 'true' ]] && return
    _object_user_opts_help_tips_flag_=false
    [[ $_object_user_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_tips_flag_
    }
User.Opts.Help.Tips.Disable()
    {
    [[ $_object_user_opts_help_tips_enable_ != 'true' ]] && return
    _object_user_opts_help_tips_enable_=false
    [[ $_object_user_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_tips_enable_
    }
User.Opts.Help.Tips.DontLogChanges()
    {
    [[ $_object_user_opts_help_tips_changes_flag_ != 'true' ]] && return
    _object_user_opts_help_tips_changes_flag_=false
    }
User.Opts.Help.Tips.Enable()
    {
    [[ $_object_user_opts_help_tips_enable_ = 'true' ]] && return
    _object_user_opts_help_tips_enable_=true
    [[ $_object_user_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_tips_enable_
    }
User.Opts.Help.Tips.Init()
    {
    _object_user_opts_help_tips_text_=''
    _object_user_opts_help_tips_flag_=false
    _object_user_opts_help_tips_changes_flag_=true
    _object_user_opts_help_tips_enable_=false
    }
User.Opts.Help.Tips.IsDisabled()
    {
    [[ $_object_user_opts_help_tips_enable_ != 'true' ]]
    }
User.Opts.Help.Tips.IsEnabled()
    {
    [[ $_object_user_opts_help_tips_enable_ = 'true' ]]
    }
User.Opts.Help.Tips.IsNot()
    {
    [[ $_object_user_opts_help_tips_flag_ != 'true' ]]
    }
User.Opts.Help.Tips.IsSet()
    {
    [[ $_object_user_opts_help_tips_flag_ = 'true' ]]
    }
User.Opts.Help.Tips.LogChanges()
    {
    [[ $_object_user_opts_help_tips_changes_flag_ = 'true' ]] && return
    _object_user_opts_help_tips_changes_flag_=true
    }
User.Opts.Help.Tips.Set()
    {
    [[ $_object_user_opts_help_tips_flag_ = 'true' ]] && return
    _object_user_opts_help_tips_flag_=true
    [[ $_object_user_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_help_tips_flag_
    }
User.Opts.Help.Tips.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_help_tips_text_=$2
    else
        echo -n "$_object_user_opts_help_tips_text_"
    fi
    }
User.Opts.Help.Tips.Init

User.Opts.Clean.Clear()
    {
    [[ $_object_user_opts_clean_flag_ != 'true' ]] && return
    _object_user_opts_clean_flag_=false
    [[ $_object_user_opts_clean_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_clean_flag_
    }
User.Opts.Clean.Disable()
    {
    [[ $_object_user_opts_clean_enable_ != 'true' ]] && return
    _object_user_opts_clean_enable_=false
    [[ $_object_user_opts_clean_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_clean_enable_
    }
User.Opts.Clean.DontLogChanges()
    {
    [[ $_object_user_opts_clean_changes_flag_ != 'true' ]] && return
    _object_user_opts_clean_changes_flag_=false
    }
User.Opts.Clean.Enable()
    {
    [[ $_object_user_opts_clean_enable_ = 'true' ]] && return
    _object_user_opts_clean_enable_=true
    [[ $_object_user_opts_clean_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_clean_enable_
    }
User.Opts.Clean.Init()
    {
    _object_user_opts_clean_text_=''
    _object_user_opts_clean_flag_=false
    _object_user_opts_clean_changes_flag_=true
    _object_user_opts_clean_enable_=false
    }
User.Opts.Clean.IsDisabled()
    {
    [[ $_object_user_opts_clean_enable_ != 'true' ]]
    }
User.Opts.Clean.IsEnabled()
    {
    [[ $_object_user_opts_clean_enable_ = 'true' ]]
    }
User.Opts.Clean.IsNot()
    {
    [[ $_object_user_opts_clean_flag_ != 'true' ]]
    }
User.Opts.Clean.IsSet()
    {
    [[ $_object_user_opts_clean_flag_ = 'true' ]]
    }
User.Opts.Clean.LogChanges()
    {
    [[ $_object_user_opts_clean_changes_flag_ = 'true' ]] && return
    _object_user_opts_clean_changes_flag_=true
    }
User.Opts.Clean.Set()
    {
    [[ $_object_user_opts_clean_flag_ = 'true' ]] && return
    _object_user_opts_clean_flag_=true
    [[ $_object_user_opts_clean_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_clean_flag_
    }
User.Opts.Clean.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_clean_text_=$2
    else
        echo -n "$_object_user_opts_clean_text_"
    fi
    }
User.Opts.Clean.Init

User.Opts.Dependencies.Check.Clear()
    {
    [[ $_object_user_opts_dependencies_check_flag_ != 'true' ]] && return
    _object_user_opts_dependencies_check_flag_=false
    [[ $_object_user_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_dependencies_check_flag_
    }
User.Opts.Dependencies.Check.Disable()
    {
    [[ $_object_user_opts_dependencies_check_enable_ != 'true' ]] && return
    _object_user_opts_dependencies_check_enable_=false
    [[ $_object_user_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_dependencies_check_enable_
    }
User.Opts.Dependencies.Check.DontLogChanges()
    {
    [[ $_object_user_opts_dependencies_check_changes_flag_ != 'true' ]] && return
    _object_user_opts_dependencies_check_changes_flag_=false
    }
User.Opts.Dependencies.Check.Enable()
    {
    [[ $_object_user_opts_dependencies_check_enable_ = 'true' ]] && return
    _object_user_opts_dependencies_check_enable_=true
    [[ $_object_user_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_dependencies_check_enable_
    }
User.Opts.Dependencies.Check.Init()
    {
    _object_user_opts_dependencies_check_text_=''
    _object_user_opts_dependencies_check_flag_=false
    _object_user_opts_dependencies_check_changes_flag_=true
    _object_user_opts_dependencies_check_enable_=false
    }
User.Opts.Dependencies.Check.IsDisabled()
    {
    [[ $_object_user_opts_dependencies_check_enable_ != 'true' ]]
    }
User.Opts.Dependencies.Check.IsEnabled()
    {
    [[ $_object_user_opts_dependencies_check_enable_ = 'true' ]]
    }
User.Opts.Dependencies.Check.IsNot()
    {
    [[ $_object_user_opts_dependencies_check_flag_ != 'true' ]]
    }
User.Opts.Dependencies.Check.IsSet()
    {
    [[ $_object_user_opts_dependencies_check_flag_ = 'true' ]]
    }
User.Opts.Dependencies.Check.LogChanges()
    {
    [[ $_object_user_opts_dependencies_check_changes_flag_ = 'true' ]] && return
    _object_user_opts_dependencies_check_changes_flag_=true
    }
User.Opts.Dependencies.Check.Set()
    {
    [[ $_object_user_opts_dependencies_check_flag_ = 'true' ]] && return
    _object_user_opts_dependencies_check_flag_=true
    [[ $_object_user_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_dependencies_check_flag_
    }
User.Opts.Dependencies.Check.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_dependencies_check_text_=$2
    else
        echo -n "$_object_user_opts_dependencies_check_text_"
    fi
    }
User.Opts.Dependencies.Check.Init

User.Opts.IgnoreFreeSpace.Clear()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ != 'true' ]] && return
    _object_user_opts_ignorefreespace_flag_=false
    [[ $_object_user_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_ignorefreespace_flag_
    }
User.Opts.IgnoreFreeSpace.Disable()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ != 'true' ]] && return
    _object_user_opts_ignorefreespace_enable_=false
    [[ $_object_user_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_ignorefreespace_enable_
    }
User.Opts.IgnoreFreeSpace.DontLogChanges()
    {
    [[ $_object_user_opts_ignorefreespace_changes_flag_ != 'true' ]] && return
    _object_user_opts_ignorefreespace_changes_flag_=false
    }
User.Opts.IgnoreFreeSpace.Enable()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ = 'true' ]] && return
    _object_user_opts_ignorefreespace_enable_=true
    [[ $_object_user_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_ignorefreespace_enable_
    }
User.Opts.IgnoreFreeSpace.Init()
    {
    _object_user_opts_ignorefreespace_text_=''
    _object_user_opts_ignorefreespace_flag_=false
    _object_user_opts_ignorefreespace_changes_flag_=true
    _object_user_opts_ignorefreespace_enable_=false
    }
User.Opts.IgnoreFreeSpace.IsDisabled()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ != 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsEnabled()
    {
    [[ $_object_user_opts_ignorefreespace_enable_ = 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsNot()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ != 'true' ]]
    }
User.Opts.IgnoreFreeSpace.IsSet()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ = 'true' ]]
    }
User.Opts.IgnoreFreeSpace.LogChanges()
    {
    [[ $_object_user_opts_ignorefreespace_changes_flag_ = 'true' ]] && return
    _object_user_opts_ignorefreespace_changes_flag_=true
    }
User.Opts.IgnoreFreeSpace.Set()
    {
    [[ $_object_user_opts_ignorefreespace_flag_ = 'true' ]] && return
    _object_user_opts_ignorefreespace_flag_=true
    [[ $_object_user_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_ignorefreespace_flag_
    }
User.Opts.IgnoreFreeSpace.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_ignorefreespace_text_=$2
    else
        echo -n "$_object_user_opts_ignorefreespace_text_"
    fi
    }
User.Opts.IgnoreFreeSpace.Init

User.Opts.Versions.View.Clear()
    {
    [[ $_object_user_opts_versions_view_flag_ != 'true' ]] && return
    _object_user_opts_versions_view_flag_=false
    [[ $_object_user_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_versions_view_flag_
    }
User.Opts.Versions.View.Disable()
    {
    [[ $_object_user_opts_versions_view_enable_ != 'true' ]] && return
    _object_user_opts_versions_view_enable_=false
    [[ $_object_user_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_versions_view_enable_
    }
User.Opts.Versions.View.DontLogChanges()
    {
    [[ $_object_user_opts_versions_view_changes_flag_ != 'true' ]] && return
    _object_user_opts_versions_view_changes_flag_=false
    }
User.Opts.Versions.View.Enable()
    {
    [[ $_object_user_opts_versions_view_enable_ = 'true' ]] && return
    _object_user_opts_versions_view_enable_=true
    [[ $_object_user_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_versions_view_enable_
    }
User.Opts.Versions.View.Init()
    {
    _object_user_opts_versions_view_text_=''
    _object_user_opts_versions_view_flag_=false
    _object_user_opts_versions_view_changes_flag_=true
    _object_user_opts_versions_view_enable_=false
    }
User.Opts.Versions.View.IsDisabled()
    {
    [[ $_object_user_opts_versions_view_enable_ != 'true' ]]
    }
User.Opts.Versions.View.IsEnabled()
    {
    [[ $_object_user_opts_versions_view_enable_ = 'true' ]]
    }
User.Opts.Versions.View.IsNot()
    {
    [[ $_object_user_opts_versions_view_flag_ != 'true' ]]
    }
User.Opts.Versions.View.IsSet()
    {
    [[ $_object_user_opts_versions_view_flag_ = 'true' ]]
    }
User.Opts.Versions.View.LogChanges()
    {
    [[ $_object_user_opts_versions_view_changes_flag_ = 'true' ]] && return
    _object_user_opts_versions_view_changes_flag_=true
    }
User.Opts.Versions.View.Set()
    {
    [[ $_object_user_opts_versions_view_flag_ = 'true' ]] && return
    _object_user_opts_versions_view_flag_=true
    [[ $_object_user_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_versions_view_flag_
    }
User.Opts.Versions.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_versions_view_text_=$2
    else
        echo -n "$_object_user_opts_versions_view_text_"
    fi
    }
User.Opts.Versions.View.Init

User.Opts.Log.Last.Paste.Clear()
    {
    [[ $_object_user_opts_log_last_paste_flag_ != 'true' ]] && return
    _object_user_opts_log_last_paste_flag_=false
    [[ $_object_user_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_paste_flag_
    }
User.Opts.Log.Last.Paste.Disable()
    {
    [[ $_object_user_opts_log_last_paste_enable_ != 'true' ]] && return
    _object_user_opts_log_last_paste_enable_=false
    [[ $_object_user_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_paste_enable_
    }
User.Opts.Log.Last.Paste.DontLogChanges()
    {
    [[ $_object_user_opts_log_last_paste_changes_flag_ != 'true' ]] && return
    _object_user_opts_log_last_paste_changes_flag_=false
    }
User.Opts.Log.Last.Paste.Enable()
    {
    [[ $_object_user_opts_log_last_paste_enable_ = 'true' ]] && return
    _object_user_opts_log_last_paste_enable_=true
    [[ $_object_user_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_paste_enable_
    }
User.Opts.Log.Last.Paste.Init()
    {
    _object_user_opts_log_last_paste_text_=''
    _object_user_opts_log_last_paste_flag_=false
    _object_user_opts_log_last_paste_changes_flag_=true
    _object_user_opts_log_last_paste_enable_=false
    }
User.Opts.Log.Last.Paste.IsDisabled()
    {
    [[ $_object_user_opts_log_last_paste_enable_ != 'true' ]]
    }
User.Opts.Log.Last.Paste.IsEnabled()
    {
    [[ $_object_user_opts_log_last_paste_enable_ = 'true' ]]
    }
User.Opts.Log.Last.Paste.IsNot()
    {
    [[ $_object_user_opts_log_last_paste_flag_ != 'true' ]]
    }
User.Opts.Log.Last.Paste.IsSet()
    {
    [[ $_object_user_opts_log_last_paste_flag_ = 'true' ]]
    }
User.Opts.Log.Last.Paste.LogChanges()
    {
    [[ $_object_user_opts_log_last_paste_changes_flag_ = 'true' ]] && return
    _object_user_opts_log_last_paste_changes_flag_=true
    }
User.Opts.Log.Last.Paste.Set()
    {
    [[ $_object_user_opts_log_last_paste_flag_ = 'true' ]] && return
    _object_user_opts_log_last_paste_flag_=true
    [[ $_object_user_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_paste_flag_
    }
User.Opts.Log.Last.Paste.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_paste_text_=$2
    else
        echo -n "$_object_user_opts_log_last_paste_text_"
    fi
    }
User.Opts.Log.Last.Paste.Init

User.Opts.Log.Last.View.Clear()
    {
    [[ $_object_user_opts_log_last_view_flag_ != 'true' ]] && return
    _object_user_opts_log_last_view_flag_=false
    [[ $_object_user_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_view_flag_
    }
User.Opts.Log.Last.View.Disable()
    {
    [[ $_object_user_opts_log_last_view_enable_ != 'true' ]] && return
    _object_user_opts_log_last_view_enable_=false
    [[ $_object_user_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_view_enable_
    }
User.Opts.Log.Last.View.DontLogChanges()
    {
    [[ $_object_user_opts_log_last_view_changes_flag_ != 'true' ]] && return
    _object_user_opts_log_last_view_changes_flag_=false
    }
User.Opts.Log.Last.View.Enable()
    {
    [[ $_object_user_opts_log_last_view_enable_ = 'true' ]] && return
    _object_user_opts_log_last_view_enable_=true
    [[ $_object_user_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_view_enable_
    }
User.Opts.Log.Last.View.Init()
    {
    _object_user_opts_log_last_view_text_=''
    _object_user_opts_log_last_view_flag_=false
    _object_user_opts_log_last_view_changes_flag_=true
    _object_user_opts_log_last_view_enable_=false
    }
User.Opts.Log.Last.View.IsDisabled()
    {
    [[ $_object_user_opts_log_last_view_enable_ != 'true' ]]
    }
User.Opts.Log.Last.View.IsEnabled()
    {
    [[ $_object_user_opts_log_last_view_enable_ = 'true' ]]
    }
User.Opts.Log.Last.View.IsNot()
    {
    [[ $_object_user_opts_log_last_view_flag_ != 'true' ]]
    }
User.Opts.Log.Last.View.IsSet()
    {
    [[ $_object_user_opts_log_last_view_flag_ = 'true' ]]
    }
User.Opts.Log.Last.View.LogChanges()
    {
    [[ $_object_user_opts_log_last_view_changes_flag_ = 'true' ]] && return
    _object_user_opts_log_last_view_changes_flag_=true
    }
User.Opts.Log.Last.View.Set()
    {
    [[ $_object_user_opts_log_last_view_flag_ = 'true' ]] && return
    _object_user_opts_log_last_view_flag_=true
    [[ $_object_user_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_last_view_flag_
    }
User.Opts.Log.Last.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_last_view_text_=$2
    else
        echo -n "$_object_user_opts_log_last_view_text_"
    fi
    }
User.Opts.Log.Last.View.Init

User.Opts.Log.Tail.Paste.Clear()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ != 'true' ]] && return
    _object_user_opts_log_tail_paste_flag_=false
    [[ $_object_user_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_tail_paste_flag_
    }
User.Opts.Log.Tail.Paste.Disable()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ != 'true' ]] && return
    _object_user_opts_log_tail_paste_enable_=false
    [[ $_object_user_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_tail_paste_enable_
    }
User.Opts.Log.Tail.Paste.DontLogChanges()
    {
    [[ $_object_user_opts_log_tail_paste_changes_flag_ != 'true' ]] && return
    _object_user_opts_log_tail_paste_changes_flag_=false
    }
User.Opts.Log.Tail.Paste.Enable()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ = 'true' ]] && return
    _object_user_opts_log_tail_paste_enable_=true
    [[ $_object_user_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_tail_paste_enable_
    }
User.Opts.Log.Tail.Paste.Init()
    {
    _object_user_opts_log_tail_paste_text_=''
    _object_user_opts_log_tail_paste_flag_=false
    _object_user_opts_log_tail_paste_changes_flag_=true
    _object_user_opts_log_tail_paste_enable_=false
    }
User.Opts.Log.Tail.Paste.IsDisabled()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ != 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsEnabled()
    {
    [[ $_object_user_opts_log_tail_paste_enable_ = 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsNot()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ != 'true' ]]
    }
User.Opts.Log.Tail.Paste.IsSet()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ = 'true' ]]
    }
User.Opts.Log.Tail.Paste.LogChanges()
    {
    [[ $_object_user_opts_log_tail_paste_changes_flag_ = 'true' ]] && return
    _object_user_opts_log_tail_paste_changes_flag_=true
    }
User.Opts.Log.Tail.Paste.Set()
    {
    [[ $_object_user_opts_log_tail_paste_flag_ = 'true' ]] && return
    _object_user_opts_log_tail_paste_flag_=true
    [[ $_object_user_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_tail_paste_flag_
    }
User.Opts.Log.Tail.Paste.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_tail_paste_text_=$2
    else
        echo -n "$_object_user_opts_log_tail_paste_text_"
    fi
    }
User.Opts.Log.Tail.Paste.Init

User.Opts.Log.Whole.View.Clear()
    {
    [[ $_object_user_opts_log_whole_view_flag_ != 'true' ]] && return
    _object_user_opts_log_whole_view_flag_=false
    [[ $_object_user_opts_log_whole_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_whole_view_flag_
    }
User.Opts.Log.Whole.View.Disable()
    {
    [[ $_object_user_opts_log_whole_view_enable_ != 'true' ]] && return
    _object_user_opts_log_whole_view_enable_=false
    [[ $_object_user_opts_log_whole_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_whole_view_enable_
    }
User.Opts.Log.Whole.View.DontLogChanges()
    {
    [[ $_object_user_opts_log_whole_view_changes_flag_ != 'true' ]] && return
    _object_user_opts_log_whole_view_changes_flag_=false
    }
User.Opts.Log.Whole.View.Enable()
    {
    [[ $_object_user_opts_log_whole_view_enable_ = 'true' ]] && return
    _object_user_opts_log_whole_view_enable_=true
    [[ $_object_user_opts_log_whole_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_whole_view_enable_
    }
User.Opts.Log.Whole.View.Init()
    {
    _object_user_opts_log_whole_view_text_=''
    _object_user_opts_log_whole_view_flag_=false
    _object_user_opts_log_whole_view_changes_flag_=true
    _object_user_opts_log_whole_view_enable_=false
    }
User.Opts.Log.Whole.View.IsDisabled()
    {
    [[ $_object_user_opts_log_whole_view_enable_ != 'true' ]]
    }
User.Opts.Log.Whole.View.IsEnabled()
    {
    [[ $_object_user_opts_log_whole_view_enable_ = 'true' ]]
    }
User.Opts.Log.Whole.View.IsNot()
    {
    [[ $_object_user_opts_log_whole_view_flag_ != 'true' ]]
    }
User.Opts.Log.Whole.View.IsSet()
    {
    [[ $_object_user_opts_log_whole_view_flag_ = 'true' ]]
    }
User.Opts.Log.Whole.View.LogChanges()
    {
    [[ $_object_user_opts_log_whole_view_changes_flag_ = 'true' ]] && return
    _object_user_opts_log_whole_view_changes_flag_=true
    }
User.Opts.Log.Whole.View.Set()
    {
    [[ $_object_user_opts_log_whole_view_flag_ = 'true' ]] && return
    _object_user_opts_log_whole_view_flag_=true
    [[ $_object_user_opts_log_whole_view_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_log_whole_view_flag_
    }
User.Opts.Log.Whole.View.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_log_whole_view_text_=$2
    else
        echo -n "$_object_user_opts_log_whole_view_text_"
    fi
    }
User.Opts.Log.Whole.View.Init

User.Opts.Apps.All.Backup.Clear()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_backup_flag_=false
    [[ $_object_user_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_backup_flag_
    }
User.Opts.Apps.All.Backup.Disable()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_backup_enable_=false
    [[ $_object_user_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_backup_enable_
    }
User.Opts.Apps.All.Backup.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_backup_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_backup_changes_flag_=false
    }
User.Opts.Apps.All.Backup.Enable()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_backup_enable_=true
    [[ $_object_user_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_backup_enable_
    }
User.Opts.Apps.All.Backup.Init()
    {
    _object_user_opts_apps_all_backup_text_=''
    _object_user_opts_apps_all_backup_flag_=false
    _object_user_opts_apps_all_backup_changes_flag_=true
    _object_user_opts_apps_all_backup_enable_=false
    }
User.Opts.Apps.All.Backup.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Backup.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_backup_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Backup.IsNot()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Backup.IsSet()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Backup.LogChanges()
    {
    [[ $_object_user_opts_apps_all_backup_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_backup_changes_flag_=true
    }
User.Opts.Apps.All.Backup.Set()
    {
    [[ $_object_user_opts_apps_all_backup_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_backup_flag_=true
    [[ $_object_user_opts_apps_all_backup_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_backup_flag_
    }
User.Opts.Apps.All.Backup.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_backup_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_backup_text_"
    fi
    }
User.Opts.Apps.All.Backup.Init

User.Opts.Apps.All.Install.Clear()
    {
    [[ $_object_user_opts_apps_all_install_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_install_flag_=false
    [[ $_object_user_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_install_flag_
    }
User.Opts.Apps.All.Install.Disable()
    {
    [[ $_object_user_opts_apps_all_install_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_install_enable_=false
    [[ $_object_user_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_install_enable_
    }
User.Opts.Apps.All.Install.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_install_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_install_changes_flag_=false
    }
User.Opts.Apps.All.Install.Enable()
    {
    [[ $_object_user_opts_apps_all_install_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_install_enable_=true
    [[ $_object_user_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_install_enable_
    }
User.Opts.Apps.All.Install.Init()
    {
    _object_user_opts_apps_all_install_text_=''
    _object_user_opts_apps_all_install_flag_=false
    _object_user_opts_apps_all_install_changes_flag_=true
    _object_user_opts_apps_all_install_enable_=false
    }
User.Opts.Apps.All.Install.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_install_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Install.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_install_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Install.IsNot()
    {
    [[ $_object_user_opts_apps_all_install_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Install.IsSet()
    {
    [[ $_object_user_opts_apps_all_install_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Install.LogChanges()
    {
    [[ $_object_user_opts_apps_all_install_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_install_changes_flag_=true
    }
User.Opts.Apps.All.Install.Set()
    {
    [[ $_object_user_opts_apps_all_install_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_install_flag_=true
    [[ $_object_user_opts_apps_all_install_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_install_flag_
    }
User.Opts.Apps.All.Install.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_install_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_install_text_"
    fi
    }
User.Opts.Apps.All.Install.Init

User.Opts.Apps.All.Reinstall.Clear()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_reinstall_flag_=false
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_reinstall_flag_
    }
User.Opts.Apps.All.Reinstall.Disable()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_reinstall_enable_=false
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_reinstall_enable_
    }
User.Opts.Apps.All.Reinstall.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_reinstall_changes_flag_=false
    }
User.Opts.Apps.All.Reinstall.Enable()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_reinstall_enable_=true
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_reinstall_enable_
    }
User.Opts.Apps.All.Reinstall.Init()
    {
    _object_user_opts_apps_all_reinstall_text_=''
    _object_user_opts_apps_all_reinstall_flag_=false
    _object_user_opts_apps_all_reinstall_changes_flag_=true
    _object_user_opts_apps_all_reinstall_enable_=false
    }
User.Opts.Apps.All.Reinstall.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_reinstall_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsNot()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Reinstall.IsSet()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Reinstall.LogChanges()
    {
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_reinstall_changes_flag_=true
    }
User.Opts.Apps.All.Reinstall.Set()
    {
    [[ $_object_user_opts_apps_all_reinstall_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_reinstall_flag_=true
    [[ $_object_user_opts_apps_all_reinstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_reinstall_flag_
    }
User.Opts.Apps.All.Reinstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_reinstall_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_reinstall_text_"
    fi
    }
User.Opts.Apps.All.Reinstall.Init

User.Opts.Apps.All.Restart.Clear()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restart_flag_=false
    [[ $_object_user_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restart_flag_
    }
User.Opts.Apps.All.Restart.Disable()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_restart_enable_=false
    [[ $_object_user_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restart_enable_
    }
User.Opts.Apps.All.Restart.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_restart_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restart_changes_flag_=false
    }
User.Opts.Apps.All.Restart.Enable()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_restart_enable_=true
    [[ $_object_user_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restart_enable_
    }
User.Opts.Apps.All.Restart.Init()
    {
    _object_user_opts_apps_all_restart_text_=''
    _object_user_opts_apps_all_restart_flag_=false
    _object_user_opts_apps_all_restart_changes_flag_=true
    _object_user_opts_apps_all_restart_enable_=false
    }
User.Opts.Apps.All.Restart.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Restart.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_restart_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Restart.IsNot()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Restart.IsSet()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Restart.LogChanges()
    {
    [[ $_object_user_opts_apps_all_restart_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restart_changes_flag_=true
    }
User.Opts.Apps.All.Restart.Set()
    {
    [[ $_object_user_opts_apps_all_restart_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restart_flag_=true
    [[ $_object_user_opts_apps_all_restart_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restart_flag_
    }
User.Opts.Apps.All.Restart.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restart_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_restart_text_"
    fi
    }
User.Opts.Apps.All.Restart.Init

User.Opts.Apps.All.Restore.Clear()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restore_flag_=false
    [[ $_object_user_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restore_flag_
    }
User.Opts.Apps.All.Restore.Disable()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_restore_enable_=false
    [[ $_object_user_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restore_enable_
    }
User.Opts.Apps.All.Restore.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_restore_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_restore_changes_flag_=false
    }
User.Opts.Apps.All.Restore.Enable()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_restore_enable_=true
    [[ $_object_user_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restore_enable_
    }
User.Opts.Apps.All.Restore.Init()
    {
    _object_user_opts_apps_all_restore_text_=''
    _object_user_opts_apps_all_restore_flag_=false
    _object_user_opts_apps_all_restore_changes_flag_=true
    _object_user_opts_apps_all_restore_enable_=false
    }
User.Opts.Apps.All.Restore.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Restore.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_restore_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Restore.IsNot()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Restore.IsSet()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Restore.LogChanges()
    {
    [[ $_object_user_opts_apps_all_restore_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restore_changes_flag_=true
    }
User.Opts.Apps.All.Restore.Set()
    {
    [[ $_object_user_opts_apps_all_restore_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_restore_flag_=true
    [[ $_object_user_opts_apps_all_restore_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_restore_flag_
    }
User.Opts.Apps.All.Restore.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_restore_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_restore_text_"
    fi
    }
User.Opts.Apps.All.Restore.Init

User.Opts.Apps.All.Start.Clear()
    {
    [[ $_object_user_opts_apps_all_start_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_start_flag_=false
    [[ $_object_user_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_start_flag_
    }
User.Opts.Apps.All.Start.Disable()
    {
    [[ $_object_user_opts_apps_all_start_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_start_enable_=false
    [[ $_object_user_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_start_enable_
    }
User.Opts.Apps.All.Start.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_start_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_start_changes_flag_=false
    }
User.Opts.Apps.All.Start.Enable()
    {
    [[ $_object_user_opts_apps_all_start_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_start_enable_=true
    [[ $_object_user_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_start_enable_
    }
User.Opts.Apps.All.Start.Init()
    {
    _object_user_opts_apps_all_start_text_=''
    _object_user_opts_apps_all_start_flag_=false
    _object_user_opts_apps_all_start_changes_flag_=true
    _object_user_opts_apps_all_start_enable_=false
    }
User.Opts.Apps.All.Start.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_start_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Start.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_start_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Start.IsNot()
    {
    [[ $_object_user_opts_apps_all_start_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Start.IsSet()
    {
    [[ $_object_user_opts_apps_all_start_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Start.LogChanges()
    {
    [[ $_object_user_opts_apps_all_start_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_start_changes_flag_=true
    }
User.Opts.Apps.All.Start.Set()
    {
    [[ $_object_user_opts_apps_all_start_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_start_flag_=true
    [[ $_object_user_opts_apps_all_start_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_start_flag_
    }
User.Opts.Apps.All.Start.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_start_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_start_text_"
    fi
    }
User.Opts.Apps.All.Start.Init

User.Opts.Apps.All.Stop.Clear()
    {
    [[ $_object_user_opts_apps_all_stop_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_stop_flag_=false
    [[ $_object_user_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_stop_flag_
    }
User.Opts.Apps.All.Stop.Disable()
    {
    [[ $_object_user_opts_apps_all_stop_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_stop_enable_=false
    [[ $_object_user_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_stop_enable_
    }
User.Opts.Apps.All.Stop.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_stop_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_stop_changes_flag_=false
    }
User.Opts.Apps.All.Stop.Enable()
    {
    [[ $_object_user_opts_apps_all_stop_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_stop_enable_=true
    [[ $_object_user_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_stop_enable_
    }
User.Opts.Apps.All.Stop.Init()
    {
    _object_user_opts_apps_all_stop_text_=''
    _object_user_opts_apps_all_stop_flag_=false
    _object_user_opts_apps_all_stop_changes_flag_=true
    _object_user_opts_apps_all_stop_enable_=false
    }
User.Opts.Apps.All.Stop.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_stop_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Stop.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_stop_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Stop.IsNot()
    {
    [[ $_object_user_opts_apps_all_stop_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Stop.IsSet()
    {
    [[ $_object_user_opts_apps_all_stop_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Stop.LogChanges()
    {
    [[ $_object_user_opts_apps_all_stop_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_stop_changes_flag_=true
    }
User.Opts.Apps.All.Stop.Set()
    {
    [[ $_object_user_opts_apps_all_stop_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_stop_flag_=true
    [[ $_object_user_opts_apps_all_stop_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_stop_flag_
    }
User.Opts.Apps.All.Stop.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_stop_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_stop_text_"
    fi
    }
User.Opts.Apps.All.Stop.Init

User.Opts.Apps.All.Uninstall.Clear()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_uninstall_flag_=false
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_uninstall_flag_
    }
User.Opts.Apps.All.Uninstall.Disable()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_uninstall_enable_=false
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_uninstall_enable_
    }
User.Opts.Apps.All.Uninstall.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_uninstall_changes_flag_=false
    }
User.Opts.Apps.All.Uninstall.Enable()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_uninstall_enable_=true
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_uninstall_enable_
    }
User.Opts.Apps.All.Uninstall.Init()
    {
    _object_user_opts_apps_all_uninstall_text_=''
    _object_user_opts_apps_all_uninstall_flag_=false
    _object_user_opts_apps_all_uninstall_changes_flag_=true
    _object_user_opts_apps_all_uninstall_enable_=false
    }
User.Opts.Apps.All.Uninstall.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_uninstall_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsNot()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Uninstall.IsSet()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Uninstall.LogChanges()
    {
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_uninstall_changes_flag_=true
    }
User.Opts.Apps.All.Uninstall.Set()
    {
    [[ $_object_user_opts_apps_all_uninstall_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_uninstall_flag_=true
    [[ $_object_user_opts_apps_all_uninstall_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_uninstall_flag_
    }
User.Opts.Apps.All.Uninstall.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_uninstall_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_uninstall_text_"
    fi
    }
User.Opts.Apps.All.Uninstall.Init

User.Opts.Apps.All.Upgrade.Clear()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_upgrade_flag_=false
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_upgrade_flag_
    }
User.Opts.Apps.All.Upgrade.Disable()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ != 'true' ]] && return
    _object_user_opts_apps_all_upgrade_enable_=false
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_upgrade_enable_
    }
User.Opts.Apps.All.Upgrade.DontLogChanges()
    {
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_all_upgrade_changes_flag_=false
    }
User.Opts.Apps.All.Upgrade.Enable()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ = 'true' ]] && return
    _object_user_opts_apps_all_upgrade_enable_=true
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_upgrade_enable_
    }
User.Opts.Apps.All.Upgrade.Init()
    {
    _object_user_opts_apps_all_upgrade_text_=''
    _object_user_opts_apps_all_upgrade_flag_=false
    _object_user_opts_apps_all_upgrade_changes_flag_=true
    _object_user_opts_apps_all_upgrade_enable_=false
    }
User.Opts.Apps.All.Upgrade.IsDisabled()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ != 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsEnabled()
    {
    [[ $_object_user_opts_apps_all_upgrade_enable_ = 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsNot()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ != 'true' ]]
    }
User.Opts.Apps.All.Upgrade.IsSet()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ = 'true' ]]
    }
User.Opts.Apps.All.Upgrade.LogChanges()
    {
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_upgrade_changes_flag_=true
    }
User.Opts.Apps.All.Upgrade.Set()
    {
    [[ $_object_user_opts_apps_all_upgrade_flag_ = 'true' ]] && return
    _object_user_opts_apps_all_upgrade_flag_=true
    [[ $_object_user_opts_apps_all_upgrade_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_all_upgrade_flag_
    }
User.Opts.Apps.All.Upgrade.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_all_upgrade_text_=$2
    else
        echo -n "$_object_user_opts_apps_all_upgrade_text_"
    fi
    }
User.Opts.Apps.All.Upgrade.Init

User.Opts.Apps.List.All.Clear()
    {
    [[ $_object_user_opts_apps_list_all_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_all_flag_=false
    [[ $_object_user_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_all_flag_
    }
User.Opts.Apps.List.All.Disable()
    {
    [[ $_object_user_opts_apps_list_all_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_all_enable_=false
    [[ $_object_user_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_all_enable_
    }
User.Opts.Apps.List.All.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_all_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_all_changes_flag_=false
    }
User.Opts.Apps.List.All.Enable()
    {
    [[ $_object_user_opts_apps_list_all_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_all_enable_=true
    [[ $_object_user_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_all_enable_
    }
User.Opts.Apps.List.All.Init()
    {
    _object_user_opts_apps_list_all_text_=''
    _object_user_opts_apps_list_all_flag_=false
    _object_user_opts_apps_list_all_changes_flag_=true
    _object_user_opts_apps_list_all_enable_=false
    }
User.Opts.Apps.List.All.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_all_enable_ != 'true' ]]
    }
User.Opts.Apps.List.All.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_all_enable_ = 'true' ]]
    }
User.Opts.Apps.List.All.IsNot()
    {
    [[ $_object_user_opts_apps_list_all_flag_ != 'true' ]]
    }
User.Opts.Apps.List.All.IsSet()
    {
    [[ $_object_user_opts_apps_list_all_flag_ = 'true' ]]
    }
User.Opts.Apps.List.All.LogChanges()
    {
    [[ $_object_user_opts_apps_list_all_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_all_changes_flag_=true
    }
User.Opts.Apps.List.All.Set()
    {
    [[ $_object_user_opts_apps_list_all_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_all_flag_=true
    [[ $_object_user_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_all_flag_
    }
User.Opts.Apps.List.All.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_all_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_all_text_"
    fi
    }
User.Opts.Apps.List.All.Init

User.Opts.Apps.List.Essential.Clear()
    {
    [[ $_object_user_opts_apps_list_essential_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_essential_flag_=false
    [[ $_object_user_opts_apps_list_essential_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_essential_flag_
    }
User.Opts.Apps.List.Essential.Disable()
    {
    [[ $_object_user_opts_apps_list_essential_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_essential_enable_=false
    [[ $_object_user_opts_apps_list_essential_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_essential_enable_
    }
User.Opts.Apps.List.Essential.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_essential_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_essential_changes_flag_=false
    }
User.Opts.Apps.List.Essential.Enable()
    {
    [[ $_object_user_opts_apps_list_essential_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_essential_enable_=true
    [[ $_object_user_opts_apps_list_essential_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_essential_enable_
    }
User.Opts.Apps.List.Essential.Init()
    {
    _object_user_opts_apps_list_essential_text_=''
    _object_user_opts_apps_list_essential_flag_=false
    _object_user_opts_apps_list_essential_changes_flag_=true
    _object_user_opts_apps_list_essential_enable_=false
    }
User.Opts.Apps.List.Essential.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_essential_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Essential.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_essential_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Essential.IsNot()
    {
    [[ $_object_user_opts_apps_list_essential_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Essential.IsSet()
    {
    [[ $_object_user_opts_apps_list_essential_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Essential.LogChanges()
    {
    [[ $_object_user_opts_apps_list_essential_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_essential_changes_flag_=true
    }
User.Opts.Apps.List.Essential.Set()
    {
    [[ $_object_user_opts_apps_list_essential_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_essential_flag_=true
    [[ $_object_user_opts_apps_list_essential_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_essential_flag_
    }
User.Opts.Apps.List.Essential.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_essential_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_essential_text_"
    fi
    }
User.Opts.Apps.List.Essential.Init

User.Opts.Apps.List.Installed.Clear()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_installed_flag_=false
    [[ $_object_user_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_installed_flag_
    }
User.Opts.Apps.List.Installed.Disable()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_installed_enable_=false
    [[ $_object_user_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_installed_enable_
    }
User.Opts.Apps.List.Installed.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_installed_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_installed_changes_flag_=false
    }
User.Opts.Apps.List.Installed.Enable()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_installed_enable_=true
    [[ $_object_user_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_installed_enable_
    }
User.Opts.Apps.List.Installed.Init()
    {
    _object_user_opts_apps_list_installed_text_=''
    _object_user_opts_apps_list_installed_flag_=false
    _object_user_opts_apps_list_installed_changes_flag_=true
    _object_user_opts_apps_list_installed_enable_=false
    }
User.Opts.Apps.List.Installed.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Installed.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_installed_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Installed.IsNot()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Installed.IsSet()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Installed.LogChanges()
    {
    [[ $_object_user_opts_apps_list_installed_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_installed_changes_flag_=true
    }
User.Opts.Apps.List.Installed.Set()
    {
    [[ $_object_user_opts_apps_list_installed_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_installed_flag_=true
    [[ $_object_user_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_installed_flag_
    }
User.Opts.Apps.List.Installed.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_installed_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_installed_text_"
    fi
    }
User.Opts.Apps.List.Installed.Init

User.Opts.Apps.List.NotInstalled.Clear()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_flag_=false
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_notinstalled_flag_
    }
User.Opts.Apps.List.NotInstalled.Disable()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_enable_=false
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_notinstalled_enable_
    }
User.Opts.Apps.List.NotInstalled.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_changes_flag_=false
    }
User.Opts.Apps.List.NotInstalled.Enable()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_enable_=true
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_notinstalled_enable_
    }
User.Opts.Apps.List.NotInstalled.Init()
    {
    _object_user_opts_apps_list_notinstalled_text_=''
    _object_user_opts_apps_list_notinstalled_flag_=false
    _object_user_opts_apps_list_notinstalled_changes_flag_=true
    _object_user_opts_apps_list_notinstalled_enable_=false
    }
User.Opts.Apps.List.NotInstalled.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ != 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_notinstalled_enable_ = 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsNot()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ != 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.IsSet()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ = 'true' ]]
    }
User.Opts.Apps.List.NotInstalled.LogChanges()
    {
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_changes_flag_=true
    }
User.Opts.Apps.List.NotInstalled.Set()
    {
    [[ $_object_user_opts_apps_list_notinstalled_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_notinstalled_flag_=true
    [[ $_object_user_opts_apps_list_notinstalled_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_notinstalled_flag_
    }
User.Opts.Apps.List.NotInstalled.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_notinstalled_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_notinstalled_text_"
    fi
    }
User.Opts.Apps.List.NotInstalled.Init

User.Opts.Apps.List.Optional.Clear()
    {
    [[ $_object_user_opts_apps_list_optional_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_optional_flag_=false
    [[ $_object_user_opts_apps_list_optional_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_optional_flag_
    }
User.Opts.Apps.List.Optional.Disable()
    {
    [[ $_object_user_opts_apps_list_optional_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_optional_enable_=false
    [[ $_object_user_opts_apps_list_optional_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_optional_enable_
    }
User.Opts.Apps.List.Optional.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_optional_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_optional_changes_flag_=false
    }
User.Opts.Apps.List.Optional.Enable()
    {
    [[ $_object_user_opts_apps_list_optional_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_optional_enable_=true
    [[ $_object_user_opts_apps_list_optional_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_optional_enable_
    }
User.Opts.Apps.List.Optional.Init()
    {
    _object_user_opts_apps_list_optional_text_=''
    _object_user_opts_apps_list_optional_flag_=false
    _object_user_opts_apps_list_optional_changes_flag_=true
    _object_user_opts_apps_list_optional_enable_=false
    }
User.Opts.Apps.List.Optional.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_optional_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Optional.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_optional_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Optional.IsNot()
    {
    [[ $_object_user_opts_apps_list_optional_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Optional.IsSet()
    {
    [[ $_object_user_opts_apps_list_optional_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Optional.LogChanges()
    {
    [[ $_object_user_opts_apps_list_optional_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_optional_changes_flag_=true
    }
User.Opts.Apps.List.Optional.Set()
    {
    [[ $_object_user_opts_apps_list_optional_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_optional_flag_=true
    [[ $_object_user_opts_apps_list_optional_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_optional_flag_
    }
User.Opts.Apps.List.Optional.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_optional_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_optional_text_"
    fi
    }
User.Opts.Apps.List.Optional.Init

User.Opts.Apps.List.Standalone.Clear()
    {
    [[ $_object_user_opts_apps_list_standalone_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_standalone_flag_=false
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_standalone_flag_
    }
User.Opts.Apps.List.Standalone.Disable()
    {
    [[ $_object_user_opts_apps_list_standalone_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_standalone_enable_=false
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_standalone_enable_
    }
User.Opts.Apps.List.Standalone.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_standalone_changes_flag_=false
    }
User.Opts.Apps.List.Standalone.Enable()
    {
    [[ $_object_user_opts_apps_list_standalone_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_standalone_enable_=true
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_standalone_enable_
    }
User.Opts.Apps.List.Standalone.Init()
    {
    _object_user_opts_apps_list_standalone_text_=''
    _object_user_opts_apps_list_standalone_flag_=false
    _object_user_opts_apps_list_standalone_changes_flag_=true
    _object_user_opts_apps_list_standalone_enable_=false
    }
User.Opts.Apps.List.Standalone.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_standalone_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Standalone.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_standalone_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Standalone.IsNot()
    {
    [[ $_object_user_opts_apps_list_standalone_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Standalone.IsSet()
    {
    [[ $_object_user_opts_apps_list_standalone_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Standalone.LogChanges()
    {
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_standalone_changes_flag_=true
    }
User.Opts.Apps.List.Standalone.Set()
    {
    [[ $_object_user_opts_apps_list_standalone_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_standalone_flag_=true
    [[ $_object_user_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_standalone_flag_
    }
User.Opts.Apps.List.Standalone.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_standalone_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_standalone_text_"
    fi
    }
User.Opts.Apps.List.Standalone.Init

User.Opts.Apps.List.Started.Clear()
    {
    [[ $_object_user_opts_apps_list_started_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_started_flag_=false
    [[ $_object_user_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_started_flag_
    }
User.Opts.Apps.List.Started.Disable()
    {
    [[ $_object_user_opts_apps_list_started_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_started_enable_=false
    [[ $_object_user_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_started_enable_
    }
User.Opts.Apps.List.Started.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_started_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_started_changes_flag_=false
    }
User.Opts.Apps.List.Started.Enable()
    {
    [[ $_object_user_opts_apps_list_started_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_started_enable_=true
    [[ $_object_user_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_started_enable_
    }
User.Opts.Apps.List.Started.Init()
    {
    _object_user_opts_apps_list_started_text_=''
    _object_user_opts_apps_list_started_flag_=false
    _object_user_opts_apps_list_started_changes_flag_=true
    _object_user_opts_apps_list_started_enable_=false
    }
User.Opts.Apps.List.Started.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_started_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Started.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_started_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Started.IsNot()
    {
    [[ $_object_user_opts_apps_list_started_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Started.IsSet()
    {
    [[ $_object_user_opts_apps_list_started_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Started.LogChanges()
    {
    [[ $_object_user_opts_apps_list_started_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_started_changes_flag_=true
    }
User.Opts.Apps.List.Started.Set()
    {
    [[ $_object_user_opts_apps_list_started_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_started_flag_=true
    [[ $_object_user_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_started_flag_
    }
User.Opts.Apps.List.Started.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_started_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_started_text_"
    fi
    }
User.Opts.Apps.List.Started.Init

User.Opts.Apps.List.Stopped.Clear()
    {
    [[ $_object_user_opts_apps_list_stopped_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_stopped_flag_=false
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_stopped_flag_
    }
User.Opts.Apps.List.Stopped.Disable()
    {
    [[ $_object_user_opts_apps_list_stopped_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_stopped_enable_=false
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_stopped_enable_
    }
User.Opts.Apps.List.Stopped.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_stopped_changes_flag_=false
    }
User.Opts.Apps.List.Stopped.Enable()
    {
    [[ $_object_user_opts_apps_list_stopped_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_stopped_enable_=true
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_stopped_enable_
    }
User.Opts.Apps.List.Stopped.Init()
    {
    _object_user_opts_apps_list_stopped_text_=''
    _object_user_opts_apps_list_stopped_flag_=false
    _object_user_opts_apps_list_stopped_changes_flag_=true
    _object_user_opts_apps_list_stopped_enable_=false
    }
User.Opts.Apps.List.Stopped.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_stopped_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Stopped.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_stopped_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Stopped.IsNot()
    {
    [[ $_object_user_opts_apps_list_stopped_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Stopped.IsSet()
    {
    [[ $_object_user_opts_apps_list_stopped_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Stopped.LogChanges()
    {
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_stopped_changes_flag_=true
    }
User.Opts.Apps.List.Stopped.Set()
    {
    [[ $_object_user_opts_apps_list_stopped_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_stopped_flag_=true
    [[ $_object_user_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_stopped_flag_
    }
User.Opts.Apps.List.Stopped.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_stopped_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_stopped_text_"
    fi
    }
User.Opts.Apps.List.Stopped.Init

User.Opts.Apps.List.Upgradable.Clear()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_upgradable_flag_=false
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_upgradable_flag_
    }
User.Opts.Apps.List.Upgradable.Disable()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ != 'true' ]] && return
    _object_user_opts_apps_list_upgradable_enable_=false
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_upgradable_enable_
    }
User.Opts.Apps.List.Upgradable.DontLogChanges()
    {
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ != 'true' ]] && return
    _object_user_opts_apps_list_upgradable_changes_flag_=false
    }
User.Opts.Apps.List.Upgradable.Enable()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ = 'true' ]] && return
    _object_user_opts_apps_list_upgradable_enable_=true
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_upgradable_enable_
    }
User.Opts.Apps.List.Upgradable.Init()
    {
    _object_user_opts_apps_list_upgradable_text_=''
    _object_user_opts_apps_list_upgradable_flag_=false
    _object_user_opts_apps_list_upgradable_changes_flag_=true
    _object_user_opts_apps_list_upgradable_enable_=false
    }
User.Opts.Apps.List.Upgradable.IsDisabled()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ != 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsEnabled()
    {
    [[ $_object_user_opts_apps_list_upgradable_enable_ = 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsNot()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ != 'true' ]]
    }
User.Opts.Apps.List.Upgradable.IsSet()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ = 'true' ]]
    }
User.Opts.Apps.List.Upgradable.LogChanges()
    {
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_upgradable_changes_flag_=true
    }
User.Opts.Apps.List.Upgradable.Set()
    {
    [[ $_object_user_opts_apps_list_upgradable_flag_ = 'true' ]] && return
    _object_user_opts_apps_list_upgradable_flag_=true
    [[ $_object_user_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _object_user_opts_apps_list_upgradable_flag_
    }
User.Opts.Apps.List.Upgradable.Text()
    {
    if [[ -n $1 && $1 = "=" ]]; then
        _object_user_opts_apps_list_upgradable_text_=$2
    else
        echo -n "$_object_user_opts_apps_list_upgradable_text_"
    fi
    }
User.Opts.Apps.List.Upgradable.Init

Args.Unknown.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_args_unknown_array_[*]:-} " != *"$item"* ]] && _object_args_unknown_array_+=("$item")
    done
    }
Args.Unknown.Array()
    {
    echo -n "${_object_args_unknown_array_[@]:-}"
    }
Args.Unknown.Count()
    {
    echo "${#_object_args_unknown_array_[@]:-}"
    }
Args.Unknown.Exist()
    {
    [[ ${_object_args_unknown_array_[*]:-} == *"$1"* ]]
    }
Args.Unknown.First()
    {
    echo "${_object_args_unknown_array_[0]}"
    }
Args.Unknown.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_args_unknown_array_[@]:-} ]] && index=${#_object_args_unknown_array_[@]}
    echo -n "${_object_args_unknown_array_[((index-1))]}"
    }
Args.Unknown.Init()
    {
    _object_args_unknown_size_=0
    _object_args_unknown_array_=()
    _object_args_unknown_array_index_=1
    }
Args.Unknown.IsAny()
    {
    [[ ${#_object_args_unknown_array_[@]:-} -gt 0 ]]
    }
Args.Unknown.IsNone()
    {
    [[ ${#_object_args_unknown_array_[@]:-} -eq 0 ]]
    }
Args.Unknown.List()
    {
    echo -n "${_object_args_unknown_array_[*]:-}"
    }
Args.Unknown.ListCSV()
    {
    echo -n "${_object_args_unknown_array_[*]:-}" | tr ' ' ','
    }
Args.Unknown.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_args_unknown_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_args_unknown_array_=("${temp_array[@]:-}")
    [[ -z ${_object_args_unknown_array_[*]} ]] && _object_args_unknown_array_=()
    }
Args.Unknown.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_args_unknown_size_=$2
    else
        echo -n $_object_args_unknown_size_
    fi
    }
Args.Unknown.Init

IPKGs.ToDownload.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_ipkgs_todownload_array_[*]:-} " != *"$item"* ]] && _object_ipkgs_todownload_array_+=("$item")
    done
    }
IPKGs.ToDownload.Array()
    {
    echo -n "${_object_ipkgs_todownload_array_[@]:-}"
    }
IPKGs.ToDownload.Count()
    {
    echo "${#_object_ipkgs_todownload_array_[@]:-}"
    }
IPKGs.ToDownload.Exist()
    {
    [[ ${_object_ipkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToDownload.First()
    {
    echo "${_object_ipkgs_todownload_array_[0]}"
    }
IPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_ipkgs_todownload_array_[@]:-} ]] && index=${#_object_ipkgs_todownload_array_[@]}
    echo -n "${_object_ipkgs_todownload_array_[((index-1))]}"
    }
IPKGs.ToDownload.Init()
    {
    _object_ipkgs_todownload_size_=0
    _object_ipkgs_todownload_array_=()
    _object_ipkgs_todownload_array_index_=1
    }
IPKGs.ToDownload.IsAny()
    {
    [[ ${#_object_ipkgs_todownload_array_[@]:-} -gt 0 ]]
    }
IPKGs.ToDownload.IsNone()
    {
    [[ ${#_object_ipkgs_todownload_array_[@]:-} -eq 0 ]]
    }
IPKGs.ToDownload.List()
    {
    echo -n "${_object_ipkgs_todownload_array_[*]:-}"
    }
IPKGs.ToDownload.ListCSV()
    {
    echo -n "${_object_ipkgs_todownload_array_[*]:-}" | tr ' ' ','
    }
IPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_ipkgs_todownload_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_ipkgs_todownload_array_=("${temp_array[@]:-}")
    [[ -z ${_object_ipkgs_todownload_array_[*]} ]] && _object_ipkgs_todownload_array_=()
    }
IPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_ipkgs_todownload_size_=$2
    else
        echo -n $_object_ipkgs_todownload_size_
    fi
    }
IPKGs.ToDownload.Init

IPKGs.ToInstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_ipkgs_toinstall_array_[*]:-} " != *"$item"* ]] && _object_ipkgs_toinstall_array_+=("$item")
    done
    }
IPKGs.ToInstall.Array()
    {
    echo -n "${_object_ipkgs_toinstall_array_[@]:-}"
    }
IPKGs.ToInstall.Count()
    {
    echo "${#_object_ipkgs_toinstall_array_[@]:-}"
    }
IPKGs.ToInstall.Exist()
    {
    [[ ${_object_ipkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToInstall.First()
    {
    echo "${_object_ipkgs_toinstall_array_[0]}"
    }
IPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_ipkgs_toinstall_array_[@]:-} ]] && index=${#_object_ipkgs_toinstall_array_[@]}
    echo -n "${_object_ipkgs_toinstall_array_[((index-1))]}"
    }
IPKGs.ToInstall.Init()
    {
    _object_ipkgs_toinstall_size_=0
    _object_ipkgs_toinstall_array_=()
    _object_ipkgs_toinstall_array_index_=1
    }
IPKGs.ToInstall.IsAny()
    {
    [[ ${#_object_ipkgs_toinstall_array_[@]:-} -gt 0 ]]
    }
IPKGs.ToInstall.IsNone()
    {
    [[ ${#_object_ipkgs_toinstall_array_[@]:-} -eq 0 ]]
    }
IPKGs.ToInstall.List()
    {
    echo -n "${_object_ipkgs_toinstall_array_[*]:-}"
    }
IPKGs.ToInstall.ListCSV()
    {
    echo -n "${_object_ipkgs_toinstall_array_[*]:-}" | tr ' ' ','
    }
IPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_ipkgs_toinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_ipkgs_toinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_ipkgs_toinstall_array_[*]} ]] && _object_ipkgs_toinstall_array_=()
    }
IPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_ipkgs_toinstall_size_=$2
    else
        echo -n $_object_ipkgs_toinstall_size_
    fi
    }
IPKGs.ToInstall.Init

IPKGs.ToUninstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_ipkgs_touninstall_array_[*]:-} " != *"$item"* ]] && _object_ipkgs_touninstall_array_+=("$item")
    done
    }
IPKGs.ToUninstall.Array()
    {
    echo -n "${_object_ipkgs_touninstall_array_[@]:-}"
    }
IPKGs.ToUninstall.Count()
    {
    echo "${#_object_ipkgs_touninstall_array_[@]:-}"
    }
IPKGs.ToUninstall.Exist()
    {
    [[ ${_object_ipkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToUninstall.First()
    {
    echo "${_object_ipkgs_touninstall_array_[0]}"
    }
IPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_ipkgs_touninstall_array_[@]:-} ]] && index=${#_object_ipkgs_touninstall_array_[@]}
    echo -n "${_object_ipkgs_touninstall_array_[((index-1))]}"
    }
IPKGs.ToUninstall.Init()
    {
    _object_ipkgs_touninstall_size_=0
    _object_ipkgs_touninstall_array_=()
    _object_ipkgs_touninstall_array_index_=1
    }
IPKGs.ToUninstall.IsAny()
    {
    [[ ${#_object_ipkgs_touninstall_array_[@]:-} -gt 0 ]]
    }
IPKGs.ToUninstall.IsNone()
    {
    [[ ${#_object_ipkgs_touninstall_array_[@]:-} -eq 0 ]]
    }
IPKGs.ToUninstall.List()
    {
    echo -n "${_object_ipkgs_touninstall_array_[*]:-}"
    }
IPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_object_ipkgs_touninstall_array_[*]:-}" | tr ' ' ','
    }
IPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_ipkgs_touninstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_ipkgs_touninstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_ipkgs_touninstall_array_[*]} ]] && _object_ipkgs_touninstall_array_=()
    }
IPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_ipkgs_touninstall_size_=$2
    else
        echo -n $_object_ipkgs_touninstall_size_
    fi
    }
IPKGs.ToUninstall.Init

QPKGs.Essential.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_essential_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_essential_array_+=("$item")
    done
    }
QPKGs.Essential.Array()
    {
    echo -n "${_object_qpkgs_essential_array_[@]:-}"
    }
QPKGs.Essential.Count()
    {
    echo "${#_object_qpkgs_essential_array_[@]:-}"
    }
QPKGs.Essential.Exist()
    {
    [[ ${_object_qpkgs_essential_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Essential.First()
    {
    echo "${_object_qpkgs_essential_array_[0]}"
    }
QPKGs.Essential.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_essential_array_[@]:-} ]] && index=${#_object_qpkgs_essential_array_[@]}
    echo -n "${_object_qpkgs_essential_array_[((index-1))]}"
    }
QPKGs.Essential.Init()
    {
    _object_qpkgs_essential_size_=0
    _object_qpkgs_essential_array_=()
    _object_qpkgs_essential_array_index_=1
    }
QPKGs.Essential.IsAny()
    {
    [[ ${#_object_qpkgs_essential_array_[@]:-} -gt 0 ]]
    }
QPKGs.Essential.IsNone()
    {
    [[ ${#_object_qpkgs_essential_array_[@]:-} -eq 0 ]]
    }
QPKGs.Essential.List()
    {
    echo -n "${_object_qpkgs_essential_array_[*]:-}"
    }
QPKGs.Essential.ListCSV()
    {
    echo -n "${_object_qpkgs_essential_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Essential.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_essential_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_essential_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_essential_array_[*]} ]] && _object_qpkgs_essential_array_=()
    }
QPKGs.Essential.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_essential_size_=$2
    else
        echo -n $_object_qpkgs_essential_size_
    fi
    }
QPKGs.Essential.Init

QPKGs.Installable.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_installable_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_installable_array_+=("$item")
    done
    }
QPKGs.Installable.Array()
    {
    echo -n "${_object_qpkgs_installable_array_[@]:-}"
    }
QPKGs.Installable.Count()
    {
    echo "${#_object_qpkgs_installable_array_[@]:-}"
    }
QPKGs.Installable.Exist()
    {
    [[ ${_object_qpkgs_installable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Installable.First()
    {
    echo "${_object_qpkgs_installable_array_[0]}"
    }
QPKGs.Installable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_installable_array_[@]:-} ]] && index=${#_object_qpkgs_installable_array_[@]}
    echo -n "${_object_qpkgs_installable_array_[((index-1))]}"
    }
QPKGs.Installable.Init()
    {
    _object_qpkgs_installable_size_=0
    _object_qpkgs_installable_array_=()
    _object_qpkgs_installable_array_index_=1
    }
QPKGs.Installable.IsAny()
    {
    [[ ${#_object_qpkgs_installable_array_[@]:-} -gt 0 ]]
    }
QPKGs.Installable.IsNone()
    {
    [[ ${#_object_qpkgs_installable_array_[@]:-} -eq 0 ]]
    }
QPKGs.Installable.List()
    {
    echo -n "${_object_qpkgs_installable_array_[*]:-}"
    }
QPKGs.Installable.ListCSV()
    {
    echo -n "${_object_qpkgs_installable_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Installable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_installable_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_installable_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_installable_array_[*]} ]] && _object_qpkgs_installable_array_=()
    }
QPKGs.Installable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_installable_size_=$2
    else
        echo -n $_object_qpkgs_installable_size_
    fi
    }
QPKGs.Installable.Init

QPKGs.Missing.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_missing_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_missing_array_+=("$item")
    done
    }
QPKGs.Missing.Array()
    {
    echo -n "${_object_qpkgs_missing_array_[@]:-}"
    }
QPKGs.Missing.Count()
    {
    echo "${#_object_qpkgs_missing_array_[@]:-}"
    }
QPKGs.Missing.Exist()
    {
    [[ ${_object_qpkgs_missing_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Missing.First()
    {
    echo "${_object_qpkgs_missing_array_[0]}"
    }
QPKGs.Missing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_missing_array_[@]:-} ]] && index=${#_object_qpkgs_missing_array_[@]}
    echo -n "${_object_qpkgs_missing_array_[((index-1))]}"
    }
QPKGs.Missing.Init()
    {
    _object_qpkgs_missing_size_=0
    _object_qpkgs_missing_array_=()
    _object_qpkgs_missing_array_index_=1
    }
QPKGs.Missing.IsAny()
    {
    [[ ${#_object_qpkgs_missing_array_[@]:-} -gt 0 ]]
    }
QPKGs.Missing.IsNone()
    {
    [[ ${#_object_qpkgs_missing_array_[@]:-} -eq 0 ]]
    }
QPKGs.Missing.List()
    {
    echo -n "${_object_qpkgs_missing_array_[*]:-}"
    }
QPKGs.Missing.ListCSV()
    {
    echo -n "${_object_qpkgs_missing_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Missing.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_missing_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_missing_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_missing_array_[*]} ]] && _object_qpkgs_missing_array_=()
    }
QPKGs.Missing.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_missing_size_=$2
    else
        echo -n $_object_qpkgs_missing_size_
    fi
    }
QPKGs.Missing.Init

QPKGs.Names.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_names_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_names_array_+=("$item")
    done
    }
QPKGs.Names.Array()
    {
    echo -n "${_object_qpkgs_names_array_[@]:-}"
    }
QPKGs.Names.Count()
    {
    echo "${#_object_qpkgs_names_array_[@]:-}"
    }
QPKGs.Names.Exist()
    {
    [[ ${_object_qpkgs_names_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Names.First()
    {
    echo "${_object_qpkgs_names_array_[0]}"
    }
QPKGs.Names.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_names_array_[@]:-} ]] && index=${#_object_qpkgs_names_array_[@]}
    echo -n "${_object_qpkgs_names_array_[((index-1))]}"
    }
QPKGs.Names.Init()
    {
    _object_qpkgs_names_size_=0
    _object_qpkgs_names_array_=()
    _object_qpkgs_names_array_index_=1
    }
QPKGs.Names.IsAny()
    {
    [[ ${#_object_qpkgs_names_array_[@]:-} -gt 0 ]]
    }
QPKGs.Names.IsNone()
    {
    [[ ${#_object_qpkgs_names_array_[@]:-} -eq 0 ]]
    }
QPKGs.Names.List()
    {
    echo -n "${_object_qpkgs_names_array_[*]:-}"
    }
QPKGs.Names.ListCSV()
    {
    echo -n "${_object_qpkgs_names_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Names.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_names_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_names_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_names_array_[*]} ]] && _object_qpkgs_names_array_=()
    }
QPKGs.Names.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_names_size_=$2
    else
        echo -n $_object_qpkgs_names_size_
    fi
    }
QPKGs.Names.Init

QPKGs.Optional.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_optional_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_optional_array_+=("$item")
    done
    }
QPKGs.Optional.Array()
    {
    echo -n "${_object_qpkgs_optional_array_[@]:-}"
    }
QPKGs.Optional.Count()
    {
    echo "${#_object_qpkgs_optional_array_[@]:-}"
    }
QPKGs.Optional.Exist()
    {
    [[ ${_object_qpkgs_optional_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Optional.First()
    {
    echo "${_object_qpkgs_optional_array_[0]}"
    }
QPKGs.Optional.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_optional_array_[@]:-} ]] && index=${#_object_qpkgs_optional_array_[@]}
    echo -n "${_object_qpkgs_optional_array_[((index-1))]}"
    }
QPKGs.Optional.Init()
    {
    _object_qpkgs_optional_size_=0
    _object_qpkgs_optional_array_=()
    _object_qpkgs_optional_array_index_=1
    }
QPKGs.Optional.IsAny()
    {
    [[ ${#_object_qpkgs_optional_array_[@]:-} -gt 0 ]]
    }
QPKGs.Optional.IsNone()
    {
    [[ ${#_object_qpkgs_optional_array_[@]:-} -eq 0 ]]
    }
QPKGs.Optional.List()
    {
    echo -n "${_object_qpkgs_optional_array_[*]:-}"
    }
QPKGs.Optional.ListCSV()
    {
    echo -n "${_object_qpkgs_optional_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Optional.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_optional_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_optional_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_optional_array_[*]} ]] && _object_qpkgs_optional_array_=()
    }
QPKGs.Optional.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_optional_size_=$2
    else
        echo -n $_object_qpkgs_optional_size_
    fi
    }
QPKGs.Optional.Init

QPKGs.Standalone.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_standalone_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_standalone_array_+=("$item")
    done
    }
QPKGs.Standalone.Array()
    {
    echo -n "${_object_qpkgs_standalone_array_[@]:-}"
    }
QPKGs.Standalone.Count()
    {
    echo "${#_object_qpkgs_standalone_array_[@]:-}"
    }
QPKGs.Standalone.Exist()
    {
    [[ ${_object_qpkgs_standalone_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Standalone.First()
    {
    echo "${_object_qpkgs_standalone_array_[0]}"
    }
QPKGs.Standalone.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_standalone_array_[@]:-} ]] && index=${#_object_qpkgs_standalone_array_[@]}
    echo -n "${_object_qpkgs_standalone_array_[((index-1))]}"
    }
QPKGs.Standalone.Init()
    {
    _object_qpkgs_standalone_size_=0
    _object_qpkgs_standalone_array_=()
    _object_qpkgs_standalone_array_index_=1
    }
QPKGs.Standalone.IsAny()
    {
    [[ ${#_object_qpkgs_standalone_array_[@]:-} -gt 0 ]]
    }
QPKGs.Standalone.IsNone()
    {
    [[ ${#_object_qpkgs_standalone_array_[@]:-} -eq 0 ]]
    }
QPKGs.Standalone.List()
    {
    echo -n "${_object_qpkgs_standalone_array_[*]:-}"
    }
QPKGs.Standalone.ListCSV()
    {
    echo -n "${_object_qpkgs_standalone_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Standalone.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_standalone_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_standalone_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_standalone_array_[*]} ]] && _object_qpkgs_standalone_array_=()
    }
QPKGs.Standalone.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_standalone_size_=$2
    else
        echo -n $_object_qpkgs_standalone_size_
    fi
    }
QPKGs.Standalone.Init

QPKGs.Upgradable.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_upgradable_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_upgradable_array_+=("$item")
    done
    }
QPKGs.Upgradable.Array()
    {
    echo -n "${_object_qpkgs_upgradable_array_[@]:-}"
    }
QPKGs.Upgradable.Count()
    {
    echo "${#_object_qpkgs_upgradable_array_[@]:-}"
    }
QPKGs.Upgradable.Exist()
    {
    [[ ${_object_qpkgs_upgradable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Upgradable.First()
    {
    echo "${_object_qpkgs_upgradable_array_[0]}"
    }
QPKGs.Upgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_upgradable_array_[@]:-} ]] && index=${#_object_qpkgs_upgradable_array_[@]}
    echo -n "${_object_qpkgs_upgradable_array_[((index-1))]}"
    }
QPKGs.Upgradable.Init()
    {
    _object_qpkgs_upgradable_size_=0
    _object_qpkgs_upgradable_array_=()
    _object_qpkgs_upgradable_array_index_=1
    }
QPKGs.Upgradable.IsAny()
    {
    [[ ${#_object_qpkgs_upgradable_array_[@]:-} -gt 0 ]]
    }
QPKGs.Upgradable.IsNone()
    {
    [[ ${#_object_qpkgs_upgradable_array_[@]:-} -eq 0 ]]
    }
QPKGs.Upgradable.List()
    {
    echo -n "${_object_qpkgs_upgradable_array_[*]:-}"
    }
QPKGs.Upgradable.ListCSV()
    {
    echo -n "${_object_qpkgs_upgradable_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Upgradable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_upgradable_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_upgradable_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_upgradable_array_[*]} ]] && _object_qpkgs_upgradable_array_=()
    }
QPKGs.Upgradable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_upgradable_size_=$2
    else
        echo -n $_object_qpkgs_upgradable_size_
    fi
    }
QPKGs.Upgradable.Init

QPKGs.Enabled.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_enabled_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_enabled_array_+=("$item")
    done
    }
QPKGs.Enabled.Array()
    {
    echo -n "${_object_qpkgs_enabled_array_[@]:-}"
    }
QPKGs.Enabled.Count()
    {
    echo "${#_object_qpkgs_enabled_array_[@]:-}"
    }
QPKGs.Enabled.Exist()
    {
    [[ ${_object_qpkgs_enabled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Enabled.First()
    {
    echo "${_object_qpkgs_enabled_array_[0]}"
    }
QPKGs.Enabled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_enabled_array_[@]:-} ]] && index=${#_object_qpkgs_enabled_array_[@]}
    echo -n "${_object_qpkgs_enabled_array_[((index-1))]}"
    }
QPKGs.Enabled.Init()
    {
    _object_qpkgs_enabled_size_=0
    _object_qpkgs_enabled_array_=()
    _object_qpkgs_enabled_array_index_=1
    }
QPKGs.Enabled.IsAny()
    {
    [[ ${#_object_qpkgs_enabled_array_[@]:-} -gt 0 ]]
    }
QPKGs.Enabled.IsNone()
    {
    [[ ${#_object_qpkgs_enabled_array_[@]:-} -eq 0 ]]
    }
QPKGs.Enabled.List()
    {
    echo -n "${_object_qpkgs_enabled_array_[*]:-}"
    }
QPKGs.Enabled.ListCSV()
    {
    echo -n "${_object_qpkgs_enabled_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Enabled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_enabled_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_enabled_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_enabled_array_[*]} ]] && _object_qpkgs_enabled_array_=()
    }
QPKGs.Enabled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_enabled_size_=$2
    else
        echo -n $_object_qpkgs_enabled_size_
    fi
    }
QPKGs.Enabled.Init

QPKGs.NotEnabled.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_notenabled_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_notenabled_array_+=("$item")
    done
    }
QPKGs.NotEnabled.Array()
    {
    echo -n "${_object_qpkgs_notenabled_array_[@]:-}"
    }
QPKGs.NotEnabled.Count()
    {
    echo "${#_object_qpkgs_notenabled_array_[@]:-}"
    }
QPKGs.NotEnabled.Exist()
    {
    [[ ${_object_qpkgs_notenabled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.NotEnabled.First()
    {
    echo "${_object_qpkgs_notenabled_array_[0]}"
    }
QPKGs.NotEnabled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_notenabled_array_[@]:-} ]] && index=${#_object_qpkgs_notenabled_array_[@]}
    echo -n "${_object_qpkgs_notenabled_array_[((index-1))]}"
    }
QPKGs.NotEnabled.Init()
    {
    _object_qpkgs_notenabled_size_=0
    _object_qpkgs_notenabled_array_=()
    _object_qpkgs_notenabled_array_index_=1
    }
QPKGs.NotEnabled.IsAny()
    {
    [[ ${#_object_qpkgs_notenabled_array_[@]:-} -gt 0 ]]
    }
QPKGs.NotEnabled.IsNone()
    {
    [[ ${#_object_qpkgs_notenabled_array_[@]:-} -eq 0 ]]
    }
QPKGs.NotEnabled.List()
    {
    echo -n "${_object_qpkgs_notenabled_array_[*]:-}"
    }
QPKGs.NotEnabled.ListCSV()
    {
    echo -n "${_object_qpkgs_notenabled_array_[*]:-}" | tr ' ' ','
    }
QPKGs.NotEnabled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_notenabled_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_notenabled_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_notenabled_array_[*]} ]] && _object_qpkgs_notenabled_array_=()
    }
QPKGs.NotEnabled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_notenabled_size_=$2
    else
        echo -n $_object_qpkgs_notenabled_size_
    fi
    }
QPKGs.NotEnabled.Init

QPKGs.Installed.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_installed_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_installed_array_+=("$item")
    done
    }
QPKGs.Installed.Array()
    {
    echo -n "${_object_qpkgs_installed_array_[@]:-}"
    }
QPKGs.Installed.Count()
    {
    echo "${#_object_qpkgs_installed_array_[@]:-}"
    }
QPKGs.Installed.Exist()
    {
    [[ ${_object_qpkgs_installed_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Installed.First()
    {
    echo "${_object_qpkgs_installed_array_[0]}"
    }
QPKGs.Installed.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_installed_array_[@]:-} ]] && index=${#_object_qpkgs_installed_array_[@]}
    echo -n "${_object_qpkgs_installed_array_[((index-1))]}"
    }
QPKGs.Installed.Init()
    {
    _object_qpkgs_installed_size_=0
    _object_qpkgs_installed_array_=()
    _object_qpkgs_installed_array_index_=1
    }
QPKGs.Installed.IsAny()
    {
    [[ ${#_object_qpkgs_installed_array_[@]:-} -gt 0 ]]
    }
QPKGs.Installed.IsNone()
    {
    [[ ${#_object_qpkgs_installed_array_[@]:-} -eq 0 ]]
    }
QPKGs.Installed.List()
    {
    echo -n "${_object_qpkgs_installed_array_[*]:-}"
    }
QPKGs.Installed.ListCSV()
    {
    echo -n "${_object_qpkgs_installed_array_[*]:-}" | tr ' ' ','
    }
QPKGs.Installed.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_installed_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_installed_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_installed_array_[*]} ]] && _object_qpkgs_installed_array_=()
    }
QPKGs.Installed.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_installed_size_=$2
    else
        echo -n $_object_qpkgs_installed_size_
    fi
    }
QPKGs.Installed.Init

QPKGs.NotInstalled.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_notinstalled_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_notinstalled_array_+=("$item")
    done
    }
QPKGs.NotInstalled.Array()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[@]:-}"
    }
QPKGs.NotInstalled.Count()
    {
    echo "${#_object_qpkgs_notinstalled_array_[@]:-}"
    }
QPKGs.NotInstalled.Exist()
    {
    [[ ${_object_qpkgs_notinstalled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.NotInstalled.First()
    {
    echo "${_object_qpkgs_notinstalled_array_[0]}"
    }
QPKGs.NotInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_notinstalled_array_[@]:-} ]] && index=${#_object_qpkgs_notinstalled_array_[@]}
    echo -n "${_object_qpkgs_notinstalled_array_[((index-1))]}"
    }
QPKGs.NotInstalled.Init()
    {
    _object_qpkgs_notinstalled_size_=0
    _object_qpkgs_notinstalled_array_=()
    _object_qpkgs_notinstalled_array_index_=1
    }
QPKGs.NotInstalled.IsAny()
    {
    [[ ${#_object_qpkgs_notinstalled_array_[@]:-} -gt 0 ]]
    }
QPKGs.NotInstalled.IsNone()
    {
    [[ ${#_object_qpkgs_notinstalled_array_[@]:-} -eq 0 ]]
    }
QPKGs.NotInstalled.List()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[*]:-}"
    }
QPKGs.NotInstalled.ListCSV()
    {
    echo -n "${_object_qpkgs_notinstalled_array_[*]:-}" | tr ' ' ','
    }
QPKGs.NotInstalled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_notinstalled_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_notinstalled_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_notinstalled_array_[*]} ]] && _object_qpkgs_notinstalled_array_=()
    }
QPKGs.NotInstalled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_notinstalled_size_=$2
    else
        echo -n $_object_qpkgs_notinstalled_size_
    fi
    }
QPKGs.NotInstalled.Init

QPKGs.SupportsBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_supportsbackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_supportsbackup_array_+=("$item")
    done
    }
QPKGs.SupportsBackup.Array()
    {
    echo -n "${_object_qpkgs_supportsbackup_array_[@]:-}"
    }
QPKGs.SupportsBackup.Count()
    {
    echo "${#_object_qpkgs_supportsbackup_array_[@]:-}"
    }
QPKGs.SupportsBackup.Exist()
    {
    [[ ${_object_qpkgs_supportsbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SupportsBackup.First()
    {
    echo "${_object_qpkgs_supportsbackup_array_[0]}"
    }
QPKGs.SupportsBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_supportsbackup_array_[@]:-} ]] && index=${#_object_qpkgs_supportsbackup_array_[@]}
    echo -n "${_object_qpkgs_supportsbackup_array_[((index-1))]}"
    }
QPKGs.SupportsBackup.Init()
    {
    _object_qpkgs_supportsbackup_size_=0
    _object_qpkgs_supportsbackup_array_=()
    _object_qpkgs_supportsbackup_array_index_=1
    }
QPKGs.SupportsBackup.IsAny()
    {
    [[ ${#_object_qpkgs_supportsbackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.SupportsBackup.IsNone()
    {
    [[ ${#_object_qpkgs_supportsbackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.SupportsBackup.List()
    {
    echo -n "${_object_qpkgs_supportsbackup_array_[*]:-}"
    }
QPKGs.SupportsBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_supportsbackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SupportsBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_supportsbackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_supportsbackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_supportsbackup_array_[*]} ]] && _object_qpkgs_supportsbackup_array_=()
    }
QPKGs.SupportsBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_supportsbackup_size_=$2
    else
        echo -n $_object_qpkgs_supportsbackup_size_
    fi
    }
QPKGs.SupportsBackup.Init

QPKGs.NotSupportsBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_notsupportsbackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_notsupportsbackup_array_+=("$item")
    done
    }
QPKGs.NotSupportsBackup.Array()
    {
    echo -n "${_object_qpkgs_notsupportsbackup_array_[@]:-}"
    }
QPKGs.NotSupportsBackup.Count()
    {
    echo "${#_object_qpkgs_notsupportsbackup_array_[@]:-}"
    }
QPKGs.NotSupportsBackup.Exist()
    {
    [[ ${_object_qpkgs_notsupportsbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.NotSupportsBackup.First()
    {
    echo "${_object_qpkgs_notsupportsbackup_array_[0]}"
    }
QPKGs.NotSupportsBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_notsupportsbackup_array_[@]:-} ]] && index=${#_object_qpkgs_notsupportsbackup_array_[@]}
    echo -n "${_object_qpkgs_notsupportsbackup_array_[((index-1))]}"
    }
QPKGs.NotSupportsBackup.Init()
    {
    _object_qpkgs_notsupportsbackup_size_=0
    _object_qpkgs_notsupportsbackup_array_=()
    _object_qpkgs_notsupportsbackup_array_index_=1
    }
QPKGs.NotSupportsBackup.IsAny()
    {
    [[ ${#_object_qpkgs_notsupportsbackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.NotSupportsBackup.IsNone()
    {
    [[ ${#_object_qpkgs_notsupportsbackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.NotSupportsBackup.List()
    {
    echo -n "${_object_qpkgs_notsupportsbackup_array_[*]:-}"
    }
QPKGs.NotSupportsBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_notsupportsbackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.NotSupportsBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_notsupportsbackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_notsupportsbackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_notsupportsbackup_array_[*]} ]] && _object_qpkgs_notsupportsbackup_array_=()
    }
QPKGs.NotSupportsBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_notsupportsbackup_size_=$2
    else
        echo -n $_object_qpkgs_notsupportsbackup_size_
    fi
    }
QPKGs.NotSupportsBackup.Init

QPKGs.SupportsUpdateOnRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_supportsupdateonrestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_supportsupdateonrestart_array_+=("$item")
    done
    }
QPKGs.SupportsUpdateOnRestart.Array()
    {
    echo -n "${_object_qpkgs_supportsupdateonrestart_array_[@]:-}"
    }
QPKGs.SupportsUpdateOnRestart.Count()
    {
    echo "${#_object_qpkgs_supportsupdateonrestart_array_[@]:-}"
    }
QPKGs.SupportsUpdateOnRestart.Exist()
    {
    [[ ${_object_qpkgs_supportsupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SupportsUpdateOnRestart.First()
    {
    echo "${_object_qpkgs_supportsupdateonrestart_array_[0]}"
    }
QPKGs.SupportsUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_supportsupdateonrestart_array_[@]:-} ]] && index=${#_object_qpkgs_supportsupdateonrestart_array_[@]}
    echo -n "${_object_qpkgs_supportsupdateonrestart_array_[((index-1))]}"
    }
QPKGs.SupportsUpdateOnRestart.Init()
    {
    _object_qpkgs_supportsupdateonrestart_size_=0
    _object_qpkgs_supportsupdateonrestart_array_=()
    _object_qpkgs_supportsupdateonrestart_array_index_=1
    }
QPKGs.SupportsUpdateOnRestart.IsAny()
    {
    [[ ${#_object_qpkgs_supportsupdateonrestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.SupportsUpdateOnRestart.IsNone()
    {
    [[ ${#_object_qpkgs_supportsupdateonrestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.SupportsUpdateOnRestart.List()
    {
    echo -n "${_object_qpkgs_supportsupdateonrestart_array_[*]:-}"
    }
QPKGs.SupportsUpdateOnRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_supportsupdateonrestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SupportsUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_supportsupdateonrestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_supportsupdateonrestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_supportsupdateonrestart_array_[*]} ]] && _object_qpkgs_supportsupdateonrestart_array_=()
    }
QPKGs.SupportsUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_supportsupdateonrestart_size_=$2
    else
        echo -n $_object_qpkgs_supportsupdateonrestart_size_
    fi
    }
QPKGs.SupportsUpdateOnRestart.Init

QPKGs.NotSupportsUpdateOnRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_notsupportsupdateonrestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_notsupportsupdateonrestart_array_+=("$item")
    done
    }
QPKGs.NotSupportsUpdateOnRestart.Array()
    {
    echo -n "${_object_qpkgs_notsupportsupdateonrestart_array_[@]:-}"
    }
QPKGs.NotSupportsUpdateOnRestart.Count()
    {
    echo "${#_object_qpkgs_notsupportsupdateonrestart_array_[@]:-}"
    }
QPKGs.NotSupportsUpdateOnRestart.Exist()
    {
    [[ ${_object_qpkgs_notsupportsupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.NotSupportsUpdateOnRestart.First()
    {
    echo "${_object_qpkgs_notsupportsupdateonrestart_array_[0]}"
    }
QPKGs.NotSupportsUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_notsupportsupdateonrestart_array_[@]:-} ]] && index=${#_object_qpkgs_notsupportsupdateonrestart_array_[@]}
    echo -n "${_object_qpkgs_notsupportsupdateonrestart_array_[((index-1))]}"
    }
QPKGs.NotSupportsUpdateOnRestart.Init()
    {
    _object_qpkgs_notsupportsupdateonrestart_size_=0
    _object_qpkgs_notsupportsupdateonrestart_array_=()
    _object_qpkgs_notsupportsupdateonrestart_array_index_=1
    }
QPKGs.NotSupportsUpdateOnRestart.IsAny()
    {
    [[ ${#_object_qpkgs_notsupportsupdateonrestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.NotSupportsUpdateOnRestart.IsNone()
    {
    [[ ${#_object_qpkgs_notsupportsupdateonrestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.NotSupportsUpdateOnRestart.List()
    {
    echo -n "${_object_qpkgs_notsupportsupdateonrestart_array_[*]:-}"
    }
QPKGs.NotSupportsUpdateOnRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_notsupportsupdateonrestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.NotSupportsUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_notsupportsupdateonrestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_notsupportsupdateonrestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_notsupportsupdateonrestart_array_[*]} ]] && _object_qpkgs_notsupportsupdateonrestart_array_=()
    }
QPKGs.NotSupportsUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_notsupportsupdateonrestart_size_=$2
    else
        echo -n $_object_qpkgs_notsupportsupdateonrestart_size_
    fi
    }
QPKGs.NotSupportsUpdateOnRestart.Init

QPKGs.ToBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_tobackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_tobackup_array_+=("$item")
    done
    }
QPKGs.ToBackup.Array()
    {
    echo -n "${_object_qpkgs_tobackup_array_[@]:-}"
    }
QPKGs.ToBackup.Count()
    {
    echo "${#_object_qpkgs_tobackup_array_[@]:-}"
    }
QPKGs.ToBackup.Exist()
    {
    [[ ${_object_qpkgs_tobackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToBackup.First()
    {
    echo "${_object_qpkgs_tobackup_array_[0]}"
    }
QPKGs.ToBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_tobackup_array_[@]:-} ]] && index=${#_object_qpkgs_tobackup_array_[@]}
    echo -n "${_object_qpkgs_tobackup_array_[((index-1))]}"
    }
QPKGs.ToBackup.Init()
    {
    _object_qpkgs_tobackup_size_=0
    _object_qpkgs_tobackup_array_=()
    _object_qpkgs_tobackup_array_index_=1
    }
QPKGs.ToBackup.IsAny()
    {
    [[ ${#_object_qpkgs_tobackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToBackup.IsNone()
    {
    [[ ${#_object_qpkgs_tobackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToBackup.List()
    {
    echo -n "${_object_qpkgs_tobackup_array_[*]:-}"
    }
QPKGs.ToBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_tobackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_tobackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_tobackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_tobackup_array_[*]} ]] && _object_qpkgs_tobackup_array_=()
    }
QPKGs.ToBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_tobackup_size_=$2
    else
        echo -n $_object_qpkgs_tobackup_size_
    fi
    }
QPKGs.ToBackup.Init

QPKGs.IsBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isbackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isbackup_array_+=("$item")
    done
    }
QPKGs.IsBackup.Array()
    {
    echo -n "${_object_qpkgs_isbackup_array_[@]:-}"
    }
QPKGs.IsBackup.Count()
    {
    echo "${#_object_qpkgs_isbackup_array_[@]:-}"
    }
QPKGs.IsBackup.Exist()
    {
    [[ ${_object_qpkgs_isbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsBackup.First()
    {
    echo "${_object_qpkgs_isbackup_array_[0]}"
    }
QPKGs.IsBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isbackup_array_[@]:-} ]] && index=${#_object_qpkgs_isbackup_array_[@]}
    echo -n "${_object_qpkgs_isbackup_array_[((index-1))]}"
    }
QPKGs.IsBackup.Init()
    {
    _object_qpkgs_isbackup_size_=0
    _object_qpkgs_isbackup_array_=()
    _object_qpkgs_isbackup_array_index_=1
    }
QPKGs.IsBackup.IsAny()
    {
    [[ ${#_object_qpkgs_isbackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsBackup.IsNone()
    {
    [[ ${#_object_qpkgs_isbackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsBackup.List()
    {
    echo -n "${_object_qpkgs_isbackup_array_[*]:-}"
    }
QPKGs.IsBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_isbackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isbackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isbackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isbackup_array_[*]} ]] && _object_qpkgs_isbackup_array_=()
    }
QPKGs.IsBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isbackup_size_=$2
    else
        echo -n $_object_qpkgs_isbackup_size_
    fi
    }
QPKGs.IsBackup.Init

QPKGs.ErBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erbackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erbackup_array_+=("$item")
    done
    }
QPKGs.ErBackup.Array()
    {
    echo -n "${_object_qpkgs_erbackup_array_[@]:-}"
    }
QPKGs.ErBackup.Count()
    {
    echo "${#_object_qpkgs_erbackup_array_[@]:-}"
    }
QPKGs.ErBackup.Exist()
    {
    [[ ${_object_qpkgs_erbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErBackup.First()
    {
    echo "${_object_qpkgs_erbackup_array_[0]}"
    }
QPKGs.ErBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erbackup_array_[@]:-} ]] && index=${#_object_qpkgs_erbackup_array_[@]}
    echo -n "${_object_qpkgs_erbackup_array_[((index-1))]}"
    }
QPKGs.ErBackup.Init()
    {
    _object_qpkgs_erbackup_size_=0
    _object_qpkgs_erbackup_array_=()
    _object_qpkgs_erbackup_array_index_=1
    }
QPKGs.ErBackup.IsAny()
    {
    [[ ${#_object_qpkgs_erbackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErBackup.IsNone()
    {
    [[ ${#_object_qpkgs_erbackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErBackup.List()
    {
    echo -n "${_object_qpkgs_erbackup_array_[*]:-}"
    }
QPKGs.ErBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_erbackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erbackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erbackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erbackup_array_[*]} ]] && _object_qpkgs_erbackup_array_=()
    }
QPKGs.ErBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erbackup_size_=$2
    else
        echo -n $_object_qpkgs_erbackup_size_
    fi
    }
QPKGs.ErBackup.Init

QPKGs.SkBackup.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skbackup_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skbackup_array_+=("$item")
    done
    }
QPKGs.SkBackup.Array()
    {
    echo -n "${_object_qpkgs_skbackup_array_[@]:-}"
    }
QPKGs.SkBackup.Count()
    {
    echo "${#_object_qpkgs_skbackup_array_[@]:-}"
    }
QPKGs.SkBackup.Exist()
    {
    [[ ${_object_qpkgs_skbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkBackup.First()
    {
    echo "${_object_qpkgs_skbackup_array_[0]}"
    }
QPKGs.SkBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skbackup_array_[@]:-} ]] && index=${#_object_qpkgs_skbackup_array_[@]}
    echo -n "${_object_qpkgs_skbackup_array_[((index-1))]}"
    }
QPKGs.SkBackup.Init()
    {
    _object_qpkgs_skbackup_size_=0
    _object_qpkgs_skbackup_array_=()
    _object_qpkgs_skbackup_array_index_=1
    }
QPKGs.SkBackup.IsAny()
    {
    [[ ${#_object_qpkgs_skbackup_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkBackup.IsNone()
    {
    [[ ${#_object_qpkgs_skbackup_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkBackup.List()
    {
    echo -n "${_object_qpkgs_skbackup_array_[*]:-}"
    }
QPKGs.SkBackup.ListCSV()
    {
    echo -n "${_object_qpkgs_skbackup_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skbackup_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skbackup_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skbackup_array_[*]} ]] && _object_qpkgs_skbackup_array_=()
    }
QPKGs.SkBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skbackup_size_=$2
    else
        echo -n $_object_qpkgs_skbackup_size_
    fi
    }
QPKGs.SkBackup.Init

QPKGs.ToDownload.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_todownload_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_todownload_array_+=("$item")
    done
    }
QPKGs.ToDownload.Array()
    {
    echo -n "${_object_qpkgs_todownload_array_[@]:-}"
    }
QPKGs.ToDownload.Count()
    {
    echo "${#_object_qpkgs_todownload_array_[@]:-}"
    }
QPKGs.ToDownload.Exist()
    {
    [[ ${_object_qpkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToDownload.First()
    {
    echo "${_object_qpkgs_todownload_array_[0]}"
    }
QPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_todownload_array_[@]:-} ]] && index=${#_object_qpkgs_todownload_array_[@]}
    echo -n "${_object_qpkgs_todownload_array_[((index-1))]}"
    }
QPKGs.ToDownload.Init()
    {
    _object_qpkgs_todownload_size_=0
    _object_qpkgs_todownload_array_=()
    _object_qpkgs_todownload_array_index_=1
    }
QPKGs.ToDownload.IsAny()
    {
    [[ ${#_object_qpkgs_todownload_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToDownload.IsNone()
    {
    [[ ${#_object_qpkgs_todownload_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToDownload.List()
    {
    echo -n "${_object_qpkgs_todownload_array_[*]:-}"
    }
QPKGs.ToDownload.ListCSV()
    {
    echo -n "${_object_qpkgs_todownload_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_todownload_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_todownload_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_todownload_array_[*]} ]] && _object_qpkgs_todownload_array_=()
    }
QPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_todownload_size_=$2
    else
        echo -n $_object_qpkgs_todownload_size_
    fi
    }
QPKGs.ToDownload.Init

QPKGs.IsDownload.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isdownload_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isdownload_array_+=("$item")
    done
    }
QPKGs.IsDownload.Array()
    {
    echo -n "${_object_qpkgs_isdownload_array_[@]:-}"
    }
QPKGs.IsDownload.Count()
    {
    echo "${#_object_qpkgs_isdownload_array_[@]:-}"
    }
QPKGs.IsDownload.Exist()
    {
    [[ ${_object_qpkgs_isdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsDownload.First()
    {
    echo "${_object_qpkgs_isdownload_array_[0]}"
    }
QPKGs.IsDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isdownload_array_[@]:-} ]] && index=${#_object_qpkgs_isdownload_array_[@]}
    echo -n "${_object_qpkgs_isdownload_array_[((index-1))]}"
    }
QPKGs.IsDownload.Init()
    {
    _object_qpkgs_isdownload_size_=0
    _object_qpkgs_isdownload_array_=()
    _object_qpkgs_isdownload_array_index_=1
    }
QPKGs.IsDownload.IsAny()
    {
    [[ ${#_object_qpkgs_isdownload_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsDownload.IsNone()
    {
    [[ ${#_object_qpkgs_isdownload_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsDownload.List()
    {
    echo -n "${_object_qpkgs_isdownload_array_[*]:-}"
    }
QPKGs.IsDownload.ListCSV()
    {
    echo -n "${_object_qpkgs_isdownload_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isdownload_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isdownload_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isdownload_array_[*]} ]] && _object_qpkgs_isdownload_array_=()
    }
QPKGs.IsDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isdownload_size_=$2
    else
        echo -n $_object_qpkgs_isdownload_size_
    fi
    }
QPKGs.IsDownload.Init

QPKGs.ErDownload.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erdownload_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erdownload_array_+=("$item")
    done
    }
QPKGs.ErDownload.Array()
    {
    echo -n "${_object_qpkgs_erdownload_array_[@]:-}"
    }
QPKGs.ErDownload.Count()
    {
    echo "${#_object_qpkgs_erdownload_array_[@]:-}"
    }
QPKGs.ErDownload.Exist()
    {
    [[ ${_object_qpkgs_erdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErDownload.First()
    {
    echo "${_object_qpkgs_erdownload_array_[0]}"
    }
QPKGs.ErDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erdownload_array_[@]:-} ]] && index=${#_object_qpkgs_erdownload_array_[@]}
    echo -n "${_object_qpkgs_erdownload_array_[((index-1))]}"
    }
QPKGs.ErDownload.Init()
    {
    _object_qpkgs_erdownload_size_=0
    _object_qpkgs_erdownload_array_=()
    _object_qpkgs_erdownload_array_index_=1
    }
QPKGs.ErDownload.IsAny()
    {
    [[ ${#_object_qpkgs_erdownload_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErDownload.IsNone()
    {
    [[ ${#_object_qpkgs_erdownload_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErDownload.List()
    {
    echo -n "${_object_qpkgs_erdownload_array_[*]:-}"
    }
QPKGs.ErDownload.ListCSV()
    {
    echo -n "${_object_qpkgs_erdownload_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erdownload_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erdownload_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erdownload_array_[*]} ]] && _object_qpkgs_erdownload_array_=()
    }
QPKGs.ErDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erdownload_size_=$2
    else
        echo -n $_object_qpkgs_erdownload_size_
    fi
    }
QPKGs.ErDownload.Init

QPKGs.SkDownload.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skdownload_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skdownload_array_+=("$item")
    done
    }
QPKGs.SkDownload.Array()
    {
    echo -n "${_object_qpkgs_skdownload_array_[@]:-}"
    }
QPKGs.SkDownload.Count()
    {
    echo "${#_object_qpkgs_skdownload_array_[@]:-}"
    }
QPKGs.SkDownload.Exist()
    {
    [[ ${_object_qpkgs_skdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkDownload.First()
    {
    echo "${_object_qpkgs_skdownload_array_[0]}"
    }
QPKGs.SkDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skdownload_array_[@]:-} ]] && index=${#_object_qpkgs_skdownload_array_[@]}
    echo -n "${_object_qpkgs_skdownload_array_[((index-1))]}"
    }
QPKGs.SkDownload.Init()
    {
    _object_qpkgs_skdownload_size_=0
    _object_qpkgs_skdownload_array_=()
    _object_qpkgs_skdownload_array_index_=1
    }
QPKGs.SkDownload.IsAny()
    {
    [[ ${#_object_qpkgs_skdownload_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkDownload.IsNone()
    {
    [[ ${#_object_qpkgs_skdownload_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkDownload.List()
    {
    echo -n "${_object_qpkgs_skdownload_array_[*]:-}"
    }
QPKGs.SkDownload.ListCSV()
    {
    echo -n "${_object_qpkgs_skdownload_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skdownload_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skdownload_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skdownload_array_[*]} ]] && _object_qpkgs_skdownload_array_=()
    }
QPKGs.SkDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skdownload_size_=$2
    else
        echo -n $_object_qpkgs_skdownload_size_
    fi
    }
QPKGs.SkDownload.Init

QPKGs.ToInstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_toinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_toinstall_array_+=("$item")
    done
    }
QPKGs.ToInstall.Array()
    {
    echo -n "${_object_qpkgs_toinstall_array_[@]:-}"
    }
QPKGs.ToInstall.Count()
    {
    echo "${#_object_qpkgs_toinstall_array_[@]:-}"
    }
QPKGs.ToInstall.Exist()
    {
    [[ ${_object_qpkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToInstall.First()
    {
    echo "${_object_qpkgs_toinstall_array_[0]}"
    }
QPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toinstall_array_[@]:-} ]] && index=${#_object_qpkgs_toinstall_array_[@]}
    echo -n "${_object_qpkgs_toinstall_array_[((index-1))]}"
    }
QPKGs.ToInstall.Init()
    {
    _object_qpkgs_toinstall_size_=0
    _object_qpkgs_toinstall_array_=()
    _object_qpkgs_toinstall_array_index_=1
    }
QPKGs.ToInstall.IsAny()
    {
    [[ ${#_object_qpkgs_toinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToInstall.IsNone()
    {
    [[ ${#_object_qpkgs_toinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToInstall.List()
    {
    echo -n "${_object_qpkgs_toinstall_array_[*]:-}"
    }
QPKGs.ToInstall.ListCSV()
    {
    echo -n "${_object_qpkgs_toinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_toinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_toinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_toinstall_array_[*]} ]] && _object_qpkgs_toinstall_array_=()
    }
QPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_toinstall_size_=$2
    else
        echo -n $_object_qpkgs_toinstall_size_
    fi
    }
QPKGs.ToInstall.Init

QPKGs.IsInstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isinstall_array_+=("$item")
    done
    }
QPKGs.IsInstall.Array()
    {
    echo -n "${_object_qpkgs_isinstall_array_[@]:-}"
    }
QPKGs.IsInstall.Count()
    {
    echo "${#_object_qpkgs_isinstall_array_[@]:-}"
    }
QPKGs.IsInstall.Exist()
    {
    [[ ${_object_qpkgs_isinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsInstall.First()
    {
    echo "${_object_qpkgs_isinstall_array_[0]}"
    }
QPKGs.IsInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isinstall_array_[@]:-} ]] && index=${#_object_qpkgs_isinstall_array_[@]}
    echo -n "${_object_qpkgs_isinstall_array_[((index-1))]}"
    }
QPKGs.IsInstall.Init()
    {
    _object_qpkgs_isinstall_size_=0
    _object_qpkgs_isinstall_array_=()
    _object_qpkgs_isinstall_array_index_=1
    }
QPKGs.IsInstall.IsAny()
    {
    [[ ${#_object_qpkgs_isinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsInstall.IsNone()
    {
    [[ ${#_object_qpkgs_isinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsInstall.List()
    {
    echo -n "${_object_qpkgs_isinstall_array_[*]:-}"
    }
QPKGs.IsInstall.ListCSV()
    {
    echo -n "${_object_qpkgs_isinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isinstall_array_[*]} ]] && _object_qpkgs_isinstall_array_=()
    }
QPKGs.IsInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isinstall_size_=$2
    else
        echo -n $_object_qpkgs_isinstall_size_
    fi
    }
QPKGs.IsInstall.Init

QPKGs.ErInstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erinstall_array_+=("$item")
    done
    }
QPKGs.ErInstall.Array()
    {
    echo -n "${_object_qpkgs_erinstall_array_[@]:-}"
    }
QPKGs.ErInstall.Count()
    {
    echo "${#_object_qpkgs_erinstall_array_[@]:-}"
    }
QPKGs.ErInstall.Exist()
    {
    [[ ${_object_qpkgs_erinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErInstall.First()
    {
    echo "${_object_qpkgs_erinstall_array_[0]}"
    }
QPKGs.ErInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erinstall_array_[@]:-} ]] && index=${#_object_qpkgs_erinstall_array_[@]}
    echo -n "${_object_qpkgs_erinstall_array_[((index-1))]}"
    }
QPKGs.ErInstall.Init()
    {
    _object_qpkgs_erinstall_size_=0
    _object_qpkgs_erinstall_array_=()
    _object_qpkgs_erinstall_array_index_=1
    }
QPKGs.ErInstall.IsAny()
    {
    [[ ${#_object_qpkgs_erinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErInstall.IsNone()
    {
    [[ ${#_object_qpkgs_erinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErInstall.List()
    {
    echo -n "${_object_qpkgs_erinstall_array_[*]:-}"
    }
QPKGs.ErInstall.ListCSV()
    {
    echo -n "${_object_qpkgs_erinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erinstall_array_[*]} ]] && _object_qpkgs_erinstall_array_=()
    }
QPKGs.ErInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erinstall_size_=$2
    else
        echo -n $_object_qpkgs_erinstall_size_
    fi
    }
QPKGs.ErInstall.Init

QPKGs.SkInstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skinstall_array_+=("$item")
    done
    }
QPKGs.SkInstall.Array()
    {
    echo -n "${_object_qpkgs_skinstall_array_[@]:-}"
    }
QPKGs.SkInstall.Count()
    {
    echo "${#_object_qpkgs_skinstall_array_[@]:-}"
    }
QPKGs.SkInstall.Exist()
    {
    [[ ${_object_qpkgs_skinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkInstall.First()
    {
    echo "${_object_qpkgs_skinstall_array_[0]}"
    }
QPKGs.SkInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skinstall_array_[@]:-} ]] && index=${#_object_qpkgs_skinstall_array_[@]}
    echo -n "${_object_qpkgs_skinstall_array_[((index-1))]}"
    }
QPKGs.SkInstall.Init()
    {
    _object_qpkgs_skinstall_size_=0
    _object_qpkgs_skinstall_array_=()
    _object_qpkgs_skinstall_array_index_=1
    }
QPKGs.SkInstall.IsAny()
    {
    [[ ${#_object_qpkgs_skinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkInstall.IsNone()
    {
    [[ ${#_object_qpkgs_skinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkInstall.List()
    {
    echo -n "${_object_qpkgs_skinstall_array_[*]:-}"
    }
QPKGs.SkInstall.ListCSV()
    {
    echo -n "${_object_qpkgs_skinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skinstall_array_[*]} ]] && _object_qpkgs_skinstall_array_=()
    }
QPKGs.SkInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skinstall_size_=$2
    else
        echo -n $_object_qpkgs_skinstall_size_
    fi
    }
QPKGs.SkInstall.Init

QPKGs.ToReinstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_toreinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_toreinstall_array_+=("$item")
    done
    }
QPKGs.ToReinstall.Array()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[@]:-}"
    }
QPKGs.ToReinstall.Count()
    {
    echo "${#_object_qpkgs_toreinstall_array_[@]:-}"
    }
QPKGs.ToReinstall.Exist()
    {
    [[ ${_object_qpkgs_toreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToReinstall.First()
    {
    echo "${_object_qpkgs_toreinstall_array_[0]}"
    }
QPKGs.ToReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toreinstall_array_[@]:-} ]] && index=${#_object_qpkgs_toreinstall_array_[@]}
    echo -n "${_object_qpkgs_toreinstall_array_[((index-1))]}"
    }
QPKGs.ToReinstall.Init()
    {
    _object_qpkgs_toreinstall_size_=0
    _object_qpkgs_toreinstall_array_=()
    _object_qpkgs_toreinstall_array_index_=1
    }
QPKGs.ToReinstall.IsAny()
    {
    [[ ${#_object_qpkgs_toreinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToReinstall.IsNone()
    {
    [[ ${#_object_qpkgs_toreinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToReinstall.List()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[*]:-}"
    }
QPKGs.ToReinstall.ListCSV()
    {
    echo -n "${_object_qpkgs_toreinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_toreinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_toreinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_toreinstall_array_[*]} ]] && _object_qpkgs_toreinstall_array_=()
    }
QPKGs.ToReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_toreinstall_size_=$2
    else
        echo -n $_object_qpkgs_toreinstall_size_
    fi
    }
QPKGs.ToReinstall.Init

QPKGs.IsReinstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isreinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isreinstall_array_+=("$item")
    done
    }
QPKGs.IsReinstall.Array()
    {
    echo -n "${_object_qpkgs_isreinstall_array_[@]:-}"
    }
QPKGs.IsReinstall.Count()
    {
    echo "${#_object_qpkgs_isreinstall_array_[@]:-}"
    }
QPKGs.IsReinstall.Exist()
    {
    [[ ${_object_qpkgs_isreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsReinstall.First()
    {
    echo "${_object_qpkgs_isreinstall_array_[0]}"
    }
QPKGs.IsReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isreinstall_array_[@]:-} ]] && index=${#_object_qpkgs_isreinstall_array_[@]}
    echo -n "${_object_qpkgs_isreinstall_array_[((index-1))]}"
    }
QPKGs.IsReinstall.Init()
    {
    _object_qpkgs_isreinstall_size_=0
    _object_qpkgs_isreinstall_array_=()
    _object_qpkgs_isreinstall_array_index_=1
    }
QPKGs.IsReinstall.IsAny()
    {
    [[ ${#_object_qpkgs_isreinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsReinstall.IsNone()
    {
    [[ ${#_object_qpkgs_isreinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsReinstall.List()
    {
    echo -n "${_object_qpkgs_isreinstall_array_[*]:-}"
    }
QPKGs.IsReinstall.ListCSV()
    {
    echo -n "${_object_qpkgs_isreinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isreinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isreinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isreinstall_array_[*]} ]] && _object_qpkgs_isreinstall_array_=()
    }
QPKGs.IsReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isreinstall_size_=$2
    else
        echo -n $_object_qpkgs_isreinstall_size_
    fi
    }
QPKGs.IsReinstall.Init

QPKGs.ErReinstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erreinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erreinstall_array_+=("$item")
    done
    }
QPKGs.ErReinstall.Array()
    {
    echo -n "${_object_qpkgs_erreinstall_array_[@]:-}"
    }
QPKGs.ErReinstall.Count()
    {
    echo "${#_object_qpkgs_erreinstall_array_[@]:-}"
    }
QPKGs.ErReinstall.Exist()
    {
    [[ ${_object_qpkgs_erreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErReinstall.First()
    {
    echo "${_object_qpkgs_erreinstall_array_[0]}"
    }
QPKGs.ErReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erreinstall_array_[@]:-} ]] && index=${#_object_qpkgs_erreinstall_array_[@]}
    echo -n "${_object_qpkgs_erreinstall_array_[((index-1))]}"
    }
QPKGs.ErReinstall.Init()
    {
    _object_qpkgs_erreinstall_size_=0
    _object_qpkgs_erreinstall_array_=()
    _object_qpkgs_erreinstall_array_index_=1
    }
QPKGs.ErReinstall.IsAny()
    {
    [[ ${#_object_qpkgs_erreinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErReinstall.IsNone()
    {
    [[ ${#_object_qpkgs_erreinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErReinstall.List()
    {
    echo -n "${_object_qpkgs_erreinstall_array_[*]:-}"
    }
QPKGs.ErReinstall.ListCSV()
    {
    echo -n "${_object_qpkgs_erreinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erreinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erreinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erreinstall_array_[*]} ]] && _object_qpkgs_erreinstall_array_=()
    }
QPKGs.ErReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erreinstall_size_=$2
    else
        echo -n $_object_qpkgs_erreinstall_size_
    fi
    }
QPKGs.ErReinstall.Init

QPKGs.SkReinstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skreinstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skreinstall_array_+=("$item")
    done
    }
QPKGs.SkReinstall.Array()
    {
    echo -n "${_object_qpkgs_skreinstall_array_[@]:-}"
    }
QPKGs.SkReinstall.Count()
    {
    echo "${#_object_qpkgs_skreinstall_array_[@]:-}"
    }
QPKGs.SkReinstall.Exist()
    {
    [[ ${_object_qpkgs_skreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkReinstall.First()
    {
    echo "${_object_qpkgs_skreinstall_array_[0]}"
    }
QPKGs.SkReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skreinstall_array_[@]:-} ]] && index=${#_object_qpkgs_skreinstall_array_[@]}
    echo -n "${_object_qpkgs_skreinstall_array_[((index-1))]}"
    }
QPKGs.SkReinstall.Init()
    {
    _object_qpkgs_skreinstall_size_=0
    _object_qpkgs_skreinstall_array_=()
    _object_qpkgs_skreinstall_array_index_=1
    }
QPKGs.SkReinstall.IsAny()
    {
    [[ ${#_object_qpkgs_skreinstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkReinstall.IsNone()
    {
    [[ ${#_object_qpkgs_skreinstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkReinstall.List()
    {
    echo -n "${_object_qpkgs_skreinstall_array_[*]:-}"
    }
QPKGs.SkReinstall.ListCSV()
    {
    echo -n "${_object_qpkgs_skreinstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skreinstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skreinstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skreinstall_array_[*]} ]] && _object_qpkgs_skreinstall_array_=()
    }
QPKGs.SkReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skreinstall_size_=$2
    else
        echo -n $_object_qpkgs_skreinstall_size_
    fi
    }
QPKGs.SkReinstall.Init

QPKGs.ToRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_torestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_torestart_array_+=("$item")
    done
    }
QPKGs.ToRestart.Array()
    {
    echo -n "${_object_qpkgs_torestart_array_[@]:-}"
    }
QPKGs.ToRestart.Count()
    {
    echo "${#_object_qpkgs_torestart_array_[@]:-}"
    }
QPKGs.ToRestart.Exist()
    {
    [[ ${_object_qpkgs_torestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestart.First()
    {
    echo "${_object_qpkgs_torestart_array_[0]}"
    }
QPKGs.ToRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_torestart_array_[@]:-} ]] && index=${#_object_qpkgs_torestart_array_[@]}
    echo -n "${_object_qpkgs_torestart_array_[((index-1))]}"
    }
QPKGs.ToRestart.Init()
    {
    _object_qpkgs_torestart_size_=0
    _object_qpkgs_torestart_array_=()
    _object_qpkgs_torestart_array_index_=1
    }
QPKGs.ToRestart.IsAny()
    {
    [[ ${#_object_qpkgs_torestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToRestart.IsNone()
    {
    [[ ${#_object_qpkgs_torestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToRestart.List()
    {
    echo -n "${_object_qpkgs_torestart_array_[*]:-}"
    }
QPKGs.ToRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_torestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_torestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_torestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_torestart_array_[*]} ]] && _object_qpkgs_torestart_array_=()
    }
QPKGs.ToRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_torestart_size_=$2
    else
        echo -n $_object_qpkgs_torestart_size_
    fi
    }
QPKGs.ToRestart.Init

QPKGs.IsRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isrestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isrestart_array_+=("$item")
    done
    }
QPKGs.IsRestart.Array()
    {
    echo -n "${_object_qpkgs_isrestart_array_[@]:-}"
    }
QPKGs.IsRestart.Count()
    {
    echo "${#_object_qpkgs_isrestart_array_[@]:-}"
    }
QPKGs.IsRestart.Exist()
    {
    [[ ${_object_qpkgs_isrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsRestart.First()
    {
    echo "${_object_qpkgs_isrestart_array_[0]}"
    }
QPKGs.IsRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isrestart_array_[@]:-} ]] && index=${#_object_qpkgs_isrestart_array_[@]}
    echo -n "${_object_qpkgs_isrestart_array_[((index-1))]}"
    }
QPKGs.IsRestart.Init()
    {
    _object_qpkgs_isrestart_size_=0
    _object_qpkgs_isrestart_array_=()
    _object_qpkgs_isrestart_array_index_=1
    }
QPKGs.IsRestart.IsAny()
    {
    [[ ${#_object_qpkgs_isrestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsRestart.IsNone()
    {
    [[ ${#_object_qpkgs_isrestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsRestart.List()
    {
    echo -n "${_object_qpkgs_isrestart_array_[*]:-}"
    }
QPKGs.IsRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_isrestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isrestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isrestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isrestart_array_[*]} ]] && _object_qpkgs_isrestart_array_=()
    }
QPKGs.IsRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isrestart_size_=$2
    else
        echo -n $_object_qpkgs_isrestart_size_
    fi
    }
QPKGs.IsRestart.Init

QPKGs.ErRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_errestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_errestart_array_+=("$item")
    done
    }
QPKGs.ErRestart.Array()
    {
    echo -n "${_object_qpkgs_errestart_array_[@]:-}"
    }
QPKGs.ErRestart.Count()
    {
    echo "${#_object_qpkgs_errestart_array_[@]:-}"
    }
QPKGs.ErRestart.Exist()
    {
    [[ ${_object_qpkgs_errestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestart.First()
    {
    echo "${_object_qpkgs_errestart_array_[0]}"
    }
QPKGs.ErRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_errestart_array_[@]:-} ]] && index=${#_object_qpkgs_errestart_array_[@]}
    echo -n "${_object_qpkgs_errestart_array_[((index-1))]}"
    }
QPKGs.ErRestart.Init()
    {
    _object_qpkgs_errestart_size_=0
    _object_qpkgs_errestart_array_=()
    _object_qpkgs_errestart_array_index_=1
    }
QPKGs.ErRestart.IsAny()
    {
    [[ ${#_object_qpkgs_errestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErRestart.IsNone()
    {
    [[ ${#_object_qpkgs_errestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErRestart.List()
    {
    echo -n "${_object_qpkgs_errestart_array_[*]:-}"
    }
QPKGs.ErRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_errestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_errestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_errestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_errestart_array_[*]} ]] && _object_qpkgs_errestart_array_=()
    }
QPKGs.ErRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_errestart_size_=$2
    else
        echo -n $_object_qpkgs_errestart_size_
    fi
    }
QPKGs.ErRestart.Init

QPKGs.SkRestart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skrestart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skrestart_array_+=("$item")
    done
    }
QPKGs.SkRestart.Array()
    {
    echo -n "${_object_qpkgs_skrestart_array_[@]:-}"
    }
QPKGs.SkRestart.Count()
    {
    echo "${#_object_qpkgs_skrestart_array_[@]:-}"
    }
QPKGs.SkRestart.Exist()
    {
    [[ ${_object_qpkgs_skrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestart.First()
    {
    echo "${_object_qpkgs_skrestart_array_[0]}"
    }
QPKGs.SkRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skrestart_array_[@]:-} ]] && index=${#_object_qpkgs_skrestart_array_[@]}
    echo -n "${_object_qpkgs_skrestart_array_[((index-1))]}"
    }
QPKGs.SkRestart.Init()
    {
    _object_qpkgs_skrestart_size_=0
    _object_qpkgs_skrestart_array_=()
    _object_qpkgs_skrestart_array_index_=1
    }
QPKGs.SkRestart.IsAny()
    {
    [[ ${#_object_qpkgs_skrestart_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkRestart.IsNone()
    {
    [[ ${#_object_qpkgs_skrestart_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkRestart.List()
    {
    echo -n "${_object_qpkgs_skrestart_array_[*]:-}"
    }
QPKGs.SkRestart.ListCSV()
    {
    echo -n "${_object_qpkgs_skrestart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skrestart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skrestart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skrestart_array_[*]} ]] && _object_qpkgs_skrestart_array_=()
    }
QPKGs.SkRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skrestart_size_=$2
    else
        echo -n $_object_qpkgs_skrestart_size_
    fi
    }
QPKGs.SkRestart.Init

QPKGs.ToRestore.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_torestore_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_torestore_array_+=("$item")
    done
    }
QPKGs.ToRestore.Array()
    {
    echo -n "${_object_qpkgs_torestore_array_[@]:-}"
    }
QPKGs.ToRestore.Count()
    {
    echo "${#_object_qpkgs_torestore_array_[@]:-}"
    }
QPKGs.ToRestore.Exist()
    {
    [[ ${_object_qpkgs_torestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestore.First()
    {
    echo "${_object_qpkgs_torestore_array_[0]}"
    }
QPKGs.ToRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_torestore_array_[@]:-} ]] && index=${#_object_qpkgs_torestore_array_[@]}
    echo -n "${_object_qpkgs_torestore_array_[((index-1))]}"
    }
QPKGs.ToRestore.Init()
    {
    _object_qpkgs_torestore_size_=0
    _object_qpkgs_torestore_array_=()
    _object_qpkgs_torestore_array_index_=1
    }
QPKGs.ToRestore.IsAny()
    {
    [[ ${#_object_qpkgs_torestore_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToRestore.IsNone()
    {
    [[ ${#_object_qpkgs_torestore_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToRestore.List()
    {
    echo -n "${_object_qpkgs_torestore_array_[*]:-}"
    }
QPKGs.ToRestore.ListCSV()
    {
    echo -n "${_object_qpkgs_torestore_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_torestore_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_torestore_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_torestore_array_[*]} ]] && _object_qpkgs_torestore_array_=()
    }
QPKGs.ToRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_torestore_size_=$2
    else
        echo -n $_object_qpkgs_torestore_size_
    fi
    }
QPKGs.ToRestore.Init

QPKGs.IsRestore.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isrestore_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isrestore_array_+=("$item")
    done
    }
QPKGs.IsRestore.Array()
    {
    echo -n "${_object_qpkgs_isrestore_array_[@]:-}"
    }
QPKGs.IsRestore.Count()
    {
    echo "${#_object_qpkgs_isrestore_array_[@]:-}"
    }
QPKGs.IsRestore.Exist()
    {
    [[ ${_object_qpkgs_isrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsRestore.First()
    {
    echo "${_object_qpkgs_isrestore_array_[0]}"
    }
QPKGs.IsRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isrestore_array_[@]:-} ]] && index=${#_object_qpkgs_isrestore_array_[@]}
    echo -n "${_object_qpkgs_isrestore_array_[((index-1))]}"
    }
QPKGs.IsRestore.Init()
    {
    _object_qpkgs_isrestore_size_=0
    _object_qpkgs_isrestore_array_=()
    _object_qpkgs_isrestore_array_index_=1
    }
QPKGs.IsRestore.IsAny()
    {
    [[ ${#_object_qpkgs_isrestore_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsRestore.IsNone()
    {
    [[ ${#_object_qpkgs_isrestore_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsRestore.List()
    {
    echo -n "${_object_qpkgs_isrestore_array_[*]:-}"
    }
QPKGs.IsRestore.ListCSV()
    {
    echo -n "${_object_qpkgs_isrestore_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isrestore_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isrestore_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isrestore_array_[*]} ]] && _object_qpkgs_isrestore_array_=()
    }
QPKGs.IsRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isrestore_size_=$2
    else
        echo -n $_object_qpkgs_isrestore_size_
    fi
    }
QPKGs.IsRestore.Init

QPKGs.ErRestore.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_errestore_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_errestore_array_+=("$item")
    done
    }
QPKGs.ErRestore.Array()
    {
    echo -n "${_object_qpkgs_errestore_array_[@]:-}"
    }
QPKGs.ErRestore.Count()
    {
    echo "${#_object_qpkgs_errestore_array_[@]:-}"
    }
QPKGs.ErRestore.Exist()
    {
    [[ ${_object_qpkgs_errestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestore.First()
    {
    echo "${_object_qpkgs_errestore_array_[0]}"
    }
QPKGs.ErRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_errestore_array_[@]:-} ]] && index=${#_object_qpkgs_errestore_array_[@]}
    echo -n "${_object_qpkgs_errestore_array_[((index-1))]}"
    }
QPKGs.ErRestore.Init()
    {
    _object_qpkgs_errestore_size_=0
    _object_qpkgs_errestore_array_=()
    _object_qpkgs_errestore_array_index_=1
    }
QPKGs.ErRestore.IsAny()
    {
    [[ ${#_object_qpkgs_errestore_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErRestore.IsNone()
    {
    [[ ${#_object_qpkgs_errestore_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErRestore.List()
    {
    echo -n "${_object_qpkgs_errestore_array_[*]:-}"
    }
QPKGs.ErRestore.ListCSV()
    {
    echo -n "${_object_qpkgs_errestore_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_errestore_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_errestore_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_errestore_array_[*]} ]] && _object_qpkgs_errestore_array_=()
    }
QPKGs.ErRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_errestore_size_=$2
    else
        echo -n $_object_qpkgs_errestore_size_
    fi
    }
QPKGs.ErRestore.Init

QPKGs.SkRestore.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skrestore_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skrestore_array_+=("$item")
    done
    }
QPKGs.SkRestore.Array()
    {
    echo -n "${_object_qpkgs_skrestore_array_[@]:-}"
    }
QPKGs.SkRestore.Count()
    {
    echo "${#_object_qpkgs_skrestore_array_[@]:-}"
    }
QPKGs.SkRestore.Exist()
    {
    [[ ${_object_qpkgs_skrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestore.First()
    {
    echo "${_object_qpkgs_skrestore_array_[0]}"
    }
QPKGs.SkRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skrestore_array_[@]:-} ]] && index=${#_object_qpkgs_skrestore_array_[@]}
    echo -n "${_object_qpkgs_skrestore_array_[((index-1))]}"
    }
QPKGs.SkRestore.Init()
    {
    _object_qpkgs_skrestore_size_=0
    _object_qpkgs_skrestore_array_=()
    _object_qpkgs_skrestore_array_index_=1
    }
QPKGs.SkRestore.IsAny()
    {
    [[ ${#_object_qpkgs_skrestore_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkRestore.IsNone()
    {
    [[ ${#_object_qpkgs_skrestore_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkRestore.List()
    {
    echo -n "${_object_qpkgs_skrestore_array_[*]:-}"
    }
QPKGs.SkRestore.ListCSV()
    {
    echo -n "${_object_qpkgs_skrestore_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skrestore_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skrestore_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skrestore_array_[*]} ]] && _object_qpkgs_skrestore_array_=()
    }
QPKGs.SkRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skrestore_size_=$2
    else
        echo -n $_object_qpkgs_skrestore_size_
    fi
    }
QPKGs.SkRestore.Init

QPKGs.ToStart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_tostart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_tostart_array_+=("$item")
    done
    }
QPKGs.ToStart.Array()
    {
    echo -n "${_object_qpkgs_tostart_array_[@]:-}"
    }
QPKGs.ToStart.Count()
    {
    echo "${#_object_qpkgs_tostart_array_[@]:-}"
    }
QPKGs.ToStart.Exist()
    {
    [[ ${_object_qpkgs_tostart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStart.First()
    {
    echo "${_object_qpkgs_tostart_array_[0]}"
    }
QPKGs.ToStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_tostart_array_[@]:-} ]] && index=${#_object_qpkgs_tostart_array_[@]}
    echo -n "${_object_qpkgs_tostart_array_[((index-1))]}"
    }
QPKGs.ToStart.Init()
    {
    _object_qpkgs_tostart_size_=0
    _object_qpkgs_tostart_array_=()
    _object_qpkgs_tostart_array_index_=1
    }
QPKGs.ToStart.IsAny()
    {
    [[ ${#_object_qpkgs_tostart_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToStart.IsNone()
    {
    [[ ${#_object_qpkgs_tostart_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToStart.List()
    {
    echo -n "${_object_qpkgs_tostart_array_[*]:-}"
    }
QPKGs.ToStart.ListCSV()
    {
    echo -n "${_object_qpkgs_tostart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_tostart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_tostart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_tostart_array_[*]} ]] && _object_qpkgs_tostart_array_=()
    }
QPKGs.ToStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_tostart_size_=$2
    else
        echo -n $_object_qpkgs_tostart_size_
    fi
    }
QPKGs.ToStart.Init

QPKGs.IsStart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isstart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isstart_array_+=("$item")
    done
    }
QPKGs.IsStart.Array()
    {
    echo -n "${_object_qpkgs_isstart_array_[@]:-}"
    }
QPKGs.IsStart.Count()
    {
    echo "${#_object_qpkgs_isstart_array_[@]:-}"
    }
QPKGs.IsStart.Exist()
    {
    [[ ${_object_qpkgs_isstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStart.First()
    {
    echo "${_object_qpkgs_isstart_array_[0]}"
    }
QPKGs.IsStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isstart_array_[@]:-} ]] && index=${#_object_qpkgs_isstart_array_[@]}
    echo -n "${_object_qpkgs_isstart_array_[((index-1))]}"
    }
QPKGs.IsStart.Init()
    {
    _object_qpkgs_isstart_size_=0
    _object_qpkgs_isstart_array_=()
    _object_qpkgs_isstart_array_index_=1
    }
QPKGs.IsStart.IsAny()
    {
    [[ ${#_object_qpkgs_isstart_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsStart.IsNone()
    {
    [[ ${#_object_qpkgs_isstart_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsStart.List()
    {
    echo -n "${_object_qpkgs_isstart_array_[*]:-}"
    }
QPKGs.IsStart.ListCSV()
    {
    echo -n "${_object_qpkgs_isstart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isstart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isstart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isstart_array_[*]} ]] && _object_qpkgs_isstart_array_=()
    }
QPKGs.IsStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isstart_size_=$2
    else
        echo -n $_object_qpkgs_isstart_size_
    fi
    }
QPKGs.IsStart.Init

QPKGs.ErStart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erstart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erstart_array_+=("$item")
    done
    }
QPKGs.ErStart.Array()
    {
    echo -n "${_object_qpkgs_erstart_array_[@]:-}"
    }
QPKGs.ErStart.Count()
    {
    echo "${#_object_qpkgs_erstart_array_[@]:-}"
    }
QPKGs.ErStart.Exist()
    {
    [[ ${_object_qpkgs_erstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStart.First()
    {
    echo "${_object_qpkgs_erstart_array_[0]}"
    }
QPKGs.ErStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erstart_array_[@]:-} ]] && index=${#_object_qpkgs_erstart_array_[@]}
    echo -n "${_object_qpkgs_erstart_array_[((index-1))]}"
    }
QPKGs.ErStart.Init()
    {
    _object_qpkgs_erstart_size_=0
    _object_qpkgs_erstart_array_=()
    _object_qpkgs_erstart_array_index_=1
    }
QPKGs.ErStart.IsAny()
    {
    [[ ${#_object_qpkgs_erstart_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErStart.IsNone()
    {
    [[ ${#_object_qpkgs_erstart_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErStart.List()
    {
    echo -n "${_object_qpkgs_erstart_array_[*]:-}"
    }
QPKGs.ErStart.ListCSV()
    {
    echo -n "${_object_qpkgs_erstart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erstart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erstart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erstart_array_[*]} ]] && _object_qpkgs_erstart_array_=()
    }
QPKGs.ErStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erstart_size_=$2
    else
        echo -n $_object_qpkgs_erstart_size_
    fi
    }
QPKGs.ErStart.Init

QPKGs.SkStart.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skstart_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skstart_array_+=("$item")
    done
    }
QPKGs.SkStart.Array()
    {
    echo -n "${_object_qpkgs_skstart_array_[@]:-}"
    }
QPKGs.SkStart.Count()
    {
    echo "${#_object_qpkgs_skstart_array_[@]:-}"
    }
QPKGs.SkStart.Exist()
    {
    [[ ${_object_qpkgs_skstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStart.First()
    {
    echo "${_object_qpkgs_skstart_array_[0]}"
    }
QPKGs.SkStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skstart_array_[@]:-} ]] && index=${#_object_qpkgs_skstart_array_[@]}
    echo -n "${_object_qpkgs_skstart_array_[((index-1))]}"
    }
QPKGs.SkStart.Init()
    {
    _object_qpkgs_skstart_size_=0
    _object_qpkgs_skstart_array_=()
    _object_qpkgs_skstart_array_index_=1
    }
QPKGs.SkStart.IsAny()
    {
    [[ ${#_object_qpkgs_skstart_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkStart.IsNone()
    {
    [[ ${#_object_qpkgs_skstart_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkStart.List()
    {
    echo -n "${_object_qpkgs_skstart_array_[*]:-}"
    }
QPKGs.SkStart.ListCSV()
    {
    echo -n "${_object_qpkgs_skstart_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skstart_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skstart_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skstart_array_[*]} ]] && _object_qpkgs_skstart_array_=()
    }
QPKGs.SkStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skstart_size_=$2
    else
        echo -n $_object_qpkgs_skstart_size_
    fi
    }
QPKGs.SkStart.Init

QPKGs.ToStatus.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_tostatus_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_tostatus_array_+=("$item")
    done
    }
QPKGs.ToStatus.Array()
    {
    echo -n "${_object_qpkgs_tostatus_array_[@]:-}"
    }
QPKGs.ToStatus.Count()
    {
    echo "${#_object_qpkgs_tostatus_array_[@]:-}"
    }
QPKGs.ToStatus.Exist()
    {
    [[ ${_object_qpkgs_tostatus_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStatus.First()
    {
    echo "${_object_qpkgs_tostatus_array_[0]}"
    }
QPKGs.ToStatus.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_tostatus_array_[@]:-} ]] && index=${#_object_qpkgs_tostatus_array_[@]}
    echo -n "${_object_qpkgs_tostatus_array_[((index-1))]}"
    }
QPKGs.ToStatus.Init()
    {
    _object_qpkgs_tostatus_size_=0
    _object_qpkgs_tostatus_array_=()
    _object_qpkgs_tostatus_array_index_=1
    }
QPKGs.ToStatus.IsAny()
    {
    [[ ${#_object_qpkgs_tostatus_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToStatus.IsNone()
    {
    [[ ${#_object_qpkgs_tostatus_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToStatus.List()
    {
    echo -n "${_object_qpkgs_tostatus_array_[*]:-}"
    }
QPKGs.ToStatus.ListCSV()
    {
    echo -n "${_object_qpkgs_tostatus_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToStatus.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_tostatus_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_tostatus_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_tostatus_array_[*]} ]] && _object_qpkgs_tostatus_array_=()
    }
QPKGs.ToStatus.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_tostatus_size_=$2
    else
        echo -n $_object_qpkgs_tostatus_size_
    fi
    }
QPKGs.ToStatus.Init

QPKGs.IsStatus.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isstatus_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isstatus_array_+=("$item")
    done
    }
QPKGs.IsStatus.Array()
    {
    echo -n "${_object_qpkgs_isstatus_array_[@]:-}"
    }
QPKGs.IsStatus.Count()
    {
    echo "${#_object_qpkgs_isstatus_array_[@]:-}"
    }
QPKGs.IsStatus.Exist()
    {
    [[ ${_object_qpkgs_isstatus_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStatus.First()
    {
    echo "${_object_qpkgs_isstatus_array_[0]}"
    }
QPKGs.IsStatus.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isstatus_array_[@]:-} ]] && index=${#_object_qpkgs_isstatus_array_[@]}
    echo -n "${_object_qpkgs_isstatus_array_[((index-1))]}"
    }
QPKGs.IsStatus.Init()
    {
    _object_qpkgs_isstatus_size_=0
    _object_qpkgs_isstatus_array_=()
    _object_qpkgs_isstatus_array_index_=1
    }
QPKGs.IsStatus.IsAny()
    {
    [[ ${#_object_qpkgs_isstatus_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsStatus.IsNone()
    {
    [[ ${#_object_qpkgs_isstatus_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsStatus.List()
    {
    echo -n "${_object_qpkgs_isstatus_array_[*]:-}"
    }
QPKGs.IsStatus.ListCSV()
    {
    echo -n "${_object_qpkgs_isstatus_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsStatus.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isstatus_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isstatus_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isstatus_array_[*]} ]] && _object_qpkgs_isstatus_array_=()
    }
QPKGs.IsStatus.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isstatus_size_=$2
    else
        echo -n $_object_qpkgs_isstatus_size_
    fi
    }
QPKGs.IsStatus.Init

QPKGs.ErStatus.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erstatus_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erstatus_array_+=("$item")
    done
    }
QPKGs.ErStatus.Array()
    {
    echo -n "${_object_qpkgs_erstatus_array_[@]:-}"
    }
QPKGs.ErStatus.Count()
    {
    echo "${#_object_qpkgs_erstatus_array_[@]:-}"
    }
QPKGs.ErStatus.Exist()
    {
    [[ ${_object_qpkgs_erstatus_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStatus.First()
    {
    echo "${_object_qpkgs_erstatus_array_[0]}"
    }
QPKGs.ErStatus.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erstatus_array_[@]:-} ]] && index=${#_object_qpkgs_erstatus_array_[@]}
    echo -n "${_object_qpkgs_erstatus_array_[((index-1))]}"
    }
QPKGs.ErStatus.Init()
    {
    _object_qpkgs_erstatus_size_=0
    _object_qpkgs_erstatus_array_=()
    _object_qpkgs_erstatus_array_index_=1
    }
QPKGs.ErStatus.IsAny()
    {
    [[ ${#_object_qpkgs_erstatus_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErStatus.IsNone()
    {
    [[ ${#_object_qpkgs_erstatus_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErStatus.List()
    {
    echo -n "${_object_qpkgs_erstatus_array_[*]:-}"
    }
QPKGs.ErStatus.ListCSV()
    {
    echo -n "${_object_qpkgs_erstatus_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErStatus.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erstatus_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erstatus_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erstatus_array_[*]} ]] && _object_qpkgs_erstatus_array_=()
    }
QPKGs.ErStatus.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erstatus_size_=$2
    else
        echo -n $_object_qpkgs_erstatus_size_
    fi
    }
QPKGs.ErStatus.Init

QPKGs.SkStatus.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skstatus_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skstatus_array_+=("$item")
    done
    }
QPKGs.SkStatus.Array()
    {
    echo -n "${_object_qpkgs_skstatus_array_[@]:-}"
    }
QPKGs.SkStatus.Count()
    {
    echo "${#_object_qpkgs_skstatus_array_[@]:-}"
    }
QPKGs.SkStatus.Exist()
    {
    [[ ${_object_qpkgs_skstatus_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStatus.First()
    {
    echo "${_object_qpkgs_skstatus_array_[0]}"
    }
QPKGs.SkStatus.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skstatus_array_[@]:-} ]] && index=${#_object_qpkgs_skstatus_array_[@]}
    echo -n "${_object_qpkgs_skstatus_array_[((index-1))]}"
    }
QPKGs.SkStatus.Init()
    {
    _object_qpkgs_skstatus_size_=0
    _object_qpkgs_skstatus_array_=()
    _object_qpkgs_skstatus_array_index_=1
    }
QPKGs.SkStatus.IsAny()
    {
    [[ ${#_object_qpkgs_skstatus_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkStatus.IsNone()
    {
    [[ ${#_object_qpkgs_skstatus_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkStatus.List()
    {
    echo -n "${_object_qpkgs_skstatus_array_[*]:-}"
    }
QPKGs.SkStatus.ListCSV()
    {
    echo -n "${_object_qpkgs_skstatus_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkStatus.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skstatus_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skstatus_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skstatus_array_[*]} ]] && _object_qpkgs_skstatus_array_=()
    }
QPKGs.SkStatus.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skstatus_size_=$2
    else
        echo -n $_object_qpkgs_skstatus_size_
    fi
    }
QPKGs.SkStatus.Init

QPKGs.ToStop.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_tostop_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_tostop_array_+=("$item")
    done
    }
QPKGs.ToStop.Array()
    {
    echo -n "${_object_qpkgs_tostop_array_[@]:-}"
    }
QPKGs.ToStop.Count()
    {
    echo "${#_object_qpkgs_tostop_array_[@]:-}"
    }
QPKGs.ToStop.Exist()
    {
    [[ ${_object_qpkgs_tostop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStop.First()
    {
    echo "${_object_qpkgs_tostop_array_[0]}"
    }
QPKGs.ToStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_tostop_array_[@]:-} ]] && index=${#_object_qpkgs_tostop_array_[@]}
    echo -n "${_object_qpkgs_tostop_array_[((index-1))]}"
    }
QPKGs.ToStop.Init()
    {
    _object_qpkgs_tostop_size_=0
    _object_qpkgs_tostop_array_=()
    _object_qpkgs_tostop_array_index_=1
    }
QPKGs.ToStop.IsAny()
    {
    [[ ${#_object_qpkgs_tostop_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToStop.IsNone()
    {
    [[ ${#_object_qpkgs_tostop_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToStop.List()
    {
    echo -n "${_object_qpkgs_tostop_array_[*]:-}"
    }
QPKGs.ToStop.ListCSV()
    {
    echo -n "${_object_qpkgs_tostop_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_tostop_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_tostop_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_tostop_array_[*]} ]] && _object_qpkgs_tostop_array_=()
    }
QPKGs.ToStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_tostop_size_=$2
    else
        echo -n $_object_qpkgs_tostop_size_
    fi
    }
QPKGs.ToStop.Init

QPKGs.IsStop.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isstop_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isstop_array_+=("$item")
    done
    }
QPKGs.IsStop.Array()
    {
    echo -n "${_object_qpkgs_isstop_array_[@]:-}"
    }
QPKGs.IsStop.Count()
    {
    echo "${#_object_qpkgs_isstop_array_[@]:-}"
    }
QPKGs.IsStop.Exist()
    {
    [[ ${_object_qpkgs_isstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStop.First()
    {
    echo "${_object_qpkgs_isstop_array_[0]}"
    }
QPKGs.IsStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isstop_array_[@]:-} ]] && index=${#_object_qpkgs_isstop_array_[@]}
    echo -n "${_object_qpkgs_isstop_array_[((index-1))]}"
    }
QPKGs.IsStop.Init()
    {
    _object_qpkgs_isstop_size_=0
    _object_qpkgs_isstop_array_=()
    _object_qpkgs_isstop_array_index_=1
    }
QPKGs.IsStop.IsAny()
    {
    [[ ${#_object_qpkgs_isstop_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsStop.IsNone()
    {
    [[ ${#_object_qpkgs_isstop_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsStop.List()
    {
    echo -n "${_object_qpkgs_isstop_array_[*]:-}"
    }
QPKGs.IsStop.ListCSV()
    {
    echo -n "${_object_qpkgs_isstop_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isstop_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isstop_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isstop_array_[*]} ]] && _object_qpkgs_isstop_array_=()
    }
QPKGs.IsStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isstop_size_=$2
    else
        echo -n $_object_qpkgs_isstop_size_
    fi
    }
QPKGs.IsStop.Init

QPKGs.ErStop.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erstop_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erstop_array_+=("$item")
    done
    }
QPKGs.ErStop.Array()
    {
    echo -n "${_object_qpkgs_erstop_array_[@]:-}"
    }
QPKGs.ErStop.Count()
    {
    echo "${#_object_qpkgs_erstop_array_[@]:-}"
    }
QPKGs.ErStop.Exist()
    {
    [[ ${_object_qpkgs_erstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStop.First()
    {
    echo "${_object_qpkgs_erstop_array_[0]}"
    }
QPKGs.ErStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erstop_array_[@]:-} ]] && index=${#_object_qpkgs_erstop_array_[@]}
    echo -n "${_object_qpkgs_erstop_array_[((index-1))]}"
    }
QPKGs.ErStop.Init()
    {
    _object_qpkgs_erstop_size_=0
    _object_qpkgs_erstop_array_=()
    _object_qpkgs_erstop_array_index_=1
    }
QPKGs.ErStop.IsAny()
    {
    [[ ${#_object_qpkgs_erstop_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErStop.IsNone()
    {
    [[ ${#_object_qpkgs_erstop_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErStop.List()
    {
    echo -n "${_object_qpkgs_erstop_array_[*]:-}"
    }
QPKGs.ErStop.ListCSV()
    {
    echo -n "${_object_qpkgs_erstop_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erstop_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erstop_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erstop_array_[*]} ]] && _object_qpkgs_erstop_array_=()
    }
QPKGs.ErStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erstop_size_=$2
    else
        echo -n $_object_qpkgs_erstop_size_
    fi
    }
QPKGs.ErStop.Init

QPKGs.SkStop.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skstop_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skstop_array_+=("$item")
    done
    }
QPKGs.SkStop.Array()
    {
    echo -n "${_object_qpkgs_skstop_array_[@]:-}"
    }
QPKGs.SkStop.Count()
    {
    echo "${#_object_qpkgs_skstop_array_[@]:-}"
    }
QPKGs.SkStop.Exist()
    {
    [[ ${_object_qpkgs_skstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStop.First()
    {
    echo "${_object_qpkgs_skstop_array_[0]}"
    }
QPKGs.SkStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skstop_array_[@]:-} ]] && index=${#_object_qpkgs_skstop_array_[@]}
    echo -n "${_object_qpkgs_skstop_array_[((index-1))]}"
    }
QPKGs.SkStop.Init()
    {
    _object_qpkgs_skstop_size_=0
    _object_qpkgs_skstop_array_=()
    _object_qpkgs_skstop_array_index_=1
    }
QPKGs.SkStop.IsAny()
    {
    [[ ${#_object_qpkgs_skstop_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkStop.IsNone()
    {
    [[ ${#_object_qpkgs_skstop_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkStop.List()
    {
    echo -n "${_object_qpkgs_skstop_array_[*]:-}"
    }
QPKGs.SkStop.ListCSV()
    {
    echo -n "${_object_qpkgs_skstop_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skstop_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skstop_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skstop_array_[*]} ]] && _object_qpkgs_skstop_array_=()
    }
QPKGs.SkStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skstop_size_=$2
    else
        echo -n $_object_qpkgs_skstop_size_
    fi
    }
QPKGs.SkStop.Init

QPKGs.ToUninstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_touninstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_touninstall_array_+=("$item")
    done
    }
QPKGs.ToUninstall.Array()
    {
    echo -n "${_object_qpkgs_touninstall_array_[@]:-}"
    }
QPKGs.ToUninstall.Count()
    {
    echo "${#_object_qpkgs_touninstall_array_[@]:-}"
    }
QPKGs.ToUninstall.Exist()
    {
    [[ ${_object_qpkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUninstall.First()
    {
    echo "${_object_qpkgs_touninstall_array_[0]}"
    }
QPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_touninstall_array_[@]:-} ]] && index=${#_object_qpkgs_touninstall_array_[@]}
    echo -n "${_object_qpkgs_touninstall_array_[((index-1))]}"
    }
QPKGs.ToUninstall.Init()
    {
    _object_qpkgs_touninstall_size_=0
    _object_qpkgs_touninstall_array_=()
    _object_qpkgs_touninstall_array_index_=1
    }
QPKGs.ToUninstall.IsAny()
    {
    [[ ${#_object_qpkgs_touninstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToUninstall.IsNone()
    {
    [[ ${#_object_qpkgs_touninstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToUninstall.List()
    {
    echo -n "${_object_qpkgs_touninstall_array_[*]:-}"
    }
QPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_object_qpkgs_touninstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_touninstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_touninstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_touninstall_array_[*]} ]] && _object_qpkgs_touninstall_array_=()
    }
QPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_touninstall_size_=$2
    else
        echo -n $_object_qpkgs_touninstall_size_
    fi
    }
QPKGs.ToUninstall.Init

QPKGs.IsUninstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isuninstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isuninstall_array_+=("$item")
    done
    }
QPKGs.IsUninstall.Array()
    {
    echo -n "${_object_qpkgs_isuninstall_array_[@]:-}"
    }
QPKGs.IsUninstall.Count()
    {
    echo "${#_object_qpkgs_isuninstall_array_[@]:-}"
    }
QPKGs.IsUninstall.Exist()
    {
    [[ ${_object_qpkgs_isuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsUninstall.First()
    {
    echo "${_object_qpkgs_isuninstall_array_[0]}"
    }
QPKGs.IsUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isuninstall_array_[@]:-} ]] && index=${#_object_qpkgs_isuninstall_array_[@]}
    echo -n "${_object_qpkgs_isuninstall_array_[((index-1))]}"
    }
QPKGs.IsUninstall.Init()
    {
    _object_qpkgs_isuninstall_size_=0
    _object_qpkgs_isuninstall_array_=()
    _object_qpkgs_isuninstall_array_index_=1
    }
QPKGs.IsUninstall.IsAny()
    {
    [[ ${#_object_qpkgs_isuninstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsUninstall.IsNone()
    {
    [[ ${#_object_qpkgs_isuninstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsUninstall.List()
    {
    echo -n "${_object_qpkgs_isuninstall_array_[*]:-}"
    }
QPKGs.IsUninstall.ListCSV()
    {
    echo -n "${_object_qpkgs_isuninstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isuninstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isuninstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isuninstall_array_[*]} ]] && _object_qpkgs_isuninstall_array_=()
    }
QPKGs.IsUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isuninstall_size_=$2
    else
        echo -n $_object_qpkgs_isuninstall_size_
    fi
    }
QPKGs.IsUninstall.Init

QPKGs.ErUninstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_eruninstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_eruninstall_array_+=("$item")
    done
    }
QPKGs.ErUninstall.Array()
    {
    echo -n "${_object_qpkgs_eruninstall_array_[@]:-}"
    }
QPKGs.ErUninstall.Count()
    {
    echo "${#_object_qpkgs_eruninstall_array_[@]:-}"
    }
QPKGs.ErUninstall.Exist()
    {
    [[ ${_object_qpkgs_eruninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUninstall.First()
    {
    echo "${_object_qpkgs_eruninstall_array_[0]}"
    }
QPKGs.ErUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_eruninstall_array_[@]:-} ]] && index=${#_object_qpkgs_eruninstall_array_[@]}
    echo -n "${_object_qpkgs_eruninstall_array_[((index-1))]}"
    }
QPKGs.ErUninstall.Init()
    {
    _object_qpkgs_eruninstall_size_=0
    _object_qpkgs_eruninstall_array_=()
    _object_qpkgs_eruninstall_array_index_=1
    }
QPKGs.ErUninstall.IsAny()
    {
    [[ ${#_object_qpkgs_eruninstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErUninstall.IsNone()
    {
    [[ ${#_object_qpkgs_eruninstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErUninstall.List()
    {
    echo -n "${_object_qpkgs_eruninstall_array_[*]:-}"
    }
QPKGs.ErUninstall.ListCSV()
    {
    echo -n "${_object_qpkgs_eruninstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_eruninstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_eruninstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_eruninstall_array_[*]} ]] && _object_qpkgs_eruninstall_array_=()
    }
QPKGs.ErUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_eruninstall_size_=$2
    else
        echo -n $_object_qpkgs_eruninstall_size_
    fi
    }
QPKGs.ErUninstall.Init

QPKGs.SkUninstall.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skuninstall_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skuninstall_array_+=("$item")
    done
    }
QPKGs.SkUninstall.Array()
    {
    echo -n "${_object_qpkgs_skuninstall_array_[@]:-}"
    }
QPKGs.SkUninstall.Count()
    {
    echo "${#_object_qpkgs_skuninstall_array_[@]:-}"
    }
QPKGs.SkUninstall.Exist()
    {
    [[ ${_object_qpkgs_skuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUninstall.First()
    {
    echo "${_object_qpkgs_skuninstall_array_[0]}"
    }
QPKGs.SkUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skuninstall_array_[@]:-} ]] && index=${#_object_qpkgs_skuninstall_array_[@]}
    echo -n "${_object_qpkgs_skuninstall_array_[((index-1))]}"
    }
QPKGs.SkUninstall.Init()
    {
    _object_qpkgs_skuninstall_size_=0
    _object_qpkgs_skuninstall_array_=()
    _object_qpkgs_skuninstall_array_index_=1
    }
QPKGs.SkUninstall.IsAny()
    {
    [[ ${#_object_qpkgs_skuninstall_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkUninstall.IsNone()
    {
    [[ ${#_object_qpkgs_skuninstall_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkUninstall.List()
    {
    echo -n "${_object_qpkgs_skuninstall_array_[*]:-}"
    }
QPKGs.SkUninstall.ListCSV()
    {
    echo -n "${_object_qpkgs_skuninstall_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skuninstall_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skuninstall_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skuninstall_array_[*]} ]] && _object_qpkgs_skuninstall_array_=()
    }
QPKGs.SkUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skuninstall_size_=$2
    else
        echo -n $_object_qpkgs_skuninstall_size_
    fi
    }
QPKGs.SkUninstall.Init

QPKGs.ToUpgrade.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_toupgrade_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_toupgrade_array_+=("$item")
    done
    }
QPKGs.ToUpgrade.Array()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[@]:-}"
    }
QPKGs.ToUpgrade.Count()
    {
    echo "${#_object_qpkgs_toupgrade_array_[@]:-}"
    }
QPKGs.ToUpgrade.Exist()
    {
    [[ ${_object_qpkgs_toupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUpgrade.First()
    {
    echo "${_object_qpkgs_toupgrade_array_[0]}"
    }
QPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_toupgrade_array_[@]:-} ]] && index=${#_object_qpkgs_toupgrade_array_[@]}
    echo -n "${_object_qpkgs_toupgrade_array_[((index-1))]}"
    }
QPKGs.ToUpgrade.Init()
    {
    _object_qpkgs_toupgrade_size_=0
    _object_qpkgs_toupgrade_array_=()
    _object_qpkgs_toupgrade_array_index_=1
    }
QPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_toupgrade_array_[@]:-} -gt 0 ]]
    }
QPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_toupgrade_array_[@]:-} -eq 0 ]]
    }
QPKGs.ToUpgrade.List()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[*]:-}"
    }
QPKGs.ToUpgrade.ListCSV()
    {
    echo -n "${_object_qpkgs_toupgrade_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ToUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_toupgrade_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_toupgrade_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_toupgrade_array_[*]} ]] && _object_qpkgs_toupgrade_array_=()
    }
QPKGs.ToUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_toupgrade_size_=$2
    else
        echo -n $_object_qpkgs_toupgrade_size_
    fi
    }
QPKGs.ToUpgrade.Init

QPKGs.IsUpgrade.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_isupgrade_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_isupgrade_array_+=("$item")
    done
    }
QPKGs.IsUpgrade.Array()
    {
    echo -n "${_object_qpkgs_isupgrade_array_[@]:-}"
    }
QPKGs.IsUpgrade.Count()
    {
    echo "${#_object_qpkgs_isupgrade_array_[@]:-}"
    }
QPKGs.IsUpgrade.Exist()
    {
    [[ ${_object_qpkgs_isupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsUpgrade.First()
    {
    echo "${_object_qpkgs_isupgrade_array_[0]}"
    }
QPKGs.IsUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_isupgrade_array_[@]:-} ]] && index=${#_object_qpkgs_isupgrade_array_[@]}
    echo -n "${_object_qpkgs_isupgrade_array_[((index-1))]}"
    }
QPKGs.IsUpgrade.Init()
    {
    _object_qpkgs_isupgrade_size_=0
    _object_qpkgs_isupgrade_array_=()
    _object_qpkgs_isupgrade_array_index_=1
    }
QPKGs.IsUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_isupgrade_array_[@]:-} -gt 0 ]]
    }
QPKGs.IsUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_isupgrade_array_[@]:-} -eq 0 ]]
    }
QPKGs.IsUpgrade.List()
    {
    echo -n "${_object_qpkgs_isupgrade_array_[*]:-}"
    }
QPKGs.IsUpgrade.ListCSV()
    {
    echo -n "${_object_qpkgs_isupgrade_array_[*]:-}" | tr ' ' ','
    }
QPKGs.IsUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_isupgrade_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_isupgrade_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_isupgrade_array_[*]} ]] && _object_qpkgs_isupgrade_array_=()
    }
QPKGs.IsUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_isupgrade_size_=$2
    else
        echo -n $_object_qpkgs_isupgrade_size_
    fi
    }
QPKGs.IsUpgrade.Init

QPKGs.ErUpgrade.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_erupgrade_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_erupgrade_array_+=("$item")
    done
    }
QPKGs.ErUpgrade.Array()
    {
    echo -n "${_object_qpkgs_erupgrade_array_[@]:-}"
    }
QPKGs.ErUpgrade.Count()
    {
    echo "${#_object_qpkgs_erupgrade_array_[@]:-}"
    }
QPKGs.ErUpgrade.Exist()
    {
    [[ ${_object_qpkgs_erupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUpgrade.First()
    {
    echo "${_object_qpkgs_erupgrade_array_[0]}"
    }
QPKGs.ErUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_erupgrade_array_[@]:-} ]] && index=${#_object_qpkgs_erupgrade_array_[@]}
    echo -n "${_object_qpkgs_erupgrade_array_[((index-1))]}"
    }
QPKGs.ErUpgrade.Init()
    {
    _object_qpkgs_erupgrade_size_=0
    _object_qpkgs_erupgrade_array_=()
    _object_qpkgs_erupgrade_array_index_=1
    }
QPKGs.ErUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_erupgrade_array_[@]:-} -gt 0 ]]
    }
QPKGs.ErUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_erupgrade_array_[@]:-} -eq 0 ]]
    }
QPKGs.ErUpgrade.List()
    {
    echo -n "${_object_qpkgs_erupgrade_array_[*]:-}"
    }
QPKGs.ErUpgrade.ListCSV()
    {
    echo -n "${_object_qpkgs_erupgrade_array_[*]:-}" | tr ' ' ','
    }
QPKGs.ErUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_erupgrade_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_erupgrade_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_erupgrade_array_[*]} ]] && _object_qpkgs_erupgrade_array_=()
    }
QPKGs.ErUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_erupgrade_size_=$2
    else
        echo -n $_object_qpkgs_erupgrade_size_
    fi
    }
QPKGs.ErUpgrade.Init

QPKGs.SkUpgrade.Add()
    {
    local array=(${1})
    local item=''
    for item in "${array[@]:-}"; do
        [[ " ${_object_qpkgs_skupgrade_array_[*]:-} " != *"$item"* ]] && _object_qpkgs_skupgrade_array_+=("$item")
    done
    }
QPKGs.SkUpgrade.Array()
    {
    echo -n "${_object_qpkgs_skupgrade_array_[@]:-}"
    }
QPKGs.SkUpgrade.Count()
    {
    echo "${#_object_qpkgs_skupgrade_array_[@]:-}"
    }
QPKGs.SkUpgrade.Exist()
    {
    [[ ${_object_qpkgs_skupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUpgrade.First()
    {
    echo "${_object_qpkgs_skupgrade_array_[0]}"
    }
QPKGs.SkUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_object_qpkgs_skupgrade_array_[@]:-} ]] && index=${#_object_qpkgs_skupgrade_array_[@]}
    echo -n "${_object_qpkgs_skupgrade_array_[((index-1))]}"
    }
QPKGs.SkUpgrade.Init()
    {
    _object_qpkgs_skupgrade_size_=0
    _object_qpkgs_skupgrade_array_=()
    _object_qpkgs_skupgrade_array_index_=1
    }
QPKGs.SkUpgrade.IsAny()
    {
    [[ ${#_object_qpkgs_skupgrade_array_[@]:-} -gt 0 ]]
    }
QPKGs.SkUpgrade.IsNone()
    {
    [[ ${#_object_qpkgs_skupgrade_array_[@]:-} -eq 0 ]]
    }
QPKGs.SkUpgrade.List()
    {
    echo -n "${_object_qpkgs_skupgrade_array_[*]:-}"
    }
QPKGs.SkUpgrade.ListCSV()
    {
    echo -n "${_object_qpkgs_skupgrade_array_[*]:-}" | tr ' ' ','
    }
QPKGs.SkUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_object_qpkgs_skupgrade_array_[@]:-}"; do
        matched=false
        for argument in "${argument_array[@]:-}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _object_qpkgs_skupgrade_array_=("${temp_array[@]:-}")
    [[ -z ${_object_qpkgs_skupgrade_array_[*]} ]] && _object_qpkgs_skupgrade_array_=()
    }
QPKGs.SkUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _object_qpkgs_skupgrade_size_=$2
    else
        echo -n $_object_qpkgs_skupgrade_size_
    fi
    }
QPKGs.SkUpgrade.Init

