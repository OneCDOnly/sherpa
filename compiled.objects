Session.Display.Clean.Clear()
    {
    [[ $_obj_session_display_clean_flag_ != 'true' ]] && return
    _obj_session_display_clean_flag_=false
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_flag_
    }
Session.Display.Clean.Disable()
    {
    [[ $_obj_session_display_clean_enable_ != 'true' ]] && return
    _obj_session_display_clean_enable_=false
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_enable_
    }
Session.Display.Clean.DontLogChanges()
    {
    [[ $_obj_session_display_clean_changes_flag_ != 'true' ]] && return
    _obj_session_display_clean_changes_flag_=false
    }
Session.Display.Clean.Enable()
    {
    [[ $_obj_session_display_clean_enable_ = 'true' ]] && return
    _obj_session_display_clean_enable_=true
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_enable_
    }
Session.Display.Clean.Init()
    {
    _obj_session_display_clean_text_=''
    _obj_session_display_clean_flag_=false
    _obj_session_display_clean_changes_flag_=true
    _obj_session_display_clean_enable_=false
    }
Session.Display.Clean.IsDisabled()
    {
    [[ $_obj_session_display_clean_enable_ != 'true' ]]
    }
Session.Display.Clean.IsEnabled()
    {
    [[ $_obj_session_display_clean_enable_ = 'true' ]]
    }
Session.Display.Clean.IsNot()
    {
    [[ $_obj_session_display_clean_flag_ != 'true' ]]
    }
Session.Display.Clean.IsSet()
    {
    [[ $_obj_session_display_clean_flag_ = 'true' ]]
    }
Session.Display.Clean.LogChanges()
    {
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && return
    _obj_session_display_clean_changes_flag_=true
    }
Session.Display.Clean.Set()
    {
    [[ $_obj_session_display_clean_flag_ = 'true' ]] && return
    _obj_session_display_clean_flag_=true
    [[ $_obj_session_display_clean_changes_flag_ = 'true' ]] && DebugVar _obj_session_display_clean_flag_
    }
Session.Display.Clean.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_display_clean_text_=$2
    else
        echo -n "$_obj_session_display_clean_text_"
    fi
    }
Session.Display.Clean.Init

Session.LineSpace.Clear()
    {
    [[ $_obj_session_linespace_flag_ != 'true' ]] && return
    _obj_session_linespace_flag_=false
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_flag_
    }
Session.LineSpace.Disable()
    {
    [[ $_obj_session_linespace_enable_ != 'true' ]] && return
    _obj_session_linespace_enable_=false
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_enable_
    }
Session.LineSpace.DontLogChanges()
    {
    [[ $_obj_session_linespace_changes_flag_ != 'true' ]] && return
    _obj_session_linespace_changes_flag_=false
    }
Session.LineSpace.Enable()
    {
    [[ $_obj_session_linespace_enable_ = 'true' ]] && return
    _obj_session_linespace_enable_=true
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_enable_
    }
Session.LineSpace.Init()
    {
    _obj_session_linespace_text_=''
    _obj_session_linespace_flag_=false
    _obj_session_linespace_changes_flag_=true
    _obj_session_linespace_enable_=false
    }
Session.LineSpace.IsDisabled()
    {
    [[ $_obj_session_linespace_enable_ != 'true' ]]
    }
Session.LineSpace.IsEnabled()
    {
    [[ $_obj_session_linespace_enable_ = 'true' ]]
    }
Session.LineSpace.IsNot()
    {
    [[ $_obj_session_linespace_flag_ != 'true' ]]
    }
Session.LineSpace.IsSet()
    {
    [[ $_obj_session_linespace_flag_ = 'true' ]]
    }
Session.LineSpace.LogChanges()
    {
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && return
    _obj_session_linespace_changes_flag_=true
    }
Session.LineSpace.Set()
    {
    [[ $_obj_session_linespace_flag_ = 'true' ]] && return
    _obj_session_linespace_flag_=true
    [[ $_obj_session_linespace_changes_flag_ = 'true' ]] && DebugVar _obj_session_linespace_flag_
    }
Session.LineSpace.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_linespace_text_=$2
    else
        echo -n "$_obj_session_linespace_text_"
    fi
    }
Session.LineSpace.Init

Session.ShowBackupLocation.Clear()
    {
    [[ $_obj_session_showbackuplocation_flag_ != 'true' ]] && return
    _obj_session_showbackuplocation_flag_=false
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Disable()
    {
    [[ $_obj_session_showbackuplocation_enable_ != 'true' ]] && return
    _obj_session_showbackuplocation_enable_=false
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.DontLogChanges()
    {
    [[ $_obj_session_showbackuplocation_changes_flag_ != 'true' ]] && return
    _obj_session_showbackuplocation_changes_flag_=false
    }
Session.ShowBackupLocation.Enable()
    {
    [[ $_obj_session_showbackuplocation_enable_ = 'true' ]] && return
    _obj_session_showbackuplocation_enable_=true
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_enable_
    }
Session.ShowBackupLocation.Init()
    {
    _obj_session_showbackuplocation_text_=''
    _obj_session_showbackuplocation_flag_=false
    _obj_session_showbackuplocation_changes_flag_=true
    _obj_session_showbackuplocation_enable_=false
    }
Session.ShowBackupLocation.IsDisabled()
    {
    [[ $_obj_session_showbackuplocation_enable_ != 'true' ]]
    }
Session.ShowBackupLocation.IsEnabled()
    {
    [[ $_obj_session_showbackuplocation_enable_ = 'true' ]]
    }
Session.ShowBackupLocation.IsNot()
    {
    [[ $_obj_session_showbackuplocation_flag_ != 'true' ]]
    }
Session.ShowBackupLocation.IsSet()
    {
    [[ $_obj_session_showbackuplocation_flag_ = 'true' ]]
    }
Session.ShowBackupLocation.LogChanges()
    {
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && return
    _obj_session_showbackuplocation_changes_flag_=true
    }
Session.ShowBackupLocation.Set()
    {
    [[ $_obj_session_showbackuplocation_flag_ = 'true' ]] && return
    _obj_session_showbackuplocation_flag_=true
    [[ $_obj_session_showbackuplocation_changes_flag_ = 'true' ]] && DebugVar _obj_session_showbackuplocation_flag_
    }
Session.ShowBackupLocation.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_showbackuplocation_text_=$2
    else
        echo -n "$_obj_session_showbackuplocation_text_"
    fi
    }
Session.ShowBackupLocation.Init

Session.SuggestIssue.Clear()
    {
    [[ $_obj_session_suggestissue_flag_ != 'true' ]] && return
    _obj_session_suggestissue_flag_=false
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_flag_
    }
Session.SuggestIssue.Disable()
    {
    [[ $_obj_session_suggestissue_enable_ != 'true' ]] && return
    _obj_session_suggestissue_enable_=false
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_enable_
    }
Session.SuggestIssue.DontLogChanges()
    {
    [[ $_obj_session_suggestissue_changes_flag_ != 'true' ]] && return
    _obj_session_suggestissue_changes_flag_=false
    }
Session.SuggestIssue.Enable()
    {
    [[ $_obj_session_suggestissue_enable_ = 'true' ]] && return
    _obj_session_suggestissue_enable_=true
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_enable_
    }
Session.SuggestIssue.Init()
    {
    _obj_session_suggestissue_text_=''
    _obj_session_suggestissue_flag_=false
    _obj_session_suggestissue_changes_flag_=true
    _obj_session_suggestissue_enable_=false
    }
Session.SuggestIssue.IsDisabled()
    {
    [[ $_obj_session_suggestissue_enable_ != 'true' ]]
    }
Session.SuggestIssue.IsEnabled()
    {
    [[ $_obj_session_suggestissue_enable_ = 'true' ]]
    }
Session.SuggestIssue.IsNot()
    {
    [[ $_obj_session_suggestissue_flag_ != 'true' ]]
    }
Session.SuggestIssue.IsSet()
    {
    [[ $_obj_session_suggestissue_flag_ = 'true' ]]
    }
Session.SuggestIssue.LogChanges()
    {
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && return
    _obj_session_suggestissue_changes_flag_=true
    }
Session.SuggestIssue.Set()
    {
    [[ $_obj_session_suggestissue_flag_ = 'true' ]] && return
    _obj_session_suggestissue_flag_=true
    [[ $_obj_session_suggestissue_changes_flag_ = 'true' ]] && DebugVar _obj_session_suggestissue_flag_
    }
Session.SuggestIssue.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_suggestissue_text_=$2
    else
        echo -n "$_obj_session_suggestissue_text_"
    fi
    }
Session.SuggestIssue.Init

Session.Summary.Clear()
    {
    [[ $_obj_session_summary_flag_ != 'true' ]] && return
    _obj_session_summary_flag_=false
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_flag_
    }
Session.Summary.Disable()
    {
    [[ $_obj_session_summary_enable_ != 'true' ]] && return
    _obj_session_summary_enable_=false
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_enable_
    }
Session.Summary.DontLogChanges()
    {
    [[ $_obj_session_summary_changes_flag_ != 'true' ]] && return
    _obj_session_summary_changes_flag_=false
    }
Session.Summary.Enable()
    {
    [[ $_obj_session_summary_enable_ = 'true' ]] && return
    _obj_session_summary_enable_=true
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_enable_
    }
Session.Summary.Init()
    {
    _obj_session_summary_text_=''
    _obj_session_summary_flag_=false
    _obj_session_summary_changes_flag_=true
    _obj_session_summary_enable_=false
    }
Session.Summary.IsDisabled()
    {
    [[ $_obj_session_summary_enable_ != 'true' ]]
    }
Session.Summary.IsEnabled()
    {
    [[ $_obj_session_summary_enable_ = 'true' ]]
    }
Session.Summary.IsNot()
    {
    [[ $_obj_session_summary_flag_ != 'true' ]]
    }
Session.Summary.IsSet()
    {
    [[ $_obj_session_summary_flag_ = 'true' ]]
    }
Session.Summary.LogChanges()
    {
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && return
    _obj_session_summary_changes_flag_=true
    }
Session.Summary.Set()
    {
    [[ $_obj_session_summary_flag_ = 'true' ]] && return
    _obj_session_summary_flag_=true
    [[ $_obj_session_summary_changes_flag_ = 'true' ]] && DebugVar _obj_session_summary_flag_
    }
Session.Summary.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_summary_text_=$2
    else
        echo -n "$_obj_session_summary_text_"
    fi
    }
Session.Summary.Init

Session.Debug.ToArchive.Clear()
    {
    [[ $_obj_session_debug_toarchive_flag_ != 'true' ]] && return
    _obj_session_debug_toarchive_flag_=false
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_flag_
    }
Session.Debug.ToArchive.Disable()
    {
    [[ $_obj_session_debug_toarchive_enable_ != 'true' ]] && return
    _obj_session_debug_toarchive_enable_=false
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_enable_
    }
Session.Debug.ToArchive.DontLogChanges()
    {
    [[ $_obj_session_debug_toarchive_changes_flag_ != 'true' ]] && return
    _obj_session_debug_toarchive_changes_flag_=false
    }
Session.Debug.ToArchive.Enable()
    {
    [[ $_obj_session_debug_toarchive_enable_ = 'true' ]] && return
    _obj_session_debug_toarchive_enable_=true
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_enable_
    }
Session.Debug.ToArchive.Init()
    {
    _obj_session_debug_toarchive_text_=''
    _obj_session_debug_toarchive_flag_=false
    _obj_session_debug_toarchive_changes_flag_=true
    _obj_session_debug_toarchive_enable_=false
    }
Session.Debug.ToArchive.IsDisabled()
    {
    [[ $_obj_session_debug_toarchive_enable_ != 'true' ]]
    }
Session.Debug.ToArchive.IsEnabled()
    {
    [[ $_obj_session_debug_toarchive_enable_ = 'true' ]]
    }
Session.Debug.ToArchive.IsNot()
    {
    [[ $_obj_session_debug_toarchive_flag_ != 'true' ]]
    }
Session.Debug.ToArchive.IsSet()
    {
    [[ $_obj_session_debug_toarchive_flag_ = 'true' ]]
    }
Session.Debug.ToArchive.LogChanges()
    {
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && return
    _obj_session_debug_toarchive_changes_flag_=true
    }
Session.Debug.ToArchive.Set()
    {
    [[ $_obj_session_debug_toarchive_flag_ = 'true' ]] && return
    _obj_session_debug_toarchive_flag_=true
    [[ $_obj_session_debug_toarchive_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toarchive_flag_
    }
Session.Debug.ToArchive.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_toarchive_text_=$2
    else
        echo -n "$_obj_session_debug_toarchive_text_"
    fi
    }
Session.Debug.ToArchive.Init

Session.Debug.ToFile.Clear()
    {
    [[ $_obj_session_debug_tofile_flag_ != 'true' ]] && return
    _obj_session_debug_tofile_flag_=false
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_flag_
    }
Session.Debug.ToFile.Disable()
    {
    [[ $_obj_session_debug_tofile_enable_ != 'true' ]] && return
    _obj_session_debug_tofile_enable_=false
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_enable_
    }
Session.Debug.ToFile.DontLogChanges()
    {
    [[ $_obj_session_debug_tofile_changes_flag_ != 'true' ]] && return
    _obj_session_debug_tofile_changes_flag_=false
    }
Session.Debug.ToFile.Enable()
    {
    [[ $_obj_session_debug_tofile_enable_ = 'true' ]] && return
    _obj_session_debug_tofile_enable_=true
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_enable_
    }
Session.Debug.ToFile.Init()
    {
    _obj_session_debug_tofile_text_=''
    _obj_session_debug_tofile_flag_=false
    _obj_session_debug_tofile_changes_flag_=true
    _obj_session_debug_tofile_enable_=false
    }
Session.Debug.ToFile.IsDisabled()
    {
    [[ $_obj_session_debug_tofile_enable_ != 'true' ]]
    }
Session.Debug.ToFile.IsEnabled()
    {
    [[ $_obj_session_debug_tofile_enable_ = 'true' ]]
    }
Session.Debug.ToFile.IsNot()
    {
    [[ $_obj_session_debug_tofile_flag_ != 'true' ]]
    }
Session.Debug.ToFile.IsSet()
    {
    [[ $_obj_session_debug_tofile_flag_ = 'true' ]]
    }
Session.Debug.ToFile.LogChanges()
    {
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && return
    _obj_session_debug_tofile_changes_flag_=true
    }
Session.Debug.ToFile.Set()
    {
    [[ $_obj_session_debug_tofile_flag_ = 'true' ]] && return
    _obj_session_debug_tofile_flag_=true
    [[ $_obj_session_debug_tofile_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_tofile_flag_
    }
Session.Debug.ToFile.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_tofile_text_=$2
    else
        echo -n "$_obj_session_debug_tofile_text_"
    fi
    }
Session.Debug.ToFile.Init

Session.Debug.ToScreen.Clear()
    {
    [[ $_obj_session_debug_toscreen_flag_ != 'true' ]] && return
    _obj_session_debug_toscreen_flag_=false
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_flag_
    }
Session.Debug.ToScreen.Disable()
    {
    [[ $_obj_session_debug_toscreen_enable_ != 'true' ]] && return
    _obj_session_debug_toscreen_enable_=false
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_enable_
    }
Session.Debug.ToScreen.DontLogChanges()
    {
    [[ $_obj_session_debug_toscreen_changes_flag_ != 'true' ]] && return
    _obj_session_debug_toscreen_changes_flag_=false
    }
Session.Debug.ToScreen.Enable()
    {
    [[ $_obj_session_debug_toscreen_enable_ = 'true' ]] && return
    _obj_session_debug_toscreen_enable_=true
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_enable_
    }
Session.Debug.ToScreen.Init()
    {
    _obj_session_debug_toscreen_text_=''
    _obj_session_debug_toscreen_flag_=false
    _obj_session_debug_toscreen_changes_flag_=true
    _obj_session_debug_toscreen_enable_=false
    }
Session.Debug.ToScreen.IsDisabled()
    {
    [[ $_obj_session_debug_toscreen_enable_ != 'true' ]]
    }
Session.Debug.ToScreen.IsEnabled()
    {
    [[ $_obj_session_debug_toscreen_enable_ = 'true' ]]
    }
Session.Debug.ToScreen.IsNot()
    {
    [[ $_obj_session_debug_toscreen_flag_ != 'true' ]]
    }
Session.Debug.ToScreen.IsSet()
    {
    [[ $_obj_session_debug_toscreen_flag_ = 'true' ]]
    }
Session.Debug.ToScreen.LogChanges()
    {
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && return
    _obj_session_debug_toscreen_changes_flag_=true
    }
Session.Debug.ToScreen.Set()
    {
    [[ $_obj_session_debug_toscreen_flag_ = 'true' ]] && return
    _obj_session_debug_toscreen_flag_=true
    [[ $_obj_session_debug_toscreen_changes_flag_ = 'true' ]] && DebugVar _obj_session_debug_toscreen_flag_
    }
Session.Debug.ToScreen.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_session_debug_toscreen_text_=$2
    else
        echo -n "$_obj_session_debug_toscreen_text_"
    fi
    }
Session.Debug.ToScreen.Init

QPKGs.States.Built.Clear()
    {
    [[ $_obj_qpkgs_states_built_flag_ != 'true' ]] && return
    _obj_qpkgs_states_built_flag_=false
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_flag_
    }
QPKGs.States.Built.Disable()
    {
    [[ $_obj_qpkgs_states_built_enable_ != 'true' ]] && return
    _obj_qpkgs_states_built_enable_=false
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_enable_
    }
QPKGs.States.Built.DontLogChanges()
    {
    [[ $_obj_qpkgs_states_built_changes_flag_ != 'true' ]] && return
    _obj_qpkgs_states_built_changes_flag_=false
    }
QPKGs.States.Built.Enable()
    {
    [[ $_obj_qpkgs_states_built_enable_ = 'true' ]] && return
    _obj_qpkgs_states_built_enable_=true
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_enable_
    }
QPKGs.States.Built.Init()
    {
    _obj_qpkgs_states_built_text_=''
    _obj_qpkgs_states_built_flag_=false
    _obj_qpkgs_states_built_changes_flag_=true
    _obj_qpkgs_states_built_enable_=false
    }
QPKGs.States.Built.IsDisabled()
    {
    [[ $_obj_qpkgs_states_built_enable_ != 'true' ]]
    }
QPKGs.States.Built.IsEnabled()
    {
    [[ $_obj_qpkgs_states_built_enable_ = 'true' ]]
    }
QPKGs.States.Built.IsNot()
    {
    [[ $_obj_qpkgs_states_built_flag_ != 'true' ]]
    }
QPKGs.States.Built.IsSet()
    {
    [[ $_obj_qpkgs_states_built_flag_ = 'true' ]]
    }
QPKGs.States.Built.LogChanges()
    {
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && return
    _obj_qpkgs_states_built_changes_flag_=true
    }
QPKGs.States.Built.Set()
    {
    [[ $_obj_qpkgs_states_built_flag_ = 'true' ]] && return
    _obj_qpkgs_states_built_flag_=true
    [[ $_obj_qpkgs_states_built_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_states_built_flag_
    }
QPKGs.States.Built.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_qpkgs_states_built_text_=$2
    else
        echo -n "$_obj_qpkgs_states_built_text_"
    fi
    }
QPKGs.States.Built.Init

QPKGs.SkipProcessing.Clear()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_flag_=false
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_flag_
    }
QPKGs.SkipProcessing.Disable()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_enable_=false
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_enable_
    }
QPKGs.SkipProcessing.DontLogChanges()
    {
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ != 'true' ]] && return
    _obj_qpkgs_skipprocessing_changes_flag_=false
    }
QPKGs.SkipProcessing.Enable()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_enable_=true
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_enable_
    }
QPKGs.SkipProcessing.Init()
    {
    _obj_qpkgs_skipprocessing_text_=''
    _obj_qpkgs_skipprocessing_flag_=false
    _obj_qpkgs_skipprocessing_changes_flag_=true
    _obj_qpkgs_skipprocessing_enable_=false
    }
QPKGs.SkipProcessing.IsDisabled()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ != 'true' ]]
    }
QPKGs.SkipProcessing.IsEnabled()
    {
    [[ $_obj_qpkgs_skipprocessing_enable_ = 'true' ]]
    }
QPKGs.SkipProcessing.IsNot()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ != 'true' ]]
    }
QPKGs.SkipProcessing.IsSet()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ = 'true' ]]
    }
QPKGs.SkipProcessing.LogChanges()
    {
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_changes_flag_=true
    }
QPKGs.SkipProcessing.Set()
    {
    [[ $_obj_qpkgs_skipprocessing_flag_ = 'true' ]] && return
    _obj_qpkgs_skipprocessing_flag_=true
    [[ $_obj_qpkgs_skipprocessing_changes_flag_ = 'true' ]] && DebugVar _obj_qpkgs_skipprocessing_flag_
    }
QPKGs.SkipProcessing.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_qpkgs_skipprocessing_text_=$2
    else
        echo -n "$_obj_qpkgs_skipprocessing_text_"
    fi
    }
QPKGs.SkipProcessing.Init

IPKGs.Upgrade.Clear()
    {
    [[ $_obj_ipkgs_upgrade_flag_ != 'true' ]] && return
    _obj_ipkgs_upgrade_flag_=false
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_flag_
    }
IPKGs.Upgrade.Disable()
    {
    [[ $_obj_ipkgs_upgrade_enable_ != 'true' ]] && return
    _obj_ipkgs_upgrade_enable_=false
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_enable_
    }
IPKGs.Upgrade.DontLogChanges()
    {
    [[ $_obj_ipkgs_upgrade_changes_flag_ != 'true' ]] && return
    _obj_ipkgs_upgrade_changes_flag_=false
    }
IPKGs.Upgrade.Enable()
    {
    [[ $_obj_ipkgs_upgrade_enable_ = 'true' ]] && return
    _obj_ipkgs_upgrade_enable_=true
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_enable_
    }
IPKGs.Upgrade.Init()
    {
    _obj_ipkgs_upgrade_text_=''
    _obj_ipkgs_upgrade_flag_=false
    _obj_ipkgs_upgrade_changes_flag_=true
    _obj_ipkgs_upgrade_enable_=false
    }
IPKGs.Upgrade.IsDisabled()
    {
    [[ $_obj_ipkgs_upgrade_enable_ != 'true' ]]
    }
IPKGs.Upgrade.IsEnabled()
    {
    [[ $_obj_ipkgs_upgrade_enable_ = 'true' ]]
    }
IPKGs.Upgrade.IsNot()
    {
    [[ $_obj_ipkgs_upgrade_flag_ != 'true' ]]
    }
IPKGs.Upgrade.IsSet()
    {
    [[ $_obj_ipkgs_upgrade_flag_ = 'true' ]]
    }
IPKGs.Upgrade.LogChanges()
    {
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && return
    _obj_ipkgs_upgrade_changes_flag_=true
    }
IPKGs.Upgrade.Set()
    {
    [[ $_obj_ipkgs_upgrade_flag_ = 'true' ]] && return
    _obj_ipkgs_upgrade_flag_=true
    [[ $_obj_ipkgs_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_upgrade_flag_
    }
IPKGs.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_ipkgs_upgrade_text_=$2
    else
        echo -n "$_obj_ipkgs_upgrade_text_"
    fi
    }
IPKGs.Upgrade.Init

IPKGs.Install.Clear()
    {
    [[ $_obj_ipkgs_install_flag_ != 'true' ]] && return
    _obj_ipkgs_install_flag_=false
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_flag_
    }
IPKGs.Install.Disable()
    {
    [[ $_obj_ipkgs_install_enable_ != 'true' ]] && return
    _obj_ipkgs_install_enable_=false
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_enable_
    }
IPKGs.Install.DontLogChanges()
    {
    [[ $_obj_ipkgs_install_changes_flag_ != 'true' ]] && return
    _obj_ipkgs_install_changes_flag_=false
    }
IPKGs.Install.Enable()
    {
    [[ $_obj_ipkgs_install_enable_ = 'true' ]] && return
    _obj_ipkgs_install_enable_=true
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_enable_
    }
IPKGs.Install.Init()
    {
    _obj_ipkgs_install_text_=''
    _obj_ipkgs_install_flag_=false
    _obj_ipkgs_install_changes_flag_=true
    _obj_ipkgs_install_enable_=false
    }
IPKGs.Install.IsDisabled()
    {
    [[ $_obj_ipkgs_install_enable_ != 'true' ]]
    }
IPKGs.Install.IsEnabled()
    {
    [[ $_obj_ipkgs_install_enable_ = 'true' ]]
    }
IPKGs.Install.IsNot()
    {
    [[ $_obj_ipkgs_install_flag_ != 'true' ]]
    }
IPKGs.Install.IsSet()
    {
    [[ $_obj_ipkgs_install_flag_ = 'true' ]]
    }
IPKGs.Install.LogChanges()
    {
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && return
    _obj_ipkgs_install_changes_flag_=true
    }
IPKGs.Install.Set()
    {
    [[ $_obj_ipkgs_install_flag_ = 'true' ]] && return
    _obj_ipkgs_install_flag_=true
    [[ $_obj_ipkgs_install_changes_flag_ = 'true' ]] && DebugVar _obj_ipkgs_install_flag_
    }
IPKGs.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_ipkgs_install_text_=$2
    else
        echo -n "$_obj_ipkgs_install_text_"
    fi
    }
IPKGs.Install.Init

PIPs.Install.Clear()
    {
    [[ $_obj_pips_install_flag_ != 'true' ]] && return
    _obj_pips_install_flag_=false
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_flag_
    }
PIPs.Install.Disable()
    {
    [[ $_obj_pips_install_enable_ != 'true' ]] && return
    _obj_pips_install_enable_=false
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_enable_
    }
PIPs.Install.DontLogChanges()
    {
    [[ $_obj_pips_install_changes_flag_ != 'true' ]] && return
    _obj_pips_install_changes_flag_=false
    }
PIPs.Install.Enable()
    {
    [[ $_obj_pips_install_enable_ = 'true' ]] && return
    _obj_pips_install_enable_=true
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_enable_
    }
PIPs.Install.Init()
    {
    _obj_pips_install_text_=''
    _obj_pips_install_flag_=false
    _obj_pips_install_changes_flag_=true
    _obj_pips_install_enable_=false
    }
PIPs.Install.IsDisabled()
    {
    [[ $_obj_pips_install_enable_ != 'true' ]]
    }
PIPs.Install.IsEnabled()
    {
    [[ $_obj_pips_install_enable_ = 'true' ]]
    }
PIPs.Install.IsNot()
    {
    [[ $_obj_pips_install_flag_ != 'true' ]]
    }
PIPs.Install.IsSet()
    {
    [[ $_obj_pips_install_flag_ = 'true' ]]
    }
PIPs.Install.LogChanges()
    {
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && return
    _obj_pips_install_changes_flag_=true
    }
PIPs.Install.Set()
    {
    [[ $_obj_pips_install_flag_ = 'true' ]] && return
    _obj_pips_install_flag_=true
    [[ $_obj_pips_install_changes_flag_ = 'true' ]] && DebugVar _obj_pips_install_flag_
    }
PIPs.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_pips_install_text_=$2
    else
        echo -n "$_obj_pips_install_text_"
    fi
    }
PIPs.Install.Init

Opts.Dependencies.Check.Clear()
    {
    [[ $_obj_opts_dependencies_check_flag_ != 'true' ]] && return
    _obj_opts_dependencies_check_flag_=false
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_flag_
    }
Opts.Dependencies.Check.Disable()
    {
    [[ $_obj_opts_dependencies_check_enable_ != 'true' ]] && return
    _obj_opts_dependencies_check_enable_=false
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_enable_
    }
Opts.Dependencies.Check.DontLogChanges()
    {
    [[ $_obj_opts_dependencies_check_changes_flag_ != 'true' ]] && return
    _obj_opts_dependencies_check_changes_flag_=false
    }
Opts.Dependencies.Check.Enable()
    {
    [[ $_obj_opts_dependencies_check_enable_ = 'true' ]] && return
    _obj_opts_dependencies_check_enable_=true
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_enable_
    }
Opts.Dependencies.Check.Init()
    {
    _obj_opts_dependencies_check_text_=''
    _obj_opts_dependencies_check_flag_=false
    _obj_opts_dependencies_check_changes_flag_=true
    _obj_opts_dependencies_check_enable_=false
    }
Opts.Dependencies.Check.IsDisabled()
    {
    [[ $_obj_opts_dependencies_check_enable_ != 'true' ]]
    }
Opts.Dependencies.Check.IsEnabled()
    {
    [[ $_obj_opts_dependencies_check_enable_ = 'true' ]]
    }
Opts.Dependencies.Check.IsNot()
    {
    [[ $_obj_opts_dependencies_check_flag_ != 'true' ]]
    }
Opts.Dependencies.Check.IsSet()
    {
    [[ $_obj_opts_dependencies_check_flag_ = 'true' ]]
    }
Opts.Dependencies.Check.LogChanges()
    {
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && return
    _obj_opts_dependencies_check_changes_flag_=true
    }
Opts.Dependencies.Check.Set()
    {
    [[ $_obj_opts_dependencies_check_flag_ = 'true' ]] && return
    _obj_opts_dependencies_check_flag_=true
    [[ $_obj_opts_dependencies_check_changes_flag_ = 'true' ]] && DebugVar _obj_opts_dependencies_check_flag_
    }
Opts.Dependencies.Check.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_dependencies_check_text_=$2
    else
        echo -n "$_obj_opts_dependencies_check_text_"
    fi
    }
Opts.Dependencies.Check.Init

Opts.IgnoreFreeSpace.Clear()
    {
    [[ $_obj_opts_ignorefreespace_flag_ != 'true' ]] && return
    _obj_opts_ignorefreespace_flag_=false
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_flag_
    }
Opts.IgnoreFreeSpace.Disable()
    {
    [[ $_obj_opts_ignorefreespace_enable_ != 'true' ]] && return
    _obj_opts_ignorefreespace_enable_=false
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_enable_
    }
Opts.IgnoreFreeSpace.DontLogChanges()
    {
    [[ $_obj_opts_ignorefreespace_changes_flag_ != 'true' ]] && return
    _obj_opts_ignorefreespace_changes_flag_=false
    }
Opts.IgnoreFreeSpace.Enable()
    {
    [[ $_obj_opts_ignorefreespace_enable_ = 'true' ]] && return
    _obj_opts_ignorefreespace_enable_=true
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_enable_
    }
Opts.IgnoreFreeSpace.Init()
    {
    _obj_opts_ignorefreespace_text_=''
    _obj_opts_ignorefreespace_flag_=false
    _obj_opts_ignorefreespace_changes_flag_=true
    _obj_opts_ignorefreespace_enable_=false
    }
Opts.IgnoreFreeSpace.IsDisabled()
    {
    [[ $_obj_opts_ignorefreespace_enable_ != 'true' ]]
    }
Opts.IgnoreFreeSpace.IsEnabled()
    {
    [[ $_obj_opts_ignorefreespace_enable_ = 'true' ]]
    }
Opts.IgnoreFreeSpace.IsNot()
    {
    [[ $_obj_opts_ignorefreespace_flag_ != 'true' ]]
    }
Opts.IgnoreFreeSpace.IsSet()
    {
    [[ $_obj_opts_ignorefreespace_flag_ = 'true' ]]
    }
Opts.IgnoreFreeSpace.LogChanges()
    {
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && return
    _obj_opts_ignorefreespace_changes_flag_=true
    }
Opts.IgnoreFreeSpace.Set()
    {
    [[ $_obj_opts_ignorefreespace_flag_ = 'true' ]] && return
    _obj_opts_ignorefreespace_flag_=true
    [[ $_obj_opts_ignorefreespace_changes_flag_ = 'true' ]] && DebugVar _obj_opts_ignorefreespace_flag_
    }
Opts.IgnoreFreeSpace.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_ignorefreespace_text_=$2
    else
        echo -n "$_obj_opts_ignorefreespace_text_"
    fi
    }
Opts.IgnoreFreeSpace.Init

Opts.Versions.View.Clear()
    {
    [[ $_obj_opts_versions_view_flag_ != 'true' ]] && return
    _obj_opts_versions_view_flag_=false
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_flag_
    }
Opts.Versions.View.Disable()
    {
    [[ $_obj_opts_versions_view_enable_ != 'true' ]] && return
    _obj_opts_versions_view_enable_=false
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_enable_
    }
Opts.Versions.View.DontLogChanges()
    {
    [[ $_obj_opts_versions_view_changes_flag_ != 'true' ]] && return
    _obj_opts_versions_view_changes_flag_=false
    }
Opts.Versions.View.Enable()
    {
    [[ $_obj_opts_versions_view_enable_ = 'true' ]] && return
    _obj_opts_versions_view_enable_=true
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_enable_
    }
Opts.Versions.View.Init()
    {
    _obj_opts_versions_view_text_=''
    _obj_opts_versions_view_flag_=false
    _obj_opts_versions_view_changes_flag_=true
    _obj_opts_versions_view_enable_=false
    }
Opts.Versions.View.IsDisabled()
    {
    [[ $_obj_opts_versions_view_enable_ != 'true' ]]
    }
Opts.Versions.View.IsEnabled()
    {
    [[ $_obj_opts_versions_view_enable_ = 'true' ]]
    }
Opts.Versions.View.IsNot()
    {
    [[ $_obj_opts_versions_view_flag_ != 'true' ]]
    }
Opts.Versions.View.IsSet()
    {
    [[ $_obj_opts_versions_view_flag_ = 'true' ]]
    }
Opts.Versions.View.LogChanges()
    {
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && return
    _obj_opts_versions_view_changes_flag_=true
    }
Opts.Versions.View.Set()
    {
    [[ $_obj_opts_versions_view_flag_ = 'true' ]] && return
    _obj_opts_versions_view_flag_=true
    [[ $_obj_opts_versions_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_versions_view_flag_
    }
Opts.Versions.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_versions_view_text_=$2
    else
        echo -n "$_obj_opts_versions_view_text_"
    fi
    }
Opts.Versions.View.Init

Opts.Help.Abbreviations.Clear()
    {
    [[ $_obj_opts_help_abbreviations_flag_ != 'true' ]] && return
    _obj_opts_help_abbreviations_flag_=false
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_flag_
    }
Opts.Help.Abbreviations.Disable()
    {
    [[ $_obj_opts_help_abbreviations_enable_ != 'true' ]] && return
    _obj_opts_help_abbreviations_enable_=false
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_enable_
    }
Opts.Help.Abbreviations.DontLogChanges()
    {
    [[ $_obj_opts_help_abbreviations_changes_flag_ != 'true' ]] && return
    _obj_opts_help_abbreviations_changes_flag_=false
    }
Opts.Help.Abbreviations.Enable()
    {
    [[ $_obj_opts_help_abbreviations_enable_ = 'true' ]] && return
    _obj_opts_help_abbreviations_enable_=true
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_enable_
    }
Opts.Help.Abbreviations.Init()
    {
    _obj_opts_help_abbreviations_text_=''
    _obj_opts_help_abbreviations_flag_=false
    _obj_opts_help_abbreviations_changes_flag_=true
    _obj_opts_help_abbreviations_enable_=false
    }
Opts.Help.Abbreviations.IsDisabled()
    {
    [[ $_obj_opts_help_abbreviations_enable_ != 'true' ]]
    }
Opts.Help.Abbreviations.IsEnabled()
    {
    [[ $_obj_opts_help_abbreviations_enable_ = 'true' ]]
    }
Opts.Help.Abbreviations.IsNot()
    {
    [[ $_obj_opts_help_abbreviations_flag_ != 'true' ]]
    }
Opts.Help.Abbreviations.IsSet()
    {
    [[ $_obj_opts_help_abbreviations_flag_ = 'true' ]]
    }
Opts.Help.Abbreviations.LogChanges()
    {
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && return
    _obj_opts_help_abbreviations_changes_flag_=true
    }
Opts.Help.Abbreviations.Set()
    {
    [[ $_obj_opts_help_abbreviations_flag_ = 'true' ]] && return
    _obj_opts_help_abbreviations_flag_=true
    [[ $_obj_opts_help_abbreviations_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_abbreviations_flag_
    }
Opts.Help.Abbreviations.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_abbreviations_text_=$2
    else
        echo -n "$_obj_opts_help_abbreviations_text_"
    fi
    }
Opts.Help.Abbreviations.Init

Opts.Help.Actions.Clear()
    {
    [[ $_obj_opts_help_actions_flag_ != 'true' ]] && return
    _obj_opts_help_actions_flag_=false
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_flag_
    }
Opts.Help.Actions.Disable()
    {
    [[ $_obj_opts_help_actions_enable_ != 'true' ]] && return
    _obj_opts_help_actions_enable_=false
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_enable_
    }
Opts.Help.Actions.DontLogChanges()
    {
    [[ $_obj_opts_help_actions_changes_flag_ != 'true' ]] && return
    _obj_opts_help_actions_changes_flag_=false
    }
Opts.Help.Actions.Enable()
    {
    [[ $_obj_opts_help_actions_enable_ = 'true' ]] && return
    _obj_opts_help_actions_enable_=true
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_enable_
    }
Opts.Help.Actions.Init()
    {
    _obj_opts_help_actions_text_=''
    _obj_opts_help_actions_flag_=false
    _obj_opts_help_actions_changes_flag_=true
    _obj_opts_help_actions_enable_=false
    }
Opts.Help.Actions.IsDisabled()
    {
    [[ $_obj_opts_help_actions_enable_ != 'true' ]]
    }
Opts.Help.Actions.IsEnabled()
    {
    [[ $_obj_opts_help_actions_enable_ = 'true' ]]
    }
Opts.Help.Actions.IsNot()
    {
    [[ $_obj_opts_help_actions_flag_ != 'true' ]]
    }
Opts.Help.Actions.IsSet()
    {
    [[ $_obj_opts_help_actions_flag_ = 'true' ]]
    }
Opts.Help.Actions.LogChanges()
    {
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && return
    _obj_opts_help_actions_changes_flag_=true
    }
Opts.Help.Actions.Set()
    {
    [[ $_obj_opts_help_actions_flag_ = 'true' ]] && return
    _obj_opts_help_actions_flag_=true
    [[ $_obj_opts_help_actions_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actions_flag_
    }
Opts.Help.Actions.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_actions_text_=$2
    else
        echo -n "$_obj_opts_help_actions_text_"
    fi
    }
Opts.Help.Actions.Init

Opts.Help.ActionsAll.Clear()
    {
    [[ $_obj_opts_help_actionsall_flag_ != 'true' ]] && return
    _obj_opts_help_actionsall_flag_=false
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_flag_
    }
Opts.Help.ActionsAll.Disable()
    {
    [[ $_obj_opts_help_actionsall_enable_ != 'true' ]] && return
    _obj_opts_help_actionsall_enable_=false
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_enable_
    }
Opts.Help.ActionsAll.DontLogChanges()
    {
    [[ $_obj_opts_help_actionsall_changes_flag_ != 'true' ]] && return
    _obj_opts_help_actionsall_changes_flag_=false
    }
Opts.Help.ActionsAll.Enable()
    {
    [[ $_obj_opts_help_actionsall_enable_ = 'true' ]] && return
    _obj_opts_help_actionsall_enable_=true
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_enable_
    }
Opts.Help.ActionsAll.Init()
    {
    _obj_opts_help_actionsall_text_=''
    _obj_opts_help_actionsall_flag_=false
    _obj_opts_help_actionsall_changes_flag_=true
    _obj_opts_help_actionsall_enable_=false
    }
Opts.Help.ActionsAll.IsDisabled()
    {
    [[ $_obj_opts_help_actionsall_enable_ != 'true' ]]
    }
Opts.Help.ActionsAll.IsEnabled()
    {
    [[ $_obj_opts_help_actionsall_enable_ = 'true' ]]
    }
Opts.Help.ActionsAll.IsNot()
    {
    [[ $_obj_opts_help_actionsall_flag_ != 'true' ]]
    }
Opts.Help.ActionsAll.IsSet()
    {
    [[ $_obj_opts_help_actionsall_flag_ = 'true' ]]
    }
Opts.Help.ActionsAll.LogChanges()
    {
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && return
    _obj_opts_help_actionsall_changes_flag_=true
    }
Opts.Help.ActionsAll.Set()
    {
    [[ $_obj_opts_help_actionsall_flag_ = 'true' ]] && return
    _obj_opts_help_actionsall_flag_=true
    [[ $_obj_opts_help_actionsall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_actionsall_flag_
    }
Opts.Help.ActionsAll.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_actionsall_text_=$2
    else
        echo -n "$_obj_opts_help_actionsall_text_"
    fi
    }
Opts.Help.ActionsAll.Init

Opts.Help.Backups.Clear()
    {
    [[ $_obj_opts_help_backups_flag_ != 'true' ]] && return
    _obj_opts_help_backups_flag_=false
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_flag_
    }
Opts.Help.Backups.Disable()
    {
    [[ $_obj_opts_help_backups_enable_ != 'true' ]] && return
    _obj_opts_help_backups_enable_=false
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_enable_
    }
Opts.Help.Backups.DontLogChanges()
    {
    [[ $_obj_opts_help_backups_changes_flag_ != 'true' ]] && return
    _obj_opts_help_backups_changes_flag_=false
    }
Opts.Help.Backups.Enable()
    {
    [[ $_obj_opts_help_backups_enable_ = 'true' ]] && return
    _obj_opts_help_backups_enable_=true
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_enable_
    }
Opts.Help.Backups.Init()
    {
    _obj_opts_help_backups_text_=''
    _obj_opts_help_backups_flag_=false
    _obj_opts_help_backups_changes_flag_=true
    _obj_opts_help_backups_enable_=false
    }
Opts.Help.Backups.IsDisabled()
    {
    [[ $_obj_opts_help_backups_enable_ != 'true' ]]
    }
Opts.Help.Backups.IsEnabled()
    {
    [[ $_obj_opts_help_backups_enable_ = 'true' ]]
    }
Opts.Help.Backups.IsNot()
    {
    [[ $_obj_opts_help_backups_flag_ != 'true' ]]
    }
Opts.Help.Backups.IsSet()
    {
    [[ $_obj_opts_help_backups_flag_ = 'true' ]]
    }
Opts.Help.Backups.LogChanges()
    {
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && return
    _obj_opts_help_backups_changes_flag_=true
    }
Opts.Help.Backups.Set()
    {
    [[ $_obj_opts_help_backups_flag_ = 'true' ]] && return
    _obj_opts_help_backups_flag_=true
    [[ $_obj_opts_help_backups_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_backups_flag_
    }
Opts.Help.Backups.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_backups_text_=$2
    else
        echo -n "$_obj_opts_help_backups_text_"
    fi
    }
Opts.Help.Backups.Init

Opts.Help.Basic.Clear()
    {
    [[ $_obj_opts_help_basic_flag_ != 'true' ]] && return
    _obj_opts_help_basic_flag_=false
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_flag_
    }
Opts.Help.Basic.Disable()
    {
    [[ $_obj_opts_help_basic_enable_ != 'true' ]] && return
    _obj_opts_help_basic_enable_=false
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_enable_
    }
Opts.Help.Basic.DontLogChanges()
    {
    [[ $_obj_opts_help_basic_changes_flag_ != 'true' ]] && return
    _obj_opts_help_basic_changes_flag_=false
    }
Opts.Help.Basic.Enable()
    {
    [[ $_obj_opts_help_basic_enable_ = 'true' ]] && return
    _obj_opts_help_basic_enable_=true
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_enable_
    }
Opts.Help.Basic.Init()
    {
    _obj_opts_help_basic_text_=''
    _obj_opts_help_basic_flag_=false
    _obj_opts_help_basic_changes_flag_=true
    _obj_opts_help_basic_enable_=false
    }
Opts.Help.Basic.IsDisabled()
    {
    [[ $_obj_opts_help_basic_enable_ != 'true' ]]
    }
Opts.Help.Basic.IsEnabled()
    {
    [[ $_obj_opts_help_basic_enable_ = 'true' ]]
    }
Opts.Help.Basic.IsNot()
    {
    [[ $_obj_opts_help_basic_flag_ != 'true' ]]
    }
Opts.Help.Basic.IsSet()
    {
    [[ $_obj_opts_help_basic_flag_ = 'true' ]]
    }
Opts.Help.Basic.LogChanges()
    {
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && return
    _obj_opts_help_basic_changes_flag_=true
    }
Opts.Help.Basic.Set()
    {
    [[ $_obj_opts_help_basic_flag_ = 'true' ]] && return
    _obj_opts_help_basic_flag_=true
    [[ $_obj_opts_help_basic_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_basic_flag_
    }
Opts.Help.Basic.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_basic_text_=$2
    else
        echo -n "$_obj_opts_help_basic_text_"
    fi
    }
Opts.Help.Basic.Init

Opts.Help.Options.Clear()
    {
    [[ $_obj_opts_help_options_flag_ != 'true' ]] && return
    _obj_opts_help_options_flag_=false
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_flag_
    }
Opts.Help.Options.Disable()
    {
    [[ $_obj_opts_help_options_enable_ != 'true' ]] && return
    _obj_opts_help_options_enable_=false
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_enable_
    }
Opts.Help.Options.DontLogChanges()
    {
    [[ $_obj_opts_help_options_changes_flag_ != 'true' ]] && return
    _obj_opts_help_options_changes_flag_=false
    }
Opts.Help.Options.Enable()
    {
    [[ $_obj_opts_help_options_enable_ = 'true' ]] && return
    _obj_opts_help_options_enable_=true
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_enable_
    }
Opts.Help.Options.Init()
    {
    _obj_opts_help_options_text_=''
    _obj_opts_help_options_flag_=false
    _obj_opts_help_options_changes_flag_=true
    _obj_opts_help_options_enable_=false
    }
Opts.Help.Options.IsDisabled()
    {
    [[ $_obj_opts_help_options_enable_ != 'true' ]]
    }
Opts.Help.Options.IsEnabled()
    {
    [[ $_obj_opts_help_options_enable_ = 'true' ]]
    }
Opts.Help.Options.IsNot()
    {
    [[ $_obj_opts_help_options_flag_ != 'true' ]]
    }
Opts.Help.Options.IsSet()
    {
    [[ $_obj_opts_help_options_flag_ = 'true' ]]
    }
Opts.Help.Options.LogChanges()
    {
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && return
    _obj_opts_help_options_changes_flag_=true
    }
Opts.Help.Options.Set()
    {
    [[ $_obj_opts_help_options_flag_ = 'true' ]] && return
    _obj_opts_help_options_flag_=true
    [[ $_obj_opts_help_options_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_options_flag_
    }
Opts.Help.Options.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_options_text_=$2
    else
        echo -n "$_obj_opts_help_options_text_"
    fi
    }
Opts.Help.Options.Init

Opts.Help.Packages.Clear()
    {
    [[ $_obj_opts_help_packages_flag_ != 'true' ]] && return
    _obj_opts_help_packages_flag_=false
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_flag_
    }
Opts.Help.Packages.Disable()
    {
    [[ $_obj_opts_help_packages_enable_ != 'true' ]] && return
    _obj_opts_help_packages_enable_=false
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_enable_
    }
Opts.Help.Packages.DontLogChanges()
    {
    [[ $_obj_opts_help_packages_changes_flag_ != 'true' ]] && return
    _obj_opts_help_packages_changes_flag_=false
    }
Opts.Help.Packages.Enable()
    {
    [[ $_obj_opts_help_packages_enable_ = 'true' ]] && return
    _obj_opts_help_packages_enable_=true
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_enable_
    }
Opts.Help.Packages.Init()
    {
    _obj_opts_help_packages_text_=''
    _obj_opts_help_packages_flag_=false
    _obj_opts_help_packages_changes_flag_=true
    _obj_opts_help_packages_enable_=false
    }
Opts.Help.Packages.IsDisabled()
    {
    [[ $_obj_opts_help_packages_enable_ != 'true' ]]
    }
Opts.Help.Packages.IsEnabled()
    {
    [[ $_obj_opts_help_packages_enable_ = 'true' ]]
    }
Opts.Help.Packages.IsNot()
    {
    [[ $_obj_opts_help_packages_flag_ != 'true' ]]
    }
Opts.Help.Packages.IsSet()
    {
    [[ $_obj_opts_help_packages_flag_ = 'true' ]]
    }
Opts.Help.Packages.LogChanges()
    {
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && return
    _obj_opts_help_packages_changes_flag_=true
    }
Opts.Help.Packages.Set()
    {
    [[ $_obj_opts_help_packages_flag_ = 'true' ]] && return
    _obj_opts_help_packages_flag_=true
    [[ $_obj_opts_help_packages_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_packages_flag_
    }
Opts.Help.Packages.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_packages_text_=$2
    else
        echo -n "$_obj_opts_help_packages_text_"
    fi
    }
Opts.Help.Packages.Init

Opts.Help.Problems.Clear()
    {
    [[ $_obj_opts_help_problems_flag_ != 'true' ]] && return
    _obj_opts_help_problems_flag_=false
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_flag_
    }
Opts.Help.Problems.Disable()
    {
    [[ $_obj_opts_help_problems_enable_ != 'true' ]] && return
    _obj_opts_help_problems_enable_=false
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_enable_
    }
Opts.Help.Problems.DontLogChanges()
    {
    [[ $_obj_opts_help_problems_changes_flag_ != 'true' ]] && return
    _obj_opts_help_problems_changes_flag_=false
    }
Opts.Help.Problems.Enable()
    {
    [[ $_obj_opts_help_problems_enable_ = 'true' ]] && return
    _obj_opts_help_problems_enable_=true
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_enable_
    }
Opts.Help.Problems.Init()
    {
    _obj_opts_help_problems_text_=''
    _obj_opts_help_problems_flag_=false
    _obj_opts_help_problems_changes_flag_=true
    _obj_opts_help_problems_enable_=false
    }
Opts.Help.Problems.IsDisabled()
    {
    [[ $_obj_opts_help_problems_enable_ != 'true' ]]
    }
Opts.Help.Problems.IsEnabled()
    {
    [[ $_obj_opts_help_problems_enable_ = 'true' ]]
    }
Opts.Help.Problems.IsNot()
    {
    [[ $_obj_opts_help_problems_flag_ != 'true' ]]
    }
Opts.Help.Problems.IsSet()
    {
    [[ $_obj_opts_help_problems_flag_ = 'true' ]]
    }
Opts.Help.Problems.LogChanges()
    {
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && return
    _obj_opts_help_problems_changes_flag_=true
    }
Opts.Help.Problems.Set()
    {
    [[ $_obj_opts_help_problems_flag_ = 'true' ]] && return
    _obj_opts_help_problems_flag_=true
    [[ $_obj_opts_help_problems_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_problems_flag_
    }
Opts.Help.Problems.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_problems_text_=$2
    else
        echo -n "$_obj_opts_help_problems_text_"
    fi
    }
Opts.Help.Problems.Init

Opts.Help.Status.Clear()
    {
    [[ $_obj_opts_help_status_flag_ != 'true' ]] && return
    _obj_opts_help_status_flag_=false
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_flag_
    }
Opts.Help.Status.Disable()
    {
    [[ $_obj_opts_help_status_enable_ != 'true' ]] && return
    _obj_opts_help_status_enable_=false
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_enable_
    }
Opts.Help.Status.DontLogChanges()
    {
    [[ $_obj_opts_help_status_changes_flag_ != 'true' ]] && return
    _obj_opts_help_status_changes_flag_=false
    }
Opts.Help.Status.Enable()
    {
    [[ $_obj_opts_help_status_enable_ = 'true' ]] && return
    _obj_opts_help_status_enable_=true
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_enable_
    }
Opts.Help.Status.Init()
    {
    _obj_opts_help_status_text_=''
    _obj_opts_help_status_flag_=false
    _obj_opts_help_status_changes_flag_=true
    _obj_opts_help_status_enable_=false
    }
Opts.Help.Status.IsDisabled()
    {
    [[ $_obj_opts_help_status_enable_ != 'true' ]]
    }
Opts.Help.Status.IsEnabled()
    {
    [[ $_obj_opts_help_status_enable_ = 'true' ]]
    }
Opts.Help.Status.IsNot()
    {
    [[ $_obj_opts_help_status_flag_ != 'true' ]]
    }
Opts.Help.Status.IsSet()
    {
    [[ $_obj_opts_help_status_flag_ = 'true' ]]
    }
Opts.Help.Status.LogChanges()
    {
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && return
    _obj_opts_help_status_changes_flag_=true
    }
Opts.Help.Status.Set()
    {
    [[ $_obj_opts_help_status_flag_ = 'true' ]] && return
    _obj_opts_help_status_flag_=true
    [[ $_obj_opts_help_status_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_status_flag_
    }
Opts.Help.Status.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_status_text_=$2
    else
        echo -n "$_obj_opts_help_status_text_"
    fi
    }
Opts.Help.Status.Init

Opts.Help.Tips.Clear()
    {
    [[ $_obj_opts_help_tips_flag_ != 'true' ]] && return
    _obj_opts_help_tips_flag_=false
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_flag_
    }
Opts.Help.Tips.Disable()
    {
    [[ $_obj_opts_help_tips_enable_ != 'true' ]] && return
    _obj_opts_help_tips_enable_=false
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_enable_
    }
Opts.Help.Tips.DontLogChanges()
    {
    [[ $_obj_opts_help_tips_changes_flag_ != 'true' ]] && return
    _obj_opts_help_tips_changes_flag_=false
    }
Opts.Help.Tips.Enable()
    {
    [[ $_obj_opts_help_tips_enable_ = 'true' ]] && return
    _obj_opts_help_tips_enable_=true
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_enable_
    }
Opts.Help.Tips.Init()
    {
    _obj_opts_help_tips_text_=''
    _obj_opts_help_tips_flag_=false
    _obj_opts_help_tips_changes_flag_=true
    _obj_opts_help_tips_enable_=false
    }
Opts.Help.Tips.IsDisabled()
    {
    [[ $_obj_opts_help_tips_enable_ != 'true' ]]
    }
Opts.Help.Tips.IsEnabled()
    {
    [[ $_obj_opts_help_tips_enable_ = 'true' ]]
    }
Opts.Help.Tips.IsNot()
    {
    [[ $_obj_opts_help_tips_flag_ != 'true' ]]
    }
Opts.Help.Tips.IsSet()
    {
    [[ $_obj_opts_help_tips_flag_ = 'true' ]]
    }
Opts.Help.Tips.LogChanges()
    {
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && return
    _obj_opts_help_tips_changes_flag_=true
    }
Opts.Help.Tips.Set()
    {
    [[ $_obj_opts_help_tips_flag_ = 'true' ]] && return
    _obj_opts_help_tips_flag_=true
    [[ $_obj_opts_help_tips_changes_flag_ = 'true' ]] && DebugVar _obj_opts_help_tips_flag_
    }
Opts.Help.Tips.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_help_tips_text_=$2
    else
        echo -n "$_obj_opts_help_tips_text_"
    fi
    }
Opts.Help.Tips.Init

Opts.Log.All.Paste.Clear()
    {
    [[ $_obj_opts_log_all_paste_flag_ != 'true' ]] && return
    _obj_opts_log_all_paste_flag_=false
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_flag_
    }
Opts.Log.All.Paste.Disable()
    {
    [[ $_obj_opts_log_all_paste_enable_ != 'true' ]] && return
    _obj_opts_log_all_paste_enable_=false
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_enable_
    }
Opts.Log.All.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_all_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_all_paste_changes_flag_=false
    }
Opts.Log.All.Paste.Enable()
    {
    [[ $_obj_opts_log_all_paste_enable_ = 'true' ]] && return
    _obj_opts_log_all_paste_enable_=true
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_enable_
    }
Opts.Log.All.Paste.Init()
    {
    _obj_opts_log_all_paste_text_=''
    _obj_opts_log_all_paste_flag_=false
    _obj_opts_log_all_paste_changes_flag_=true
    _obj_opts_log_all_paste_enable_=false
    }
Opts.Log.All.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_all_paste_enable_ != 'true' ]]
    }
Opts.Log.All.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_all_paste_enable_ = 'true' ]]
    }
Opts.Log.All.Paste.IsNot()
    {
    [[ $_obj_opts_log_all_paste_flag_ != 'true' ]]
    }
Opts.Log.All.Paste.IsSet()
    {
    [[ $_obj_opts_log_all_paste_flag_ = 'true' ]]
    }
Opts.Log.All.Paste.LogChanges()
    {
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_all_paste_changes_flag_=true
    }
Opts.Log.All.Paste.Set()
    {
    [[ $_obj_opts_log_all_paste_flag_ = 'true' ]] && return
    _obj_opts_log_all_paste_flag_=true
    [[ $_obj_opts_log_all_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_paste_flag_
    }
Opts.Log.All.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_all_paste_text_=$2
    else
        echo -n "$_obj_opts_log_all_paste_text_"
    fi
    }
Opts.Log.All.Paste.Init

Opts.Log.All.View.Clear()
    {
    [[ $_obj_opts_log_all_view_flag_ != 'true' ]] && return
    _obj_opts_log_all_view_flag_=false
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_flag_
    }
Opts.Log.All.View.Disable()
    {
    [[ $_obj_opts_log_all_view_enable_ != 'true' ]] && return
    _obj_opts_log_all_view_enable_=false
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_enable_
    }
Opts.Log.All.View.DontLogChanges()
    {
    [[ $_obj_opts_log_all_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_all_view_changes_flag_=false
    }
Opts.Log.All.View.Enable()
    {
    [[ $_obj_opts_log_all_view_enable_ = 'true' ]] && return
    _obj_opts_log_all_view_enable_=true
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_enable_
    }
Opts.Log.All.View.Init()
    {
    _obj_opts_log_all_view_text_=''
    _obj_opts_log_all_view_flag_=false
    _obj_opts_log_all_view_changes_flag_=true
    _obj_opts_log_all_view_enable_=false
    }
Opts.Log.All.View.IsDisabled()
    {
    [[ $_obj_opts_log_all_view_enable_ != 'true' ]]
    }
Opts.Log.All.View.IsEnabled()
    {
    [[ $_obj_opts_log_all_view_enable_ = 'true' ]]
    }
Opts.Log.All.View.IsNot()
    {
    [[ $_obj_opts_log_all_view_flag_ != 'true' ]]
    }
Opts.Log.All.View.IsSet()
    {
    [[ $_obj_opts_log_all_view_flag_ = 'true' ]]
    }
Opts.Log.All.View.LogChanges()
    {
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_all_view_changes_flag_=true
    }
Opts.Log.All.View.Set()
    {
    [[ $_obj_opts_log_all_view_flag_ = 'true' ]] && return
    _obj_opts_log_all_view_flag_=true
    [[ $_obj_opts_log_all_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_all_view_flag_
    }
Opts.Log.All.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_all_view_text_=$2
    else
        echo -n "$_obj_opts_log_all_view_text_"
    fi
    }
Opts.Log.All.View.Init

Opts.Log.Last.Paste.Clear()
    {
    [[ $_obj_opts_log_last_paste_flag_ != 'true' ]] && return
    _obj_opts_log_last_paste_flag_=false
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_flag_
    }
Opts.Log.Last.Paste.Disable()
    {
    [[ $_obj_opts_log_last_paste_enable_ != 'true' ]] && return
    _obj_opts_log_last_paste_enable_=false
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_enable_
    }
Opts.Log.Last.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_last_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_last_paste_changes_flag_=false
    }
Opts.Log.Last.Paste.Enable()
    {
    [[ $_obj_opts_log_last_paste_enable_ = 'true' ]] && return
    _obj_opts_log_last_paste_enable_=true
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_enable_
    }
Opts.Log.Last.Paste.Init()
    {
    _obj_opts_log_last_paste_text_=''
    _obj_opts_log_last_paste_flag_=false
    _obj_opts_log_last_paste_changes_flag_=true
    _obj_opts_log_last_paste_enable_=false
    }
Opts.Log.Last.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_last_paste_enable_ != 'true' ]]
    }
Opts.Log.Last.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_last_paste_enable_ = 'true' ]]
    }
Opts.Log.Last.Paste.IsNot()
    {
    [[ $_obj_opts_log_last_paste_flag_ != 'true' ]]
    }
Opts.Log.Last.Paste.IsSet()
    {
    [[ $_obj_opts_log_last_paste_flag_ = 'true' ]]
    }
Opts.Log.Last.Paste.LogChanges()
    {
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_last_paste_changes_flag_=true
    }
Opts.Log.Last.Paste.Set()
    {
    [[ $_obj_opts_log_last_paste_flag_ = 'true' ]] && return
    _obj_opts_log_last_paste_flag_=true
    [[ $_obj_opts_log_last_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_paste_flag_
    }
Opts.Log.Last.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_last_paste_text_=$2
    else
        echo -n "$_obj_opts_log_last_paste_text_"
    fi
    }
Opts.Log.Last.Paste.Init

Opts.Log.Last.View.Clear()
    {
    [[ $_obj_opts_log_last_view_flag_ != 'true' ]] && return
    _obj_opts_log_last_view_flag_=false
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_flag_
    }
Opts.Log.Last.View.Disable()
    {
    [[ $_obj_opts_log_last_view_enable_ != 'true' ]] && return
    _obj_opts_log_last_view_enable_=false
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_enable_
    }
Opts.Log.Last.View.DontLogChanges()
    {
    [[ $_obj_opts_log_last_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_last_view_changes_flag_=false
    }
Opts.Log.Last.View.Enable()
    {
    [[ $_obj_opts_log_last_view_enable_ = 'true' ]] && return
    _obj_opts_log_last_view_enable_=true
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_enable_
    }
Opts.Log.Last.View.Init()
    {
    _obj_opts_log_last_view_text_=''
    _obj_opts_log_last_view_flag_=false
    _obj_opts_log_last_view_changes_flag_=true
    _obj_opts_log_last_view_enable_=false
    }
Opts.Log.Last.View.IsDisabled()
    {
    [[ $_obj_opts_log_last_view_enable_ != 'true' ]]
    }
Opts.Log.Last.View.IsEnabled()
    {
    [[ $_obj_opts_log_last_view_enable_ = 'true' ]]
    }
Opts.Log.Last.View.IsNot()
    {
    [[ $_obj_opts_log_last_view_flag_ != 'true' ]]
    }
Opts.Log.Last.View.IsSet()
    {
    [[ $_obj_opts_log_last_view_flag_ = 'true' ]]
    }
Opts.Log.Last.View.LogChanges()
    {
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_last_view_changes_flag_=true
    }
Opts.Log.Last.View.Set()
    {
    [[ $_obj_opts_log_last_view_flag_ = 'true' ]] && return
    _obj_opts_log_last_view_flag_=true
    [[ $_obj_opts_log_last_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_last_view_flag_
    }
Opts.Log.Last.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_last_view_text_=$2
    else
        echo -n "$_obj_opts_log_last_view_text_"
    fi
    }
Opts.Log.Last.View.Init

Opts.Log.Tail.Paste.Clear()
    {
    [[ $_obj_opts_log_tail_paste_flag_ != 'true' ]] && return
    _obj_opts_log_tail_paste_flag_=false
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_flag_
    }
Opts.Log.Tail.Paste.Disable()
    {
    [[ $_obj_opts_log_tail_paste_enable_ != 'true' ]] && return
    _obj_opts_log_tail_paste_enable_=false
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_enable_
    }
Opts.Log.Tail.Paste.DontLogChanges()
    {
    [[ $_obj_opts_log_tail_paste_changes_flag_ != 'true' ]] && return
    _obj_opts_log_tail_paste_changes_flag_=false
    }
Opts.Log.Tail.Paste.Enable()
    {
    [[ $_obj_opts_log_tail_paste_enable_ = 'true' ]] && return
    _obj_opts_log_tail_paste_enable_=true
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_enable_
    }
Opts.Log.Tail.Paste.Init()
    {
    _obj_opts_log_tail_paste_text_=''
    _obj_opts_log_tail_paste_flag_=false
    _obj_opts_log_tail_paste_changes_flag_=true
    _obj_opts_log_tail_paste_enable_=false
    }
Opts.Log.Tail.Paste.IsDisabled()
    {
    [[ $_obj_opts_log_tail_paste_enable_ != 'true' ]]
    }
Opts.Log.Tail.Paste.IsEnabled()
    {
    [[ $_obj_opts_log_tail_paste_enable_ = 'true' ]]
    }
Opts.Log.Tail.Paste.IsNot()
    {
    [[ $_obj_opts_log_tail_paste_flag_ != 'true' ]]
    }
Opts.Log.Tail.Paste.IsSet()
    {
    [[ $_obj_opts_log_tail_paste_flag_ = 'true' ]]
    }
Opts.Log.Tail.Paste.LogChanges()
    {
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && return
    _obj_opts_log_tail_paste_changes_flag_=true
    }
Opts.Log.Tail.Paste.Set()
    {
    [[ $_obj_opts_log_tail_paste_flag_ = 'true' ]] && return
    _obj_opts_log_tail_paste_flag_=true
    [[ $_obj_opts_log_tail_paste_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_paste_flag_
    }
Opts.Log.Tail.Paste.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_tail_paste_text_=$2
    else
        echo -n "$_obj_opts_log_tail_paste_text_"
    fi
    }
Opts.Log.Tail.Paste.Init

Opts.Log.Tail.View.Clear()
    {
    [[ $_obj_opts_log_tail_view_flag_ != 'true' ]] && return
    _obj_opts_log_tail_view_flag_=false
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_flag_
    }
Opts.Log.Tail.View.Disable()
    {
    [[ $_obj_opts_log_tail_view_enable_ != 'true' ]] && return
    _obj_opts_log_tail_view_enable_=false
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_enable_
    }
Opts.Log.Tail.View.DontLogChanges()
    {
    [[ $_obj_opts_log_tail_view_changes_flag_ != 'true' ]] && return
    _obj_opts_log_tail_view_changes_flag_=false
    }
Opts.Log.Tail.View.Enable()
    {
    [[ $_obj_opts_log_tail_view_enable_ = 'true' ]] && return
    _obj_opts_log_tail_view_enable_=true
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_enable_
    }
Opts.Log.Tail.View.Init()
    {
    _obj_opts_log_tail_view_text_=''
    _obj_opts_log_tail_view_flag_=false
    _obj_opts_log_tail_view_changes_flag_=true
    _obj_opts_log_tail_view_enable_=false
    }
Opts.Log.Tail.View.IsDisabled()
    {
    [[ $_obj_opts_log_tail_view_enable_ != 'true' ]]
    }
Opts.Log.Tail.View.IsEnabled()
    {
    [[ $_obj_opts_log_tail_view_enable_ = 'true' ]]
    }
Opts.Log.Tail.View.IsNot()
    {
    [[ $_obj_opts_log_tail_view_flag_ != 'true' ]]
    }
Opts.Log.Tail.View.IsSet()
    {
    [[ $_obj_opts_log_tail_view_flag_ = 'true' ]]
    }
Opts.Log.Tail.View.LogChanges()
    {
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && return
    _obj_opts_log_tail_view_changes_flag_=true
    }
Opts.Log.Tail.View.Set()
    {
    [[ $_obj_opts_log_tail_view_flag_ = 'true' ]] && return
    _obj_opts_log_tail_view_flag_=true
    [[ $_obj_opts_log_tail_view_changes_flag_ = 'true' ]] && DebugVar _obj_opts_log_tail_view_flag_
    }
Opts.Log.Tail.View.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_log_tail_view_text_=$2
    else
        echo -n "$_obj_opts_log_tail_view_text_"
    fi
    }
Opts.Log.Tail.View.Init

Opts.Apps.List.All.Clear()
    {
    [[ $_obj_opts_apps_list_all_flag_ != 'true' ]] && return
    _obj_opts_apps_list_all_flag_=false
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_flag_
    }
Opts.Apps.List.All.Disable()
    {
    [[ $_obj_opts_apps_list_all_enable_ != 'true' ]] && return
    _obj_opts_apps_list_all_enable_=false
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_enable_
    }
Opts.Apps.List.All.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_all_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_all_changes_flag_=false
    }
Opts.Apps.List.All.Enable()
    {
    [[ $_obj_opts_apps_list_all_enable_ = 'true' ]] && return
    _obj_opts_apps_list_all_enable_=true
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_enable_
    }
Opts.Apps.List.All.Init()
    {
    _obj_opts_apps_list_all_text_=''
    _obj_opts_apps_list_all_flag_=false
    _obj_opts_apps_list_all_changes_flag_=true
    _obj_opts_apps_list_all_enable_=false
    }
Opts.Apps.List.All.IsDisabled()
    {
    [[ $_obj_opts_apps_list_all_enable_ != 'true' ]]
    }
Opts.Apps.List.All.IsEnabled()
    {
    [[ $_obj_opts_apps_list_all_enable_ = 'true' ]]
    }
Opts.Apps.List.All.IsNot()
    {
    [[ $_obj_opts_apps_list_all_flag_ != 'true' ]]
    }
Opts.Apps.List.All.IsSet()
    {
    [[ $_obj_opts_apps_list_all_flag_ = 'true' ]]
    }
Opts.Apps.List.All.LogChanges()
    {
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_all_changes_flag_=true
    }
Opts.Apps.List.All.Set()
    {
    [[ $_obj_opts_apps_list_all_flag_ = 'true' ]] && return
    _obj_opts_apps_list_all_flag_=true
    [[ $_obj_opts_apps_list_all_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_all_flag_
    }
Opts.Apps.List.All.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_all_text_=$2
    else
        echo -n "$_obj_opts_apps_list_all_text_"
    fi
    }
Opts.Apps.List.All.Init

Opts.Apps.IsAll.Backup.Clear()
    {
    [[ $_obj_opts_apps_isall_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_backup_flag_=false
    [[ $_obj_opts_apps_isall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_backup_flag_
    }
Opts.Apps.IsAll.Backup.Disable()
    {
    [[ $_obj_opts_apps_isall_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_backup_enable_=false
    [[ $_obj_opts_apps_isall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_backup_enable_
    }
Opts.Apps.IsAll.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_backup_changes_flag_=false
    }
Opts.Apps.IsAll.Backup.Enable()
    {
    [[ $_obj_opts_apps_isall_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_backup_enable_=true
    [[ $_obj_opts_apps_isall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_backup_enable_
    }
Opts.Apps.IsAll.Backup.Init()
    {
    _obj_opts_apps_isall_backup_text_=''
    _obj_opts_apps_isall_backup_flag_=false
    _obj_opts_apps_isall_backup_changes_flag_=true
    _obj_opts_apps_isall_backup_enable_=false
    }
Opts.Apps.IsAll.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isall_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isall_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isall_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_backup_changes_flag_=true
    }
Opts.Apps.IsAll.Backup.Set()
    {
    [[ $_obj_opts_apps_isall_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_backup_flag_=true
    [[ $_obj_opts_apps_isall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_backup_flag_
    }
Opts.Apps.IsAll.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_backup_text_"
    fi
    }
Opts.Apps.IsAll.Backup.Init

Opts.Apps.IsNotAll.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotall_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_backup_flag_=false
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_backup_flag_
    }
Opts.Apps.IsNotAll.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotall_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_backup_enable_=false
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_backup_enable_
    }
Opts.Apps.IsNotAll.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_backup_changes_flag_=false
    }
Opts.Apps.IsNotAll.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotall_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_backup_enable_=true
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_backup_enable_
    }
Opts.Apps.IsNotAll.Backup.Init()
    {
    _obj_opts_apps_isnotall_backup_text_=''
    _obj_opts_apps_isnotall_backup_flag_=false
    _obj_opts_apps_isnotall_backup_changes_flag_=true
    _obj_opts_apps_isnotall_backup_enable_=false
    }
Opts.Apps.IsNotAll.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_backup_changes_flag_=true
    }
Opts.Apps.IsNotAll.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotall_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_backup_flag_=true
    [[ $_obj_opts_apps_isnotall_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_backup_flag_
    }
Opts.Apps.IsNotAll.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_backup_text_"
    fi
    }
Opts.Apps.IsNotAll.Backup.Init

Opts.Apps.IsAll.Download.Clear()
    {
    [[ $_obj_opts_apps_isall_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_download_flag_=false
    [[ $_obj_opts_apps_isall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_download_flag_
    }
Opts.Apps.IsAll.Download.Disable()
    {
    [[ $_obj_opts_apps_isall_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_download_enable_=false
    [[ $_obj_opts_apps_isall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_download_enable_
    }
Opts.Apps.IsAll.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_download_changes_flag_=false
    }
Opts.Apps.IsAll.Download.Enable()
    {
    [[ $_obj_opts_apps_isall_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_download_enable_=true
    [[ $_obj_opts_apps_isall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_download_enable_
    }
Opts.Apps.IsAll.Download.Init()
    {
    _obj_opts_apps_isall_download_text_=''
    _obj_opts_apps_isall_download_flag_=false
    _obj_opts_apps_isall_download_changes_flag_=true
    _obj_opts_apps_isall_download_enable_=false
    }
Opts.Apps.IsAll.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_download_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_download_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Download.IsNot()
    {
    [[ $_obj_opts_apps_isall_download_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Download.IsSet()
    {
    [[ $_obj_opts_apps_isall_download_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isall_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_download_changes_flag_=true
    }
Opts.Apps.IsAll.Download.Set()
    {
    [[ $_obj_opts_apps_isall_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_download_flag_=true
    [[ $_obj_opts_apps_isall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_download_flag_
    }
Opts.Apps.IsAll.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_download_text_"
    fi
    }
Opts.Apps.IsAll.Download.Init

Opts.Apps.IsNotAll.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotall_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_download_flag_=false
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_download_flag_
    }
Opts.Apps.IsNotAll.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotall_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_download_enable_=false
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_download_enable_
    }
Opts.Apps.IsNotAll.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_download_changes_flag_=false
    }
Opts.Apps.IsNotAll.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotall_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_download_enable_=true
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_download_enable_
    }
Opts.Apps.IsNotAll.Download.Init()
    {
    _obj_opts_apps_isnotall_download_text_=''
    _obj_opts_apps_isnotall_download_flag_=false
    _obj_opts_apps_isnotall_download_changes_flag_=true
    _obj_opts_apps_isnotall_download_enable_=false
    }
Opts.Apps.IsNotAll.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_download_changes_flag_=true
    }
Opts.Apps.IsNotAll.Download.Set()
    {
    [[ $_obj_opts_apps_isnotall_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_download_flag_=true
    [[ $_obj_opts_apps_isnotall_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_download_flag_
    }
Opts.Apps.IsNotAll.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_download_text_"
    fi
    }
Opts.Apps.IsNotAll.Download.Init

Opts.Apps.IsAll.Install.Clear()
    {
    [[ $_obj_opts_apps_isall_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_install_flag_=false
    [[ $_obj_opts_apps_isall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_install_flag_
    }
Opts.Apps.IsAll.Install.Disable()
    {
    [[ $_obj_opts_apps_isall_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_install_enable_=false
    [[ $_obj_opts_apps_isall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_install_enable_
    }
Opts.Apps.IsAll.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_install_changes_flag_=false
    }
Opts.Apps.IsAll.Install.Enable()
    {
    [[ $_obj_opts_apps_isall_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_install_enable_=true
    [[ $_obj_opts_apps_isall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_install_enable_
    }
Opts.Apps.IsAll.Install.Init()
    {
    _obj_opts_apps_isall_install_text_=''
    _obj_opts_apps_isall_install_flag_=false
    _obj_opts_apps_isall_install_changes_flag_=true
    _obj_opts_apps_isall_install_enable_=false
    }
Opts.Apps.IsAll.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_install_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_install_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Install.IsNot()
    {
    [[ $_obj_opts_apps_isall_install_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Install.IsSet()
    {
    [[ $_obj_opts_apps_isall_install_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isall_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_install_changes_flag_=true
    }
Opts.Apps.IsAll.Install.Set()
    {
    [[ $_obj_opts_apps_isall_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_install_flag_=true
    [[ $_obj_opts_apps_isall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_install_flag_
    }
Opts.Apps.IsAll.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_install_text_"
    fi
    }
Opts.Apps.IsAll.Install.Init

Opts.Apps.IsNotAll.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotall_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_install_flag_=false
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_install_flag_
    }
Opts.Apps.IsNotAll.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotall_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_install_enable_=false
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_install_enable_
    }
Opts.Apps.IsNotAll.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_install_changes_flag_=false
    }
Opts.Apps.IsNotAll.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotall_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_install_enable_=true
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_install_enable_
    }
Opts.Apps.IsNotAll.Install.Init()
    {
    _obj_opts_apps_isnotall_install_text_=''
    _obj_opts_apps_isnotall_install_flag_=false
    _obj_opts_apps_isnotall_install_changes_flag_=true
    _obj_opts_apps_isnotall_install_enable_=false
    }
Opts.Apps.IsNotAll.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_install_changes_flag_=true
    }
Opts.Apps.IsNotAll.Install.Set()
    {
    [[ $_obj_opts_apps_isnotall_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_install_flag_=true
    [[ $_obj_opts_apps_isnotall_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_install_flag_
    }
Opts.Apps.IsNotAll.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_install_text_"
    fi
    }
Opts.Apps.IsNotAll.Install.Init

Opts.Apps.IsAll.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isall_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_rebuild_flag_=false
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_rebuild_flag_
    }
Opts.Apps.IsAll.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isall_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_rebuild_enable_=false
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_rebuild_enable_
    }
Opts.Apps.IsAll.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_rebuild_changes_flag_=false
    }
Opts.Apps.IsAll.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isall_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_rebuild_enable_=true
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_rebuild_enable_
    }
Opts.Apps.IsAll.Rebuild.Init()
    {
    _obj_opts_apps_isall_rebuild_text_=''
    _obj_opts_apps_isall_rebuild_flag_=false
    _obj_opts_apps_isall_rebuild_changes_flag_=true
    _obj_opts_apps_isall_rebuild_enable_=false
    }
Opts.Apps.IsAll.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isall_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isall_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_rebuild_changes_flag_=true
    }
Opts.Apps.IsAll.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isall_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_rebuild_flag_=true
    [[ $_obj_opts_apps_isall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_rebuild_flag_
    }
Opts.Apps.IsAll.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_rebuild_text_"
    fi
    }
Opts.Apps.IsAll.Rebuild.Init

Opts.Apps.IsNotAll.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_rebuild_flag_
    }
Opts.Apps.IsNotAll.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_rebuild_enable_
    }
Opts.Apps.IsNotAll.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotAll.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_rebuild_enable_
    }
Opts.Apps.IsNotAll.Rebuild.Init()
    {
    _obj_opts_apps_isnotall_rebuild_text_=''
    _obj_opts_apps_isnotall_rebuild_flag_=false
    _obj_opts_apps_isnotall_rebuild_changes_flag_=true
    _obj_opts_apps_isnotall_rebuild_enable_=false
    }
Opts.Apps.IsNotAll.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotAll.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotall_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotall_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_rebuild_flag_
    }
Opts.Apps.IsNotAll.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_rebuild_text_"
    fi
    }
Opts.Apps.IsNotAll.Rebuild.Init

Opts.Apps.IsAll.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isall_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_reinstall_flag_=false
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_reinstall_flag_
    }
Opts.Apps.IsAll.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isall_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_reinstall_enable_=false
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_reinstall_enable_
    }
Opts.Apps.IsAll.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_reinstall_changes_flag_=false
    }
Opts.Apps.IsAll.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isall_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_reinstall_enable_=true
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_reinstall_enable_
    }
Opts.Apps.IsAll.Reinstall.Init()
    {
    _obj_opts_apps_isall_reinstall_text_=''
    _obj_opts_apps_isall_reinstall_flag_=false
    _obj_opts_apps_isall_reinstall_changes_flag_=true
    _obj_opts_apps_isall_reinstall_enable_=false
    }
Opts.Apps.IsAll.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isall_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isall_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_reinstall_changes_flag_=true
    }
Opts.Apps.IsAll.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isall_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_reinstall_flag_=true
    [[ $_obj_opts_apps_isall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_reinstall_flag_
    }
Opts.Apps.IsAll.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_reinstall_text_"
    fi
    }
Opts.Apps.IsAll.Reinstall.Init

Opts.Apps.IsNotAll.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_reinstall_flag_
    }
Opts.Apps.IsNotAll.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_reinstall_enable_
    }
Opts.Apps.IsNotAll.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotAll.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_reinstall_enable_
    }
Opts.Apps.IsNotAll.Reinstall.Init()
    {
    _obj_opts_apps_isnotall_reinstall_text_=''
    _obj_opts_apps_isnotall_reinstall_flag_=false
    _obj_opts_apps_isnotall_reinstall_changes_flag_=true
    _obj_opts_apps_isnotall_reinstall_enable_=false
    }
Opts.Apps.IsNotAll.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotAll.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotall_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotall_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_reinstall_flag_
    }
Opts.Apps.IsNotAll.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_reinstall_text_"
    fi
    }
Opts.Apps.IsNotAll.Reinstall.Init

Opts.Apps.IsAll.Restore.Clear()
    {
    [[ $_obj_opts_apps_isall_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_restore_flag_=false
    [[ $_obj_opts_apps_isall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restore_flag_
    }
Opts.Apps.IsAll.Restore.Disable()
    {
    [[ $_obj_opts_apps_isall_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_restore_enable_=false
    [[ $_obj_opts_apps_isall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restore_enable_
    }
Opts.Apps.IsAll.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_restore_changes_flag_=false
    }
Opts.Apps.IsAll.Restore.Enable()
    {
    [[ $_obj_opts_apps_isall_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_restore_enable_=true
    [[ $_obj_opts_apps_isall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restore_enable_
    }
Opts.Apps.IsAll.Restore.Init()
    {
    _obj_opts_apps_isall_restore_text_=''
    _obj_opts_apps_isall_restore_flag_=false
    _obj_opts_apps_isall_restore_changes_flag_=true
    _obj_opts_apps_isall_restore_enable_=false
    }
Opts.Apps.IsAll.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isall_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isall_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isall_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_restore_changes_flag_=true
    }
Opts.Apps.IsAll.Restore.Set()
    {
    [[ $_obj_opts_apps_isall_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_restore_flag_=true
    [[ $_obj_opts_apps_isall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restore_flag_
    }
Opts.Apps.IsAll.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_restore_text_"
    fi
    }
Opts.Apps.IsAll.Restore.Init

Opts.Apps.IsNotAll.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotall_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restore_flag_=false
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restore_flag_
    }
Opts.Apps.IsNotAll.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotall_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restore_enable_=false
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restore_enable_
    }
Opts.Apps.IsNotAll.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restore_changes_flag_=false
    }
Opts.Apps.IsNotAll.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotall_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restore_enable_=true
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restore_enable_
    }
Opts.Apps.IsNotAll.Restore.Init()
    {
    _obj_opts_apps_isnotall_restore_text_=''
    _obj_opts_apps_isnotall_restore_flag_=false
    _obj_opts_apps_isnotall_restore_changes_flag_=true
    _obj_opts_apps_isnotall_restore_enable_=false
    }
Opts.Apps.IsNotAll.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restore_changes_flag_=true
    }
Opts.Apps.IsNotAll.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotall_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restore_flag_=true
    [[ $_obj_opts_apps_isnotall_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restore_flag_
    }
Opts.Apps.IsNotAll.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_restore_text_"
    fi
    }
Opts.Apps.IsNotAll.Restore.Init

Opts.Apps.IsAll.Restart.Clear()
    {
    [[ $_obj_opts_apps_isall_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_restart_flag_=false
    [[ $_obj_opts_apps_isall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restart_flag_
    }
Opts.Apps.IsAll.Restart.Disable()
    {
    [[ $_obj_opts_apps_isall_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_restart_enable_=false
    [[ $_obj_opts_apps_isall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restart_enable_
    }
Opts.Apps.IsAll.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_restart_changes_flag_=false
    }
Opts.Apps.IsAll.Restart.Enable()
    {
    [[ $_obj_opts_apps_isall_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_restart_enable_=true
    [[ $_obj_opts_apps_isall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restart_enable_
    }
Opts.Apps.IsAll.Restart.Init()
    {
    _obj_opts_apps_isall_restart_text_=''
    _obj_opts_apps_isall_restart_flag_=false
    _obj_opts_apps_isall_restart_changes_flag_=true
    _obj_opts_apps_isall_restart_enable_=false
    }
Opts.Apps.IsAll.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isall_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isall_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isall_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_restart_changes_flag_=true
    }
Opts.Apps.IsAll.Restart.Set()
    {
    [[ $_obj_opts_apps_isall_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_restart_flag_=true
    [[ $_obj_opts_apps_isall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_restart_flag_
    }
Opts.Apps.IsAll.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_restart_text_"
    fi
    }
Opts.Apps.IsAll.Restart.Init

Opts.Apps.IsNotAll.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotall_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restart_flag_=false
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restart_flag_
    }
Opts.Apps.IsNotAll.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotall_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restart_enable_=false
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restart_enable_
    }
Opts.Apps.IsNotAll.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_restart_changes_flag_=false
    }
Opts.Apps.IsNotAll.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotall_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restart_enable_=true
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restart_enable_
    }
Opts.Apps.IsNotAll.Restart.Init()
    {
    _obj_opts_apps_isnotall_restart_text_=''
    _obj_opts_apps_isnotall_restart_flag_=false
    _obj_opts_apps_isnotall_restart_changes_flag_=true
    _obj_opts_apps_isnotall_restart_enable_=false
    }
Opts.Apps.IsNotAll.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restart_changes_flag_=true
    }
Opts.Apps.IsNotAll.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotall_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_restart_flag_=true
    [[ $_obj_opts_apps_isnotall_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_restart_flag_
    }
Opts.Apps.IsNotAll.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_restart_text_"
    fi
    }
Opts.Apps.IsNotAll.Restart.Init

Opts.Apps.IsAll.Start.Clear()
    {
    [[ $_obj_opts_apps_isall_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_start_flag_=false
    [[ $_obj_opts_apps_isall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_start_flag_
    }
Opts.Apps.IsAll.Start.Disable()
    {
    [[ $_obj_opts_apps_isall_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_start_enable_=false
    [[ $_obj_opts_apps_isall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_start_enable_
    }
Opts.Apps.IsAll.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_start_changes_flag_=false
    }
Opts.Apps.IsAll.Start.Enable()
    {
    [[ $_obj_opts_apps_isall_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_start_enable_=true
    [[ $_obj_opts_apps_isall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_start_enable_
    }
Opts.Apps.IsAll.Start.Init()
    {
    _obj_opts_apps_isall_start_text_=''
    _obj_opts_apps_isall_start_flag_=false
    _obj_opts_apps_isall_start_changes_flag_=true
    _obj_opts_apps_isall_start_enable_=false
    }
Opts.Apps.IsAll.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_start_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_start_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Start.IsNot()
    {
    [[ $_obj_opts_apps_isall_start_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Start.IsSet()
    {
    [[ $_obj_opts_apps_isall_start_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isall_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_start_changes_flag_=true
    }
Opts.Apps.IsAll.Start.Set()
    {
    [[ $_obj_opts_apps_isall_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_start_flag_=true
    [[ $_obj_opts_apps_isall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_start_flag_
    }
Opts.Apps.IsAll.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_start_text_"
    fi
    }
Opts.Apps.IsAll.Start.Init

Opts.Apps.IsNotAll.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotall_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_start_flag_=false
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_start_flag_
    }
Opts.Apps.IsNotAll.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotall_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_start_enable_=false
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_start_enable_
    }
Opts.Apps.IsNotAll.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_start_changes_flag_=false
    }
Opts.Apps.IsNotAll.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotall_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_start_enable_=true
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_start_enable_
    }
Opts.Apps.IsNotAll.Start.Init()
    {
    _obj_opts_apps_isnotall_start_text_=''
    _obj_opts_apps_isnotall_start_flag_=false
    _obj_opts_apps_isnotall_start_changes_flag_=true
    _obj_opts_apps_isnotall_start_enable_=false
    }
Opts.Apps.IsNotAll.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_start_changes_flag_=true
    }
Opts.Apps.IsNotAll.Start.Set()
    {
    [[ $_obj_opts_apps_isnotall_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_start_flag_=true
    [[ $_obj_opts_apps_isnotall_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_start_flag_
    }
Opts.Apps.IsNotAll.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_start_text_"
    fi
    }
Opts.Apps.IsNotAll.Start.Init

Opts.Apps.IsAll.Stop.Clear()
    {
    [[ $_obj_opts_apps_isall_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_stop_flag_=false
    [[ $_obj_opts_apps_isall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_stop_flag_
    }
Opts.Apps.IsAll.Stop.Disable()
    {
    [[ $_obj_opts_apps_isall_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_stop_enable_=false
    [[ $_obj_opts_apps_isall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_stop_enable_
    }
Opts.Apps.IsAll.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_stop_changes_flag_=false
    }
Opts.Apps.IsAll.Stop.Enable()
    {
    [[ $_obj_opts_apps_isall_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_stop_enable_=true
    [[ $_obj_opts_apps_isall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_stop_enable_
    }
Opts.Apps.IsAll.Stop.Init()
    {
    _obj_opts_apps_isall_stop_text_=''
    _obj_opts_apps_isall_stop_flag_=false
    _obj_opts_apps_isall_stop_changes_flag_=true
    _obj_opts_apps_isall_stop_enable_=false
    }
Opts.Apps.IsAll.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isall_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isall_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isall_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_stop_changes_flag_=true
    }
Opts.Apps.IsAll.Stop.Set()
    {
    [[ $_obj_opts_apps_isall_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_stop_flag_=true
    [[ $_obj_opts_apps_isall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_stop_flag_
    }
Opts.Apps.IsAll.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_stop_text_"
    fi
    }
Opts.Apps.IsAll.Stop.Init

Opts.Apps.IsNotAll.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotall_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_stop_flag_=false
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_stop_flag_
    }
Opts.Apps.IsNotAll.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotall_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_stop_enable_=false
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_stop_enable_
    }
Opts.Apps.IsNotAll.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_stop_changes_flag_=false
    }
Opts.Apps.IsNotAll.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotall_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_stop_enable_=true
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_stop_enable_
    }
Opts.Apps.IsNotAll.Stop.Init()
    {
    _obj_opts_apps_isnotall_stop_text_=''
    _obj_opts_apps_isnotall_stop_flag_=false
    _obj_opts_apps_isnotall_stop_changes_flag_=true
    _obj_opts_apps_isnotall_stop_enable_=false
    }
Opts.Apps.IsNotAll.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_stop_changes_flag_=true
    }
Opts.Apps.IsNotAll.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotall_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_stop_flag_=true
    [[ $_obj_opts_apps_isnotall_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_stop_flag_
    }
Opts.Apps.IsNotAll.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_stop_text_"
    fi
    }
Opts.Apps.IsNotAll.Stop.Init

Opts.Apps.IsAll.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isall_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_uninstall_flag_=false
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_uninstall_flag_
    }
Opts.Apps.IsAll.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isall_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_uninstall_enable_=false
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_uninstall_enable_
    }
Opts.Apps.IsAll.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_uninstall_changes_flag_=false
    }
Opts.Apps.IsAll.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isall_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_uninstall_enable_=true
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_uninstall_enable_
    }
Opts.Apps.IsAll.Uninstall.Init()
    {
    _obj_opts_apps_isall_uninstall_text_=''
    _obj_opts_apps_isall_uninstall_flag_=false
    _obj_opts_apps_isall_uninstall_changes_flag_=true
    _obj_opts_apps_isall_uninstall_enable_=false
    }
Opts.Apps.IsAll.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isall_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isall_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_uninstall_changes_flag_=true
    }
Opts.Apps.IsAll.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isall_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_uninstall_flag_=true
    [[ $_obj_opts_apps_isall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_uninstall_flag_
    }
Opts.Apps.IsAll.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_uninstall_text_"
    fi
    }
Opts.Apps.IsAll.Uninstall.Init

Opts.Apps.IsNotAll.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_uninstall_flag_
    }
Opts.Apps.IsNotAll.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_uninstall_enable_
    }
Opts.Apps.IsNotAll.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotAll.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_uninstall_enable_
    }
Opts.Apps.IsNotAll.Uninstall.Init()
    {
    _obj_opts_apps_isnotall_uninstall_text_=''
    _obj_opts_apps_isnotall_uninstall_flag_=false
    _obj_opts_apps_isnotall_uninstall_changes_flag_=true
    _obj_opts_apps_isnotall_uninstall_enable_=false
    }
Opts.Apps.IsNotAll.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotAll.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotall_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotall_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_uninstall_flag_
    }
Opts.Apps.IsNotAll.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_uninstall_text_"
    fi
    }
Opts.Apps.IsNotAll.Uninstall.Init

Opts.Apps.IsAll.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isall_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_upgrade_flag_=false
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_upgrade_flag_
    }
Opts.Apps.IsAll.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isall_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isall_upgrade_enable_=false
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_upgrade_enable_
    }
Opts.Apps.IsAll.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isall_upgrade_changes_flag_=false
    }
Opts.Apps.IsAll.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isall_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isall_upgrade_enable_=true
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_upgrade_enable_
    }
Opts.Apps.IsAll.Upgrade.Init()
    {
    _obj_opts_apps_isall_upgrade_text_=''
    _obj_opts_apps_isall_upgrade_flag_=false
    _obj_opts_apps_isall_upgrade_changes_flag_=true
    _obj_opts_apps_isall_upgrade_enable_=false
    }
Opts.Apps.IsAll.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isall_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsAll.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isall_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsAll.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isall_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsAll.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isall_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsAll.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_upgrade_changes_flag_=true
    }
Opts.Apps.IsAll.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isall_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isall_upgrade_flag_=true
    [[ $_obj_opts_apps_isall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isall_upgrade_flag_
    }
Opts.Apps.IsAll.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isall_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isall_upgrade_text_"
    fi
    }
Opts.Apps.IsAll.Upgrade.Init

Opts.Apps.IsNotAll.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_upgrade_flag_
    }
Opts.Apps.IsNotAll.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_upgrade_enable_
    }
Opts.Apps.IsNotAll.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotAll.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_upgrade_enable_
    }
Opts.Apps.IsNotAll.Upgrade.Init()
    {
    _obj_opts_apps_isnotall_upgrade_text_=''
    _obj_opts_apps_isnotall_upgrade_flag_=false
    _obj_opts_apps_isnotall_upgrade_changes_flag_=true
    _obj_opts_apps_isnotall_upgrade_enable_=false
    }
Opts.Apps.IsNotAll.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotAll.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotAll.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotAll.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotall_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotall_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotall_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotall_upgrade_flag_
    }
Opts.Apps.IsNotAll.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotall_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotall_upgrade_text_"
    fi
    }
Opts.Apps.IsNotAll.Upgrade.Init

Opts.Apps.List.BackedUp.Clear()
    {
    [[ $_obj_opts_apps_list_backedup_flag_ != 'true' ]] && return
    _obj_opts_apps_list_backedup_flag_=false
    [[ $_obj_opts_apps_list_backedup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_backedup_flag_
    }
Opts.Apps.List.BackedUp.Disable()
    {
    [[ $_obj_opts_apps_list_backedup_enable_ != 'true' ]] && return
    _obj_opts_apps_list_backedup_enable_=false
    [[ $_obj_opts_apps_list_backedup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_backedup_enable_
    }
Opts.Apps.List.BackedUp.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_backedup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_backedup_changes_flag_=false
    }
Opts.Apps.List.BackedUp.Enable()
    {
    [[ $_obj_opts_apps_list_backedup_enable_ = 'true' ]] && return
    _obj_opts_apps_list_backedup_enable_=true
    [[ $_obj_opts_apps_list_backedup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_backedup_enable_
    }
Opts.Apps.List.BackedUp.Init()
    {
    _obj_opts_apps_list_backedup_text_=''
    _obj_opts_apps_list_backedup_flag_=false
    _obj_opts_apps_list_backedup_changes_flag_=true
    _obj_opts_apps_list_backedup_enable_=false
    }
Opts.Apps.List.BackedUp.IsDisabled()
    {
    [[ $_obj_opts_apps_list_backedup_enable_ != 'true' ]]
    }
Opts.Apps.List.BackedUp.IsEnabled()
    {
    [[ $_obj_opts_apps_list_backedup_enable_ = 'true' ]]
    }
Opts.Apps.List.BackedUp.IsNot()
    {
    [[ $_obj_opts_apps_list_backedup_flag_ != 'true' ]]
    }
Opts.Apps.List.BackedUp.IsSet()
    {
    [[ $_obj_opts_apps_list_backedup_flag_ = 'true' ]]
    }
Opts.Apps.List.BackedUp.LogChanges()
    {
    [[ $_obj_opts_apps_list_backedup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_backedup_changes_flag_=true
    }
Opts.Apps.List.BackedUp.Set()
    {
    [[ $_obj_opts_apps_list_backedup_flag_ = 'true' ]] && return
    _obj_opts_apps_list_backedup_flag_=true
    [[ $_obj_opts_apps_list_backedup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_backedup_flag_
    }
Opts.Apps.List.BackedUp.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_backedup_text_=$2
    else
        echo -n "$_obj_opts_apps_list_backedup_text_"
    fi
    }
Opts.Apps.List.BackedUp.Init

Opts.Apps.IsBackedUp.Backup.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_flag_=false
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_backup_flag_
    }
Opts.Apps.IsBackedUp.Backup.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_enable_=false
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_backup_enable_
    }
Opts.Apps.IsBackedUp.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Backup.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_enable_=true
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_backup_enable_
    }
Opts.Apps.IsBackedUp.Backup.Init()
    {
    _obj_opts_apps_isbackedup_backup_text_=''
    _obj_opts_apps_isbackedup_backup_flag_=false
    _obj_opts_apps_isbackedup_backup_changes_flag_=true
    _obj_opts_apps_isbackedup_backup_enable_=false
    }
Opts.Apps.IsBackedUp.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Backup.Set()
    {
    [[ $_obj_opts_apps_isbackedup_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_backup_flag_=true
    [[ $_obj_opts_apps_isbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_backup_flag_
    }
Opts.Apps.IsBackedUp.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_backup_text_"
    fi
    }
Opts.Apps.IsBackedUp.Backup.Init

Opts.Apps.IsNotBackedUp.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_backup_flag_
    }
Opts.Apps.IsNotBackedUp.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_backup_enable_
    }
Opts.Apps.IsNotBackedUp.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_backup_enable_
    }
Opts.Apps.IsNotBackedUp.Backup.Init()
    {
    _obj_opts_apps_isnotbackedup_backup_text_=''
    _obj_opts_apps_isnotbackedup_backup_flag_=false
    _obj_opts_apps_isnotbackedup_backup_changes_flag_=true
    _obj_opts_apps_isnotbackedup_backup_enable_=false
    }
Opts.Apps.IsNotBackedUp.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_backup_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_backup_flag_
    }
Opts.Apps.IsNotBackedUp.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_backup_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Backup.Init

Opts.Apps.IsBackedUp.Download.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_download_flag_=false
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_download_flag_
    }
Opts.Apps.IsBackedUp.Download.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_download_enable_=false
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_download_enable_
    }
Opts.Apps.IsBackedUp.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_download_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Download.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_download_enable_=true
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_download_enable_
    }
Opts.Apps.IsBackedUp.Download.Init()
    {
    _obj_opts_apps_isbackedup_download_text_=''
    _obj_opts_apps_isbackedup_download_flag_=false
    _obj_opts_apps_isbackedup_download_changes_flag_=true
    _obj_opts_apps_isbackedup_download_enable_=false
    }
Opts.Apps.IsBackedUp.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_download_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_download_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Download.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_download_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Download.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_download_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_download_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Download.Set()
    {
    [[ $_obj_opts_apps_isbackedup_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_download_flag_=true
    [[ $_obj_opts_apps_isbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_download_flag_
    }
Opts.Apps.IsBackedUp.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_download_text_"
    fi
    }
Opts.Apps.IsBackedUp.Download.Init

Opts.Apps.IsNotBackedUp.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_download_flag_
    }
Opts.Apps.IsNotBackedUp.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_download_enable_
    }
Opts.Apps.IsNotBackedUp.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_download_enable_
    }
Opts.Apps.IsNotBackedUp.Download.Init()
    {
    _obj_opts_apps_isnotbackedup_download_text_=''
    _obj_opts_apps_isnotbackedup_download_flag_=false
    _obj_opts_apps_isnotbackedup_download_changes_flag_=true
    _obj_opts_apps_isnotbackedup_download_enable_=false
    }
Opts.Apps.IsNotBackedUp.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Download.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_download_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_download_flag_
    }
Opts.Apps.IsNotBackedUp.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_download_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Download.Init

Opts.Apps.IsBackedUp.Install.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_install_flag_=false
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_install_flag_
    }
Opts.Apps.IsBackedUp.Install.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_install_enable_=false
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_install_enable_
    }
Opts.Apps.IsBackedUp.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_install_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Install.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_install_enable_=true
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_install_enable_
    }
Opts.Apps.IsBackedUp.Install.Init()
    {
    _obj_opts_apps_isbackedup_install_text_=''
    _obj_opts_apps_isbackedup_install_flag_=false
    _obj_opts_apps_isbackedup_install_changes_flag_=true
    _obj_opts_apps_isbackedup_install_enable_=false
    }
Opts.Apps.IsBackedUp.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_install_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_install_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Install.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_install_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Install.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_install_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_install_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Install.Set()
    {
    [[ $_obj_opts_apps_isbackedup_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_install_flag_=true
    [[ $_obj_opts_apps_isbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_install_flag_
    }
Opts.Apps.IsBackedUp.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_install_text_"
    fi
    }
Opts.Apps.IsBackedUp.Install.Init

Opts.Apps.IsNotBackedUp.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_install_flag_
    }
Opts.Apps.IsNotBackedUp.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_install_enable_
    }
Opts.Apps.IsNotBackedUp.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_install_enable_
    }
Opts.Apps.IsNotBackedUp.Install.Init()
    {
    _obj_opts_apps_isnotbackedup_install_text_=''
    _obj_opts_apps_isnotbackedup_install_flag_=false
    _obj_opts_apps_isnotbackedup_install_changes_flag_=true
    _obj_opts_apps_isnotbackedup_install_enable_=false
    }
Opts.Apps.IsNotBackedUp.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Install.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_install_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_install_flag_
    }
Opts.Apps.IsNotBackedUp.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_install_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Install.Init

Opts.Apps.IsBackedUp.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_flag_=false
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_rebuild_flag_
    }
Opts.Apps.IsBackedUp.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_enable_=false
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_rebuild_enable_
    }
Opts.Apps.IsBackedUp.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_enable_=true
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_rebuild_enable_
    }
Opts.Apps.IsBackedUp.Rebuild.Init()
    {
    _obj_opts_apps_isbackedup_rebuild_text_=''
    _obj_opts_apps_isbackedup_rebuild_flag_=false
    _obj_opts_apps_isbackedup_rebuild_changes_flag_=true
    _obj_opts_apps_isbackedup_rebuild_enable_=false
    }
Opts.Apps.IsBackedUp.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isbackedup_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_rebuild_flag_=true
    [[ $_obj_opts_apps_isbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_rebuild_flag_
    }
Opts.Apps.IsBackedUp.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_rebuild_text_"
    fi
    }
Opts.Apps.IsBackedUp.Rebuild.Init

Opts.Apps.IsNotBackedUp.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_rebuild_flag_
    }
Opts.Apps.IsNotBackedUp.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_rebuild_enable_
    }
Opts.Apps.IsNotBackedUp.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_rebuild_enable_
    }
Opts.Apps.IsNotBackedUp.Rebuild.Init()
    {
    _obj_opts_apps_isnotbackedup_rebuild_text_=''
    _obj_opts_apps_isnotbackedup_rebuild_flag_=false
    _obj_opts_apps_isnotbackedup_rebuild_changes_flag_=true
    _obj_opts_apps_isnotbackedup_rebuild_enable_=false
    }
Opts.Apps.IsNotBackedUp.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_rebuild_flag_
    }
Opts.Apps.IsNotBackedUp.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_rebuild_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Rebuild.Init

Opts.Apps.IsBackedUp.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_flag_=false
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_reinstall_flag_
    }
Opts.Apps.IsBackedUp.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_enable_=false
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_reinstall_enable_
    }
Opts.Apps.IsBackedUp.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_enable_=true
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_reinstall_enable_
    }
Opts.Apps.IsBackedUp.Reinstall.Init()
    {
    _obj_opts_apps_isbackedup_reinstall_text_=''
    _obj_opts_apps_isbackedup_reinstall_flag_=false
    _obj_opts_apps_isbackedup_reinstall_changes_flag_=true
    _obj_opts_apps_isbackedup_reinstall_enable_=false
    }
Opts.Apps.IsBackedUp.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isbackedup_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_reinstall_flag_=true
    [[ $_obj_opts_apps_isbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_reinstall_flag_
    }
Opts.Apps.IsBackedUp.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_reinstall_text_"
    fi
    }
Opts.Apps.IsBackedUp.Reinstall.Init

Opts.Apps.IsNotBackedUp.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_reinstall_flag_
    }
Opts.Apps.IsNotBackedUp.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_reinstall_enable_
    }
Opts.Apps.IsNotBackedUp.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_reinstall_enable_
    }
Opts.Apps.IsNotBackedUp.Reinstall.Init()
    {
    _obj_opts_apps_isnotbackedup_reinstall_text_=''
    _obj_opts_apps_isnotbackedup_reinstall_flag_=false
    _obj_opts_apps_isnotbackedup_reinstall_changes_flag_=true
    _obj_opts_apps_isnotbackedup_reinstall_enable_=false
    }
Opts.Apps.IsNotBackedUp.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_reinstall_flag_
    }
Opts.Apps.IsNotBackedUp.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_reinstall_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Reinstall.Init

Opts.Apps.IsBackedUp.Restore.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_flag_=false
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restore_flag_
    }
Opts.Apps.IsBackedUp.Restore.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_enable_=false
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restore_enable_
    }
Opts.Apps.IsBackedUp.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Restore.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_enable_=true
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restore_enable_
    }
Opts.Apps.IsBackedUp.Restore.Init()
    {
    _obj_opts_apps_isbackedup_restore_text_=''
    _obj_opts_apps_isbackedup_restore_flag_=false
    _obj_opts_apps_isbackedup_restore_changes_flag_=true
    _obj_opts_apps_isbackedup_restore_enable_=false
    }
Opts.Apps.IsBackedUp.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Restore.Set()
    {
    [[ $_obj_opts_apps_isbackedup_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restore_flag_=true
    [[ $_obj_opts_apps_isbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restore_flag_
    }
Opts.Apps.IsBackedUp.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_restore_text_"
    fi
    }
Opts.Apps.IsBackedUp.Restore.Init

Opts.Apps.IsNotBackedUp.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restore_flag_
    }
Opts.Apps.IsNotBackedUp.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restore_enable_
    }
Opts.Apps.IsNotBackedUp.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restore_enable_
    }
Opts.Apps.IsNotBackedUp.Restore.Init()
    {
    _obj_opts_apps_isnotbackedup_restore_text_=''
    _obj_opts_apps_isnotbackedup_restore_flag_=false
    _obj_opts_apps_isnotbackedup_restore_changes_flag_=true
    _obj_opts_apps_isnotbackedup_restore_enable_=false
    }
Opts.Apps.IsNotBackedUp.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restore_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restore_flag_
    }
Opts.Apps.IsNotBackedUp.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_restore_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Restore.Init

Opts.Apps.IsBackedUp.Restart.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_flag_=false
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restart_flag_
    }
Opts.Apps.IsBackedUp.Restart.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_enable_=false
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restart_enable_
    }
Opts.Apps.IsBackedUp.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Restart.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_enable_=true
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restart_enable_
    }
Opts.Apps.IsBackedUp.Restart.Init()
    {
    _obj_opts_apps_isbackedup_restart_text_=''
    _obj_opts_apps_isbackedup_restart_flag_=false
    _obj_opts_apps_isbackedup_restart_changes_flag_=true
    _obj_opts_apps_isbackedup_restart_enable_=false
    }
Opts.Apps.IsBackedUp.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Restart.Set()
    {
    [[ $_obj_opts_apps_isbackedup_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_restart_flag_=true
    [[ $_obj_opts_apps_isbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_restart_flag_
    }
Opts.Apps.IsBackedUp.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_restart_text_"
    fi
    }
Opts.Apps.IsBackedUp.Restart.Init

Opts.Apps.IsNotBackedUp.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restart_flag_
    }
Opts.Apps.IsNotBackedUp.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restart_enable_
    }
Opts.Apps.IsNotBackedUp.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restart_enable_
    }
Opts.Apps.IsNotBackedUp.Restart.Init()
    {
    _obj_opts_apps_isnotbackedup_restart_text_=''
    _obj_opts_apps_isnotbackedup_restart_flag_=false
    _obj_opts_apps_isnotbackedup_restart_changes_flag_=true
    _obj_opts_apps_isnotbackedup_restart_enable_=false
    }
Opts.Apps.IsNotBackedUp.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_restart_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_restart_flag_
    }
Opts.Apps.IsNotBackedUp.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_restart_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Restart.Init

Opts.Apps.IsBackedUp.Start.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_start_flag_=false
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_start_flag_
    }
Opts.Apps.IsBackedUp.Start.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_start_enable_=false
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_start_enable_
    }
Opts.Apps.IsBackedUp.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_start_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Start.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_start_enable_=true
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_start_enable_
    }
Opts.Apps.IsBackedUp.Start.Init()
    {
    _obj_opts_apps_isbackedup_start_text_=''
    _obj_opts_apps_isbackedup_start_flag_=false
    _obj_opts_apps_isbackedup_start_changes_flag_=true
    _obj_opts_apps_isbackedup_start_enable_=false
    }
Opts.Apps.IsBackedUp.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_start_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_start_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Start.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_start_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Start.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_start_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_start_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Start.Set()
    {
    [[ $_obj_opts_apps_isbackedup_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_start_flag_=true
    [[ $_obj_opts_apps_isbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_start_flag_
    }
Opts.Apps.IsBackedUp.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_start_text_"
    fi
    }
Opts.Apps.IsBackedUp.Start.Init

Opts.Apps.IsNotBackedUp.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_start_flag_
    }
Opts.Apps.IsNotBackedUp.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_start_enable_
    }
Opts.Apps.IsNotBackedUp.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_start_enable_
    }
Opts.Apps.IsNotBackedUp.Start.Init()
    {
    _obj_opts_apps_isnotbackedup_start_text_=''
    _obj_opts_apps_isnotbackedup_start_flag_=false
    _obj_opts_apps_isnotbackedup_start_changes_flag_=true
    _obj_opts_apps_isnotbackedup_start_enable_=false
    }
Opts.Apps.IsNotBackedUp.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Start.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_start_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_start_flag_
    }
Opts.Apps.IsNotBackedUp.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_start_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Start.Init

Opts.Apps.IsBackedUp.Stop.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_flag_=false
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_stop_flag_
    }
Opts.Apps.IsBackedUp.Stop.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_enable_=false
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_stop_enable_
    }
Opts.Apps.IsBackedUp.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Stop.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_enable_=true
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_stop_enable_
    }
Opts.Apps.IsBackedUp.Stop.Init()
    {
    _obj_opts_apps_isbackedup_stop_text_=''
    _obj_opts_apps_isbackedup_stop_flag_=false
    _obj_opts_apps_isbackedup_stop_changes_flag_=true
    _obj_opts_apps_isbackedup_stop_enable_=false
    }
Opts.Apps.IsBackedUp.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Stop.Set()
    {
    [[ $_obj_opts_apps_isbackedup_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_stop_flag_=true
    [[ $_obj_opts_apps_isbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_stop_flag_
    }
Opts.Apps.IsBackedUp.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_stop_text_"
    fi
    }
Opts.Apps.IsBackedUp.Stop.Init

Opts.Apps.IsNotBackedUp.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_stop_flag_
    }
Opts.Apps.IsNotBackedUp.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_stop_enable_
    }
Opts.Apps.IsNotBackedUp.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_stop_enable_
    }
Opts.Apps.IsNotBackedUp.Stop.Init()
    {
    _obj_opts_apps_isnotbackedup_stop_text_=''
    _obj_opts_apps_isnotbackedup_stop_flag_=false
    _obj_opts_apps_isnotbackedup_stop_changes_flag_=true
    _obj_opts_apps_isnotbackedup_stop_enable_=false
    }
Opts.Apps.IsNotBackedUp.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_stop_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_stop_flag_
    }
Opts.Apps.IsNotBackedUp.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_stop_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Stop.Init

Opts.Apps.IsBackedUp.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_flag_=false
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_uninstall_flag_
    }
Opts.Apps.IsBackedUp.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_enable_=false
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_uninstall_enable_
    }
Opts.Apps.IsBackedUp.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_enable_=true
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_uninstall_enable_
    }
Opts.Apps.IsBackedUp.Uninstall.Init()
    {
    _obj_opts_apps_isbackedup_uninstall_text_=''
    _obj_opts_apps_isbackedup_uninstall_flag_=false
    _obj_opts_apps_isbackedup_uninstall_changes_flag_=true
    _obj_opts_apps_isbackedup_uninstall_enable_=false
    }
Opts.Apps.IsBackedUp.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isbackedup_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_uninstall_flag_=true
    [[ $_obj_opts_apps_isbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_uninstall_flag_
    }
Opts.Apps.IsBackedUp.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_uninstall_text_"
    fi
    }
Opts.Apps.IsBackedUp.Uninstall.Init

Opts.Apps.IsNotBackedUp.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_uninstall_flag_
    }
Opts.Apps.IsNotBackedUp.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_uninstall_enable_
    }
Opts.Apps.IsNotBackedUp.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_uninstall_enable_
    }
Opts.Apps.IsNotBackedUp.Uninstall.Init()
    {
    _obj_opts_apps_isnotbackedup_uninstall_text_=''
    _obj_opts_apps_isnotbackedup_uninstall_flag_=false
    _obj_opts_apps_isnotbackedup_uninstall_changes_flag_=true
    _obj_opts_apps_isnotbackedup_uninstall_enable_=false
    }
Opts.Apps.IsNotBackedUp.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_uninstall_flag_
    }
Opts.Apps.IsNotBackedUp.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_uninstall_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Uninstall.Init

Opts.Apps.IsBackedUp.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_flag_=false
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_upgrade_flag_
    }
Opts.Apps.IsBackedUp.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_enable_=false
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_upgrade_enable_
    }
Opts.Apps.IsBackedUp.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_changes_flag_=false
    }
Opts.Apps.IsBackedUp.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_enable_=true
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_upgrade_enable_
    }
Opts.Apps.IsBackedUp.Upgrade.Init()
    {
    _obj_opts_apps_isbackedup_upgrade_text_=''
    _obj_opts_apps_isbackedup_upgrade_flag_=false
    _obj_opts_apps_isbackedup_upgrade_changes_flag_=true
    _obj_opts_apps_isbackedup_upgrade_enable_=false
    }
Opts.Apps.IsBackedUp.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsBackedUp.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsBackedUp.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_changes_flag_=true
    }
Opts.Apps.IsBackedUp.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isbackedup_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isbackedup_upgrade_flag_=true
    [[ $_obj_opts_apps_isbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isbackedup_upgrade_flag_
    }
Opts.Apps.IsBackedUp.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isbackedup_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isbackedup_upgrade_text_"
    fi
    }
Opts.Apps.IsBackedUp.Upgrade.Init

Opts.Apps.IsNotBackedUp.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_upgrade_flag_
    }
Opts.Apps.IsNotBackedUp.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_upgrade_enable_
    }
Opts.Apps.IsNotBackedUp.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotBackedUp.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_upgrade_enable_
    }
Opts.Apps.IsNotBackedUp.Upgrade.Init()
    {
    _obj_opts_apps_isnotbackedup_upgrade_text_=''
    _obj_opts_apps_isnotbackedup_upgrade_flag_=false
    _obj_opts_apps_isnotbackedup_upgrade_changes_flag_=true
    _obj_opts_apps_isnotbackedup_upgrade_enable_=false
    }
Opts.Apps.IsNotBackedUp.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotBackedUp.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotBackedUp.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotbackedup_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotbackedup_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotbackedup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotbackedup_upgrade_flag_
    }
Opts.Apps.IsNotBackedUp.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotbackedup_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotbackedup_upgrade_text_"
    fi
    }
Opts.Apps.IsNotBackedUp.Upgrade.Init

Opts.Apps.List.Dependent.Clear()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_flag_=false
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_flag_
    }
Opts.Apps.List.Dependent.Disable()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_enable_=false
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_enable_
    }
Opts.Apps.List.Dependent.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_dependent_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_dependent_changes_flag_=false
    }
Opts.Apps.List.Dependent.Enable()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_enable_=true
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_enable_
    }
Opts.Apps.List.Dependent.Init()
    {
    _obj_opts_apps_list_dependent_text_=''
    _obj_opts_apps_list_dependent_flag_=false
    _obj_opts_apps_list_dependent_changes_flag_=true
    _obj_opts_apps_list_dependent_enable_=false
    }
Opts.Apps.List.Dependent.IsDisabled()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ != 'true' ]]
    }
Opts.Apps.List.Dependent.IsEnabled()
    {
    [[ $_obj_opts_apps_list_dependent_enable_ = 'true' ]]
    }
Opts.Apps.List.Dependent.IsNot()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ != 'true' ]]
    }
Opts.Apps.List.Dependent.IsSet()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ = 'true' ]]
    }
Opts.Apps.List.Dependent.LogChanges()
    {
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_changes_flag_=true
    }
Opts.Apps.List.Dependent.Set()
    {
    [[ $_obj_opts_apps_list_dependent_flag_ = 'true' ]] && return
    _obj_opts_apps_list_dependent_flag_=true
    [[ $_obj_opts_apps_list_dependent_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_dependent_flag_
    }
Opts.Apps.List.Dependent.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_dependent_text_=$2
    else
        echo -n "$_obj_opts_apps_list_dependent_text_"
    fi
    }
Opts.Apps.List.Dependent.Init

Opts.Apps.IsDependent.Backup.Clear()
    {
    [[ $_obj_opts_apps_isdependent_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_backup_flag_=false
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_backup_flag_
    }
Opts.Apps.IsDependent.Backup.Disable()
    {
    [[ $_obj_opts_apps_isdependent_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_backup_enable_=false
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_backup_enable_
    }
Opts.Apps.IsDependent.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_backup_changes_flag_=false
    }
Opts.Apps.IsDependent.Backup.Enable()
    {
    [[ $_obj_opts_apps_isdependent_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_backup_enable_=true
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_backup_enable_
    }
Opts.Apps.IsDependent.Backup.Init()
    {
    _obj_opts_apps_isdependent_backup_text_=''
    _obj_opts_apps_isdependent_backup_flag_=false
    _obj_opts_apps_isdependent_backup_changes_flag_=true
    _obj_opts_apps_isdependent_backup_enable_=false
    }
Opts.Apps.IsDependent.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_backup_changes_flag_=true
    }
Opts.Apps.IsDependent.Backup.Set()
    {
    [[ $_obj_opts_apps_isdependent_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_backup_flag_=true
    [[ $_obj_opts_apps_isdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_backup_flag_
    }
Opts.Apps.IsDependent.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_backup_text_"
    fi
    }
Opts.Apps.IsDependent.Backup.Init

Opts.Apps.IsNotDependent.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_flag_=false
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_backup_flag_
    }
Opts.Apps.IsNotDependent.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_enable_=false
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_backup_enable_
    }
Opts.Apps.IsNotDependent.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_enable_=true
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_backup_enable_
    }
Opts.Apps.IsNotDependent.Backup.Init()
    {
    _obj_opts_apps_isnotdependent_backup_text_=''
    _obj_opts_apps_isnotdependent_backup_flag_=false
    _obj_opts_apps_isnotdependent_backup_changes_flag_=true
    _obj_opts_apps_isnotdependent_backup_enable_=false
    }
Opts.Apps.IsNotDependent.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_backup_flag_=true
    [[ $_obj_opts_apps_isnotdependent_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_backup_flag_
    }
Opts.Apps.IsNotDependent.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_backup_text_"
    fi
    }
Opts.Apps.IsNotDependent.Backup.Init

Opts.Apps.IsDependent.Download.Clear()
    {
    [[ $_obj_opts_apps_isdependent_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_download_flag_=false
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_download_flag_
    }
Opts.Apps.IsDependent.Download.Disable()
    {
    [[ $_obj_opts_apps_isdependent_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_download_enable_=false
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_download_enable_
    }
Opts.Apps.IsDependent.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_download_changes_flag_=false
    }
Opts.Apps.IsDependent.Download.Enable()
    {
    [[ $_obj_opts_apps_isdependent_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_download_enable_=true
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_download_enable_
    }
Opts.Apps.IsDependent.Download.Init()
    {
    _obj_opts_apps_isdependent_download_text_=''
    _obj_opts_apps_isdependent_download_flag_=false
    _obj_opts_apps_isdependent_download_changes_flag_=true
    _obj_opts_apps_isdependent_download_enable_=false
    }
Opts.Apps.IsDependent.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_download_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_download_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Download.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_download_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Download.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_download_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_download_changes_flag_=true
    }
Opts.Apps.IsDependent.Download.Set()
    {
    [[ $_obj_opts_apps_isdependent_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_download_flag_=true
    [[ $_obj_opts_apps_isdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_download_flag_
    }
Opts.Apps.IsDependent.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_download_text_"
    fi
    }
Opts.Apps.IsDependent.Download.Init

Opts.Apps.IsNotDependent.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_flag_=false
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_download_flag_
    }
Opts.Apps.IsNotDependent.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_enable_=false
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_download_enable_
    }
Opts.Apps.IsNotDependent.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_enable_=true
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_download_enable_
    }
Opts.Apps.IsNotDependent.Download.Init()
    {
    _obj_opts_apps_isnotdependent_download_text_=''
    _obj_opts_apps_isnotdependent_download_flag_=false
    _obj_opts_apps_isnotdependent_download_changes_flag_=true
    _obj_opts_apps_isnotdependent_download_enable_=false
    }
Opts.Apps.IsNotDependent.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Download.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_download_flag_=true
    [[ $_obj_opts_apps_isnotdependent_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_download_flag_
    }
Opts.Apps.IsNotDependent.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_download_text_"
    fi
    }
Opts.Apps.IsNotDependent.Download.Init

Opts.Apps.IsDependent.Install.Clear()
    {
    [[ $_obj_opts_apps_isdependent_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_install_flag_=false
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_install_flag_
    }
Opts.Apps.IsDependent.Install.Disable()
    {
    [[ $_obj_opts_apps_isdependent_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_install_enable_=false
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_install_enable_
    }
Opts.Apps.IsDependent.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_install_changes_flag_=false
    }
Opts.Apps.IsDependent.Install.Enable()
    {
    [[ $_obj_opts_apps_isdependent_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_install_enable_=true
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_install_enable_
    }
Opts.Apps.IsDependent.Install.Init()
    {
    _obj_opts_apps_isdependent_install_text_=''
    _obj_opts_apps_isdependent_install_flag_=false
    _obj_opts_apps_isdependent_install_changes_flag_=true
    _obj_opts_apps_isdependent_install_enable_=false
    }
Opts.Apps.IsDependent.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_install_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_install_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Install.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_install_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Install.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_install_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_install_changes_flag_=true
    }
Opts.Apps.IsDependent.Install.Set()
    {
    [[ $_obj_opts_apps_isdependent_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_install_flag_=true
    [[ $_obj_opts_apps_isdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_install_flag_
    }
Opts.Apps.IsDependent.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_install_text_"
    fi
    }
Opts.Apps.IsDependent.Install.Init

Opts.Apps.IsNotDependent.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_flag_=false
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_install_flag_
    }
Opts.Apps.IsNotDependent.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_enable_=false
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_install_enable_
    }
Opts.Apps.IsNotDependent.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_enable_=true
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_install_enable_
    }
Opts.Apps.IsNotDependent.Install.Init()
    {
    _obj_opts_apps_isnotdependent_install_text_=''
    _obj_opts_apps_isnotdependent_install_flag_=false
    _obj_opts_apps_isnotdependent_install_changes_flag_=true
    _obj_opts_apps_isnotdependent_install_enable_=false
    }
Opts.Apps.IsNotDependent.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Install.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_install_flag_=true
    [[ $_obj_opts_apps_isnotdependent_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_install_flag_
    }
Opts.Apps.IsNotDependent.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_install_text_"
    fi
    }
Opts.Apps.IsNotDependent.Install.Init

Opts.Apps.IsDependent.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_flag_=false
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_rebuild_flag_
    }
Opts.Apps.IsDependent.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_enable_=false
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_rebuild_enable_
    }
Opts.Apps.IsDependent.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_changes_flag_=false
    }
Opts.Apps.IsDependent.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_enable_=true
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_rebuild_enable_
    }
Opts.Apps.IsDependent.Rebuild.Init()
    {
    _obj_opts_apps_isdependent_rebuild_text_=''
    _obj_opts_apps_isdependent_rebuild_flag_=false
    _obj_opts_apps_isdependent_rebuild_changes_flag_=true
    _obj_opts_apps_isdependent_rebuild_enable_=false
    }
Opts.Apps.IsDependent.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_changes_flag_=true
    }
Opts.Apps.IsDependent.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isdependent_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_rebuild_flag_=true
    [[ $_obj_opts_apps_isdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_rebuild_flag_
    }
Opts.Apps.IsDependent.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_rebuild_text_"
    fi
    }
Opts.Apps.IsDependent.Rebuild.Init

Opts.Apps.IsNotDependent.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_rebuild_flag_
    }
Opts.Apps.IsNotDependent.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_rebuild_enable_
    }
Opts.Apps.IsNotDependent.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_rebuild_enable_
    }
Opts.Apps.IsNotDependent.Rebuild.Init()
    {
    _obj_opts_apps_isnotdependent_rebuild_text_=''
    _obj_opts_apps_isnotdependent_rebuild_flag_=false
    _obj_opts_apps_isnotdependent_rebuild_changes_flag_=true
    _obj_opts_apps_isnotdependent_rebuild_enable_=false
    }
Opts.Apps.IsNotDependent.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotdependent_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_rebuild_flag_
    }
Opts.Apps.IsNotDependent.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_rebuild_text_"
    fi
    }
Opts.Apps.IsNotDependent.Rebuild.Init

Opts.Apps.IsDependent.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_flag_=false
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_reinstall_flag_
    }
Opts.Apps.IsDependent.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_enable_=false
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_reinstall_enable_
    }
Opts.Apps.IsDependent.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_changes_flag_=false
    }
Opts.Apps.IsDependent.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_enable_=true
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_reinstall_enable_
    }
Opts.Apps.IsDependent.Reinstall.Init()
    {
    _obj_opts_apps_isdependent_reinstall_text_=''
    _obj_opts_apps_isdependent_reinstall_flag_=false
    _obj_opts_apps_isdependent_reinstall_changes_flag_=true
    _obj_opts_apps_isdependent_reinstall_enable_=false
    }
Opts.Apps.IsDependent.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_changes_flag_=true
    }
Opts.Apps.IsDependent.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isdependent_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_reinstall_flag_=true
    [[ $_obj_opts_apps_isdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_reinstall_flag_
    }
Opts.Apps.IsDependent.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_reinstall_text_"
    fi
    }
Opts.Apps.IsDependent.Reinstall.Init

Opts.Apps.IsNotDependent.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_reinstall_flag_
    }
Opts.Apps.IsNotDependent.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_reinstall_enable_
    }
Opts.Apps.IsNotDependent.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_reinstall_enable_
    }
Opts.Apps.IsNotDependent.Reinstall.Init()
    {
    _obj_opts_apps_isnotdependent_reinstall_text_=''
    _obj_opts_apps_isnotdependent_reinstall_flag_=false
    _obj_opts_apps_isnotdependent_reinstall_changes_flag_=true
    _obj_opts_apps_isnotdependent_reinstall_enable_=false
    }
Opts.Apps.IsNotDependent.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotdependent_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_reinstall_flag_
    }
Opts.Apps.IsNotDependent.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_reinstall_text_"
    fi
    }
Opts.Apps.IsNotDependent.Reinstall.Init

Opts.Apps.IsDependent.Restore.Clear()
    {
    [[ $_obj_opts_apps_isdependent_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restore_flag_=false
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restore_flag_
    }
Opts.Apps.IsDependent.Restore.Disable()
    {
    [[ $_obj_opts_apps_isdependent_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restore_enable_=false
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restore_enable_
    }
Opts.Apps.IsDependent.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restore_changes_flag_=false
    }
Opts.Apps.IsDependent.Restore.Enable()
    {
    [[ $_obj_opts_apps_isdependent_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restore_enable_=true
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restore_enable_
    }
Opts.Apps.IsDependent.Restore.Init()
    {
    _obj_opts_apps_isdependent_restore_text_=''
    _obj_opts_apps_isdependent_restore_flag_=false
    _obj_opts_apps_isdependent_restore_changes_flag_=true
    _obj_opts_apps_isdependent_restore_enable_=false
    }
Opts.Apps.IsDependent.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restore_changes_flag_=true
    }
Opts.Apps.IsDependent.Restore.Set()
    {
    [[ $_obj_opts_apps_isdependent_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restore_flag_=true
    [[ $_obj_opts_apps_isdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restore_flag_
    }
Opts.Apps.IsDependent.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_restore_text_"
    fi
    }
Opts.Apps.IsDependent.Restore.Init

Opts.Apps.IsNotDependent.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_flag_=false
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restore_flag_
    }
Opts.Apps.IsNotDependent.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_enable_=false
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restore_enable_
    }
Opts.Apps.IsNotDependent.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_enable_=true
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restore_enable_
    }
Opts.Apps.IsNotDependent.Restore.Init()
    {
    _obj_opts_apps_isnotdependent_restore_text_=''
    _obj_opts_apps_isnotdependent_restore_flag_=false
    _obj_opts_apps_isnotdependent_restore_changes_flag_=true
    _obj_opts_apps_isnotdependent_restore_enable_=false
    }
Opts.Apps.IsNotDependent.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restore_flag_=true
    [[ $_obj_opts_apps_isnotdependent_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restore_flag_
    }
Opts.Apps.IsNotDependent.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_restore_text_"
    fi
    }
Opts.Apps.IsNotDependent.Restore.Init

Opts.Apps.IsDependent.Restart.Clear()
    {
    [[ $_obj_opts_apps_isdependent_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restart_flag_=false
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restart_flag_
    }
Opts.Apps.IsDependent.Restart.Disable()
    {
    [[ $_obj_opts_apps_isdependent_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restart_enable_=false
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restart_enable_
    }
Opts.Apps.IsDependent.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_restart_changes_flag_=false
    }
Opts.Apps.IsDependent.Restart.Enable()
    {
    [[ $_obj_opts_apps_isdependent_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restart_enable_=true
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restart_enable_
    }
Opts.Apps.IsDependent.Restart.Init()
    {
    _obj_opts_apps_isdependent_restart_text_=''
    _obj_opts_apps_isdependent_restart_flag_=false
    _obj_opts_apps_isdependent_restart_changes_flag_=true
    _obj_opts_apps_isdependent_restart_enable_=false
    }
Opts.Apps.IsDependent.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restart_changes_flag_=true
    }
Opts.Apps.IsDependent.Restart.Set()
    {
    [[ $_obj_opts_apps_isdependent_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_restart_flag_=true
    [[ $_obj_opts_apps_isdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_restart_flag_
    }
Opts.Apps.IsDependent.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_restart_text_"
    fi
    }
Opts.Apps.IsDependent.Restart.Init

Opts.Apps.IsNotDependent.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_flag_=false
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restart_flag_
    }
Opts.Apps.IsNotDependent.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_enable_=false
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restart_enable_
    }
Opts.Apps.IsNotDependent.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_enable_=true
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restart_enable_
    }
Opts.Apps.IsNotDependent.Restart.Init()
    {
    _obj_opts_apps_isnotdependent_restart_text_=''
    _obj_opts_apps_isnotdependent_restart_flag_=false
    _obj_opts_apps_isnotdependent_restart_changes_flag_=true
    _obj_opts_apps_isnotdependent_restart_enable_=false
    }
Opts.Apps.IsNotDependent.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_restart_flag_=true
    [[ $_obj_opts_apps_isnotdependent_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_restart_flag_
    }
Opts.Apps.IsNotDependent.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_restart_text_"
    fi
    }
Opts.Apps.IsNotDependent.Restart.Init

Opts.Apps.IsDependent.Start.Clear()
    {
    [[ $_obj_opts_apps_isdependent_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_start_flag_=false
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_start_flag_
    }
Opts.Apps.IsDependent.Start.Disable()
    {
    [[ $_obj_opts_apps_isdependent_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_start_enable_=false
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_start_enable_
    }
Opts.Apps.IsDependent.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_start_changes_flag_=false
    }
Opts.Apps.IsDependent.Start.Enable()
    {
    [[ $_obj_opts_apps_isdependent_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_start_enable_=true
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_start_enable_
    }
Opts.Apps.IsDependent.Start.Init()
    {
    _obj_opts_apps_isdependent_start_text_=''
    _obj_opts_apps_isdependent_start_flag_=false
    _obj_opts_apps_isdependent_start_changes_flag_=true
    _obj_opts_apps_isdependent_start_enable_=false
    }
Opts.Apps.IsDependent.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_start_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_start_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Start.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_start_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Start.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_start_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_start_changes_flag_=true
    }
Opts.Apps.IsDependent.Start.Set()
    {
    [[ $_obj_opts_apps_isdependent_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_start_flag_=true
    [[ $_obj_opts_apps_isdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_start_flag_
    }
Opts.Apps.IsDependent.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_start_text_"
    fi
    }
Opts.Apps.IsDependent.Start.Init

Opts.Apps.IsNotDependent.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_flag_=false
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_start_flag_
    }
Opts.Apps.IsNotDependent.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_enable_=false
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_start_enable_
    }
Opts.Apps.IsNotDependent.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_enable_=true
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_start_enable_
    }
Opts.Apps.IsNotDependent.Start.Init()
    {
    _obj_opts_apps_isnotdependent_start_text_=''
    _obj_opts_apps_isnotdependent_start_flag_=false
    _obj_opts_apps_isnotdependent_start_changes_flag_=true
    _obj_opts_apps_isnotdependent_start_enable_=false
    }
Opts.Apps.IsNotDependent.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Start.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_start_flag_=true
    [[ $_obj_opts_apps_isnotdependent_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_start_flag_
    }
Opts.Apps.IsNotDependent.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_start_text_"
    fi
    }
Opts.Apps.IsNotDependent.Start.Init

Opts.Apps.IsDependent.Stop.Clear()
    {
    [[ $_obj_opts_apps_isdependent_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_stop_flag_=false
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_stop_flag_
    }
Opts.Apps.IsDependent.Stop.Disable()
    {
    [[ $_obj_opts_apps_isdependent_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_stop_enable_=false
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_stop_enable_
    }
Opts.Apps.IsDependent.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_stop_changes_flag_=false
    }
Opts.Apps.IsDependent.Stop.Enable()
    {
    [[ $_obj_opts_apps_isdependent_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_stop_enable_=true
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_stop_enable_
    }
Opts.Apps.IsDependent.Stop.Init()
    {
    _obj_opts_apps_isdependent_stop_text_=''
    _obj_opts_apps_isdependent_stop_flag_=false
    _obj_opts_apps_isdependent_stop_changes_flag_=true
    _obj_opts_apps_isdependent_stop_enable_=false
    }
Opts.Apps.IsDependent.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_stop_changes_flag_=true
    }
Opts.Apps.IsDependent.Stop.Set()
    {
    [[ $_obj_opts_apps_isdependent_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_stop_flag_=true
    [[ $_obj_opts_apps_isdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_stop_flag_
    }
Opts.Apps.IsDependent.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_stop_text_"
    fi
    }
Opts.Apps.IsDependent.Stop.Init

Opts.Apps.IsNotDependent.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_flag_=false
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_stop_flag_
    }
Opts.Apps.IsNotDependent.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_enable_=false
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_stop_enable_
    }
Opts.Apps.IsNotDependent.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_enable_=true
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_stop_enable_
    }
Opts.Apps.IsNotDependent.Stop.Init()
    {
    _obj_opts_apps_isnotdependent_stop_text_=''
    _obj_opts_apps_isnotdependent_stop_flag_=false
    _obj_opts_apps_isnotdependent_stop_changes_flag_=true
    _obj_opts_apps_isnotdependent_stop_enable_=false
    }
Opts.Apps.IsNotDependent.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_stop_flag_=true
    [[ $_obj_opts_apps_isnotdependent_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_stop_flag_
    }
Opts.Apps.IsNotDependent.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_stop_text_"
    fi
    }
Opts.Apps.IsNotDependent.Stop.Init

Opts.Apps.IsDependent.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_flag_=false
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_uninstall_flag_
    }
Opts.Apps.IsDependent.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_enable_=false
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_uninstall_enable_
    }
Opts.Apps.IsDependent.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_changes_flag_=false
    }
Opts.Apps.IsDependent.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_enable_=true
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_uninstall_enable_
    }
Opts.Apps.IsDependent.Uninstall.Init()
    {
    _obj_opts_apps_isdependent_uninstall_text_=''
    _obj_opts_apps_isdependent_uninstall_flag_=false
    _obj_opts_apps_isdependent_uninstall_changes_flag_=true
    _obj_opts_apps_isdependent_uninstall_enable_=false
    }
Opts.Apps.IsDependent.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_changes_flag_=true
    }
Opts.Apps.IsDependent.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isdependent_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_uninstall_flag_=true
    [[ $_obj_opts_apps_isdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_uninstall_flag_
    }
Opts.Apps.IsDependent.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_uninstall_text_"
    fi
    }
Opts.Apps.IsDependent.Uninstall.Init

Opts.Apps.IsNotDependent.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_uninstall_flag_
    }
Opts.Apps.IsNotDependent.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_uninstall_enable_
    }
Opts.Apps.IsNotDependent.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_uninstall_enable_
    }
Opts.Apps.IsNotDependent.Uninstall.Init()
    {
    _obj_opts_apps_isnotdependent_uninstall_text_=''
    _obj_opts_apps_isnotdependent_uninstall_flag_=false
    _obj_opts_apps_isnotdependent_uninstall_changes_flag_=true
    _obj_opts_apps_isnotdependent_uninstall_enable_=false
    }
Opts.Apps.IsNotDependent.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotdependent_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_uninstall_flag_
    }
Opts.Apps.IsNotDependent.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_uninstall_text_"
    fi
    }
Opts.Apps.IsNotDependent.Uninstall.Init

Opts.Apps.IsDependent.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_flag_=false
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_upgrade_flag_
    }
Opts.Apps.IsDependent.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_enable_=false
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_upgrade_enable_
    }
Opts.Apps.IsDependent.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_changes_flag_=false
    }
Opts.Apps.IsDependent.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_enable_=true
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_upgrade_enable_
    }
Opts.Apps.IsDependent.Upgrade.Init()
    {
    _obj_opts_apps_isdependent_upgrade_text_=''
    _obj_opts_apps_isdependent_upgrade_flag_=false
    _obj_opts_apps_isdependent_upgrade_changes_flag_=true
    _obj_opts_apps_isdependent_upgrade_enable_=false
    }
Opts.Apps.IsDependent.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsDependent.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsDependent.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsDependent.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsDependent.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_changes_flag_=true
    }
Opts.Apps.IsDependent.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isdependent_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isdependent_upgrade_flag_=true
    [[ $_obj_opts_apps_isdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isdependent_upgrade_flag_
    }
Opts.Apps.IsDependent.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isdependent_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isdependent_upgrade_text_"
    fi
    }
Opts.Apps.IsDependent.Upgrade.Init

Opts.Apps.IsNotDependent.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_upgrade_flag_
    }
Opts.Apps.IsNotDependent.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_upgrade_enable_
    }
Opts.Apps.IsNotDependent.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotDependent.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_upgrade_enable_
    }
Opts.Apps.IsNotDependent.Upgrade.Init()
    {
    _obj_opts_apps_isnotdependent_upgrade_text_=''
    _obj_opts_apps_isnotdependent_upgrade_flag_=false
    _obj_opts_apps_isnotdependent_upgrade_changes_flag_=true
    _obj_opts_apps_isnotdependent_upgrade_enable_=false
    }
Opts.Apps.IsNotDependent.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotDependent.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotDependent.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotDependent.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotdependent_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotdependent_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotdependent_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotdependent_upgrade_flag_
    }
Opts.Apps.IsNotDependent.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotdependent_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotdependent_upgrade_text_"
    fi
    }
Opts.Apps.IsNotDependent.Upgrade.Init

Opts.Apps.List.Installed.Clear()
    {
    [[ $_obj_opts_apps_list_installed_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installed_flag_=false
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_flag_
    }
Opts.Apps.List.Installed.Disable()
    {
    [[ $_obj_opts_apps_list_installed_enable_ != 'true' ]] && return
    _obj_opts_apps_list_installed_enable_=false
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_enable_
    }
Opts.Apps.List.Installed.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_installed_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installed_changes_flag_=false
    }
Opts.Apps.List.Installed.Enable()
    {
    [[ $_obj_opts_apps_list_installed_enable_ = 'true' ]] && return
    _obj_opts_apps_list_installed_enable_=true
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_enable_
    }
Opts.Apps.List.Installed.Init()
    {
    _obj_opts_apps_list_installed_text_=''
    _obj_opts_apps_list_installed_flag_=false
    _obj_opts_apps_list_installed_changes_flag_=true
    _obj_opts_apps_list_installed_enable_=false
    }
Opts.Apps.List.Installed.IsDisabled()
    {
    [[ $_obj_opts_apps_list_installed_enable_ != 'true' ]]
    }
Opts.Apps.List.Installed.IsEnabled()
    {
    [[ $_obj_opts_apps_list_installed_enable_ = 'true' ]]
    }
Opts.Apps.List.Installed.IsNot()
    {
    [[ $_obj_opts_apps_list_installed_flag_ != 'true' ]]
    }
Opts.Apps.List.Installed.IsSet()
    {
    [[ $_obj_opts_apps_list_installed_flag_ = 'true' ]]
    }
Opts.Apps.List.Installed.LogChanges()
    {
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installed_changes_flag_=true
    }
Opts.Apps.List.Installed.Set()
    {
    [[ $_obj_opts_apps_list_installed_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installed_flag_=true
    [[ $_obj_opts_apps_list_installed_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installed_flag_
    }
Opts.Apps.List.Installed.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_installed_text_=$2
    else
        echo -n "$_obj_opts_apps_list_installed_text_"
    fi
    }
Opts.Apps.List.Installed.Init

Opts.Apps.IsInstalled.Backup.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_flag_=false
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_backup_flag_
    }
Opts.Apps.IsInstalled.Backup.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_enable_=false
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_backup_enable_
    }
Opts.Apps.IsInstalled.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_changes_flag_=false
    }
Opts.Apps.IsInstalled.Backup.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_enable_=true
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_backup_enable_
    }
Opts.Apps.IsInstalled.Backup.Init()
    {
    _obj_opts_apps_isinstalled_backup_text_=''
    _obj_opts_apps_isinstalled_backup_flag_=false
    _obj_opts_apps_isinstalled_backup_changes_flag_=true
    _obj_opts_apps_isinstalled_backup_enable_=false
    }
Opts.Apps.IsInstalled.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_changes_flag_=true
    }
Opts.Apps.IsInstalled.Backup.Set()
    {
    [[ $_obj_opts_apps_isinstalled_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_backup_flag_=true
    [[ $_obj_opts_apps_isinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_backup_flag_
    }
Opts.Apps.IsInstalled.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_backup_text_"
    fi
    }
Opts.Apps.IsInstalled.Backup.Init

Opts.Apps.IsNotInstalled.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_backup_flag_
    }
Opts.Apps.IsNotInstalled.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_backup_enable_
    }
Opts.Apps.IsNotInstalled.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_backup_enable_
    }
Opts.Apps.IsNotInstalled.Backup.Init()
    {
    _obj_opts_apps_isnotinstalled_backup_text_=''
    _obj_opts_apps_isnotinstalled_backup_flag_=false
    _obj_opts_apps_isnotinstalled_backup_changes_flag_=true
    _obj_opts_apps_isnotinstalled_backup_enable_=false
    }
Opts.Apps.IsNotInstalled.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_backup_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_backup_flag_
    }
Opts.Apps.IsNotInstalled.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_backup_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Backup.Init

Opts.Apps.IsInstalled.Download.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_download_flag_=false
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_download_flag_
    }
Opts.Apps.IsInstalled.Download.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_download_enable_=false
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_download_enable_
    }
Opts.Apps.IsInstalled.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_download_changes_flag_=false
    }
Opts.Apps.IsInstalled.Download.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_download_enable_=true
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_download_enable_
    }
Opts.Apps.IsInstalled.Download.Init()
    {
    _obj_opts_apps_isinstalled_download_text_=''
    _obj_opts_apps_isinstalled_download_flag_=false
    _obj_opts_apps_isinstalled_download_changes_flag_=true
    _obj_opts_apps_isinstalled_download_enable_=false
    }
Opts.Apps.IsInstalled.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_download_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_download_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Download.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_download_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Download.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_download_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_download_changes_flag_=true
    }
Opts.Apps.IsInstalled.Download.Set()
    {
    [[ $_obj_opts_apps_isinstalled_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_download_flag_=true
    [[ $_obj_opts_apps_isinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_download_flag_
    }
Opts.Apps.IsInstalled.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_download_text_"
    fi
    }
Opts.Apps.IsInstalled.Download.Init

Opts.Apps.IsNotInstalled.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_download_flag_
    }
Opts.Apps.IsNotInstalled.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_download_enable_
    }
Opts.Apps.IsNotInstalled.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_download_enable_
    }
Opts.Apps.IsNotInstalled.Download.Init()
    {
    _obj_opts_apps_isnotinstalled_download_text_=''
    _obj_opts_apps_isnotinstalled_download_flag_=false
    _obj_opts_apps_isnotinstalled_download_changes_flag_=true
    _obj_opts_apps_isnotinstalled_download_enable_=false
    }
Opts.Apps.IsNotInstalled.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Download.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_download_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_download_flag_
    }
Opts.Apps.IsNotInstalled.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_download_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Download.Init

Opts.Apps.IsInstalled.Install.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_install_flag_=false
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_install_flag_
    }
Opts.Apps.IsInstalled.Install.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_install_enable_=false
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_install_enable_
    }
Opts.Apps.IsInstalled.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_install_changes_flag_=false
    }
Opts.Apps.IsInstalled.Install.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_install_enable_=true
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_install_enable_
    }
Opts.Apps.IsInstalled.Install.Init()
    {
    _obj_opts_apps_isinstalled_install_text_=''
    _obj_opts_apps_isinstalled_install_flag_=false
    _obj_opts_apps_isinstalled_install_changes_flag_=true
    _obj_opts_apps_isinstalled_install_enable_=false
    }
Opts.Apps.IsInstalled.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_install_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_install_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Install.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_install_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Install.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_install_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_install_changes_flag_=true
    }
Opts.Apps.IsInstalled.Install.Set()
    {
    [[ $_obj_opts_apps_isinstalled_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_install_flag_=true
    [[ $_obj_opts_apps_isinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_install_flag_
    }
Opts.Apps.IsInstalled.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_install_text_"
    fi
    }
Opts.Apps.IsInstalled.Install.Init

Opts.Apps.IsNotInstalled.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_install_flag_
    }
Opts.Apps.IsNotInstalled.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_install_enable_
    }
Opts.Apps.IsNotInstalled.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_install_enable_
    }
Opts.Apps.IsNotInstalled.Install.Init()
    {
    _obj_opts_apps_isnotinstalled_install_text_=''
    _obj_opts_apps_isnotinstalled_install_flag_=false
    _obj_opts_apps_isnotinstalled_install_changes_flag_=true
    _obj_opts_apps_isnotinstalled_install_enable_=false
    }
Opts.Apps.IsNotInstalled.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Install.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_install_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_install_flag_
    }
Opts.Apps.IsNotInstalled.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_install_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Install.Init

Opts.Apps.IsInstalled.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_flag_=false
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_rebuild_flag_
    }
Opts.Apps.IsInstalled.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_enable_=false
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_rebuild_enable_
    }
Opts.Apps.IsInstalled.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_changes_flag_=false
    }
Opts.Apps.IsInstalled.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_enable_=true
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_rebuild_enable_
    }
Opts.Apps.IsInstalled.Rebuild.Init()
    {
    _obj_opts_apps_isinstalled_rebuild_text_=''
    _obj_opts_apps_isinstalled_rebuild_flag_=false
    _obj_opts_apps_isinstalled_rebuild_changes_flag_=true
    _obj_opts_apps_isinstalled_rebuild_enable_=false
    }
Opts.Apps.IsInstalled.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_changes_flag_=true
    }
Opts.Apps.IsInstalled.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isinstalled_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_rebuild_flag_=true
    [[ $_obj_opts_apps_isinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_rebuild_flag_
    }
Opts.Apps.IsInstalled.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_rebuild_text_"
    fi
    }
Opts.Apps.IsInstalled.Rebuild.Init

Opts.Apps.IsNotInstalled.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_rebuild_flag_
    }
Opts.Apps.IsNotInstalled.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_rebuild_enable_
    }
Opts.Apps.IsNotInstalled.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_rebuild_enable_
    }
Opts.Apps.IsNotInstalled.Rebuild.Init()
    {
    _obj_opts_apps_isnotinstalled_rebuild_text_=''
    _obj_opts_apps_isnotinstalled_rebuild_flag_=false
    _obj_opts_apps_isnotinstalled_rebuild_changes_flag_=true
    _obj_opts_apps_isnotinstalled_rebuild_enable_=false
    }
Opts.Apps.IsNotInstalled.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_rebuild_flag_
    }
Opts.Apps.IsNotInstalled.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_rebuild_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Rebuild.Init

Opts.Apps.IsInstalled.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_flag_=false
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_reinstall_flag_
    }
Opts.Apps.IsInstalled.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_enable_=false
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_reinstall_enable_
    }
Opts.Apps.IsInstalled.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_changes_flag_=false
    }
Opts.Apps.IsInstalled.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_enable_=true
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_reinstall_enable_
    }
Opts.Apps.IsInstalled.Reinstall.Init()
    {
    _obj_opts_apps_isinstalled_reinstall_text_=''
    _obj_opts_apps_isinstalled_reinstall_flag_=false
    _obj_opts_apps_isinstalled_reinstall_changes_flag_=true
    _obj_opts_apps_isinstalled_reinstall_enable_=false
    }
Opts.Apps.IsInstalled.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_changes_flag_=true
    }
Opts.Apps.IsInstalled.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isinstalled_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_reinstall_flag_=true
    [[ $_obj_opts_apps_isinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_reinstall_flag_
    }
Opts.Apps.IsInstalled.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_reinstall_text_"
    fi
    }
Opts.Apps.IsInstalled.Reinstall.Init

Opts.Apps.IsNotInstalled.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_reinstall_flag_
    }
Opts.Apps.IsNotInstalled.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_reinstall_enable_
    }
Opts.Apps.IsNotInstalled.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_reinstall_enable_
    }
Opts.Apps.IsNotInstalled.Reinstall.Init()
    {
    _obj_opts_apps_isnotinstalled_reinstall_text_=''
    _obj_opts_apps_isnotinstalled_reinstall_flag_=false
    _obj_opts_apps_isnotinstalled_reinstall_changes_flag_=true
    _obj_opts_apps_isnotinstalled_reinstall_enable_=false
    }
Opts.Apps.IsNotInstalled.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_reinstall_flag_
    }
Opts.Apps.IsNotInstalled.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_reinstall_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Reinstall.Init

Opts.Apps.IsInstalled.Restore.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_flag_=false
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restore_flag_
    }
Opts.Apps.IsInstalled.Restore.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_enable_=false
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restore_enable_
    }
Opts.Apps.IsInstalled.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_changes_flag_=false
    }
Opts.Apps.IsInstalled.Restore.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_enable_=true
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restore_enable_
    }
Opts.Apps.IsInstalled.Restore.Init()
    {
    _obj_opts_apps_isinstalled_restore_text_=''
    _obj_opts_apps_isinstalled_restore_flag_=false
    _obj_opts_apps_isinstalled_restore_changes_flag_=true
    _obj_opts_apps_isinstalled_restore_enable_=false
    }
Opts.Apps.IsInstalled.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_changes_flag_=true
    }
Opts.Apps.IsInstalled.Restore.Set()
    {
    [[ $_obj_opts_apps_isinstalled_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restore_flag_=true
    [[ $_obj_opts_apps_isinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restore_flag_
    }
Opts.Apps.IsInstalled.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_restore_text_"
    fi
    }
Opts.Apps.IsInstalled.Restore.Init

Opts.Apps.IsNotInstalled.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restore_flag_
    }
Opts.Apps.IsNotInstalled.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restore_enable_
    }
Opts.Apps.IsNotInstalled.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restore_enable_
    }
Opts.Apps.IsNotInstalled.Restore.Init()
    {
    _obj_opts_apps_isnotinstalled_restore_text_=''
    _obj_opts_apps_isnotinstalled_restore_flag_=false
    _obj_opts_apps_isnotinstalled_restore_changes_flag_=true
    _obj_opts_apps_isnotinstalled_restore_enable_=false
    }
Opts.Apps.IsNotInstalled.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restore_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restore_flag_
    }
Opts.Apps.IsNotInstalled.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_restore_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Restore.Init

Opts.Apps.IsInstalled.Restart.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_flag_=false
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restart_flag_
    }
Opts.Apps.IsInstalled.Restart.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_enable_=false
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restart_enable_
    }
Opts.Apps.IsInstalled.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_changes_flag_=false
    }
Opts.Apps.IsInstalled.Restart.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_enable_=true
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restart_enable_
    }
Opts.Apps.IsInstalled.Restart.Init()
    {
    _obj_opts_apps_isinstalled_restart_text_=''
    _obj_opts_apps_isinstalled_restart_flag_=false
    _obj_opts_apps_isinstalled_restart_changes_flag_=true
    _obj_opts_apps_isinstalled_restart_enable_=false
    }
Opts.Apps.IsInstalled.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_changes_flag_=true
    }
Opts.Apps.IsInstalled.Restart.Set()
    {
    [[ $_obj_opts_apps_isinstalled_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_restart_flag_=true
    [[ $_obj_opts_apps_isinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_restart_flag_
    }
Opts.Apps.IsInstalled.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_restart_text_"
    fi
    }
Opts.Apps.IsInstalled.Restart.Init

Opts.Apps.IsNotInstalled.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restart_flag_
    }
Opts.Apps.IsNotInstalled.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restart_enable_
    }
Opts.Apps.IsNotInstalled.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restart_enable_
    }
Opts.Apps.IsNotInstalled.Restart.Init()
    {
    _obj_opts_apps_isnotinstalled_restart_text_=''
    _obj_opts_apps_isnotinstalled_restart_flag_=false
    _obj_opts_apps_isnotinstalled_restart_changes_flag_=true
    _obj_opts_apps_isnotinstalled_restart_enable_=false
    }
Opts.Apps.IsNotInstalled.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_restart_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_restart_flag_
    }
Opts.Apps.IsNotInstalled.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_restart_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Restart.Init

Opts.Apps.IsInstalled.Start.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_start_flag_=false
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_start_flag_
    }
Opts.Apps.IsInstalled.Start.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_start_enable_=false
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_start_enable_
    }
Opts.Apps.IsInstalled.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_start_changes_flag_=false
    }
Opts.Apps.IsInstalled.Start.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_start_enable_=true
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_start_enable_
    }
Opts.Apps.IsInstalled.Start.Init()
    {
    _obj_opts_apps_isinstalled_start_text_=''
    _obj_opts_apps_isinstalled_start_flag_=false
    _obj_opts_apps_isinstalled_start_changes_flag_=true
    _obj_opts_apps_isinstalled_start_enable_=false
    }
Opts.Apps.IsInstalled.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_start_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_start_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Start.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_start_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Start.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_start_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_start_changes_flag_=true
    }
Opts.Apps.IsInstalled.Start.Set()
    {
    [[ $_obj_opts_apps_isinstalled_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_start_flag_=true
    [[ $_obj_opts_apps_isinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_start_flag_
    }
Opts.Apps.IsInstalled.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_start_text_"
    fi
    }
Opts.Apps.IsInstalled.Start.Init

Opts.Apps.IsNotInstalled.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_start_flag_
    }
Opts.Apps.IsNotInstalled.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_start_enable_
    }
Opts.Apps.IsNotInstalled.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_start_enable_
    }
Opts.Apps.IsNotInstalled.Start.Init()
    {
    _obj_opts_apps_isnotinstalled_start_text_=''
    _obj_opts_apps_isnotinstalled_start_flag_=false
    _obj_opts_apps_isnotinstalled_start_changes_flag_=true
    _obj_opts_apps_isnotinstalled_start_enable_=false
    }
Opts.Apps.IsNotInstalled.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Start.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_start_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_start_flag_
    }
Opts.Apps.IsNotInstalled.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_start_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Start.Init

Opts.Apps.IsInstalled.Stop.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_flag_=false
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_stop_flag_
    }
Opts.Apps.IsInstalled.Stop.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_enable_=false
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_stop_enable_
    }
Opts.Apps.IsInstalled.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_changes_flag_=false
    }
Opts.Apps.IsInstalled.Stop.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_enable_=true
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_stop_enable_
    }
Opts.Apps.IsInstalled.Stop.Init()
    {
    _obj_opts_apps_isinstalled_stop_text_=''
    _obj_opts_apps_isinstalled_stop_flag_=false
    _obj_opts_apps_isinstalled_stop_changes_flag_=true
    _obj_opts_apps_isinstalled_stop_enable_=false
    }
Opts.Apps.IsInstalled.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_changes_flag_=true
    }
Opts.Apps.IsInstalled.Stop.Set()
    {
    [[ $_obj_opts_apps_isinstalled_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_stop_flag_=true
    [[ $_obj_opts_apps_isinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_stop_flag_
    }
Opts.Apps.IsInstalled.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_stop_text_"
    fi
    }
Opts.Apps.IsInstalled.Stop.Init

Opts.Apps.IsNotInstalled.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_stop_flag_
    }
Opts.Apps.IsNotInstalled.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_stop_enable_
    }
Opts.Apps.IsNotInstalled.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_stop_enable_
    }
Opts.Apps.IsNotInstalled.Stop.Init()
    {
    _obj_opts_apps_isnotinstalled_stop_text_=''
    _obj_opts_apps_isnotinstalled_stop_flag_=false
    _obj_opts_apps_isnotinstalled_stop_changes_flag_=true
    _obj_opts_apps_isnotinstalled_stop_enable_=false
    }
Opts.Apps.IsNotInstalled.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_stop_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_stop_flag_
    }
Opts.Apps.IsNotInstalled.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_stop_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Stop.Init

Opts.Apps.IsInstalled.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_flag_=false
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_uninstall_flag_
    }
Opts.Apps.IsInstalled.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_enable_=false
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_uninstall_enable_
    }
Opts.Apps.IsInstalled.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_changes_flag_=false
    }
Opts.Apps.IsInstalled.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_enable_=true
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_uninstall_enable_
    }
Opts.Apps.IsInstalled.Uninstall.Init()
    {
    _obj_opts_apps_isinstalled_uninstall_text_=''
    _obj_opts_apps_isinstalled_uninstall_flag_=false
    _obj_opts_apps_isinstalled_uninstall_changes_flag_=true
    _obj_opts_apps_isinstalled_uninstall_enable_=false
    }
Opts.Apps.IsInstalled.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_changes_flag_=true
    }
Opts.Apps.IsInstalled.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isinstalled_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_uninstall_flag_=true
    [[ $_obj_opts_apps_isinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_uninstall_flag_
    }
Opts.Apps.IsInstalled.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_uninstall_text_"
    fi
    }
Opts.Apps.IsInstalled.Uninstall.Init

Opts.Apps.IsNotInstalled.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_uninstall_flag_
    }
Opts.Apps.IsNotInstalled.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_uninstall_enable_
    }
Opts.Apps.IsNotInstalled.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_uninstall_enable_
    }
Opts.Apps.IsNotInstalled.Uninstall.Init()
    {
    _obj_opts_apps_isnotinstalled_uninstall_text_=''
    _obj_opts_apps_isnotinstalled_uninstall_flag_=false
    _obj_opts_apps_isnotinstalled_uninstall_changes_flag_=true
    _obj_opts_apps_isnotinstalled_uninstall_enable_=false
    }
Opts.Apps.IsNotInstalled.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_uninstall_flag_
    }
Opts.Apps.IsNotInstalled.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_uninstall_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Uninstall.Init

Opts.Apps.IsInstalled.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_flag_=false
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_upgrade_flag_
    }
Opts.Apps.IsInstalled.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_enable_=false
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_upgrade_enable_
    }
Opts.Apps.IsInstalled.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_changes_flag_=false
    }
Opts.Apps.IsInstalled.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_enable_=true
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_upgrade_enable_
    }
Opts.Apps.IsInstalled.Upgrade.Init()
    {
    _obj_opts_apps_isinstalled_upgrade_text_=''
    _obj_opts_apps_isinstalled_upgrade_flag_=false
    _obj_opts_apps_isinstalled_upgrade_changes_flag_=true
    _obj_opts_apps_isinstalled_upgrade_enable_=false
    }
Opts.Apps.IsInstalled.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsInstalled.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsInstalled.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_changes_flag_=true
    }
Opts.Apps.IsInstalled.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isinstalled_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstalled_upgrade_flag_=true
    [[ $_obj_opts_apps_isinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstalled_upgrade_flag_
    }
Opts.Apps.IsInstalled.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstalled_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstalled_upgrade_text_"
    fi
    }
Opts.Apps.IsInstalled.Upgrade.Init

Opts.Apps.IsNotInstalled.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_upgrade_flag_
    }
Opts.Apps.IsNotInstalled.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_upgrade_enable_
    }
Opts.Apps.IsNotInstalled.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotInstalled.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_upgrade_enable_
    }
Opts.Apps.IsNotInstalled.Upgrade.Init()
    {
    _obj_opts_apps_isnotinstalled_upgrade_text_=''
    _obj_opts_apps_isnotinstalled_upgrade_flag_=false
    _obj_opts_apps_isnotinstalled_upgrade_changes_flag_=true
    _obj_opts_apps_isnotinstalled_upgrade_enable_=false
    }
Opts.Apps.IsNotInstalled.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstalled.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstalled.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotInstalled.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotinstalled_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstalled_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotinstalled_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstalled_upgrade_flag_
    }
Opts.Apps.IsNotInstalled.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstalled_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstalled_upgrade_text_"
    fi
    }
Opts.Apps.IsNotInstalled.Upgrade.Init

Opts.Apps.List.Installable.Clear()
    {
    [[ $_obj_opts_apps_list_installable_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installable_flag_=false
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_flag_
    }
Opts.Apps.List.Installable.Disable()
    {
    [[ $_obj_opts_apps_list_installable_enable_ != 'true' ]] && return
    _obj_opts_apps_list_installable_enable_=false
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_enable_
    }
Opts.Apps.List.Installable.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_installable_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_installable_changes_flag_=false
    }
Opts.Apps.List.Installable.Enable()
    {
    [[ $_obj_opts_apps_list_installable_enable_ = 'true' ]] && return
    _obj_opts_apps_list_installable_enable_=true
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_enable_
    }
Opts.Apps.List.Installable.Init()
    {
    _obj_opts_apps_list_installable_text_=''
    _obj_opts_apps_list_installable_flag_=false
    _obj_opts_apps_list_installable_changes_flag_=true
    _obj_opts_apps_list_installable_enable_=false
    }
Opts.Apps.List.Installable.IsDisabled()
    {
    [[ $_obj_opts_apps_list_installable_enable_ != 'true' ]]
    }
Opts.Apps.List.Installable.IsEnabled()
    {
    [[ $_obj_opts_apps_list_installable_enable_ = 'true' ]]
    }
Opts.Apps.List.Installable.IsNot()
    {
    [[ $_obj_opts_apps_list_installable_flag_ != 'true' ]]
    }
Opts.Apps.List.Installable.IsSet()
    {
    [[ $_obj_opts_apps_list_installable_flag_ = 'true' ]]
    }
Opts.Apps.List.Installable.LogChanges()
    {
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installable_changes_flag_=true
    }
Opts.Apps.List.Installable.Set()
    {
    [[ $_obj_opts_apps_list_installable_flag_ = 'true' ]] && return
    _obj_opts_apps_list_installable_flag_=true
    [[ $_obj_opts_apps_list_installable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_installable_flag_
    }
Opts.Apps.List.Installable.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_installable_text_=$2
    else
        echo -n "$_obj_opts_apps_list_installable_text_"
    fi
    }
Opts.Apps.List.Installable.Init

Opts.Apps.IsInstallable.Backup.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_flag_=false
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_backup_flag_
    }
Opts.Apps.IsInstallable.Backup.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_enable_=false
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_backup_enable_
    }
Opts.Apps.IsInstallable.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_changes_flag_=false
    }
Opts.Apps.IsInstallable.Backup.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_enable_=true
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_backup_enable_
    }
Opts.Apps.IsInstallable.Backup.Init()
    {
    _obj_opts_apps_isinstallable_backup_text_=''
    _obj_opts_apps_isinstallable_backup_flag_=false
    _obj_opts_apps_isinstallable_backup_changes_flag_=true
    _obj_opts_apps_isinstallable_backup_enable_=false
    }
Opts.Apps.IsInstallable.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_changes_flag_=true
    }
Opts.Apps.IsInstallable.Backup.Set()
    {
    [[ $_obj_opts_apps_isinstallable_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_backup_flag_=true
    [[ $_obj_opts_apps_isinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_backup_flag_
    }
Opts.Apps.IsInstallable.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_backup_text_"
    fi
    }
Opts.Apps.IsInstallable.Backup.Init

Opts.Apps.IsNotInstallable.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_backup_flag_
    }
Opts.Apps.IsNotInstallable.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_backup_enable_
    }
Opts.Apps.IsNotInstallable.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_backup_enable_
    }
Opts.Apps.IsNotInstallable.Backup.Init()
    {
    _obj_opts_apps_isnotinstallable_backup_text_=''
    _obj_opts_apps_isnotinstallable_backup_flag_=false
    _obj_opts_apps_isnotinstallable_backup_changes_flag_=true
    _obj_opts_apps_isnotinstallable_backup_enable_=false
    }
Opts.Apps.IsNotInstallable.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_backup_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_backup_flag_
    }
Opts.Apps.IsNotInstallable.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_backup_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Backup.Init

Opts.Apps.IsInstallable.Download.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_download_flag_=false
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_download_flag_
    }
Opts.Apps.IsInstallable.Download.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_download_enable_=false
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_download_enable_
    }
Opts.Apps.IsInstallable.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_download_changes_flag_=false
    }
Opts.Apps.IsInstallable.Download.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_download_enable_=true
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_download_enable_
    }
Opts.Apps.IsInstallable.Download.Init()
    {
    _obj_opts_apps_isinstallable_download_text_=''
    _obj_opts_apps_isinstallable_download_flag_=false
    _obj_opts_apps_isinstallable_download_changes_flag_=true
    _obj_opts_apps_isinstallable_download_enable_=false
    }
Opts.Apps.IsInstallable.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_download_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_download_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Download.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_download_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Download.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_download_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_download_changes_flag_=true
    }
Opts.Apps.IsInstallable.Download.Set()
    {
    [[ $_obj_opts_apps_isinstallable_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_download_flag_=true
    [[ $_obj_opts_apps_isinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_download_flag_
    }
Opts.Apps.IsInstallable.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_download_text_"
    fi
    }
Opts.Apps.IsInstallable.Download.Init

Opts.Apps.IsNotInstallable.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_download_flag_
    }
Opts.Apps.IsNotInstallable.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_download_enable_
    }
Opts.Apps.IsNotInstallable.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_download_enable_
    }
Opts.Apps.IsNotInstallable.Download.Init()
    {
    _obj_opts_apps_isnotinstallable_download_text_=''
    _obj_opts_apps_isnotinstallable_download_flag_=false
    _obj_opts_apps_isnotinstallable_download_changes_flag_=true
    _obj_opts_apps_isnotinstallable_download_enable_=false
    }
Opts.Apps.IsNotInstallable.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Download.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_download_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_download_flag_
    }
Opts.Apps.IsNotInstallable.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_download_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Download.Init

Opts.Apps.IsInstallable.Install.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_install_flag_=false
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_install_flag_
    }
Opts.Apps.IsInstallable.Install.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_install_enable_=false
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_install_enable_
    }
Opts.Apps.IsInstallable.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_install_changes_flag_=false
    }
Opts.Apps.IsInstallable.Install.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_install_enable_=true
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_install_enable_
    }
Opts.Apps.IsInstallable.Install.Init()
    {
    _obj_opts_apps_isinstallable_install_text_=''
    _obj_opts_apps_isinstallable_install_flag_=false
    _obj_opts_apps_isinstallable_install_changes_flag_=true
    _obj_opts_apps_isinstallable_install_enable_=false
    }
Opts.Apps.IsInstallable.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_install_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_install_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Install.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_install_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Install.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_install_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_install_changes_flag_=true
    }
Opts.Apps.IsInstallable.Install.Set()
    {
    [[ $_obj_opts_apps_isinstallable_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_install_flag_=true
    [[ $_obj_opts_apps_isinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_install_flag_
    }
Opts.Apps.IsInstallable.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_install_text_"
    fi
    }
Opts.Apps.IsInstallable.Install.Init

Opts.Apps.IsNotInstallable.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_install_flag_
    }
Opts.Apps.IsNotInstallable.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_install_enable_
    }
Opts.Apps.IsNotInstallable.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_install_enable_
    }
Opts.Apps.IsNotInstallable.Install.Init()
    {
    _obj_opts_apps_isnotinstallable_install_text_=''
    _obj_opts_apps_isnotinstallable_install_flag_=false
    _obj_opts_apps_isnotinstallable_install_changes_flag_=true
    _obj_opts_apps_isnotinstallable_install_enable_=false
    }
Opts.Apps.IsNotInstallable.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Install.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_install_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_install_flag_
    }
Opts.Apps.IsNotInstallable.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_install_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Install.Init

Opts.Apps.IsInstallable.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_flag_=false
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_rebuild_flag_
    }
Opts.Apps.IsInstallable.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_enable_=false
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_rebuild_enable_
    }
Opts.Apps.IsInstallable.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_changes_flag_=false
    }
Opts.Apps.IsInstallable.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_enable_=true
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_rebuild_enable_
    }
Opts.Apps.IsInstallable.Rebuild.Init()
    {
    _obj_opts_apps_isinstallable_rebuild_text_=''
    _obj_opts_apps_isinstallable_rebuild_flag_=false
    _obj_opts_apps_isinstallable_rebuild_changes_flag_=true
    _obj_opts_apps_isinstallable_rebuild_enable_=false
    }
Opts.Apps.IsInstallable.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_changes_flag_=true
    }
Opts.Apps.IsInstallable.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isinstallable_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_rebuild_flag_=true
    [[ $_obj_opts_apps_isinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_rebuild_flag_
    }
Opts.Apps.IsInstallable.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_rebuild_text_"
    fi
    }
Opts.Apps.IsInstallable.Rebuild.Init

Opts.Apps.IsNotInstallable.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_rebuild_flag_
    }
Opts.Apps.IsNotInstallable.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_rebuild_enable_
    }
Opts.Apps.IsNotInstallable.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_rebuild_enable_
    }
Opts.Apps.IsNotInstallable.Rebuild.Init()
    {
    _obj_opts_apps_isnotinstallable_rebuild_text_=''
    _obj_opts_apps_isnotinstallable_rebuild_flag_=false
    _obj_opts_apps_isnotinstallable_rebuild_changes_flag_=true
    _obj_opts_apps_isnotinstallable_rebuild_enable_=false
    }
Opts.Apps.IsNotInstallable.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_rebuild_flag_
    }
Opts.Apps.IsNotInstallable.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_rebuild_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Rebuild.Init

Opts.Apps.IsInstallable.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_flag_=false
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_reinstall_flag_
    }
Opts.Apps.IsInstallable.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_enable_=false
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_reinstall_enable_
    }
Opts.Apps.IsInstallable.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_changes_flag_=false
    }
Opts.Apps.IsInstallable.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_enable_=true
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_reinstall_enable_
    }
Opts.Apps.IsInstallable.Reinstall.Init()
    {
    _obj_opts_apps_isinstallable_reinstall_text_=''
    _obj_opts_apps_isinstallable_reinstall_flag_=false
    _obj_opts_apps_isinstallable_reinstall_changes_flag_=true
    _obj_opts_apps_isinstallable_reinstall_enable_=false
    }
Opts.Apps.IsInstallable.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_changes_flag_=true
    }
Opts.Apps.IsInstallable.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isinstallable_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_reinstall_flag_=true
    [[ $_obj_opts_apps_isinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_reinstall_flag_
    }
Opts.Apps.IsInstallable.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_reinstall_text_"
    fi
    }
Opts.Apps.IsInstallable.Reinstall.Init

Opts.Apps.IsNotInstallable.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_reinstall_flag_
    }
Opts.Apps.IsNotInstallable.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_reinstall_enable_
    }
Opts.Apps.IsNotInstallable.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_reinstall_enable_
    }
Opts.Apps.IsNotInstallable.Reinstall.Init()
    {
    _obj_opts_apps_isnotinstallable_reinstall_text_=''
    _obj_opts_apps_isnotinstallable_reinstall_flag_=false
    _obj_opts_apps_isnotinstallable_reinstall_changes_flag_=true
    _obj_opts_apps_isnotinstallable_reinstall_enable_=false
    }
Opts.Apps.IsNotInstallable.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_reinstall_flag_
    }
Opts.Apps.IsNotInstallable.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_reinstall_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Reinstall.Init

Opts.Apps.IsInstallable.Restore.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_flag_=false
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restore_flag_
    }
Opts.Apps.IsInstallable.Restore.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_enable_=false
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restore_enable_
    }
Opts.Apps.IsInstallable.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_changes_flag_=false
    }
Opts.Apps.IsInstallable.Restore.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_enable_=true
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restore_enable_
    }
Opts.Apps.IsInstallable.Restore.Init()
    {
    _obj_opts_apps_isinstallable_restore_text_=''
    _obj_opts_apps_isinstallable_restore_flag_=false
    _obj_opts_apps_isinstallable_restore_changes_flag_=true
    _obj_opts_apps_isinstallable_restore_enable_=false
    }
Opts.Apps.IsInstallable.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_changes_flag_=true
    }
Opts.Apps.IsInstallable.Restore.Set()
    {
    [[ $_obj_opts_apps_isinstallable_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restore_flag_=true
    [[ $_obj_opts_apps_isinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restore_flag_
    }
Opts.Apps.IsInstallable.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_restore_text_"
    fi
    }
Opts.Apps.IsInstallable.Restore.Init

Opts.Apps.IsNotInstallable.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restore_flag_
    }
Opts.Apps.IsNotInstallable.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restore_enable_
    }
Opts.Apps.IsNotInstallable.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restore_enable_
    }
Opts.Apps.IsNotInstallable.Restore.Init()
    {
    _obj_opts_apps_isnotinstallable_restore_text_=''
    _obj_opts_apps_isnotinstallable_restore_flag_=false
    _obj_opts_apps_isnotinstallable_restore_changes_flag_=true
    _obj_opts_apps_isnotinstallable_restore_enable_=false
    }
Opts.Apps.IsNotInstallable.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restore_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restore_flag_
    }
Opts.Apps.IsNotInstallable.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_restore_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Restore.Init

Opts.Apps.IsInstallable.Restart.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_flag_=false
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restart_flag_
    }
Opts.Apps.IsInstallable.Restart.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_enable_=false
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restart_enable_
    }
Opts.Apps.IsInstallable.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_changes_flag_=false
    }
Opts.Apps.IsInstallable.Restart.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_enable_=true
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restart_enable_
    }
Opts.Apps.IsInstallable.Restart.Init()
    {
    _obj_opts_apps_isinstallable_restart_text_=''
    _obj_opts_apps_isinstallable_restart_flag_=false
    _obj_opts_apps_isinstallable_restart_changes_flag_=true
    _obj_opts_apps_isinstallable_restart_enable_=false
    }
Opts.Apps.IsInstallable.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_changes_flag_=true
    }
Opts.Apps.IsInstallable.Restart.Set()
    {
    [[ $_obj_opts_apps_isinstallable_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_restart_flag_=true
    [[ $_obj_opts_apps_isinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_restart_flag_
    }
Opts.Apps.IsInstallable.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_restart_text_"
    fi
    }
Opts.Apps.IsInstallable.Restart.Init

Opts.Apps.IsNotInstallable.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restart_flag_
    }
Opts.Apps.IsNotInstallable.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restart_enable_
    }
Opts.Apps.IsNotInstallable.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restart_enable_
    }
Opts.Apps.IsNotInstallable.Restart.Init()
    {
    _obj_opts_apps_isnotinstallable_restart_text_=''
    _obj_opts_apps_isnotinstallable_restart_flag_=false
    _obj_opts_apps_isnotinstallable_restart_changes_flag_=true
    _obj_opts_apps_isnotinstallable_restart_enable_=false
    }
Opts.Apps.IsNotInstallable.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_restart_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_restart_flag_
    }
Opts.Apps.IsNotInstallable.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_restart_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Restart.Init

Opts.Apps.IsInstallable.Start.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_start_flag_=false
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_start_flag_
    }
Opts.Apps.IsInstallable.Start.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_start_enable_=false
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_start_enable_
    }
Opts.Apps.IsInstallable.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_start_changes_flag_=false
    }
Opts.Apps.IsInstallable.Start.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_start_enable_=true
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_start_enable_
    }
Opts.Apps.IsInstallable.Start.Init()
    {
    _obj_opts_apps_isinstallable_start_text_=''
    _obj_opts_apps_isinstallable_start_flag_=false
    _obj_opts_apps_isinstallable_start_changes_flag_=true
    _obj_opts_apps_isinstallable_start_enable_=false
    }
Opts.Apps.IsInstallable.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_start_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_start_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Start.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_start_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Start.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_start_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_start_changes_flag_=true
    }
Opts.Apps.IsInstallable.Start.Set()
    {
    [[ $_obj_opts_apps_isinstallable_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_start_flag_=true
    [[ $_obj_opts_apps_isinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_start_flag_
    }
Opts.Apps.IsInstallable.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_start_text_"
    fi
    }
Opts.Apps.IsInstallable.Start.Init

Opts.Apps.IsNotInstallable.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_start_flag_
    }
Opts.Apps.IsNotInstallable.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_start_enable_
    }
Opts.Apps.IsNotInstallable.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_start_enable_
    }
Opts.Apps.IsNotInstallable.Start.Init()
    {
    _obj_opts_apps_isnotinstallable_start_text_=''
    _obj_opts_apps_isnotinstallable_start_flag_=false
    _obj_opts_apps_isnotinstallable_start_changes_flag_=true
    _obj_opts_apps_isnotinstallable_start_enable_=false
    }
Opts.Apps.IsNotInstallable.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Start.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_start_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_start_flag_
    }
Opts.Apps.IsNotInstallable.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_start_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Start.Init

Opts.Apps.IsInstallable.Stop.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_flag_=false
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_stop_flag_
    }
Opts.Apps.IsInstallable.Stop.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_enable_=false
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_stop_enable_
    }
Opts.Apps.IsInstallable.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_changes_flag_=false
    }
Opts.Apps.IsInstallable.Stop.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_enable_=true
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_stop_enable_
    }
Opts.Apps.IsInstallable.Stop.Init()
    {
    _obj_opts_apps_isinstallable_stop_text_=''
    _obj_opts_apps_isinstallable_stop_flag_=false
    _obj_opts_apps_isinstallable_stop_changes_flag_=true
    _obj_opts_apps_isinstallable_stop_enable_=false
    }
Opts.Apps.IsInstallable.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_changes_flag_=true
    }
Opts.Apps.IsInstallable.Stop.Set()
    {
    [[ $_obj_opts_apps_isinstallable_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_stop_flag_=true
    [[ $_obj_opts_apps_isinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_stop_flag_
    }
Opts.Apps.IsInstallable.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_stop_text_"
    fi
    }
Opts.Apps.IsInstallable.Stop.Init

Opts.Apps.IsNotInstallable.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_stop_flag_
    }
Opts.Apps.IsNotInstallable.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_stop_enable_
    }
Opts.Apps.IsNotInstallable.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_stop_enable_
    }
Opts.Apps.IsNotInstallable.Stop.Init()
    {
    _obj_opts_apps_isnotinstallable_stop_text_=''
    _obj_opts_apps_isnotinstallable_stop_flag_=false
    _obj_opts_apps_isnotinstallable_stop_changes_flag_=true
    _obj_opts_apps_isnotinstallable_stop_enable_=false
    }
Opts.Apps.IsNotInstallable.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_stop_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_stop_flag_
    }
Opts.Apps.IsNotInstallable.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_stop_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Stop.Init

Opts.Apps.IsInstallable.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_flag_=false
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_uninstall_flag_
    }
Opts.Apps.IsInstallable.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_enable_=false
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_uninstall_enable_
    }
Opts.Apps.IsInstallable.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_changes_flag_=false
    }
Opts.Apps.IsInstallable.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_enable_=true
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_uninstall_enable_
    }
Opts.Apps.IsInstallable.Uninstall.Init()
    {
    _obj_opts_apps_isinstallable_uninstall_text_=''
    _obj_opts_apps_isinstallable_uninstall_flag_=false
    _obj_opts_apps_isinstallable_uninstall_changes_flag_=true
    _obj_opts_apps_isinstallable_uninstall_enable_=false
    }
Opts.Apps.IsInstallable.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_changes_flag_=true
    }
Opts.Apps.IsInstallable.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isinstallable_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_uninstall_flag_=true
    [[ $_obj_opts_apps_isinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_uninstall_flag_
    }
Opts.Apps.IsInstallable.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_uninstall_text_"
    fi
    }
Opts.Apps.IsInstallable.Uninstall.Init

Opts.Apps.IsNotInstallable.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_uninstall_flag_
    }
Opts.Apps.IsNotInstallable.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_uninstall_enable_
    }
Opts.Apps.IsNotInstallable.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_uninstall_enable_
    }
Opts.Apps.IsNotInstallable.Uninstall.Init()
    {
    _obj_opts_apps_isnotinstallable_uninstall_text_=''
    _obj_opts_apps_isnotinstallable_uninstall_flag_=false
    _obj_opts_apps_isnotinstallable_uninstall_changes_flag_=true
    _obj_opts_apps_isnotinstallable_uninstall_enable_=false
    }
Opts.Apps.IsNotInstallable.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_uninstall_flag_
    }
Opts.Apps.IsNotInstallable.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_uninstall_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Uninstall.Init

Opts.Apps.IsInstallable.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_flag_=false
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_upgrade_flag_
    }
Opts.Apps.IsInstallable.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_enable_=false
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_upgrade_enable_
    }
Opts.Apps.IsInstallable.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_changes_flag_=false
    }
Opts.Apps.IsInstallable.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_enable_=true
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_upgrade_enable_
    }
Opts.Apps.IsInstallable.Upgrade.Init()
    {
    _obj_opts_apps_isinstallable_upgrade_text_=''
    _obj_opts_apps_isinstallable_upgrade_flag_=false
    _obj_opts_apps_isinstallable_upgrade_changes_flag_=true
    _obj_opts_apps_isinstallable_upgrade_enable_=false
    }
Opts.Apps.IsInstallable.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsInstallable.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsInstallable.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_changes_flag_=true
    }
Opts.Apps.IsInstallable.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isinstallable_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isinstallable_upgrade_flag_=true
    [[ $_obj_opts_apps_isinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isinstallable_upgrade_flag_
    }
Opts.Apps.IsInstallable.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isinstallable_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isinstallable_upgrade_text_"
    fi
    }
Opts.Apps.IsInstallable.Upgrade.Init

Opts.Apps.IsNotInstallable.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_upgrade_flag_
    }
Opts.Apps.IsNotInstallable.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_upgrade_enable_
    }
Opts.Apps.IsNotInstallable.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotInstallable.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_upgrade_enable_
    }
Opts.Apps.IsNotInstallable.Upgrade.Init()
    {
    _obj_opts_apps_isnotinstallable_upgrade_text_=''
    _obj_opts_apps_isnotinstallable_upgrade_flag_=false
    _obj_opts_apps_isnotinstallable_upgrade_changes_flag_=true
    _obj_opts_apps_isnotinstallable_upgrade_enable_=false
    }
Opts.Apps.IsNotInstallable.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotInstallable.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotInstallable.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotInstallable.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotinstallable_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotinstallable_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotinstallable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotinstallable_upgrade_flag_
    }
Opts.Apps.IsNotInstallable.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotinstallable_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotinstallable_upgrade_text_"
    fi
    }
Opts.Apps.IsNotInstallable.Upgrade.Init

Opts.Apps.List.Missing.Clear()
    {
    [[ $_obj_opts_apps_list_missing_flag_ != 'true' ]] && return
    _obj_opts_apps_list_missing_flag_=false
    [[ $_obj_opts_apps_list_missing_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_missing_flag_
    }
Opts.Apps.List.Missing.Disable()
    {
    [[ $_obj_opts_apps_list_missing_enable_ != 'true' ]] && return
    _obj_opts_apps_list_missing_enable_=false
    [[ $_obj_opts_apps_list_missing_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_missing_enable_
    }
Opts.Apps.List.Missing.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_missing_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_missing_changes_flag_=false
    }
Opts.Apps.List.Missing.Enable()
    {
    [[ $_obj_opts_apps_list_missing_enable_ = 'true' ]] && return
    _obj_opts_apps_list_missing_enable_=true
    [[ $_obj_opts_apps_list_missing_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_missing_enable_
    }
Opts.Apps.List.Missing.Init()
    {
    _obj_opts_apps_list_missing_text_=''
    _obj_opts_apps_list_missing_flag_=false
    _obj_opts_apps_list_missing_changes_flag_=true
    _obj_opts_apps_list_missing_enable_=false
    }
Opts.Apps.List.Missing.IsDisabled()
    {
    [[ $_obj_opts_apps_list_missing_enable_ != 'true' ]]
    }
Opts.Apps.List.Missing.IsEnabled()
    {
    [[ $_obj_opts_apps_list_missing_enable_ = 'true' ]]
    }
Opts.Apps.List.Missing.IsNot()
    {
    [[ $_obj_opts_apps_list_missing_flag_ != 'true' ]]
    }
Opts.Apps.List.Missing.IsSet()
    {
    [[ $_obj_opts_apps_list_missing_flag_ = 'true' ]]
    }
Opts.Apps.List.Missing.LogChanges()
    {
    [[ $_obj_opts_apps_list_missing_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_missing_changes_flag_=true
    }
Opts.Apps.List.Missing.Set()
    {
    [[ $_obj_opts_apps_list_missing_flag_ = 'true' ]] && return
    _obj_opts_apps_list_missing_flag_=true
    [[ $_obj_opts_apps_list_missing_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_missing_flag_
    }
Opts.Apps.List.Missing.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_missing_text_=$2
    else
        echo -n "$_obj_opts_apps_list_missing_text_"
    fi
    }
Opts.Apps.List.Missing.Init

Opts.Apps.IsMissing.Backup.Clear()
    {
    [[ $_obj_opts_apps_ismissing_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_backup_flag_=false
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_backup_flag_
    }
Opts.Apps.IsMissing.Backup.Disable()
    {
    [[ $_obj_opts_apps_ismissing_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_backup_enable_=false
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_backup_enable_
    }
Opts.Apps.IsMissing.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_backup_changes_flag_=false
    }
Opts.Apps.IsMissing.Backup.Enable()
    {
    [[ $_obj_opts_apps_ismissing_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_backup_enable_=true
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_backup_enable_
    }
Opts.Apps.IsMissing.Backup.Init()
    {
    _obj_opts_apps_ismissing_backup_text_=''
    _obj_opts_apps_ismissing_backup_flag_=false
    _obj_opts_apps_ismissing_backup_changes_flag_=true
    _obj_opts_apps_ismissing_backup_enable_=false
    }
Opts.Apps.IsMissing.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Backup.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Backup.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_backup_changes_flag_=true
    }
Opts.Apps.IsMissing.Backup.Set()
    {
    [[ $_obj_opts_apps_ismissing_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_backup_flag_=true
    [[ $_obj_opts_apps_ismissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_backup_flag_
    }
Opts.Apps.IsMissing.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_backup_text_"
    fi
    }
Opts.Apps.IsMissing.Backup.Init

Opts.Apps.IsNotMissing.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_flag_=false
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_backup_flag_
    }
Opts.Apps.IsNotMissing.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_enable_=false
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_backup_enable_
    }
Opts.Apps.IsNotMissing.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_enable_=true
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_backup_enable_
    }
Opts.Apps.IsNotMissing.Backup.Init()
    {
    _obj_opts_apps_isnotmissing_backup_text_=''
    _obj_opts_apps_isnotmissing_backup_flag_=false
    _obj_opts_apps_isnotmissing_backup_changes_flag_=true
    _obj_opts_apps_isnotmissing_backup_enable_=false
    }
Opts.Apps.IsNotMissing.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_backup_flag_=true
    [[ $_obj_opts_apps_isnotmissing_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_backup_flag_
    }
Opts.Apps.IsNotMissing.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_backup_text_"
    fi
    }
Opts.Apps.IsNotMissing.Backup.Init

Opts.Apps.IsMissing.Download.Clear()
    {
    [[ $_obj_opts_apps_ismissing_download_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_download_flag_=false
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_download_flag_
    }
Opts.Apps.IsMissing.Download.Disable()
    {
    [[ $_obj_opts_apps_ismissing_download_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_download_enable_=false
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_download_enable_
    }
Opts.Apps.IsMissing.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_download_changes_flag_=false
    }
Opts.Apps.IsMissing.Download.Enable()
    {
    [[ $_obj_opts_apps_ismissing_download_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_download_enable_=true
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_download_enable_
    }
Opts.Apps.IsMissing.Download.Init()
    {
    _obj_opts_apps_ismissing_download_text_=''
    _obj_opts_apps_ismissing_download_flag_=false
    _obj_opts_apps_ismissing_download_changes_flag_=true
    _obj_opts_apps_ismissing_download_enable_=false
    }
Opts.Apps.IsMissing.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_download_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_download_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Download.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_download_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Download.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_download_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Download.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_download_changes_flag_=true
    }
Opts.Apps.IsMissing.Download.Set()
    {
    [[ $_obj_opts_apps_ismissing_download_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_download_flag_=true
    [[ $_obj_opts_apps_ismissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_download_flag_
    }
Opts.Apps.IsMissing.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_download_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_download_text_"
    fi
    }
Opts.Apps.IsMissing.Download.Init

Opts.Apps.IsNotMissing.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_flag_=false
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_download_flag_
    }
Opts.Apps.IsNotMissing.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_enable_=false
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_download_enable_
    }
Opts.Apps.IsNotMissing.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_enable_=true
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_download_enable_
    }
Opts.Apps.IsNotMissing.Download.Init()
    {
    _obj_opts_apps_isnotmissing_download_text_=''
    _obj_opts_apps_isnotmissing_download_flag_=false
    _obj_opts_apps_isnotmissing_download_changes_flag_=true
    _obj_opts_apps_isnotmissing_download_enable_=false
    }
Opts.Apps.IsNotMissing.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Download.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_download_flag_=true
    [[ $_obj_opts_apps_isnotmissing_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_download_flag_
    }
Opts.Apps.IsNotMissing.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_download_text_"
    fi
    }
Opts.Apps.IsNotMissing.Download.Init

Opts.Apps.IsMissing.Install.Clear()
    {
    [[ $_obj_opts_apps_ismissing_install_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_install_flag_=false
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_install_flag_
    }
Opts.Apps.IsMissing.Install.Disable()
    {
    [[ $_obj_opts_apps_ismissing_install_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_install_enable_=false
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_install_enable_
    }
Opts.Apps.IsMissing.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_install_changes_flag_=false
    }
Opts.Apps.IsMissing.Install.Enable()
    {
    [[ $_obj_opts_apps_ismissing_install_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_install_enable_=true
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_install_enable_
    }
Opts.Apps.IsMissing.Install.Init()
    {
    _obj_opts_apps_ismissing_install_text_=''
    _obj_opts_apps_ismissing_install_flag_=false
    _obj_opts_apps_ismissing_install_changes_flag_=true
    _obj_opts_apps_ismissing_install_enable_=false
    }
Opts.Apps.IsMissing.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_install_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_install_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Install.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_install_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Install.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_install_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Install.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_install_changes_flag_=true
    }
Opts.Apps.IsMissing.Install.Set()
    {
    [[ $_obj_opts_apps_ismissing_install_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_install_flag_=true
    [[ $_obj_opts_apps_ismissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_install_flag_
    }
Opts.Apps.IsMissing.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_install_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_install_text_"
    fi
    }
Opts.Apps.IsMissing.Install.Init

Opts.Apps.IsNotMissing.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_flag_=false
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_install_flag_
    }
Opts.Apps.IsNotMissing.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_enable_=false
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_install_enable_
    }
Opts.Apps.IsNotMissing.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_enable_=true
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_install_enable_
    }
Opts.Apps.IsNotMissing.Install.Init()
    {
    _obj_opts_apps_isnotmissing_install_text_=''
    _obj_opts_apps_isnotmissing_install_flag_=false
    _obj_opts_apps_isnotmissing_install_changes_flag_=true
    _obj_opts_apps_isnotmissing_install_enable_=false
    }
Opts.Apps.IsNotMissing.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Install.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_install_flag_=true
    [[ $_obj_opts_apps_isnotmissing_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_install_flag_
    }
Opts.Apps.IsNotMissing.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_install_text_"
    fi
    }
Opts.Apps.IsNotMissing.Install.Init

Opts.Apps.IsMissing.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_flag_=false
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_rebuild_flag_
    }
Opts.Apps.IsMissing.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_enable_=false
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_rebuild_enable_
    }
Opts.Apps.IsMissing.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_changes_flag_=false
    }
Opts.Apps.IsMissing.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_enable_=true
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_rebuild_enable_
    }
Opts.Apps.IsMissing.Rebuild.Init()
    {
    _obj_opts_apps_ismissing_rebuild_text_=''
    _obj_opts_apps_ismissing_rebuild_flag_=false
    _obj_opts_apps_ismissing_rebuild_changes_flag_=true
    _obj_opts_apps_ismissing_rebuild_enable_=false
    }
Opts.Apps.IsMissing.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_changes_flag_=true
    }
Opts.Apps.IsMissing.Rebuild.Set()
    {
    [[ $_obj_opts_apps_ismissing_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_rebuild_flag_=true
    [[ $_obj_opts_apps_ismissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_rebuild_flag_
    }
Opts.Apps.IsMissing.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_rebuild_text_"
    fi
    }
Opts.Apps.IsMissing.Rebuild.Init

Opts.Apps.IsNotMissing.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_rebuild_flag_
    }
Opts.Apps.IsNotMissing.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_rebuild_enable_
    }
Opts.Apps.IsNotMissing.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_rebuild_enable_
    }
Opts.Apps.IsNotMissing.Rebuild.Init()
    {
    _obj_opts_apps_isnotmissing_rebuild_text_=''
    _obj_opts_apps_isnotmissing_rebuild_flag_=false
    _obj_opts_apps_isnotmissing_rebuild_changes_flag_=true
    _obj_opts_apps_isnotmissing_rebuild_enable_=false
    }
Opts.Apps.IsNotMissing.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotmissing_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_rebuild_flag_
    }
Opts.Apps.IsNotMissing.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_rebuild_text_"
    fi
    }
Opts.Apps.IsNotMissing.Rebuild.Init

Opts.Apps.IsMissing.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_flag_=false
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_reinstall_flag_
    }
Opts.Apps.IsMissing.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_enable_=false
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_reinstall_enable_
    }
Opts.Apps.IsMissing.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_changes_flag_=false
    }
Opts.Apps.IsMissing.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_enable_=true
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_reinstall_enable_
    }
Opts.Apps.IsMissing.Reinstall.Init()
    {
    _obj_opts_apps_ismissing_reinstall_text_=''
    _obj_opts_apps_ismissing_reinstall_flag_=false
    _obj_opts_apps_ismissing_reinstall_changes_flag_=true
    _obj_opts_apps_ismissing_reinstall_enable_=false
    }
Opts.Apps.IsMissing.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_changes_flag_=true
    }
Opts.Apps.IsMissing.Reinstall.Set()
    {
    [[ $_obj_opts_apps_ismissing_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_reinstall_flag_=true
    [[ $_obj_opts_apps_ismissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_reinstall_flag_
    }
Opts.Apps.IsMissing.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_reinstall_text_"
    fi
    }
Opts.Apps.IsMissing.Reinstall.Init

Opts.Apps.IsNotMissing.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_reinstall_flag_
    }
Opts.Apps.IsNotMissing.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_reinstall_enable_
    }
Opts.Apps.IsNotMissing.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_reinstall_enable_
    }
Opts.Apps.IsNotMissing.Reinstall.Init()
    {
    _obj_opts_apps_isnotmissing_reinstall_text_=''
    _obj_opts_apps_isnotmissing_reinstall_flag_=false
    _obj_opts_apps_isnotmissing_reinstall_changes_flag_=true
    _obj_opts_apps_isnotmissing_reinstall_enable_=false
    }
Opts.Apps.IsNotMissing.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotmissing_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_reinstall_flag_
    }
Opts.Apps.IsNotMissing.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_reinstall_text_"
    fi
    }
Opts.Apps.IsNotMissing.Reinstall.Init

Opts.Apps.IsMissing.Restore.Clear()
    {
    [[ $_obj_opts_apps_ismissing_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restore_flag_=false
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restore_flag_
    }
Opts.Apps.IsMissing.Restore.Disable()
    {
    [[ $_obj_opts_apps_ismissing_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restore_enable_=false
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restore_enable_
    }
Opts.Apps.IsMissing.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restore_changes_flag_=false
    }
Opts.Apps.IsMissing.Restore.Enable()
    {
    [[ $_obj_opts_apps_ismissing_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restore_enable_=true
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restore_enable_
    }
Opts.Apps.IsMissing.Restore.Init()
    {
    _obj_opts_apps_ismissing_restore_text_=''
    _obj_opts_apps_ismissing_restore_flag_=false
    _obj_opts_apps_ismissing_restore_changes_flag_=true
    _obj_opts_apps_ismissing_restore_enable_=false
    }
Opts.Apps.IsMissing.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Restore.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Restore.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restore_changes_flag_=true
    }
Opts.Apps.IsMissing.Restore.Set()
    {
    [[ $_obj_opts_apps_ismissing_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restore_flag_=true
    [[ $_obj_opts_apps_ismissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restore_flag_
    }
Opts.Apps.IsMissing.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_restore_text_"
    fi
    }
Opts.Apps.IsMissing.Restore.Init

Opts.Apps.IsNotMissing.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_flag_=false
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restore_flag_
    }
Opts.Apps.IsNotMissing.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_enable_=false
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restore_enable_
    }
Opts.Apps.IsNotMissing.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_enable_=true
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restore_enable_
    }
Opts.Apps.IsNotMissing.Restore.Init()
    {
    _obj_opts_apps_isnotmissing_restore_text_=''
    _obj_opts_apps_isnotmissing_restore_flag_=false
    _obj_opts_apps_isnotmissing_restore_changes_flag_=true
    _obj_opts_apps_isnotmissing_restore_enable_=false
    }
Opts.Apps.IsNotMissing.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restore_flag_=true
    [[ $_obj_opts_apps_isnotmissing_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restore_flag_
    }
Opts.Apps.IsNotMissing.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_restore_text_"
    fi
    }
Opts.Apps.IsNotMissing.Restore.Init

Opts.Apps.IsMissing.Restart.Clear()
    {
    [[ $_obj_opts_apps_ismissing_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restart_flag_=false
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restart_flag_
    }
Opts.Apps.IsMissing.Restart.Disable()
    {
    [[ $_obj_opts_apps_ismissing_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restart_enable_=false
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restart_enable_
    }
Opts.Apps.IsMissing.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_restart_changes_flag_=false
    }
Opts.Apps.IsMissing.Restart.Enable()
    {
    [[ $_obj_opts_apps_ismissing_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restart_enable_=true
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restart_enable_
    }
Opts.Apps.IsMissing.Restart.Init()
    {
    _obj_opts_apps_ismissing_restart_text_=''
    _obj_opts_apps_ismissing_restart_flag_=false
    _obj_opts_apps_ismissing_restart_changes_flag_=true
    _obj_opts_apps_ismissing_restart_enable_=false
    }
Opts.Apps.IsMissing.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Restart.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Restart.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restart_changes_flag_=true
    }
Opts.Apps.IsMissing.Restart.Set()
    {
    [[ $_obj_opts_apps_ismissing_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_restart_flag_=true
    [[ $_obj_opts_apps_ismissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_restart_flag_
    }
Opts.Apps.IsMissing.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_restart_text_"
    fi
    }
Opts.Apps.IsMissing.Restart.Init

Opts.Apps.IsNotMissing.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_flag_=false
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restart_flag_
    }
Opts.Apps.IsNotMissing.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_enable_=false
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restart_enable_
    }
Opts.Apps.IsNotMissing.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_enable_=true
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restart_enable_
    }
Opts.Apps.IsNotMissing.Restart.Init()
    {
    _obj_opts_apps_isnotmissing_restart_text_=''
    _obj_opts_apps_isnotmissing_restart_flag_=false
    _obj_opts_apps_isnotmissing_restart_changes_flag_=true
    _obj_opts_apps_isnotmissing_restart_enable_=false
    }
Opts.Apps.IsNotMissing.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_restart_flag_=true
    [[ $_obj_opts_apps_isnotmissing_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_restart_flag_
    }
Opts.Apps.IsNotMissing.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_restart_text_"
    fi
    }
Opts.Apps.IsNotMissing.Restart.Init

Opts.Apps.IsMissing.Start.Clear()
    {
    [[ $_obj_opts_apps_ismissing_start_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_start_flag_=false
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_start_flag_
    }
Opts.Apps.IsMissing.Start.Disable()
    {
    [[ $_obj_opts_apps_ismissing_start_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_start_enable_=false
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_start_enable_
    }
Opts.Apps.IsMissing.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_start_changes_flag_=false
    }
Opts.Apps.IsMissing.Start.Enable()
    {
    [[ $_obj_opts_apps_ismissing_start_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_start_enable_=true
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_start_enable_
    }
Opts.Apps.IsMissing.Start.Init()
    {
    _obj_opts_apps_ismissing_start_text_=''
    _obj_opts_apps_ismissing_start_flag_=false
    _obj_opts_apps_ismissing_start_changes_flag_=true
    _obj_opts_apps_ismissing_start_enable_=false
    }
Opts.Apps.IsMissing.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_start_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_start_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Start.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_start_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Start.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_start_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Start.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_start_changes_flag_=true
    }
Opts.Apps.IsMissing.Start.Set()
    {
    [[ $_obj_opts_apps_ismissing_start_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_start_flag_=true
    [[ $_obj_opts_apps_ismissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_start_flag_
    }
Opts.Apps.IsMissing.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_start_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_start_text_"
    fi
    }
Opts.Apps.IsMissing.Start.Init

Opts.Apps.IsNotMissing.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_flag_=false
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_start_flag_
    }
Opts.Apps.IsNotMissing.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_enable_=false
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_start_enable_
    }
Opts.Apps.IsNotMissing.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_enable_=true
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_start_enable_
    }
Opts.Apps.IsNotMissing.Start.Init()
    {
    _obj_opts_apps_isnotmissing_start_text_=''
    _obj_opts_apps_isnotmissing_start_flag_=false
    _obj_opts_apps_isnotmissing_start_changes_flag_=true
    _obj_opts_apps_isnotmissing_start_enable_=false
    }
Opts.Apps.IsNotMissing.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Start.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_start_flag_=true
    [[ $_obj_opts_apps_isnotmissing_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_start_flag_
    }
Opts.Apps.IsNotMissing.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_start_text_"
    fi
    }
Opts.Apps.IsNotMissing.Start.Init

Opts.Apps.IsMissing.Stop.Clear()
    {
    [[ $_obj_opts_apps_ismissing_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_stop_flag_=false
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_stop_flag_
    }
Opts.Apps.IsMissing.Stop.Disable()
    {
    [[ $_obj_opts_apps_ismissing_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_stop_enable_=false
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_stop_enable_
    }
Opts.Apps.IsMissing.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_stop_changes_flag_=false
    }
Opts.Apps.IsMissing.Stop.Enable()
    {
    [[ $_obj_opts_apps_ismissing_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_stop_enable_=true
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_stop_enable_
    }
Opts.Apps.IsMissing.Stop.Init()
    {
    _obj_opts_apps_ismissing_stop_text_=''
    _obj_opts_apps_ismissing_stop_flag_=false
    _obj_opts_apps_ismissing_stop_changes_flag_=true
    _obj_opts_apps_ismissing_stop_enable_=false
    }
Opts.Apps.IsMissing.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Stop.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Stop.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_stop_changes_flag_=true
    }
Opts.Apps.IsMissing.Stop.Set()
    {
    [[ $_obj_opts_apps_ismissing_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_stop_flag_=true
    [[ $_obj_opts_apps_ismissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_stop_flag_
    }
Opts.Apps.IsMissing.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_stop_text_"
    fi
    }
Opts.Apps.IsMissing.Stop.Init

Opts.Apps.IsNotMissing.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_flag_=false
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_stop_flag_
    }
Opts.Apps.IsNotMissing.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_enable_=false
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_stop_enable_
    }
Opts.Apps.IsNotMissing.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_enable_=true
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_stop_enable_
    }
Opts.Apps.IsNotMissing.Stop.Init()
    {
    _obj_opts_apps_isnotmissing_stop_text_=''
    _obj_opts_apps_isnotmissing_stop_flag_=false
    _obj_opts_apps_isnotmissing_stop_changes_flag_=true
    _obj_opts_apps_isnotmissing_stop_enable_=false
    }
Opts.Apps.IsNotMissing.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_stop_flag_=true
    [[ $_obj_opts_apps_isnotmissing_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_stop_flag_
    }
Opts.Apps.IsNotMissing.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_stop_text_"
    fi
    }
Opts.Apps.IsNotMissing.Stop.Init

Opts.Apps.IsMissing.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_flag_=false
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_uninstall_flag_
    }
Opts.Apps.IsMissing.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_enable_=false
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_uninstall_enable_
    }
Opts.Apps.IsMissing.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_changes_flag_=false
    }
Opts.Apps.IsMissing.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_enable_=true
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_uninstall_enable_
    }
Opts.Apps.IsMissing.Uninstall.Init()
    {
    _obj_opts_apps_ismissing_uninstall_text_=''
    _obj_opts_apps_ismissing_uninstall_flag_=false
    _obj_opts_apps_ismissing_uninstall_changes_flag_=true
    _obj_opts_apps_ismissing_uninstall_enable_=false
    }
Opts.Apps.IsMissing.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_changes_flag_=true
    }
Opts.Apps.IsMissing.Uninstall.Set()
    {
    [[ $_obj_opts_apps_ismissing_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_uninstall_flag_=true
    [[ $_obj_opts_apps_ismissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_uninstall_flag_
    }
Opts.Apps.IsMissing.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_uninstall_text_"
    fi
    }
Opts.Apps.IsMissing.Uninstall.Init

Opts.Apps.IsNotMissing.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_uninstall_flag_
    }
Opts.Apps.IsNotMissing.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_uninstall_enable_
    }
Opts.Apps.IsNotMissing.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_uninstall_enable_
    }
Opts.Apps.IsNotMissing.Uninstall.Init()
    {
    _obj_opts_apps_isnotmissing_uninstall_text_=''
    _obj_opts_apps_isnotmissing_uninstall_flag_=false
    _obj_opts_apps_isnotmissing_uninstall_changes_flag_=true
    _obj_opts_apps_isnotmissing_uninstall_enable_=false
    }
Opts.Apps.IsNotMissing.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotmissing_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_uninstall_flag_
    }
Opts.Apps.IsNotMissing.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_uninstall_text_"
    fi
    }
Opts.Apps.IsNotMissing.Uninstall.Init

Opts.Apps.IsMissing.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_flag_=false
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_upgrade_flag_
    }
Opts.Apps.IsMissing.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_enable_=false
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_upgrade_enable_
    }
Opts.Apps.IsMissing.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_changes_flag_=false
    }
Opts.Apps.IsMissing.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_enable_=true
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_upgrade_enable_
    }
Opts.Apps.IsMissing.Upgrade.Init()
    {
    _obj_opts_apps_ismissing_upgrade_text_=''
    _obj_opts_apps_ismissing_upgrade_flag_=false
    _obj_opts_apps_ismissing_upgrade_changes_flag_=true
    _obj_opts_apps_ismissing_upgrade_enable_=false
    }
Opts.Apps.IsMissing.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsMissing.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsMissing.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsMissing.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsMissing.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_changes_flag_=true
    }
Opts.Apps.IsMissing.Upgrade.Set()
    {
    [[ $_obj_opts_apps_ismissing_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_ismissing_upgrade_flag_=true
    [[ $_obj_opts_apps_ismissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_ismissing_upgrade_flag_
    }
Opts.Apps.IsMissing.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_ismissing_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_ismissing_upgrade_text_"
    fi
    }
Opts.Apps.IsMissing.Upgrade.Init

Opts.Apps.IsNotMissing.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_upgrade_flag_
    }
Opts.Apps.IsNotMissing.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_upgrade_enable_
    }
Opts.Apps.IsNotMissing.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotMissing.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_upgrade_enable_
    }
Opts.Apps.IsNotMissing.Upgrade.Init()
    {
    _obj_opts_apps_isnotmissing_upgrade_text_=''
    _obj_opts_apps_isnotmissing_upgrade_flag_=false
    _obj_opts_apps_isnotmissing_upgrade_changes_flag_=true
    _obj_opts_apps_isnotmissing_upgrade_enable_=false
    }
Opts.Apps.IsNotMissing.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotMissing.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotMissing.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotMissing.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotmissing_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotmissing_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotmissing_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotmissing_upgrade_flag_
    }
Opts.Apps.IsNotMissing.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotmissing_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotmissing_upgrade_text_"
    fi
    }
Opts.Apps.IsNotMissing.Upgrade.Init

Opts.Apps.List.Names.Clear()
    {
    [[ $_obj_opts_apps_list_names_flag_ != 'true' ]] && return
    _obj_opts_apps_list_names_flag_=false
    [[ $_obj_opts_apps_list_names_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_names_flag_
    }
Opts.Apps.List.Names.Disable()
    {
    [[ $_obj_opts_apps_list_names_enable_ != 'true' ]] && return
    _obj_opts_apps_list_names_enable_=false
    [[ $_obj_opts_apps_list_names_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_names_enable_
    }
Opts.Apps.List.Names.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_names_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_names_changes_flag_=false
    }
Opts.Apps.List.Names.Enable()
    {
    [[ $_obj_opts_apps_list_names_enable_ = 'true' ]] && return
    _obj_opts_apps_list_names_enable_=true
    [[ $_obj_opts_apps_list_names_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_names_enable_
    }
Opts.Apps.List.Names.Init()
    {
    _obj_opts_apps_list_names_text_=''
    _obj_opts_apps_list_names_flag_=false
    _obj_opts_apps_list_names_changes_flag_=true
    _obj_opts_apps_list_names_enable_=false
    }
Opts.Apps.List.Names.IsDisabled()
    {
    [[ $_obj_opts_apps_list_names_enable_ != 'true' ]]
    }
Opts.Apps.List.Names.IsEnabled()
    {
    [[ $_obj_opts_apps_list_names_enable_ = 'true' ]]
    }
Opts.Apps.List.Names.IsNot()
    {
    [[ $_obj_opts_apps_list_names_flag_ != 'true' ]]
    }
Opts.Apps.List.Names.IsSet()
    {
    [[ $_obj_opts_apps_list_names_flag_ = 'true' ]]
    }
Opts.Apps.List.Names.LogChanges()
    {
    [[ $_obj_opts_apps_list_names_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_names_changes_flag_=true
    }
Opts.Apps.List.Names.Set()
    {
    [[ $_obj_opts_apps_list_names_flag_ = 'true' ]] && return
    _obj_opts_apps_list_names_flag_=true
    [[ $_obj_opts_apps_list_names_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_names_flag_
    }
Opts.Apps.List.Names.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_names_text_=$2
    else
        echo -n "$_obj_opts_apps_list_names_text_"
    fi
    }
Opts.Apps.List.Names.Init

Opts.Apps.IsNames.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnames_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_backup_flag_=false
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_backup_flag_
    }
Opts.Apps.IsNames.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnames_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_backup_enable_=false
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_backup_enable_
    }
Opts.Apps.IsNames.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_backup_changes_flag_=false
    }
Opts.Apps.IsNames.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnames_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_backup_enable_=true
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_backup_enable_
    }
Opts.Apps.IsNames.Backup.Init()
    {
    _obj_opts_apps_isnames_backup_text_=''
    _obj_opts_apps_isnames_backup_flag_=false
    _obj_opts_apps_isnames_backup_changes_flag_=true
    _obj_opts_apps_isnames_backup_enable_=false
    }
Opts.Apps.IsNames.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnames_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnames_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_backup_changes_flag_=true
    }
Opts.Apps.IsNames.Backup.Set()
    {
    [[ $_obj_opts_apps_isnames_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_backup_flag_=true
    [[ $_obj_opts_apps_isnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_backup_flag_
    }
Opts.Apps.IsNames.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_backup_text_"
    fi
    }
Opts.Apps.IsNames.Backup.Init

Opts.Apps.IsNotNames.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_flag_=false
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_backup_flag_
    }
Opts.Apps.IsNotNames.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_enable_=false
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_backup_enable_
    }
Opts.Apps.IsNotNames.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_changes_flag_=false
    }
Opts.Apps.IsNotNames.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_enable_=true
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_backup_enable_
    }
Opts.Apps.IsNotNames.Backup.Init()
    {
    _obj_opts_apps_isnotnames_backup_text_=''
    _obj_opts_apps_isnotnames_backup_flag_=false
    _obj_opts_apps_isnotnames_backup_changes_flag_=true
    _obj_opts_apps_isnotnames_backup_enable_=false
    }
Opts.Apps.IsNotNames.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_changes_flag_=true
    }
Opts.Apps.IsNotNames.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotnames_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_backup_flag_=true
    [[ $_obj_opts_apps_isnotnames_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_backup_flag_
    }
Opts.Apps.IsNotNames.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_backup_text_"
    fi
    }
Opts.Apps.IsNotNames.Backup.Init

Opts.Apps.IsNames.Download.Clear()
    {
    [[ $_obj_opts_apps_isnames_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_download_flag_=false
    [[ $_obj_opts_apps_isnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_download_flag_
    }
Opts.Apps.IsNames.Download.Disable()
    {
    [[ $_obj_opts_apps_isnames_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_download_enable_=false
    [[ $_obj_opts_apps_isnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_download_enable_
    }
Opts.Apps.IsNames.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_download_changes_flag_=false
    }
Opts.Apps.IsNames.Download.Enable()
    {
    [[ $_obj_opts_apps_isnames_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_download_enable_=true
    [[ $_obj_opts_apps_isnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_download_enable_
    }
Opts.Apps.IsNames.Download.Init()
    {
    _obj_opts_apps_isnames_download_text_=''
    _obj_opts_apps_isnames_download_flag_=false
    _obj_opts_apps_isnames_download_changes_flag_=true
    _obj_opts_apps_isnames_download_enable_=false
    }
Opts.Apps.IsNames.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnames_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnames_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_download_changes_flag_=true
    }
Opts.Apps.IsNames.Download.Set()
    {
    [[ $_obj_opts_apps_isnames_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_download_flag_=true
    [[ $_obj_opts_apps_isnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_download_flag_
    }
Opts.Apps.IsNames.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_download_text_"
    fi
    }
Opts.Apps.IsNames.Download.Init

Opts.Apps.IsNotNames.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_download_flag_=false
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_download_flag_
    }
Opts.Apps.IsNotNames.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_download_enable_=false
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_download_enable_
    }
Opts.Apps.IsNotNames.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_download_changes_flag_=false
    }
Opts.Apps.IsNotNames.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_download_enable_=true
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_download_enable_
    }
Opts.Apps.IsNotNames.Download.Init()
    {
    _obj_opts_apps_isnotnames_download_text_=''
    _obj_opts_apps_isnotnames_download_flag_=false
    _obj_opts_apps_isnotnames_download_changes_flag_=true
    _obj_opts_apps_isnotnames_download_enable_=false
    }
Opts.Apps.IsNotNames.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_download_changes_flag_=true
    }
Opts.Apps.IsNotNames.Download.Set()
    {
    [[ $_obj_opts_apps_isnotnames_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_download_flag_=true
    [[ $_obj_opts_apps_isnotnames_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_download_flag_
    }
Opts.Apps.IsNotNames.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_download_text_"
    fi
    }
Opts.Apps.IsNotNames.Download.Init

Opts.Apps.IsNames.Install.Clear()
    {
    [[ $_obj_opts_apps_isnames_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_install_flag_=false
    [[ $_obj_opts_apps_isnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_install_flag_
    }
Opts.Apps.IsNames.Install.Disable()
    {
    [[ $_obj_opts_apps_isnames_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_install_enable_=false
    [[ $_obj_opts_apps_isnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_install_enable_
    }
Opts.Apps.IsNames.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_install_changes_flag_=false
    }
Opts.Apps.IsNames.Install.Enable()
    {
    [[ $_obj_opts_apps_isnames_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_install_enable_=true
    [[ $_obj_opts_apps_isnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_install_enable_
    }
Opts.Apps.IsNames.Install.Init()
    {
    _obj_opts_apps_isnames_install_text_=''
    _obj_opts_apps_isnames_install_flag_=false
    _obj_opts_apps_isnames_install_changes_flag_=true
    _obj_opts_apps_isnames_install_enable_=false
    }
Opts.Apps.IsNames.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnames_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnames_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_install_changes_flag_=true
    }
Opts.Apps.IsNames.Install.Set()
    {
    [[ $_obj_opts_apps_isnames_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_install_flag_=true
    [[ $_obj_opts_apps_isnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_install_flag_
    }
Opts.Apps.IsNames.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_install_text_"
    fi
    }
Opts.Apps.IsNames.Install.Init

Opts.Apps.IsNotNames.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_install_flag_=false
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_install_flag_
    }
Opts.Apps.IsNotNames.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_install_enable_=false
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_install_enable_
    }
Opts.Apps.IsNotNames.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_install_changes_flag_=false
    }
Opts.Apps.IsNotNames.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_install_enable_=true
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_install_enable_
    }
Opts.Apps.IsNotNames.Install.Init()
    {
    _obj_opts_apps_isnotnames_install_text_=''
    _obj_opts_apps_isnotnames_install_flag_=false
    _obj_opts_apps_isnotnames_install_changes_flag_=true
    _obj_opts_apps_isnotnames_install_enable_=false
    }
Opts.Apps.IsNotNames.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_install_changes_flag_=true
    }
Opts.Apps.IsNotNames.Install.Set()
    {
    [[ $_obj_opts_apps_isnotnames_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_install_flag_=true
    [[ $_obj_opts_apps_isnotnames_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_install_flag_
    }
Opts.Apps.IsNotNames.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_install_text_"
    fi
    }
Opts.Apps.IsNotNames.Install.Init

Opts.Apps.IsNames.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnames_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_flag_=false
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_rebuild_flag_
    }
Opts.Apps.IsNames.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnames_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_enable_=false
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_rebuild_enable_
    }
Opts.Apps.IsNames.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_changes_flag_=false
    }
Opts.Apps.IsNames.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnames_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_enable_=true
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_rebuild_enable_
    }
Opts.Apps.IsNames.Rebuild.Init()
    {
    _obj_opts_apps_isnames_rebuild_text_=''
    _obj_opts_apps_isnames_rebuild_flag_=false
    _obj_opts_apps_isnames_rebuild_changes_flag_=true
    _obj_opts_apps_isnames_rebuild_enable_=false
    }
Opts.Apps.IsNames.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnames_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnames_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_changes_flag_=true
    }
Opts.Apps.IsNames.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnames_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_rebuild_flag_=true
    [[ $_obj_opts_apps_isnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_rebuild_flag_
    }
Opts.Apps.IsNames.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_rebuild_text_"
    fi
    }
Opts.Apps.IsNames.Rebuild.Init

Opts.Apps.IsNotNames.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_rebuild_flag_
    }
Opts.Apps.IsNotNames.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_rebuild_enable_
    }
Opts.Apps.IsNotNames.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotNames.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_rebuild_enable_
    }
Opts.Apps.IsNotNames.Rebuild.Init()
    {
    _obj_opts_apps_isnotnames_rebuild_text_=''
    _obj_opts_apps_isnotnames_rebuild_flag_=false
    _obj_opts_apps_isnotnames_rebuild_changes_flag_=true
    _obj_opts_apps_isnotnames_rebuild_enable_=false
    }
Opts.Apps.IsNotNames.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotNames.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotnames_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotnames_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_rebuild_flag_
    }
Opts.Apps.IsNotNames.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_rebuild_text_"
    fi
    }
Opts.Apps.IsNotNames.Rebuild.Init

Opts.Apps.IsNames.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnames_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_flag_=false
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_reinstall_flag_
    }
Opts.Apps.IsNames.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnames_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_enable_=false
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_reinstall_enable_
    }
Opts.Apps.IsNames.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_changes_flag_=false
    }
Opts.Apps.IsNames.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnames_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_enable_=true
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_reinstall_enable_
    }
Opts.Apps.IsNames.Reinstall.Init()
    {
    _obj_opts_apps_isnames_reinstall_text_=''
    _obj_opts_apps_isnames_reinstall_flag_=false
    _obj_opts_apps_isnames_reinstall_changes_flag_=true
    _obj_opts_apps_isnames_reinstall_enable_=false
    }
Opts.Apps.IsNames.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnames_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnames_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_changes_flag_=true
    }
Opts.Apps.IsNames.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnames_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_reinstall_flag_=true
    [[ $_obj_opts_apps_isnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_reinstall_flag_
    }
Opts.Apps.IsNames.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_reinstall_text_"
    fi
    }
Opts.Apps.IsNames.Reinstall.Init

Opts.Apps.IsNotNames.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_reinstall_flag_
    }
Opts.Apps.IsNotNames.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_reinstall_enable_
    }
Opts.Apps.IsNotNames.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotNames.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_reinstall_enable_
    }
Opts.Apps.IsNotNames.Reinstall.Init()
    {
    _obj_opts_apps_isnotnames_reinstall_text_=''
    _obj_opts_apps_isnotnames_reinstall_flag_=false
    _obj_opts_apps_isnotnames_reinstall_changes_flag_=true
    _obj_opts_apps_isnotnames_reinstall_enable_=false
    }
Opts.Apps.IsNotNames.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotNames.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotnames_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotnames_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_reinstall_flag_
    }
Opts.Apps.IsNotNames.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_reinstall_text_"
    fi
    }
Opts.Apps.IsNotNames.Reinstall.Init

Opts.Apps.IsNames.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnames_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_restore_flag_=false
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restore_flag_
    }
Opts.Apps.IsNames.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnames_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_restore_enable_=false
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restore_enable_
    }
Opts.Apps.IsNames.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_restore_changes_flag_=false
    }
Opts.Apps.IsNames.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnames_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_restore_enable_=true
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restore_enable_
    }
Opts.Apps.IsNames.Restore.Init()
    {
    _obj_opts_apps_isnames_restore_text_=''
    _obj_opts_apps_isnames_restore_flag_=false
    _obj_opts_apps_isnames_restore_changes_flag_=true
    _obj_opts_apps_isnames_restore_enable_=false
    }
Opts.Apps.IsNames.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnames_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnames_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_restore_changes_flag_=true
    }
Opts.Apps.IsNames.Restore.Set()
    {
    [[ $_obj_opts_apps_isnames_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_restore_flag_=true
    [[ $_obj_opts_apps_isnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restore_flag_
    }
Opts.Apps.IsNames.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_restore_text_"
    fi
    }
Opts.Apps.IsNames.Restore.Init

Opts.Apps.IsNotNames.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_flag_=false
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restore_flag_
    }
Opts.Apps.IsNotNames.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_enable_=false
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restore_enable_
    }
Opts.Apps.IsNotNames.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_changes_flag_=false
    }
Opts.Apps.IsNotNames.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_enable_=true
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restore_enable_
    }
Opts.Apps.IsNotNames.Restore.Init()
    {
    _obj_opts_apps_isnotnames_restore_text_=''
    _obj_opts_apps_isnotnames_restore_flag_=false
    _obj_opts_apps_isnotnames_restore_changes_flag_=true
    _obj_opts_apps_isnotnames_restore_enable_=false
    }
Opts.Apps.IsNotNames.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_changes_flag_=true
    }
Opts.Apps.IsNotNames.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotnames_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restore_flag_=true
    [[ $_obj_opts_apps_isnotnames_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restore_flag_
    }
Opts.Apps.IsNotNames.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_restore_text_"
    fi
    }
Opts.Apps.IsNotNames.Restore.Init

Opts.Apps.IsNames.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnames_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_restart_flag_=false
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restart_flag_
    }
Opts.Apps.IsNames.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnames_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_restart_enable_=false
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restart_enable_
    }
Opts.Apps.IsNames.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_restart_changes_flag_=false
    }
Opts.Apps.IsNames.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnames_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_restart_enable_=true
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restart_enable_
    }
Opts.Apps.IsNames.Restart.Init()
    {
    _obj_opts_apps_isnames_restart_text_=''
    _obj_opts_apps_isnames_restart_flag_=false
    _obj_opts_apps_isnames_restart_changes_flag_=true
    _obj_opts_apps_isnames_restart_enable_=false
    }
Opts.Apps.IsNames.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnames_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnames_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_restart_changes_flag_=true
    }
Opts.Apps.IsNames.Restart.Set()
    {
    [[ $_obj_opts_apps_isnames_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_restart_flag_=true
    [[ $_obj_opts_apps_isnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_restart_flag_
    }
Opts.Apps.IsNames.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_restart_text_"
    fi
    }
Opts.Apps.IsNames.Restart.Init

Opts.Apps.IsNotNames.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_flag_=false
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restart_flag_
    }
Opts.Apps.IsNotNames.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_enable_=false
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restart_enable_
    }
Opts.Apps.IsNotNames.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_changes_flag_=false
    }
Opts.Apps.IsNotNames.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_enable_=true
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restart_enable_
    }
Opts.Apps.IsNotNames.Restart.Init()
    {
    _obj_opts_apps_isnotnames_restart_text_=''
    _obj_opts_apps_isnotnames_restart_flag_=false
    _obj_opts_apps_isnotnames_restart_changes_flag_=true
    _obj_opts_apps_isnotnames_restart_enable_=false
    }
Opts.Apps.IsNotNames.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_changes_flag_=true
    }
Opts.Apps.IsNotNames.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotnames_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_restart_flag_=true
    [[ $_obj_opts_apps_isnotnames_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_restart_flag_
    }
Opts.Apps.IsNotNames.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_restart_text_"
    fi
    }
Opts.Apps.IsNotNames.Restart.Init

Opts.Apps.IsNames.Start.Clear()
    {
    [[ $_obj_opts_apps_isnames_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_start_flag_=false
    [[ $_obj_opts_apps_isnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_start_flag_
    }
Opts.Apps.IsNames.Start.Disable()
    {
    [[ $_obj_opts_apps_isnames_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_start_enable_=false
    [[ $_obj_opts_apps_isnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_start_enable_
    }
Opts.Apps.IsNames.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_start_changes_flag_=false
    }
Opts.Apps.IsNames.Start.Enable()
    {
    [[ $_obj_opts_apps_isnames_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_start_enable_=true
    [[ $_obj_opts_apps_isnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_start_enable_
    }
Opts.Apps.IsNames.Start.Init()
    {
    _obj_opts_apps_isnames_start_text_=''
    _obj_opts_apps_isnames_start_flag_=false
    _obj_opts_apps_isnames_start_changes_flag_=true
    _obj_opts_apps_isnames_start_enable_=false
    }
Opts.Apps.IsNames.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnames_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnames_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_start_changes_flag_=true
    }
Opts.Apps.IsNames.Start.Set()
    {
    [[ $_obj_opts_apps_isnames_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_start_flag_=true
    [[ $_obj_opts_apps_isnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_start_flag_
    }
Opts.Apps.IsNames.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_start_text_"
    fi
    }
Opts.Apps.IsNames.Start.Init

Opts.Apps.IsNotNames.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_start_flag_=false
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_start_flag_
    }
Opts.Apps.IsNotNames.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_start_enable_=false
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_start_enable_
    }
Opts.Apps.IsNotNames.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_start_changes_flag_=false
    }
Opts.Apps.IsNotNames.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_start_enable_=true
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_start_enable_
    }
Opts.Apps.IsNotNames.Start.Init()
    {
    _obj_opts_apps_isnotnames_start_text_=''
    _obj_opts_apps_isnotnames_start_flag_=false
    _obj_opts_apps_isnotnames_start_changes_flag_=true
    _obj_opts_apps_isnotnames_start_enable_=false
    }
Opts.Apps.IsNotNames.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_start_changes_flag_=true
    }
Opts.Apps.IsNotNames.Start.Set()
    {
    [[ $_obj_opts_apps_isnotnames_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_start_flag_=true
    [[ $_obj_opts_apps_isnotnames_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_start_flag_
    }
Opts.Apps.IsNotNames.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_start_text_"
    fi
    }
Opts.Apps.IsNotNames.Start.Init

Opts.Apps.IsNames.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnames_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_stop_flag_=false
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_stop_flag_
    }
Opts.Apps.IsNames.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnames_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_stop_enable_=false
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_stop_enable_
    }
Opts.Apps.IsNames.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_stop_changes_flag_=false
    }
Opts.Apps.IsNames.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnames_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_stop_enable_=true
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_stop_enable_
    }
Opts.Apps.IsNames.Stop.Init()
    {
    _obj_opts_apps_isnames_stop_text_=''
    _obj_opts_apps_isnames_stop_flag_=false
    _obj_opts_apps_isnames_stop_changes_flag_=true
    _obj_opts_apps_isnames_stop_enable_=false
    }
Opts.Apps.IsNames.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnames_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnames_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_stop_changes_flag_=true
    }
Opts.Apps.IsNames.Stop.Set()
    {
    [[ $_obj_opts_apps_isnames_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_stop_flag_=true
    [[ $_obj_opts_apps_isnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_stop_flag_
    }
Opts.Apps.IsNames.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_stop_text_"
    fi
    }
Opts.Apps.IsNames.Stop.Init

Opts.Apps.IsNotNames.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_flag_=false
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_stop_flag_
    }
Opts.Apps.IsNotNames.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_enable_=false
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_stop_enable_
    }
Opts.Apps.IsNotNames.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_changes_flag_=false
    }
Opts.Apps.IsNotNames.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_enable_=true
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_stop_enable_
    }
Opts.Apps.IsNotNames.Stop.Init()
    {
    _obj_opts_apps_isnotnames_stop_text_=''
    _obj_opts_apps_isnotnames_stop_flag_=false
    _obj_opts_apps_isnotnames_stop_changes_flag_=true
    _obj_opts_apps_isnotnames_stop_enable_=false
    }
Opts.Apps.IsNotNames.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_changes_flag_=true
    }
Opts.Apps.IsNotNames.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotnames_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_stop_flag_=true
    [[ $_obj_opts_apps_isnotnames_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_stop_flag_
    }
Opts.Apps.IsNotNames.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_stop_text_"
    fi
    }
Opts.Apps.IsNotNames.Stop.Init

Opts.Apps.IsNames.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnames_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_flag_=false
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_uninstall_flag_
    }
Opts.Apps.IsNames.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnames_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_enable_=false
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_uninstall_enable_
    }
Opts.Apps.IsNames.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_changes_flag_=false
    }
Opts.Apps.IsNames.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnames_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_enable_=true
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_uninstall_enable_
    }
Opts.Apps.IsNames.Uninstall.Init()
    {
    _obj_opts_apps_isnames_uninstall_text_=''
    _obj_opts_apps_isnames_uninstall_flag_=false
    _obj_opts_apps_isnames_uninstall_changes_flag_=true
    _obj_opts_apps_isnames_uninstall_enable_=false
    }
Opts.Apps.IsNames.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnames_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnames_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_changes_flag_=true
    }
Opts.Apps.IsNames.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnames_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_uninstall_flag_=true
    [[ $_obj_opts_apps_isnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_uninstall_flag_
    }
Opts.Apps.IsNames.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_uninstall_text_"
    fi
    }
Opts.Apps.IsNames.Uninstall.Init

Opts.Apps.IsNotNames.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_uninstall_flag_
    }
Opts.Apps.IsNotNames.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_uninstall_enable_
    }
Opts.Apps.IsNotNames.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotNames.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_uninstall_enable_
    }
Opts.Apps.IsNotNames.Uninstall.Init()
    {
    _obj_opts_apps_isnotnames_uninstall_text_=''
    _obj_opts_apps_isnotnames_uninstall_flag_=false
    _obj_opts_apps_isnotnames_uninstall_changes_flag_=true
    _obj_opts_apps_isnotnames_uninstall_enable_=false
    }
Opts.Apps.IsNotNames.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotNames.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotnames_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotnames_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_uninstall_flag_
    }
Opts.Apps.IsNotNames.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_uninstall_text_"
    fi
    }
Opts.Apps.IsNotNames.Uninstall.Init

Opts.Apps.IsNames.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnames_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_flag_=false
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_upgrade_flag_
    }
Opts.Apps.IsNames.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnames_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_enable_=false
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_upgrade_enable_
    }
Opts.Apps.IsNames.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_changes_flag_=false
    }
Opts.Apps.IsNames.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnames_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_enable_=true
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_upgrade_enable_
    }
Opts.Apps.IsNames.Upgrade.Init()
    {
    _obj_opts_apps_isnames_upgrade_text_=''
    _obj_opts_apps_isnames_upgrade_flag_=false
    _obj_opts_apps_isnames_upgrade_changes_flag_=true
    _obj_opts_apps_isnames_upgrade_enable_=false
    }
Opts.Apps.IsNames.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnames_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNames.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnames_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNames.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnames_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNames.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnames_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNames.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_changes_flag_=true
    }
Opts.Apps.IsNames.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnames_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnames_upgrade_flag_=true
    [[ $_obj_opts_apps_isnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnames_upgrade_flag_
    }
Opts.Apps.IsNames.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnames_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnames_upgrade_text_"
    fi
    }
Opts.Apps.IsNames.Upgrade.Init

Opts.Apps.IsNotNames.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_upgrade_flag_
    }
Opts.Apps.IsNotNames.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_upgrade_enable_
    }
Opts.Apps.IsNotNames.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotNames.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_upgrade_enable_
    }
Opts.Apps.IsNotNames.Upgrade.Init()
    {
    _obj_opts_apps_isnotnames_upgrade_text_=''
    _obj_opts_apps_isnotnames_upgrade_flag_=false
    _obj_opts_apps_isnotnames_upgrade_changes_flag_=true
    _obj_opts_apps_isnotnames_upgrade_enable_=false
    }
Opts.Apps.IsNotNames.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotNames.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotNames.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotNames.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotnames_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotnames_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotnames_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotnames_upgrade_flag_
    }
Opts.Apps.IsNotNames.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotnames_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotnames_upgrade_text_"
    fi
    }
Opts.Apps.IsNotNames.Upgrade.Init

Opts.Apps.List.Standalone.Clear()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_flag_=false
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_flag_
    }
Opts.Apps.List.Standalone.Disable()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_enable_=false
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_enable_
    }
Opts.Apps.List.Standalone.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_standalone_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_standalone_changes_flag_=false
    }
Opts.Apps.List.Standalone.Enable()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_enable_=true
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_enable_
    }
Opts.Apps.List.Standalone.Init()
    {
    _obj_opts_apps_list_standalone_text_=''
    _obj_opts_apps_list_standalone_flag_=false
    _obj_opts_apps_list_standalone_changes_flag_=true
    _obj_opts_apps_list_standalone_enable_=false
    }
Opts.Apps.List.Standalone.IsDisabled()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ != 'true' ]]
    }
Opts.Apps.List.Standalone.IsEnabled()
    {
    [[ $_obj_opts_apps_list_standalone_enable_ = 'true' ]]
    }
Opts.Apps.List.Standalone.IsNot()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ != 'true' ]]
    }
Opts.Apps.List.Standalone.IsSet()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ = 'true' ]]
    }
Opts.Apps.List.Standalone.LogChanges()
    {
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_changes_flag_=true
    }
Opts.Apps.List.Standalone.Set()
    {
    [[ $_obj_opts_apps_list_standalone_flag_ = 'true' ]] && return
    _obj_opts_apps_list_standalone_flag_=true
    [[ $_obj_opts_apps_list_standalone_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_standalone_flag_
    }
Opts.Apps.List.Standalone.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_standalone_text_=$2
    else
        echo -n "$_obj_opts_apps_list_standalone_text_"
    fi
    }
Opts.Apps.List.Standalone.Init

Opts.Apps.IsStandalone.Backup.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_flag_=false
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_backup_flag_
    }
Opts.Apps.IsStandalone.Backup.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_enable_=false
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_backup_enable_
    }
Opts.Apps.IsStandalone.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_changes_flag_=false
    }
Opts.Apps.IsStandalone.Backup.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_enable_=true
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_backup_enable_
    }
Opts.Apps.IsStandalone.Backup.Init()
    {
    _obj_opts_apps_isstandalone_backup_text_=''
    _obj_opts_apps_isstandalone_backup_flag_=false
    _obj_opts_apps_isstandalone_backup_changes_flag_=true
    _obj_opts_apps_isstandalone_backup_enable_=false
    }
Opts.Apps.IsStandalone.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_changes_flag_=true
    }
Opts.Apps.IsStandalone.Backup.Set()
    {
    [[ $_obj_opts_apps_isstandalone_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_backup_flag_=true
    [[ $_obj_opts_apps_isstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_backup_flag_
    }
Opts.Apps.IsStandalone.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_backup_text_"
    fi
    }
Opts.Apps.IsStandalone.Backup.Init

Opts.Apps.IsNotStandalone.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_backup_flag_
    }
Opts.Apps.IsNotStandalone.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_backup_enable_
    }
Opts.Apps.IsNotStandalone.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_backup_enable_
    }
Opts.Apps.IsNotStandalone.Backup.Init()
    {
    _obj_opts_apps_isnotstandalone_backup_text_=''
    _obj_opts_apps_isnotstandalone_backup_flag_=false
    _obj_opts_apps_isnotstandalone_backup_changes_flag_=true
    _obj_opts_apps_isnotstandalone_backup_enable_=false
    }
Opts.Apps.IsNotStandalone.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_backup_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_backup_flag_
    }
Opts.Apps.IsNotStandalone.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_backup_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Backup.Init

Opts.Apps.IsStandalone.Download.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_download_flag_=false
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_download_flag_
    }
Opts.Apps.IsStandalone.Download.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_download_enable_=false
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_download_enable_
    }
Opts.Apps.IsStandalone.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_download_changes_flag_=false
    }
Opts.Apps.IsStandalone.Download.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_download_enable_=true
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_download_enable_
    }
Opts.Apps.IsStandalone.Download.Init()
    {
    _obj_opts_apps_isstandalone_download_text_=''
    _obj_opts_apps_isstandalone_download_flag_=false
    _obj_opts_apps_isstandalone_download_changes_flag_=true
    _obj_opts_apps_isstandalone_download_enable_=false
    }
Opts.Apps.IsStandalone.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_download_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_download_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Download.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_download_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Download.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_download_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_download_changes_flag_=true
    }
Opts.Apps.IsStandalone.Download.Set()
    {
    [[ $_obj_opts_apps_isstandalone_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_download_flag_=true
    [[ $_obj_opts_apps_isstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_download_flag_
    }
Opts.Apps.IsStandalone.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_download_text_"
    fi
    }
Opts.Apps.IsStandalone.Download.Init

Opts.Apps.IsNotStandalone.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_download_flag_
    }
Opts.Apps.IsNotStandalone.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_download_enable_
    }
Opts.Apps.IsNotStandalone.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_download_enable_
    }
Opts.Apps.IsNotStandalone.Download.Init()
    {
    _obj_opts_apps_isnotstandalone_download_text_=''
    _obj_opts_apps_isnotstandalone_download_flag_=false
    _obj_opts_apps_isnotstandalone_download_changes_flag_=true
    _obj_opts_apps_isnotstandalone_download_enable_=false
    }
Opts.Apps.IsNotStandalone.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Download.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_download_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_download_flag_
    }
Opts.Apps.IsNotStandalone.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_download_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Download.Init

Opts.Apps.IsStandalone.Install.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_install_flag_=false
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_install_flag_
    }
Opts.Apps.IsStandalone.Install.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_install_enable_=false
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_install_enable_
    }
Opts.Apps.IsStandalone.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_install_changes_flag_=false
    }
Opts.Apps.IsStandalone.Install.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_install_enable_=true
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_install_enable_
    }
Opts.Apps.IsStandalone.Install.Init()
    {
    _obj_opts_apps_isstandalone_install_text_=''
    _obj_opts_apps_isstandalone_install_flag_=false
    _obj_opts_apps_isstandalone_install_changes_flag_=true
    _obj_opts_apps_isstandalone_install_enable_=false
    }
Opts.Apps.IsStandalone.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_install_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_install_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Install.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_install_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Install.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_install_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_install_changes_flag_=true
    }
Opts.Apps.IsStandalone.Install.Set()
    {
    [[ $_obj_opts_apps_isstandalone_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_install_flag_=true
    [[ $_obj_opts_apps_isstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_install_flag_
    }
Opts.Apps.IsStandalone.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_install_text_"
    fi
    }
Opts.Apps.IsStandalone.Install.Init

Opts.Apps.IsNotStandalone.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_install_flag_
    }
Opts.Apps.IsNotStandalone.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_install_enable_
    }
Opts.Apps.IsNotStandalone.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_install_enable_
    }
Opts.Apps.IsNotStandalone.Install.Init()
    {
    _obj_opts_apps_isnotstandalone_install_text_=''
    _obj_opts_apps_isnotstandalone_install_flag_=false
    _obj_opts_apps_isnotstandalone_install_changes_flag_=true
    _obj_opts_apps_isnotstandalone_install_enable_=false
    }
Opts.Apps.IsNotStandalone.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Install.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_install_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_install_flag_
    }
Opts.Apps.IsNotStandalone.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_install_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Install.Init

Opts.Apps.IsStandalone.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_flag_=false
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_rebuild_flag_
    }
Opts.Apps.IsStandalone.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_enable_=false
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_rebuild_enable_
    }
Opts.Apps.IsStandalone.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_changes_flag_=false
    }
Opts.Apps.IsStandalone.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_enable_=true
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_rebuild_enable_
    }
Opts.Apps.IsStandalone.Rebuild.Init()
    {
    _obj_opts_apps_isstandalone_rebuild_text_=''
    _obj_opts_apps_isstandalone_rebuild_flag_=false
    _obj_opts_apps_isstandalone_rebuild_changes_flag_=true
    _obj_opts_apps_isstandalone_rebuild_enable_=false
    }
Opts.Apps.IsStandalone.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_changes_flag_=true
    }
Opts.Apps.IsStandalone.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isstandalone_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_rebuild_flag_=true
    [[ $_obj_opts_apps_isstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_rebuild_flag_
    }
Opts.Apps.IsStandalone.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_rebuild_text_"
    fi
    }
Opts.Apps.IsStandalone.Rebuild.Init

Opts.Apps.IsNotStandalone.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_rebuild_flag_
    }
Opts.Apps.IsNotStandalone.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_rebuild_enable_
    }
Opts.Apps.IsNotStandalone.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_rebuild_enable_
    }
Opts.Apps.IsNotStandalone.Rebuild.Init()
    {
    _obj_opts_apps_isnotstandalone_rebuild_text_=''
    _obj_opts_apps_isnotstandalone_rebuild_flag_=false
    _obj_opts_apps_isnotstandalone_rebuild_changes_flag_=true
    _obj_opts_apps_isnotstandalone_rebuild_enable_=false
    }
Opts.Apps.IsNotStandalone.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_rebuild_flag_
    }
Opts.Apps.IsNotStandalone.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_rebuild_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Rebuild.Init

Opts.Apps.IsStandalone.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_flag_=false
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_reinstall_flag_
    }
Opts.Apps.IsStandalone.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_enable_=false
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_reinstall_enable_
    }
Opts.Apps.IsStandalone.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_changes_flag_=false
    }
Opts.Apps.IsStandalone.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_enable_=true
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_reinstall_enable_
    }
Opts.Apps.IsStandalone.Reinstall.Init()
    {
    _obj_opts_apps_isstandalone_reinstall_text_=''
    _obj_opts_apps_isstandalone_reinstall_flag_=false
    _obj_opts_apps_isstandalone_reinstall_changes_flag_=true
    _obj_opts_apps_isstandalone_reinstall_enable_=false
    }
Opts.Apps.IsStandalone.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_changes_flag_=true
    }
Opts.Apps.IsStandalone.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isstandalone_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_reinstall_flag_=true
    [[ $_obj_opts_apps_isstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_reinstall_flag_
    }
Opts.Apps.IsStandalone.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_reinstall_text_"
    fi
    }
Opts.Apps.IsStandalone.Reinstall.Init

Opts.Apps.IsNotStandalone.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_reinstall_flag_
    }
Opts.Apps.IsNotStandalone.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_reinstall_enable_
    }
Opts.Apps.IsNotStandalone.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_reinstall_enable_
    }
Opts.Apps.IsNotStandalone.Reinstall.Init()
    {
    _obj_opts_apps_isnotstandalone_reinstall_text_=''
    _obj_opts_apps_isnotstandalone_reinstall_flag_=false
    _obj_opts_apps_isnotstandalone_reinstall_changes_flag_=true
    _obj_opts_apps_isnotstandalone_reinstall_enable_=false
    }
Opts.Apps.IsNotStandalone.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_reinstall_flag_
    }
Opts.Apps.IsNotStandalone.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_reinstall_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Reinstall.Init

Opts.Apps.IsStandalone.Restore.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_flag_=false
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restore_flag_
    }
Opts.Apps.IsStandalone.Restore.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_enable_=false
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restore_enable_
    }
Opts.Apps.IsStandalone.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_changes_flag_=false
    }
Opts.Apps.IsStandalone.Restore.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_enable_=true
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restore_enable_
    }
Opts.Apps.IsStandalone.Restore.Init()
    {
    _obj_opts_apps_isstandalone_restore_text_=''
    _obj_opts_apps_isstandalone_restore_flag_=false
    _obj_opts_apps_isstandalone_restore_changes_flag_=true
    _obj_opts_apps_isstandalone_restore_enable_=false
    }
Opts.Apps.IsStandalone.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_changes_flag_=true
    }
Opts.Apps.IsStandalone.Restore.Set()
    {
    [[ $_obj_opts_apps_isstandalone_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restore_flag_=true
    [[ $_obj_opts_apps_isstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restore_flag_
    }
Opts.Apps.IsStandalone.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_restore_text_"
    fi
    }
Opts.Apps.IsStandalone.Restore.Init

Opts.Apps.IsNotStandalone.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restore_flag_
    }
Opts.Apps.IsNotStandalone.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restore_enable_
    }
Opts.Apps.IsNotStandalone.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restore_enable_
    }
Opts.Apps.IsNotStandalone.Restore.Init()
    {
    _obj_opts_apps_isnotstandalone_restore_text_=''
    _obj_opts_apps_isnotstandalone_restore_flag_=false
    _obj_opts_apps_isnotstandalone_restore_changes_flag_=true
    _obj_opts_apps_isnotstandalone_restore_enable_=false
    }
Opts.Apps.IsNotStandalone.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restore_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restore_flag_
    }
Opts.Apps.IsNotStandalone.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_restore_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Restore.Init

Opts.Apps.IsStandalone.Restart.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_flag_=false
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restart_flag_
    }
Opts.Apps.IsStandalone.Restart.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_enable_=false
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restart_enable_
    }
Opts.Apps.IsStandalone.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_changes_flag_=false
    }
Opts.Apps.IsStandalone.Restart.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_enable_=true
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restart_enable_
    }
Opts.Apps.IsStandalone.Restart.Init()
    {
    _obj_opts_apps_isstandalone_restart_text_=''
    _obj_opts_apps_isstandalone_restart_flag_=false
    _obj_opts_apps_isstandalone_restart_changes_flag_=true
    _obj_opts_apps_isstandalone_restart_enable_=false
    }
Opts.Apps.IsStandalone.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_changes_flag_=true
    }
Opts.Apps.IsStandalone.Restart.Set()
    {
    [[ $_obj_opts_apps_isstandalone_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_restart_flag_=true
    [[ $_obj_opts_apps_isstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_restart_flag_
    }
Opts.Apps.IsStandalone.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_restart_text_"
    fi
    }
Opts.Apps.IsStandalone.Restart.Init

Opts.Apps.IsNotStandalone.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restart_flag_
    }
Opts.Apps.IsNotStandalone.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restart_enable_
    }
Opts.Apps.IsNotStandalone.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restart_enable_
    }
Opts.Apps.IsNotStandalone.Restart.Init()
    {
    _obj_opts_apps_isnotstandalone_restart_text_=''
    _obj_opts_apps_isnotstandalone_restart_flag_=false
    _obj_opts_apps_isnotstandalone_restart_changes_flag_=true
    _obj_opts_apps_isnotstandalone_restart_enable_=false
    }
Opts.Apps.IsNotStandalone.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_restart_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_restart_flag_
    }
Opts.Apps.IsNotStandalone.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_restart_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Restart.Init

Opts.Apps.IsStandalone.Start.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_start_flag_=false
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_start_flag_
    }
Opts.Apps.IsStandalone.Start.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_start_enable_=false
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_start_enable_
    }
Opts.Apps.IsStandalone.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_start_changes_flag_=false
    }
Opts.Apps.IsStandalone.Start.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_start_enable_=true
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_start_enable_
    }
Opts.Apps.IsStandalone.Start.Init()
    {
    _obj_opts_apps_isstandalone_start_text_=''
    _obj_opts_apps_isstandalone_start_flag_=false
    _obj_opts_apps_isstandalone_start_changes_flag_=true
    _obj_opts_apps_isstandalone_start_enable_=false
    }
Opts.Apps.IsStandalone.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_start_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_start_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Start.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_start_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Start.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_start_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_start_changes_flag_=true
    }
Opts.Apps.IsStandalone.Start.Set()
    {
    [[ $_obj_opts_apps_isstandalone_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_start_flag_=true
    [[ $_obj_opts_apps_isstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_start_flag_
    }
Opts.Apps.IsStandalone.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_start_text_"
    fi
    }
Opts.Apps.IsStandalone.Start.Init

Opts.Apps.IsNotStandalone.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_start_flag_
    }
Opts.Apps.IsNotStandalone.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_start_enable_
    }
Opts.Apps.IsNotStandalone.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_start_enable_
    }
Opts.Apps.IsNotStandalone.Start.Init()
    {
    _obj_opts_apps_isnotstandalone_start_text_=''
    _obj_opts_apps_isnotstandalone_start_flag_=false
    _obj_opts_apps_isnotstandalone_start_changes_flag_=true
    _obj_opts_apps_isnotstandalone_start_enable_=false
    }
Opts.Apps.IsNotStandalone.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Start.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_start_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_start_flag_
    }
Opts.Apps.IsNotStandalone.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_start_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Start.Init

Opts.Apps.IsStandalone.Stop.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_flag_=false
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_stop_flag_
    }
Opts.Apps.IsStandalone.Stop.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_enable_=false
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_stop_enable_
    }
Opts.Apps.IsStandalone.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_changes_flag_=false
    }
Opts.Apps.IsStandalone.Stop.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_enable_=true
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_stop_enable_
    }
Opts.Apps.IsStandalone.Stop.Init()
    {
    _obj_opts_apps_isstandalone_stop_text_=''
    _obj_opts_apps_isstandalone_stop_flag_=false
    _obj_opts_apps_isstandalone_stop_changes_flag_=true
    _obj_opts_apps_isstandalone_stop_enable_=false
    }
Opts.Apps.IsStandalone.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_changes_flag_=true
    }
Opts.Apps.IsStandalone.Stop.Set()
    {
    [[ $_obj_opts_apps_isstandalone_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_stop_flag_=true
    [[ $_obj_opts_apps_isstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_stop_flag_
    }
Opts.Apps.IsStandalone.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_stop_text_"
    fi
    }
Opts.Apps.IsStandalone.Stop.Init

Opts.Apps.IsNotStandalone.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_stop_flag_
    }
Opts.Apps.IsNotStandalone.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_stop_enable_
    }
Opts.Apps.IsNotStandalone.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_stop_enable_
    }
Opts.Apps.IsNotStandalone.Stop.Init()
    {
    _obj_opts_apps_isnotstandalone_stop_text_=''
    _obj_opts_apps_isnotstandalone_stop_flag_=false
    _obj_opts_apps_isnotstandalone_stop_changes_flag_=true
    _obj_opts_apps_isnotstandalone_stop_enable_=false
    }
Opts.Apps.IsNotStandalone.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_stop_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_stop_flag_
    }
Opts.Apps.IsNotStandalone.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_stop_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Stop.Init

Opts.Apps.IsStandalone.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_flag_=false
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_uninstall_flag_
    }
Opts.Apps.IsStandalone.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_enable_=false
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_uninstall_enable_
    }
Opts.Apps.IsStandalone.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_changes_flag_=false
    }
Opts.Apps.IsStandalone.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_enable_=true
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_uninstall_enable_
    }
Opts.Apps.IsStandalone.Uninstall.Init()
    {
    _obj_opts_apps_isstandalone_uninstall_text_=''
    _obj_opts_apps_isstandalone_uninstall_flag_=false
    _obj_opts_apps_isstandalone_uninstall_changes_flag_=true
    _obj_opts_apps_isstandalone_uninstall_enable_=false
    }
Opts.Apps.IsStandalone.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_changes_flag_=true
    }
Opts.Apps.IsStandalone.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isstandalone_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_uninstall_flag_=true
    [[ $_obj_opts_apps_isstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_uninstall_flag_
    }
Opts.Apps.IsStandalone.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_uninstall_text_"
    fi
    }
Opts.Apps.IsStandalone.Uninstall.Init

Opts.Apps.IsNotStandalone.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_uninstall_flag_
    }
Opts.Apps.IsNotStandalone.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_uninstall_enable_
    }
Opts.Apps.IsNotStandalone.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_uninstall_enable_
    }
Opts.Apps.IsNotStandalone.Uninstall.Init()
    {
    _obj_opts_apps_isnotstandalone_uninstall_text_=''
    _obj_opts_apps_isnotstandalone_uninstall_flag_=false
    _obj_opts_apps_isnotstandalone_uninstall_changes_flag_=true
    _obj_opts_apps_isnotstandalone_uninstall_enable_=false
    }
Opts.Apps.IsNotStandalone.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_uninstall_flag_
    }
Opts.Apps.IsNotStandalone.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_uninstall_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Uninstall.Init

Opts.Apps.IsStandalone.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_flag_=false
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_upgrade_flag_
    }
Opts.Apps.IsStandalone.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_enable_=false
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_upgrade_enable_
    }
Opts.Apps.IsStandalone.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_changes_flag_=false
    }
Opts.Apps.IsStandalone.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_enable_=true
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_upgrade_enable_
    }
Opts.Apps.IsStandalone.Upgrade.Init()
    {
    _obj_opts_apps_isstandalone_upgrade_text_=''
    _obj_opts_apps_isstandalone_upgrade_flag_=false
    _obj_opts_apps_isstandalone_upgrade_changes_flag_=true
    _obj_opts_apps_isstandalone_upgrade_enable_=false
    }
Opts.Apps.IsStandalone.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsStandalone.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsStandalone.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_changes_flag_=true
    }
Opts.Apps.IsStandalone.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isstandalone_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isstandalone_upgrade_flag_=true
    [[ $_obj_opts_apps_isstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstandalone_upgrade_flag_
    }
Opts.Apps.IsStandalone.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstandalone_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isstandalone_upgrade_text_"
    fi
    }
Opts.Apps.IsStandalone.Upgrade.Init

Opts.Apps.IsNotStandalone.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_upgrade_flag_
    }
Opts.Apps.IsNotStandalone.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_upgrade_enable_
    }
Opts.Apps.IsNotStandalone.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotStandalone.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_upgrade_enable_
    }
Opts.Apps.IsNotStandalone.Upgrade.Init()
    {
    _obj_opts_apps_isnotstandalone_upgrade_text_=''
    _obj_opts_apps_isnotstandalone_upgrade_flag_=false
    _obj_opts_apps_isnotstandalone_upgrade_changes_flag_=true
    _obj_opts_apps_isnotstandalone_upgrade_enable_=false
    }
Opts.Apps.IsNotStandalone.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStandalone.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStandalone.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotStandalone.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotstandalone_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstandalone_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotstandalone_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstandalone_upgrade_flag_
    }
Opts.Apps.IsNotStandalone.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstandalone_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstandalone_upgrade_text_"
    fi
    }
Opts.Apps.IsNotStandalone.Upgrade.Init

Opts.Apps.List.Starting.Clear()
    {
    [[ $_obj_opts_apps_list_starting_flag_ != 'true' ]] && return
    _obj_opts_apps_list_starting_flag_=false
    [[ $_obj_opts_apps_list_starting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_starting_flag_
    }
Opts.Apps.List.Starting.Disable()
    {
    [[ $_obj_opts_apps_list_starting_enable_ != 'true' ]] && return
    _obj_opts_apps_list_starting_enable_=false
    [[ $_obj_opts_apps_list_starting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_starting_enable_
    }
Opts.Apps.List.Starting.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_starting_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_starting_changes_flag_=false
    }
Opts.Apps.List.Starting.Enable()
    {
    [[ $_obj_opts_apps_list_starting_enable_ = 'true' ]] && return
    _obj_opts_apps_list_starting_enable_=true
    [[ $_obj_opts_apps_list_starting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_starting_enable_
    }
Opts.Apps.List.Starting.Init()
    {
    _obj_opts_apps_list_starting_text_=''
    _obj_opts_apps_list_starting_flag_=false
    _obj_opts_apps_list_starting_changes_flag_=true
    _obj_opts_apps_list_starting_enable_=false
    }
Opts.Apps.List.Starting.IsDisabled()
    {
    [[ $_obj_opts_apps_list_starting_enable_ != 'true' ]]
    }
Opts.Apps.List.Starting.IsEnabled()
    {
    [[ $_obj_opts_apps_list_starting_enable_ = 'true' ]]
    }
Opts.Apps.List.Starting.IsNot()
    {
    [[ $_obj_opts_apps_list_starting_flag_ != 'true' ]]
    }
Opts.Apps.List.Starting.IsSet()
    {
    [[ $_obj_opts_apps_list_starting_flag_ = 'true' ]]
    }
Opts.Apps.List.Starting.LogChanges()
    {
    [[ $_obj_opts_apps_list_starting_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_starting_changes_flag_=true
    }
Opts.Apps.List.Starting.Set()
    {
    [[ $_obj_opts_apps_list_starting_flag_ = 'true' ]] && return
    _obj_opts_apps_list_starting_flag_=true
    [[ $_obj_opts_apps_list_starting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_starting_flag_
    }
Opts.Apps.List.Starting.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_starting_text_=$2
    else
        echo -n "$_obj_opts_apps_list_starting_text_"
    fi
    }
Opts.Apps.List.Starting.Init

Opts.Apps.IsStarting.Backup.Clear()
    {
    [[ $_obj_opts_apps_isstarting_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_backup_flag_=false
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_backup_flag_
    }
Opts.Apps.IsStarting.Backup.Disable()
    {
    [[ $_obj_opts_apps_isstarting_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_backup_enable_=false
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_backup_enable_
    }
Opts.Apps.IsStarting.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_backup_changes_flag_=false
    }
Opts.Apps.IsStarting.Backup.Enable()
    {
    [[ $_obj_opts_apps_isstarting_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_backup_enable_=true
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_backup_enable_
    }
Opts.Apps.IsStarting.Backup.Init()
    {
    _obj_opts_apps_isstarting_backup_text_=''
    _obj_opts_apps_isstarting_backup_flag_=false
    _obj_opts_apps_isstarting_backup_changes_flag_=true
    _obj_opts_apps_isstarting_backup_enable_=false
    }
Opts.Apps.IsStarting.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_backup_changes_flag_=true
    }
Opts.Apps.IsStarting.Backup.Set()
    {
    [[ $_obj_opts_apps_isstarting_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_backup_flag_=true
    [[ $_obj_opts_apps_isstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_backup_flag_
    }
Opts.Apps.IsStarting.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_backup_text_"
    fi
    }
Opts.Apps.IsStarting.Backup.Init

Opts.Apps.IsNotStarting.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_flag_=false
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_backup_flag_
    }
Opts.Apps.IsNotStarting.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_enable_=false
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_backup_enable_
    }
Opts.Apps.IsNotStarting.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_enable_=true
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_backup_enable_
    }
Opts.Apps.IsNotStarting.Backup.Init()
    {
    _obj_opts_apps_isnotstarting_backup_text_=''
    _obj_opts_apps_isnotstarting_backup_flag_=false
    _obj_opts_apps_isnotstarting_backup_changes_flag_=true
    _obj_opts_apps_isnotstarting_backup_enable_=false
    }
Opts.Apps.IsNotStarting.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_backup_flag_=true
    [[ $_obj_opts_apps_isnotstarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_backup_flag_
    }
Opts.Apps.IsNotStarting.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_backup_text_"
    fi
    }
Opts.Apps.IsNotStarting.Backup.Init

Opts.Apps.IsStarting.Download.Clear()
    {
    [[ $_obj_opts_apps_isstarting_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_download_flag_=false
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_download_flag_
    }
Opts.Apps.IsStarting.Download.Disable()
    {
    [[ $_obj_opts_apps_isstarting_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_download_enable_=false
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_download_enable_
    }
Opts.Apps.IsStarting.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_download_changes_flag_=false
    }
Opts.Apps.IsStarting.Download.Enable()
    {
    [[ $_obj_opts_apps_isstarting_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_download_enable_=true
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_download_enable_
    }
Opts.Apps.IsStarting.Download.Init()
    {
    _obj_opts_apps_isstarting_download_text_=''
    _obj_opts_apps_isstarting_download_flag_=false
    _obj_opts_apps_isstarting_download_changes_flag_=true
    _obj_opts_apps_isstarting_download_enable_=false
    }
Opts.Apps.IsStarting.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_download_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_download_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Download.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_download_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Download.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_download_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_download_changes_flag_=true
    }
Opts.Apps.IsStarting.Download.Set()
    {
    [[ $_obj_opts_apps_isstarting_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_download_flag_=true
    [[ $_obj_opts_apps_isstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_download_flag_
    }
Opts.Apps.IsStarting.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_download_text_"
    fi
    }
Opts.Apps.IsStarting.Download.Init

Opts.Apps.IsNotStarting.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_flag_=false
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_download_flag_
    }
Opts.Apps.IsNotStarting.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_enable_=false
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_download_enable_
    }
Opts.Apps.IsNotStarting.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_enable_=true
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_download_enable_
    }
Opts.Apps.IsNotStarting.Download.Init()
    {
    _obj_opts_apps_isnotstarting_download_text_=''
    _obj_opts_apps_isnotstarting_download_flag_=false
    _obj_opts_apps_isnotstarting_download_changes_flag_=true
    _obj_opts_apps_isnotstarting_download_enable_=false
    }
Opts.Apps.IsNotStarting.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Download.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_download_flag_=true
    [[ $_obj_opts_apps_isnotstarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_download_flag_
    }
Opts.Apps.IsNotStarting.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_download_text_"
    fi
    }
Opts.Apps.IsNotStarting.Download.Init

Opts.Apps.IsStarting.Install.Clear()
    {
    [[ $_obj_opts_apps_isstarting_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_install_flag_=false
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_install_flag_
    }
Opts.Apps.IsStarting.Install.Disable()
    {
    [[ $_obj_opts_apps_isstarting_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_install_enable_=false
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_install_enable_
    }
Opts.Apps.IsStarting.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_install_changes_flag_=false
    }
Opts.Apps.IsStarting.Install.Enable()
    {
    [[ $_obj_opts_apps_isstarting_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_install_enable_=true
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_install_enable_
    }
Opts.Apps.IsStarting.Install.Init()
    {
    _obj_opts_apps_isstarting_install_text_=''
    _obj_opts_apps_isstarting_install_flag_=false
    _obj_opts_apps_isstarting_install_changes_flag_=true
    _obj_opts_apps_isstarting_install_enable_=false
    }
Opts.Apps.IsStarting.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_install_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_install_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Install.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_install_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Install.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_install_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_install_changes_flag_=true
    }
Opts.Apps.IsStarting.Install.Set()
    {
    [[ $_obj_opts_apps_isstarting_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_install_flag_=true
    [[ $_obj_opts_apps_isstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_install_flag_
    }
Opts.Apps.IsStarting.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_install_text_"
    fi
    }
Opts.Apps.IsStarting.Install.Init

Opts.Apps.IsNotStarting.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_flag_=false
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_install_flag_
    }
Opts.Apps.IsNotStarting.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_enable_=false
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_install_enable_
    }
Opts.Apps.IsNotStarting.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_enable_=true
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_install_enable_
    }
Opts.Apps.IsNotStarting.Install.Init()
    {
    _obj_opts_apps_isnotstarting_install_text_=''
    _obj_opts_apps_isnotstarting_install_flag_=false
    _obj_opts_apps_isnotstarting_install_changes_flag_=true
    _obj_opts_apps_isnotstarting_install_enable_=false
    }
Opts.Apps.IsNotStarting.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Install.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_install_flag_=true
    [[ $_obj_opts_apps_isnotstarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_install_flag_
    }
Opts.Apps.IsNotStarting.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_install_text_"
    fi
    }
Opts.Apps.IsNotStarting.Install.Init

Opts.Apps.IsStarting.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_flag_=false
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_rebuild_flag_
    }
Opts.Apps.IsStarting.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_enable_=false
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_rebuild_enable_
    }
Opts.Apps.IsStarting.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_changes_flag_=false
    }
Opts.Apps.IsStarting.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_enable_=true
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_rebuild_enable_
    }
Opts.Apps.IsStarting.Rebuild.Init()
    {
    _obj_opts_apps_isstarting_rebuild_text_=''
    _obj_opts_apps_isstarting_rebuild_flag_=false
    _obj_opts_apps_isstarting_rebuild_changes_flag_=true
    _obj_opts_apps_isstarting_rebuild_enable_=false
    }
Opts.Apps.IsStarting.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_changes_flag_=true
    }
Opts.Apps.IsStarting.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isstarting_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_rebuild_flag_=true
    [[ $_obj_opts_apps_isstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_rebuild_flag_
    }
Opts.Apps.IsStarting.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_rebuild_text_"
    fi
    }
Opts.Apps.IsStarting.Rebuild.Init

Opts.Apps.IsNotStarting.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_rebuild_flag_
    }
Opts.Apps.IsNotStarting.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_rebuild_enable_
    }
Opts.Apps.IsNotStarting.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_rebuild_enable_
    }
Opts.Apps.IsNotStarting.Rebuild.Init()
    {
    _obj_opts_apps_isnotstarting_rebuild_text_=''
    _obj_opts_apps_isnotstarting_rebuild_flag_=false
    _obj_opts_apps_isnotstarting_rebuild_changes_flag_=true
    _obj_opts_apps_isnotstarting_rebuild_enable_=false
    }
Opts.Apps.IsNotStarting.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotstarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_rebuild_flag_
    }
Opts.Apps.IsNotStarting.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_rebuild_text_"
    fi
    }
Opts.Apps.IsNotStarting.Rebuild.Init

Opts.Apps.IsStarting.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_flag_=false
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_reinstall_flag_
    }
Opts.Apps.IsStarting.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_enable_=false
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_reinstall_enable_
    }
Opts.Apps.IsStarting.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_changes_flag_=false
    }
Opts.Apps.IsStarting.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_enable_=true
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_reinstall_enable_
    }
Opts.Apps.IsStarting.Reinstall.Init()
    {
    _obj_opts_apps_isstarting_reinstall_text_=''
    _obj_opts_apps_isstarting_reinstall_flag_=false
    _obj_opts_apps_isstarting_reinstall_changes_flag_=true
    _obj_opts_apps_isstarting_reinstall_enable_=false
    }
Opts.Apps.IsStarting.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_changes_flag_=true
    }
Opts.Apps.IsStarting.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isstarting_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_reinstall_flag_=true
    [[ $_obj_opts_apps_isstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_reinstall_flag_
    }
Opts.Apps.IsStarting.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_reinstall_text_"
    fi
    }
Opts.Apps.IsStarting.Reinstall.Init

Opts.Apps.IsNotStarting.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_reinstall_flag_
    }
Opts.Apps.IsNotStarting.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_reinstall_enable_
    }
Opts.Apps.IsNotStarting.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_reinstall_enable_
    }
Opts.Apps.IsNotStarting.Reinstall.Init()
    {
    _obj_opts_apps_isnotstarting_reinstall_text_=''
    _obj_opts_apps_isnotstarting_reinstall_flag_=false
    _obj_opts_apps_isnotstarting_reinstall_changes_flag_=true
    _obj_opts_apps_isnotstarting_reinstall_enable_=false
    }
Opts.Apps.IsNotStarting.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotstarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_reinstall_flag_
    }
Opts.Apps.IsNotStarting.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_reinstall_text_"
    fi
    }
Opts.Apps.IsNotStarting.Reinstall.Init

Opts.Apps.IsStarting.Restore.Clear()
    {
    [[ $_obj_opts_apps_isstarting_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restore_flag_=false
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restore_flag_
    }
Opts.Apps.IsStarting.Restore.Disable()
    {
    [[ $_obj_opts_apps_isstarting_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restore_enable_=false
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restore_enable_
    }
Opts.Apps.IsStarting.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restore_changes_flag_=false
    }
Opts.Apps.IsStarting.Restore.Enable()
    {
    [[ $_obj_opts_apps_isstarting_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restore_enable_=true
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restore_enable_
    }
Opts.Apps.IsStarting.Restore.Init()
    {
    _obj_opts_apps_isstarting_restore_text_=''
    _obj_opts_apps_isstarting_restore_flag_=false
    _obj_opts_apps_isstarting_restore_changes_flag_=true
    _obj_opts_apps_isstarting_restore_enable_=false
    }
Opts.Apps.IsStarting.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restore_changes_flag_=true
    }
Opts.Apps.IsStarting.Restore.Set()
    {
    [[ $_obj_opts_apps_isstarting_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restore_flag_=true
    [[ $_obj_opts_apps_isstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restore_flag_
    }
Opts.Apps.IsStarting.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_restore_text_"
    fi
    }
Opts.Apps.IsStarting.Restore.Init

Opts.Apps.IsNotStarting.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_flag_=false
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restore_flag_
    }
Opts.Apps.IsNotStarting.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_enable_=false
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restore_enable_
    }
Opts.Apps.IsNotStarting.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_enable_=true
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restore_enable_
    }
Opts.Apps.IsNotStarting.Restore.Init()
    {
    _obj_opts_apps_isnotstarting_restore_text_=''
    _obj_opts_apps_isnotstarting_restore_flag_=false
    _obj_opts_apps_isnotstarting_restore_changes_flag_=true
    _obj_opts_apps_isnotstarting_restore_enable_=false
    }
Opts.Apps.IsNotStarting.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restore_flag_=true
    [[ $_obj_opts_apps_isnotstarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restore_flag_
    }
Opts.Apps.IsNotStarting.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_restore_text_"
    fi
    }
Opts.Apps.IsNotStarting.Restore.Init

Opts.Apps.IsStarting.Restart.Clear()
    {
    [[ $_obj_opts_apps_isstarting_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restart_flag_=false
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restart_flag_
    }
Opts.Apps.IsStarting.Restart.Disable()
    {
    [[ $_obj_opts_apps_isstarting_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restart_enable_=false
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restart_enable_
    }
Opts.Apps.IsStarting.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_restart_changes_flag_=false
    }
Opts.Apps.IsStarting.Restart.Enable()
    {
    [[ $_obj_opts_apps_isstarting_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restart_enable_=true
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restart_enable_
    }
Opts.Apps.IsStarting.Restart.Init()
    {
    _obj_opts_apps_isstarting_restart_text_=''
    _obj_opts_apps_isstarting_restart_flag_=false
    _obj_opts_apps_isstarting_restart_changes_flag_=true
    _obj_opts_apps_isstarting_restart_enable_=false
    }
Opts.Apps.IsStarting.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restart_changes_flag_=true
    }
Opts.Apps.IsStarting.Restart.Set()
    {
    [[ $_obj_opts_apps_isstarting_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_restart_flag_=true
    [[ $_obj_opts_apps_isstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_restart_flag_
    }
Opts.Apps.IsStarting.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_restart_text_"
    fi
    }
Opts.Apps.IsStarting.Restart.Init

Opts.Apps.IsNotStarting.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_flag_=false
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restart_flag_
    }
Opts.Apps.IsNotStarting.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_enable_=false
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restart_enable_
    }
Opts.Apps.IsNotStarting.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_enable_=true
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restart_enable_
    }
Opts.Apps.IsNotStarting.Restart.Init()
    {
    _obj_opts_apps_isnotstarting_restart_text_=''
    _obj_opts_apps_isnotstarting_restart_flag_=false
    _obj_opts_apps_isnotstarting_restart_changes_flag_=true
    _obj_opts_apps_isnotstarting_restart_enable_=false
    }
Opts.Apps.IsNotStarting.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_restart_flag_=true
    [[ $_obj_opts_apps_isnotstarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_restart_flag_
    }
Opts.Apps.IsNotStarting.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_restart_text_"
    fi
    }
Opts.Apps.IsNotStarting.Restart.Init

Opts.Apps.IsStarting.Start.Clear()
    {
    [[ $_obj_opts_apps_isstarting_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_start_flag_=false
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_start_flag_
    }
Opts.Apps.IsStarting.Start.Disable()
    {
    [[ $_obj_opts_apps_isstarting_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_start_enable_=false
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_start_enable_
    }
Opts.Apps.IsStarting.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_start_changes_flag_=false
    }
Opts.Apps.IsStarting.Start.Enable()
    {
    [[ $_obj_opts_apps_isstarting_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_start_enable_=true
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_start_enable_
    }
Opts.Apps.IsStarting.Start.Init()
    {
    _obj_opts_apps_isstarting_start_text_=''
    _obj_opts_apps_isstarting_start_flag_=false
    _obj_opts_apps_isstarting_start_changes_flag_=true
    _obj_opts_apps_isstarting_start_enable_=false
    }
Opts.Apps.IsStarting.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_start_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_start_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Start.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_start_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Start.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_start_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_start_changes_flag_=true
    }
Opts.Apps.IsStarting.Start.Set()
    {
    [[ $_obj_opts_apps_isstarting_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_start_flag_=true
    [[ $_obj_opts_apps_isstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_start_flag_
    }
Opts.Apps.IsStarting.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_start_text_"
    fi
    }
Opts.Apps.IsStarting.Start.Init

Opts.Apps.IsNotStarting.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_flag_=false
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_start_flag_
    }
Opts.Apps.IsNotStarting.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_enable_=false
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_start_enable_
    }
Opts.Apps.IsNotStarting.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_enable_=true
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_start_enable_
    }
Opts.Apps.IsNotStarting.Start.Init()
    {
    _obj_opts_apps_isnotstarting_start_text_=''
    _obj_opts_apps_isnotstarting_start_flag_=false
    _obj_opts_apps_isnotstarting_start_changes_flag_=true
    _obj_opts_apps_isnotstarting_start_enable_=false
    }
Opts.Apps.IsNotStarting.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Start.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_start_flag_=true
    [[ $_obj_opts_apps_isnotstarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_start_flag_
    }
Opts.Apps.IsNotStarting.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_start_text_"
    fi
    }
Opts.Apps.IsNotStarting.Start.Init

Opts.Apps.IsStarting.Stop.Clear()
    {
    [[ $_obj_opts_apps_isstarting_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_stop_flag_=false
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_stop_flag_
    }
Opts.Apps.IsStarting.Stop.Disable()
    {
    [[ $_obj_opts_apps_isstarting_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_stop_enable_=false
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_stop_enable_
    }
Opts.Apps.IsStarting.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_stop_changes_flag_=false
    }
Opts.Apps.IsStarting.Stop.Enable()
    {
    [[ $_obj_opts_apps_isstarting_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_stop_enable_=true
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_stop_enable_
    }
Opts.Apps.IsStarting.Stop.Init()
    {
    _obj_opts_apps_isstarting_stop_text_=''
    _obj_opts_apps_isstarting_stop_flag_=false
    _obj_opts_apps_isstarting_stop_changes_flag_=true
    _obj_opts_apps_isstarting_stop_enable_=false
    }
Opts.Apps.IsStarting.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_stop_changes_flag_=true
    }
Opts.Apps.IsStarting.Stop.Set()
    {
    [[ $_obj_opts_apps_isstarting_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_stop_flag_=true
    [[ $_obj_opts_apps_isstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_stop_flag_
    }
Opts.Apps.IsStarting.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_stop_text_"
    fi
    }
Opts.Apps.IsStarting.Stop.Init

Opts.Apps.IsNotStarting.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_flag_=false
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_stop_flag_
    }
Opts.Apps.IsNotStarting.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_enable_=false
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_stop_enable_
    }
Opts.Apps.IsNotStarting.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_enable_=true
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_stop_enable_
    }
Opts.Apps.IsNotStarting.Stop.Init()
    {
    _obj_opts_apps_isnotstarting_stop_text_=''
    _obj_opts_apps_isnotstarting_stop_flag_=false
    _obj_opts_apps_isnotstarting_stop_changes_flag_=true
    _obj_opts_apps_isnotstarting_stop_enable_=false
    }
Opts.Apps.IsNotStarting.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_stop_flag_=true
    [[ $_obj_opts_apps_isnotstarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_stop_flag_
    }
Opts.Apps.IsNotStarting.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_stop_text_"
    fi
    }
Opts.Apps.IsNotStarting.Stop.Init

Opts.Apps.IsStarting.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_flag_=false
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_uninstall_flag_
    }
Opts.Apps.IsStarting.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_enable_=false
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_uninstall_enable_
    }
Opts.Apps.IsStarting.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_changes_flag_=false
    }
Opts.Apps.IsStarting.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_enable_=true
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_uninstall_enable_
    }
Opts.Apps.IsStarting.Uninstall.Init()
    {
    _obj_opts_apps_isstarting_uninstall_text_=''
    _obj_opts_apps_isstarting_uninstall_flag_=false
    _obj_opts_apps_isstarting_uninstall_changes_flag_=true
    _obj_opts_apps_isstarting_uninstall_enable_=false
    }
Opts.Apps.IsStarting.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_changes_flag_=true
    }
Opts.Apps.IsStarting.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isstarting_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_uninstall_flag_=true
    [[ $_obj_opts_apps_isstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_uninstall_flag_
    }
Opts.Apps.IsStarting.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_uninstall_text_"
    fi
    }
Opts.Apps.IsStarting.Uninstall.Init

Opts.Apps.IsNotStarting.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_uninstall_flag_
    }
Opts.Apps.IsNotStarting.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_uninstall_enable_
    }
Opts.Apps.IsNotStarting.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_uninstall_enable_
    }
Opts.Apps.IsNotStarting.Uninstall.Init()
    {
    _obj_opts_apps_isnotstarting_uninstall_text_=''
    _obj_opts_apps_isnotstarting_uninstall_flag_=false
    _obj_opts_apps_isnotstarting_uninstall_changes_flag_=true
    _obj_opts_apps_isnotstarting_uninstall_enable_=false
    }
Opts.Apps.IsNotStarting.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotstarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_uninstall_flag_
    }
Opts.Apps.IsNotStarting.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_uninstall_text_"
    fi
    }
Opts.Apps.IsNotStarting.Uninstall.Init

Opts.Apps.IsStarting.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_flag_=false
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_upgrade_flag_
    }
Opts.Apps.IsStarting.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_enable_=false
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_upgrade_enable_
    }
Opts.Apps.IsStarting.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_changes_flag_=false
    }
Opts.Apps.IsStarting.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_enable_=true
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_upgrade_enable_
    }
Opts.Apps.IsStarting.Upgrade.Init()
    {
    _obj_opts_apps_isstarting_upgrade_text_=''
    _obj_opts_apps_isstarting_upgrade_flag_=false
    _obj_opts_apps_isstarting_upgrade_changes_flag_=true
    _obj_opts_apps_isstarting_upgrade_enable_=false
    }
Opts.Apps.IsStarting.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsStarting.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsStarting.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsStarting.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsStarting.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_changes_flag_=true
    }
Opts.Apps.IsStarting.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isstarting_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarting_upgrade_flag_=true
    [[ $_obj_opts_apps_isstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarting_upgrade_flag_
    }
Opts.Apps.IsStarting.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarting_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarting_upgrade_text_"
    fi
    }
Opts.Apps.IsStarting.Upgrade.Init

Opts.Apps.IsNotStarting.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_upgrade_flag_
    }
Opts.Apps.IsNotStarting.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_upgrade_enable_
    }
Opts.Apps.IsNotStarting.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotStarting.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_upgrade_enable_
    }
Opts.Apps.IsNotStarting.Upgrade.Init()
    {
    _obj_opts_apps_isnotstarting_upgrade_text_=''
    _obj_opts_apps_isnotstarting_upgrade_flag_=false
    _obj_opts_apps_isnotstarting_upgrade_changes_flag_=true
    _obj_opts_apps_isnotstarting_upgrade_enable_=false
    }
Opts.Apps.IsNotStarting.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarting.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarting.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotStarting.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotstarting_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarting_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotstarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarting_upgrade_flag_
    }
Opts.Apps.IsNotStarting.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarting_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarting_upgrade_text_"
    fi
    }
Opts.Apps.IsNotStarting.Upgrade.Init

Opts.Apps.List.Started.Clear()
    {
    [[ $_obj_opts_apps_list_started_flag_ != 'true' ]] && return
    _obj_opts_apps_list_started_flag_=false
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_flag_
    }
Opts.Apps.List.Started.Disable()
    {
    [[ $_obj_opts_apps_list_started_enable_ != 'true' ]] && return
    _obj_opts_apps_list_started_enable_=false
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_enable_
    }
Opts.Apps.List.Started.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_started_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_started_changes_flag_=false
    }
Opts.Apps.List.Started.Enable()
    {
    [[ $_obj_opts_apps_list_started_enable_ = 'true' ]] && return
    _obj_opts_apps_list_started_enable_=true
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_enable_
    }
Opts.Apps.List.Started.Init()
    {
    _obj_opts_apps_list_started_text_=''
    _obj_opts_apps_list_started_flag_=false
    _obj_opts_apps_list_started_changes_flag_=true
    _obj_opts_apps_list_started_enable_=false
    }
Opts.Apps.List.Started.IsDisabled()
    {
    [[ $_obj_opts_apps_list_started_enable_ != 'true' ]]
    }
Opts.Apps.List.Started.IsEnabled()
    {
    [[ $_obj_opts_apps_list_started_enable_ = 'true' ]]
    }
Opts.Apps.List.Started.IsNot()
    {
    [[ $_obj_opts_apps_list_started_flag_ != 'true' ]]
    }
Opts.Apps.List.Started.IsSet()
    {
    [[ $_obj_opts_apps_list_started_flag_ = 'true' ]]
    }
Opts.Apps.List.Started.LogChanges()
    {
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_started_changes_flag_=true
    }
Opts.Apps.List.Started.Set()
    {
    [[ $_obj_opts_apps_list_started_flag_ = 'true' ]] && return
    _obj_opts_apps_list_started_flag_=true
    [[ $_obj_opts_apps_list_started_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_started_flag_
    }
Opts.Apps.List.Started.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_started_text_=$2
    else
        echo -n "$_obj_opts_apps_list_started_text_"
    fi
    }
Opts.Apps.List.Started.Init

Opts.Apps.IsStarted.Backup.Clear()
    {
    [[ $_obj_opts_apps_isstarted_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_backup_flag_=false
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_backup_flag_
    }
Opts.Apps.IsStarted.Backup.Disable()
    {
    [[ $_obj_opts_apps_isstarted_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_backup_enable_=false
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_backup_enable_
    }
Opts.Apps.IsStarted.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_backup_changes_flag_=false
    }
Opts.Apps.IsStarted.Backup.Enable()
    {
    [[ $_obj_opts_apps_isstarted_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_backup_enable_=true
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_backup_enable_
    }
Opts.Apps.IsStarted.Backup.Init()
    {
    _obj_opts_apps_isstarted_backup_text_=''
    _obj_opts_apps_isstarted_backup_flag_=false
    _obj_opts_apps_isstarted_backup_changes_flag_=true
    _obj_opts_apps_isstarted_backup_enable_=false
    }
Opts.Apps.IsStarted.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_backup_changes_flag_=true
    }
Opts.Apps.IsStarted.Backup.Set()
    {
    [[ $_obj_opts_apps_isstarted_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_backup_flag_=true
    [[ $_obj_opts_apps_isstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_backup_flag_
    }
Opts.Apps.IsStarted.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_backup_text_"
    fi
    }
Opts.Apps.IsStarted.Backup.Init

Opts.Apps.IsNotStarted.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_flag_=false
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_backup_flag_
    }
Opts.Apps.IsNotStarted.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_enable_=false
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_backup_enable_
    }
Opts.Apps.IsNotStarted.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_enable_=true
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_backup_enable_
    }
Opts.Apps.IsNotStarted.Backup.Init()
    {
    _obj_opts_apps_isnotstarted_backup_text_=''
    _obj_opts_apps_isnotstarted_backup_flag_=false
    _obj_opts_apps_isnotstarted_backup_changes_flag_=true
    _obj_opts_apps_isnotstarted_backup_enable_=false
    }
Opts.Apps.IsNotStarted.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_backup_flag_=true
    [[ $_obj_opts_apps_isnotstarted_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_backup_flag_
    }
Opts.Apps.IsNotStarted.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_backup_text_"
    fi
    }
Opts.Apps.IsNotStarted.Backup.Init

Opts.Apps.IsStarted.Download.Clear()
    {
    [[ $_obj_opts_apps_isstarted_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_download_flag_=false
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_download_flag_
    }
Opts.Apps.IsStarted.Download.Disable()
    {
    [[ $_obj_opts_apps_isstarted_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_download_enable_=false
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_download_enable_
    }
Opts.Apps.IsStarted.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_download_changes_flag_=false
    }
Opts.Apps.IsStarted.Download.Enable()
    {
    [[ $_obj_opts_apps_isstarted_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_download_enable_=true
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_download_enable_
    }
Opts.Apps.IsStarted.Download.Init()
    {
    _obj_opts_apps_isstarted_download_text_=''
    _obj_opts_apps_isstarted_download_flag_=false
    _obj_opts_apps_isstarted_download_changes_flag_=true
    _obj_opts_apps_isstarted_download_enable_=false
    }
Opts.Apps.IsStarted.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_download_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_download_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Download.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_download_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Download.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_download_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_download_changes_flag_=true
    }
Opts.Apps.IsStarted.Download.Set()
    {
    [[ $_obj_opts_apps_isstarted_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_download_flag_=true
    [[ $_obj_opts_apps_isstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_download_flag_
    }
Opts.Apps.IsStarted.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_download_text_"
    fi
    }
Opts.Apps.IsStarted.Download.Init

Opts.Apps.IsNotStarted.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_flag_=false
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_download_flag_
    }
Opts.Apps.IsNotStarted.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_enable_=false
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_download_enable_
    }
Opts.Apps.IsNotStarted.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_enable_=true
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_download_enable_
    }
Opts.Apps.IsNotStarted.Download.Init()
    {
    _obj_opts_apps_isnotstarted_download_text_=''
    _obj_opts_apps_isnotstarted_download_flag_=false
    _obj_opts_apps_isnotstarted_download_changes_flag_=true
    _obj_opts_apps_isnotstarted_download_enable_=false
    }
Opts.Apps.IsNotStarted.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Download.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_download_flag_=true
    [[ $_obj_opts_apps_isnotstarted_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_download_flag_
    }
Opts.Apps.IsNotStarted.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_download_text_"
    fi
    }
Opts.Apps.IsNotStarted.Download.Init

Opts.Apps.IsStarted.Install.Clear()
    {
    [[ $_obj_opts_apps_isstarted_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_install_flag_=false
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_install_flag_
    }
Opts.Apps.IsStarted.Install.Disable()
    {
    [[ $_obj_opts_apps_isstarted_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_install_enable_=false
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_install_enable_
    }
Opts.Apps.IsStarted.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_install_changes_flag_=false
    }
Opts.Apps.IsStarted.Install.Enable()
    {
    [[ $_obj_opts_apps_isstarted_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_install_enable_=true
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_install_enable_
    }
Opts.Apps.IsStarted.Install.Init()
    {
    _obj_opts_apps_isstarted_install_text_=''
    _obj_opts_apps_isstarted_install_flag_=false
    _obj_opts_apps_isstarted_install_changes_flag_=true
    _obj_opts_apps_isstarted_install_enable_=false
    }
Opts.Apps.IsStarted.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_install_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_install_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Install.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_install_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Install.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_install_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_install_changes_flag_=true
    }
Opts.Apps.IsStarted.Install.Set()
    {
    [[ $_obj_opts_apps_isstarted_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_install_flag_=true
    [[ $_obj_opts_apps_isstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_install_flag_
    }
Opts.Apps.IsStarted.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_install_text_"
    fi
    }
Opts.Apps.IsStarted.Install.Init

Opts.Apps.IsNotStarted.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_flag_=false
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_install_flag_
    }
Opts.Apps.IsNotStarted.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_enable_=false
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_install_enable_
    }
Opts.Apps.IsNotStarted.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_enable_=true
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_install_enable_
    }
Opts.Apps.IsNotStarted.Install.Init()
    {
    _obj_opts_apps_isnotstarted_install_text_=''
    _obj_opts_apps_isnotstarted_install_flag_=false
    _obj_opts_apps_isnotstarted_install_changes_flag_=true
    _obj_opts_apps_isnotstarted_install_enable_=false
    }
Opts.Apps.IsNotStarted.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Install.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_install_flag_=true
    [[ $_obj_opts_apps_isnotstarted_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_install_flag_
    }
Opts.Apps.IsNotStarted.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_install_text_"
    fi
    }
Opts.Apps.IsNotStarted.Install.Init

Opts.Apps.IsStarted.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_flag_=false
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_rebuild_flag_
    }
Opts.Apps.IsStarted.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_enable_=false
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_rebuild_enable_
    }
Opts.Apps.IsStarted.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_changes_flag_=false
    }
Opts.Apps.IsStarted.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_enable_=true
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_rebuild_enable_
    }
Opts.Apps.IsStarted.Rebuild.Init()
    {
    _obj_opts_apps_isstarted_rebuild_text_=''
    _obj_opts_apps_isstarted_rebuild_flag_=false
    _obj_opts_apps_isstarted_rebuild_changes_flag_=true
    _obj_opts_apps_isstarted_rebuild_enable_=false
    }
Opts.Apps.IsStarted.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_changes_flag_=true
    }
Opts.Apps.IsStarted.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isstarted_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_rebuild_flag_=true
    [[ $_obj_opts_apps_isstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_rebuild_flag_
    }
Opts.Apps.IsStarted.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_rebuild_text_"
    fi
    }
Opts.Apps.IsStarted.Rebuild.Init

Opts.Apps.IsNotStarted.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_rebuild_flag_
    }
Opts.Apps.IsNotStarted.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_rebuild_enable_
    }
Opts.Apps.IsNotStarted.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_rebuild_enable_
    }
Opts.Apps.IsNotStarted.Rebuild.Init()
    {
    _obj_opts_apps_isnotstarted_rebuild_text_=''
    _obj_opts_apps_isnotstarted_rebuild_flag_=false
    _obj_opts_apps_isnotstarted_rebuild_changes_flag_=true
    _obj_opts_apps_isnotstarted_rebuild_enable_=false
    }
Opts.Apps.IsNotStarted.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotstarted_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_rebuild_flag_
    }
Opts.Apps.IsNotStarted.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_rebuild_text_"
    fi
    }
Opts.Apps.IsNotStarted.Rebuild.Init

Opts.Apps.IsStarted.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_flag_=false
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_reinstall_flag_
    }
Opts.Apps.IsStarted.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_enable_=false
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_reinstall_enable_
    }
Opts.Apps.IsStarted.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_changes_flag_=false
    }
Opts.Apps.IsStarted.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_enable_=true
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_reinstall_enable_
    }
Opts.Apps.IsStarted.Reinstall.Init()
    {
    _obj_opts_apps_isstarted_reinstall_text_=''
    _obj_opts_apps_isstarted_reinstall_flag_=false
    _obj_opts_apps_isstarted_reinstall_changes_flag_=true
    _obj_opts_apps_isstarted_reinstall_enable_=false
    }
Opts.Apps.IsStarted.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_changes_flag_=true
    }
Opts.Apps.IsStarted.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isstarted_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_reinstall_flag_=true
    [[ $_obj_opts_apps_isstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_reinstall_flag_
    }
Opts.Apps.IsStarted.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_reinstall_text_"
    fi
    }
Opts.Apps.IsStarted.Reinstall.Init

Opts.Apps.IsNotStarted.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_reinstall_flag_
    }
Opts.Apps.IsNotStarted.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_reinstall_enable_
    }
Opts.Apps.IsNotStarted.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_reinstall_enable_
    }
Opts.Apps.IsNotStarted.Reinstall.Init()
    {
    _obj_opts_apps_isnotstarted_reinstall_text_=''
    _obj_opts_apps_isnotstarted_reinstall_flag_=false
    _obj_opts_apps_isnotstarted_reinstall_changes_flag_=true
    _obj_opts_apps_isnotstarted_reinstall_enable_=false
    }
Opts.Apps.IsNotStarted.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotstarted_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_reinstall_flag_
    }
Opts.Apps.IsNotStarted.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_reinstall_text_"
    fi
    }
Opts.Apps.IsNotStarted.Reinstall.Init

Opts.Apps.IsStarted.Restore.Clear()
    {
    [[ $_obj_opts_apps_isstarted_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restore_flag_=false
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restore_flag_
    }
Opts.Apps.IsStarted.Restore.Disable()
    {
    [[ $_obj_opts_apps_isstarted_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restore_enable_=false
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restore_enable_
    }
Opts.Apps.IsStarted.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restore_changes_flag_=false
    }
Opts.Apps.IsStarted.Restore.Enable()
    {
    [[ $_obj_opts_apps_isstarted_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restore_enable_=true
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restore_enable_
    }
Opts.Apps.IsStarted.Restore.Init()
    {
    _obj_opts_apps_isstarted_restore_text_=''
    _obj_opts_apps_isstarted_restore_flag_=false
    _obj_opts_apps_isstarted_restore_changes_flag_=true
    _obj_opts_apps_isstarted_restore_enable_=false
    }
Opts.Apps.IsStarted.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restore_changes_flag_=true
    }
Opts.Apps.IsStarted.Restore.Set()
    {
    [[ $_obj_opts_apps_isstarted_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restore_flag_=true
    [[ $_obj_opts_apps_isstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restore_flag_
    }
Opts.Apps.IsStarted.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_restore_text_"
    fi
    }
Opts.Apps.IsStarted.Restore.Init

Opts.Apps.IsNotStarted.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_flag_=false
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restore_flag_
    }
Opts.Apps.IsNotStarted.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_enable_=false
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restore_enable_
    }
Opts.Apps.IsNotStarted.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_enable_=true
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restore_enable_
    }
Opts.Apps.IsNotStarted.Restore.Init()
    {
    _obj_opts_apps_isnotstarted_restore_text_=''
    _obj_opts_apps_isnotstarted_restore_flag_=false
    _obj_opts_apps_isnotstarted_restore_changes_flag_=true
    _obj_opts_apps_isnotstarted_restore_enable_=false
    }
Opts.Apps.IsNotStarted.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restore_flag_=true
    [[ $_obj_opts_apps_isnotstarted_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restore_flag_
    }
Opts.Apps.IsNotStarted.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_restore_text_"
    fi
    }
Opts.Apps.IsNotStarted.Restore.Init

Opts.Apps.IsStarted.Restart.Clear()
    {
    [[ $_obj_opts_apps_isstarted_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restart_flag_=false
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restart_flag_
    }
Opts.Apps.IsStarted.Restart.Disable()
    {
    [[ $_obj_opts_apps_isstarted_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restart_enable_=false
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restart_enable_
    }
Opts.Apps.IsStarted.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_restart_changes_flag_=false
    }
Opts.Apps.IsStarted.Restart.Enable()
    {
    [[ $_obj_opts_apps_isstarted_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restart_enable_=true
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restart_enable_
    }
Opts.Apps.IsStarted.Restart.Init()
    {
    _obj_opts_apps_isstarted_restart_text_=''
    _obj_opts_apps_isstarted_restart_flag_=false
    _obj_opts_apps_isstarted_restart_changes_flag_=true
    _obj_opts_apps_isstarted_restart_enable_=false
    }
Opts.Apps.IsStarted.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restart_changes_flag_=true
    }
Opts.Apps.IsStarted.Restart.Set()
    {
    [[ $_obj_opts_apps_isstarted_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_restart_flag_=true
    [[ $_obj_opts_apps_isstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_restart_flag_
    }
Opts.Apps.IsStarted.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_restart_text_"
    fi
    }
Opts.Apps.IsStarted.Restart.Init

Opts.Apps.IsNotStarted.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_flag_=false
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restart_flag_
    }
Opts.Apps.IsNotStarted.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_enable_=false
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restart_enable_
    }
Opts.Apps.IsNotStarted.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_enable_=true
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restart_enable_
    }
Opts.Apps.IsNotStarted.Restart.Init()
    {
    _obj_opts_apps_isnotstarted_restart_text_=''
    _obj_opts_apps_isnotstarted_restart_flag_=false
    _obj_opts_apps_isnotstarted_restart_changes_flag_=true
    _obj_opts_apps_isnotstarted_restart_enable_=false
    }
Opts.Apps.IsNotStarted.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_restart_flag_=true
    [[ $_obj_opts_apps_isnotstarted_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_restart_flag_
    }
Opts.Apps.IsNotStarted.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_restart_text_"
    fi
    }
Opts.Apps.IsNotStarted.Restart.Init

Opts.Apps.IsStarted.Start.Clear()
    {
    [[ $_obj_opts_apps_isstarted_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_start_flag_=false
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_start_flag_
    }
Opts.Apps.IsStarted.Start.Disable()
    {
    [[ $_obj_opts_apps_isstarted_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_start_enable_=false
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_start_enable_
    }
Opts.Apps.IsStarted.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_start_changes_flag_=false
    }
Opts.Apps.IsStarted.Start.Enable()
    {
    [[ $_obj_opts_apps_isstarted_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_start_enable_=true
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_start_enable_
    }
Opts.Apps.IsStarted.Start.Init()
    {
    _obj_opts_apps_isstarted_start_text_=''
    _obj_opts_apps_isstarted_start_flag_=false
    _obj_opts_apps_isstarted_start_changes_flag_=true
    _obj_opts_apps_isstarted_start_enable_=false
    }
Opts.Apps.IsStarted.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_start_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_start_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Start.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_start_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Start.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_start_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_start_changes_flag_=true
    }
Opts.Apps.IsStarted.Start.Set()
    {
    [[ $_obj_opts_apps_isstarted_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_start_flag_=true
    [[ $_obj_opts_apps_isstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_start_flag_
    }
Opts.Apps.IsStarted.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_start_text_"
    fi
    }
Opts.Apps.IsStarted.Start.Init

Opts.Apps.IsNotStarted.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_flag_=false
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_start_flag_
    }
Opts.Apps.IsNotStarted.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_enable_=false
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_start_enable_
    }
Opts.Apps.IsNotStarted.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_enable_=true
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_start_enable_
    }
Opts.Apps.IsNotStarted.Start.Init()
    {
    _obj_opts_apps_isnotstarted_start_text_=''
    _obj_opts_apps_isnotstarted_start_flag_=false
    _obj_opts_apps_isnotstarted_start_changes_flag_=true
    _obj_opts_apps_isnotstarted_start_enable_=false
    }
Opts.Apps.IsNotStarted.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Start.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_start_flag_=true
    [[ $_obj_opts_apps_isnotstarted_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_start_flag_
    }
Opts.Apps.IsNotStarted.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_start_text_"
    fi
    }
Opts.Apps.IsNotStarted.Start.Init

Opts.Apps.IsStarted.Stop.Clear()
    {
    [[ $_obj_opts_apps_isstarted_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_stop_flag_=false
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_stop_flag_
    }
Opts.Apps.IsStarted.Stop.Disable()
    {
    [[ $_obj_opts_apps_isstarted_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_stop_enable_=false
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_stop_enable_
    }
Opts.Apps.IsStarted.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_stop_changes_flag_=false
    }
Opts.Apps.IsStarted.Stop.Enable()
    {
    [[ $_obj_opts_apps_isstarted_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_stop_enable_=true
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_stop_enable_
    }
Opts.Apps.IsStarted.Stop.Init()
    {
    _obj_opts_apps_isstarted_stop_text_=''
    _obj_opts_apps_isstarted_stop_flag_=false
    _obj_opts_apps_isstarted_stop_changes_flag_=true
    _obj_opts_apps_isstarted_stop_enable_=false
    }
Opts.Apps.IsStarted.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_stop_changes_flag_=true
    }
Opts.Apps.IsStarted.Stop.Set()
    {
    [[ $_obj_opts_apps_isstarted_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_stop_flag_=true
    [[ $_obj_opts_apps_isstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_stop_flag_
    }
Opts.Apps.IsStarted.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_stop_text_"
    fi
    }
Opts.Apps.IsStarted.Stop.Init

Opts.Apps.IsNotStarted.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_flag_=false
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_stop_flag_
    }
Opts.Apps.IsNotStarted.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_enable_=false
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_stop_enable_
    }
Opts.Apps.IsNotStarted.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_enable_=true
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_stop_enable_
    }
Opts.Apps.IsNotStarted.Stop.Init()
    {
    _obj_opts_apps_isnotstarted_stop_text_=''
    _obj_opts_apps_isnotstarted_stop_flag_=false
    _obj_opts_apps_isnotstarted_stop_changes_flag_=true
    _obj_opts_apps_isnotstarted_stop_enable_=false
    }
Opts.Apps.IsNotStarted.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_stop_flag_=true
    [[ $_obj_opts_apps_isnotstarted_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_stop_flag_
    }
Opts.Apps.IsNotStarted.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_stop_text_"
    fi
    }
Opts.Apps.IsNotStarted.Stop.Init

Opts.Apps.IsStarted.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_flag_=false
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_uninstall_flag_
    }
Opts.Apps.IsStarted.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_enable_=false
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_uninstall_enable_
    }
Opts.Apps.IsStarted.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_changes_flag_=false
    }
Opts.Apps.IsStarted.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_enable_=true
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_uninstall_enable_
    }
Opts.Apps.IsStarted.Uninstall.Init()
    {
    _obj_opts_apps_isstarted_uninstall_text_=''
    _obj_opts_apps_isstarted_uninstall_flag_=false
    _obj_opts_apps_isstarted_uninstall_changes_flag_=true
    _obj_opts_apps_isstarted_uninstall_enable_=false
    }
Opts.Apps.IsStarted.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_changes_flag_=true
    }
Opts.Apps.IsStarted.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isstarted_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_uninstall_flag_=true
    [[ $_obj_opts_apps_isstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_uninstall_flag_
    }
Opts.Apps.IsStarted.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_uninstall_text_"
    fi
    }
Opts.Apps.IsStarted.Uninstall.Init

Opts.Apps.IsNotStarted.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_uninstall_flag_
    }
Opts.Apps.IsNotStarted.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_uninstall_enable_
    }
Opts.Apps.IsNotStarted.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_uninstall_enable_
    }
Opts.Apps.IsNotStarted.Uninstall.Init()
    {
    _obj_opts_apps_isnotstarted_uninstall_text_=''
    _obj_opts_apps_isnotstarted_uninstall_flag_=false
    _obj_opts_apps_isnotstarted_uninstall_changes_flag_=true
    _obj_opts_apps_isnotstarted_uninstall_enable_=false
    }
Opts.Apps.IsNotStarted.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotstarted_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_uninstall_flag_
    }
Opts.Apps.IsNotStarted.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_uninstall_text_"
    fi
    }
Opts.Apps.IsNotStarted.Uninstall.Init

Opts.Apps.IsStarted.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_flag_=false
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_upgrade_flag_
    }
Opts.Apps.IsStarted.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_enable_=false
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_upgrade_enable_
    }
Opts.Apps.IsStarted.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_changes_flag_=false
    }
Opts.Apps.IsStarted.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_enable_=true
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_upgrade_enable_
    }
Opts.Apps.IsStarted.Upgrade.Init()
    {
    _obj_opts_apps_isstarted_upgrade_text_=''
    _obj_opts_apps_isstarted_upgrade_flag_=false
    _obj_opts_apps_isstarted_upgrade_changes_flag_=true
    _obj_opts_apps_isstarted_upgrade_enable_=false
    }
Opts.Apps.IsStarted.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsStarted.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsStarted.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsStarted.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsStarted.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_changes_flag_=true
    }
Opts.Apps.IsStarted.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isstarted_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isstarted_upgrade_flag_=true
    [[ $_obj_opts_apps_isstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstarted_upgrade_flag_
    }
Opts.Apps.IsStarted.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstarted_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isstarted_upgrade_text_"
    fi
    }
Opts.Apps.IsStarted.Upgrade.Init

Opts.Apps.IsNotStarted.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_upgrade_flag_
    }
Opts.Apps.IsNotStarted.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_upgrade_enable_
    }
Opts.Apps.IsNotStarted.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotStarted.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_upgrade_enable_
    }
Opts.Apps.IsNotStarted.Upgrade.Init()
    {
    _obj_opts_apps_isnotstarted_upgrade_text_=''
    _obj_opts_apps_isnotstarted_upgrade_flag_=false
    _obj_opts_apps_isnotstarted_upgrade_changes_flag_=true
    _obj_opts_apps_isnotstarted_upgrade_enable_=false
    }
Opts.Apps.IsNotStarted.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStarted.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStarted.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotStarted.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotstarted_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstarted_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotstarted_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstarted_upgrade_flag_
    }
Opts.Apps.IsNotStarted.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstarted_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstarted_upgrade_text_"
    fi
    }
Opts.Apps.IsNotStarted.Upgrade.Init

Opts.Apps.List.Stopping.Clear()
    {
    [[ $_obj_opts_apps_list_stopping_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopping_flag_=false
    [[ $_obj_opts_apps_list_stopping_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopping_flag_
    }
Opts.Apps.List.Stopping.Disable()
    {
    [[ $_obj_opts_apps_list_stopping_enable_ != 'true' ]] && return
    _obj_opts_apps_list_stopping_enable_=false
    [[ $_obj_opts_apps_list_stopping_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopping_enable_
    }
Opts.Apps.List.Stopping.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_stopping_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopping_changes_flag_=false
    }
Opts.Apps.List.Stopping.Enable()
    {
    [[ $_obj_opts_apps_list_stopping_enable_ = 'true' ]] && return
    _obj_opts_apps_list_stopping_enable_=true
    [[ $_obj_opts_apps_list_stopping_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopping_enable_
    }
Opts.Apps.List.Stopping.Init()
    {
    _obj_opts_apps_list_stopping_text_=''
    _obj_opts_apps_list_stopping_flag_=false
    _obj_opts_apps_list_stopping_changes_flag_=true
    _obj_opts_apps_list_stopping_enable_=false
    }
Opts.Apps.List.Stopping.IsDisabled()
    {
    [[ $_obj_opts_apps_list_stopping_enable_ != 'true' ]]
    }
Opts.Apps.List.Stopping.IsEnabled()
    {
    [[ $_obj_opts_apps_list_stopping_enable_ = 'true' ]]
    }
Opts.Apps.List.Stopping.IsNot()
    {
    [[ $_obj_opts_apps_list_stopping_flag_ != 'true' ]]
    }
Opts.Apps.List.Stopping.IsSet()
    {
    [[ $_obj_opts_apps_list_stopping_flag_ = 'true' ]]
    }
Opts.Apps.List.Stopping.LogChanges()
    {
    [[ $_obj_opts_apps_list_stopping_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopping_changes_flag_=true
    }
Opts.Apps.List.Stopping.Set()
    {
    [[ $_obj_opts_apps_list_stopping_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopping_flag_=true
    [[ $_obj_opts_apps_list_stopping_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopping_flag_
    }
Opts.Apps.List.Stopping.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_stopping_text_=$2
    else
        echo -n "$_obj_opts_apps_list_stopping_text_"
    fi
    }
Opts.Apps.List.Stopping.Init

Opts.Apps.IsStopping.Backup.Clear()
    {
    [[ $_obj_opts_apps_isstopping_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_backup_flag_=false
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_backup_flag_
    }
Opts.Apps.IsStopping.Backup.Disable()
    {
    [[ $_obj_opts_apps_isstopping_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_backup_enable_=false
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_backup_enable_
    }
Opts.Apps.IsStopping.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_backup_changes_flag_=false
    }
Opts.Apps.IsStopping.Backup.Enable()
    {
    [[ $_obj_opts_apps_isstopping_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_backup_enable_=true
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_backup_enable_
    }
Opts.Apps.IsStopping.Backup.Init()
    {
    _obj_opts_apps_isstopping_backup_text_=''
    _obj_opts_apps_isstopping_backup_flag_=false
    _obj_opts_apps_isstopping_backup_changes_flag_=true
    _obj_opts_apps_isstopping_backup_enable_=false
    }
Opts.Apps.IsStopping.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_backup_changes_flag_=true
    }
Opts.Apps.IsStopping.Backup.Set()
    {
    [[ $_obj_opts_apps_isstopping_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_backup_flag_=true
    [[ $_obj_opts_apps_isstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_backup_flag_
    }
Opts.Apps.IsStopping.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_backup_text_"
    fi
    }
Opts.Apps.IsStopping.Backup.Init

Opts.Apps.IsNotStopping.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_flag_=false
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_backup_flag_
    }
Opts.Apps.IsNotStopping.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_enable_=false
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_backup_enable_
    }
Opts.Apps.IsNotStopping.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_enable_=true
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_backup_enable_
    }
Opts.Apps.IsNotStopping.Backup.Init()
    {
    _obj_opts_apps_isnotstopping_backup_text_=''
    _obj_opts_apps_isnotstopping_backup_flag_=false
    _obj_opts_apps_isnotstopping_backup_changes_flag_=true
    _obj_opts_apps_isnotstopping_backup_enable_=false
    }
Opts.Apps.IsNotStopping.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_backup_flag_=true
    [[ $_obj_opts_apps_isnotstopping_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_backup_flag_
    }
Opts.Apps.IsNotStopping.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_backup_text_"
    fi
    }
Opts.Apps.IsNotStopping.Backup.Init

Opts.Apps.IsStopping.Download.Clear()
    {
    [[ $_obj_opts_apps_isstopping_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_download_flag_=false
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_download_flag_
    }
Opts.Apps.IsStopping.Download.Disable()
    {
    [[ $_obj_opts_apps_isstopping_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_download_enable_=false
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_download_enable_
    }
Opts.Apps.IsStopping.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_download_changes_flag_=false
    }
Opts.Apps.IsStopping.Download.Enable()
    {
    [[ $_obj_opts_apps_isstopping_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_download_enable_=true
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_download_enable_
    }
Opts.Apps.IsStopping.Download.Init()
    {
    _obj_opts_apps_isstopping_download_text_=''
    _obj_opts_apps_isstopping_download_flag_=false
    _obj_opts_apps_isstopping_download_changes_flag_=true
    _obj_opts_apps_isstopping_download_enable_=false
    }
Opts.Apps.IsStopping.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_download_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_download_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Download.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_download_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Download.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_download_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_download_changes_flag_=true
    }
Opts.Apps.IsStopping.Download.Set()
    {
    [[ $_obj_opts_apps_isstopping_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_download_flag_=true
    [[ $_obj_opts_apps_isstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_download_flag_
    }
Opts.Apps.IsStopping.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_download_text_"
    fi
    }
Opts.Apps.IsStopping.Download.Init

Opts.Apps.IsNotStopping.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_flag_=false
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_download_flag_
    }
Opts.Apps.IsNotStopping.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_enable_=false
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_download_enable_
    }
Opts.Apps.IsNotStopping.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_enable_=true
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_download_enable_
    }
Opts.Apps.IsNotStopping.Download.Init()
    {
    _obj_opts_apps_isnotstopping_download_text_=''
    _obj_opts_apps_isnotstopping_download_flag_=false
    _obj_opts_apps_isnotstopping_download_changes_flag_=true
    _obj_opts_apps_isnotstopping_download_enable_=false
    }
Opts.Apps.IsNotStopping.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Download.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_download_flag_=true
    [[ $_obj_opts_apps_isnotstopping_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_download_flag_
    }
Opts.Apps.IsNotStopping.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_download_text_"
    fi
    }
Opts.Apps.IsNotStopping.Download.Init

Opts.Apps.IsStopping.Install.Clear()
    {
    [[ $_obj_opts_apps_isstopping_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_install_flag_=false
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_install_flag_
    }
Opts.Apps.IsStopping.Install.Disable()
    {
    [[ $_obj_opts_apps_isstopping_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_install_enable_=false
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_install_enable_
    }
Opts.Apps.IsStopping.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_install_changes_flag_=false
    }
Opts.Apps.IsStopping.Install.Enable()
    {
    [[ $_obj_opts_apps_isstopping_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_install_enable_=true
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_install_enable_
    }
Opts.Apps.IsStopping.Install.Init()
    {
    _obj_opts_apps_isstopping_install_text_=''
    _obj_opts_apps_isstopping_install_flag_=false
    _obj_opts_apps_isstopping_install_changes_flag_=true
    _obj_opts_apps_isstopping_install_enable_=false
    }
Opts.Apps.IsStopping.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_install_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_install_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Install.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_install_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Install.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_install_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_install_changes_flag_=true
    }
Opts.Apps.IsStopping.Install.Set()
    {
    [[ $_obj_opts_apps_isstopping_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_install_flag_=true
    [[ $_obj_opts_apps_isstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_install_flag_
    }
Opts.Apps.IsStopping.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_install_text_"
    fi
    }
Opts.Apps.IsStopping.Install.Init

Opts.Apps.IsNotStopping.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_flag_=false
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_install_flag_
    }
Opts.Apps.IsNotStopping.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_enable_=false
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_install_enable_
    }
Opts.Apps.IsNotStopping.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_enable_=true
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_install_enable_
    }
Opts.Apps.IsNotStopping.Install.Init()
    {
    _obj_opts_apps_isnotstopping_install_text_=''
    _obj_opts_apps_isnotstopping_install_flag_=false
    _obj_opts_apps_isnotstopping_install_changes_flag_=true
    _obj_opts_apps_isnotstopping_install_enable_=false
    }
Opts.Apps.IsNotStopping.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Install.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_install_flag_=true
    [[ $_obj_opts_apps_isnotstopping_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_install_flag_
    }
Opts.Apps.IsNotStopping.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_install_text_"
    fi
    }
Opts.Apps.IsNotStopping.Install.Init

Opts.Apps.IsStopping.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_flag_=false
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_rebuild_flag_
    }
Opts.Apps.IsStopping.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_enable_=false
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_rebuild_enable_
    }
Opts.Apps.IsStopping.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_changes_flag_=false
    }
Opts.Apps.IsStopping.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_enable_=true
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_rebuild_enable_
    }
Opts.Apps.IsStopping.Rebuild.Init()
    {
    _obj_opts_apps_isstopping_rebuild_text_=''
    _obj_opts_apps_isstopping_rebuild_flag_=false
    _obj_opts_apps_isstopping_rebuild_changes_flag_=true
    _obj_opts_apps_isstopping_rebuild_enable_=false
    }
Opts.Apps.IsStopping.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_changes_flag_=true
    }
Opts.Apps.IsStopping.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isstopping_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_rebuild_flag_=true
    [[ $_obj_opts_apps_isstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_rebuild_flag_
    }
Opts.Apps.IsStopping.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_rebuild_text_"
    fi
    }
Opts.Apps.IsStopping.Rebuild.Init

Opts.Apps.IsNotStopping.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_rebuild_flag_
    }
Opts.Apps.IsNotStopping.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_rebuild_enable_
    }
Opts.Apps.IsNotStopping.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_rebuild_enable_
    }
Opts.Apps.IsNotStopping.Rebuild.Init()
    {
    _obj_opts_apps_isnotstopping_rebuild_text_=''
    _obj_opts_apps_isnotstopping_rebuild_flag_=false
    _obj_opts_apps_isnotstopping_rebuild_changes_flag_=true
    _obj_opts_apps_isnotstopping_rebuild_enable_=false
    }
Opts.Apps.IsNotStopping.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotstopping_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_rebuild_flag_
    }
Opts.Apps.IsNotStopping.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_rebuild_text_"
    fi
    }
Opts.Apps.IsNotStopping.Rebuild.Init

Opts.Apps.IsStopping.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_flag_=false
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_reinstall_flag_
    }
Opts.Apps.IsStopping.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_enable_=false
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_reinstall_enable_
    }
Opts.Apps.IsStopping.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_changes_flag_=false
    }
Opts.Apps.IsStopping.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_enable_=true
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_reinstall_enable_
    }
Opts.Apps.IsStopping.Reinstall.Init()
    {
    _obj_opts_apps_isstopping_reinstall_text_=''
    _obj_opts_apps_isstopping_reinstall_flag_=false
    _obj_opts_apps_isstopping_reinstall_changes_flag_=true
    _obj_opts_apps_isstopping_reinstall_enable_=false
    }
Opts.Apps.IsStopping.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_changes_flag_=true
    }
Opts.Apps.IsStopping.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isstopping_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_reinstall_flag_=true
    [[ $_obj_opts_apps_isstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_reinstall_flag_
    }
Opts.Apps.IsStopping.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_reinstall_text_"
    fi
    }
Opts.Apps.IsStopping.Reinstall.Init

Opts.Apps.IsNotStopping.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_reinstall_flag_
    }
Opts.Apps.IsNotStopping.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_reinstall_enable_
    }
Opts.Apps.IsNotStopping.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_reinstall_enable_
    }
Opts.Apps.IsNotStopping.Reinstall.Init()
    {
    _obj_opts_apps_isnotstopping_reinstall_text_=''
    _obj_opts_apps_isnotstopping_reinstall_flag_=false
    _obj_opts_apps_isnotstopping_reinstall_changes_flag_=true
    _obj_opts_apps_isnotstopping_reinstall_enable_=false
    }
Opts.Apps.IsNotStopping.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotstopping_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_reinstall_flag_
    }
Opts.Apps.IsNotStopping.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_reinstall_text_"
    fi
    }
Opts.Apps.IsNotStopping.Reinstall.Init

Opts.Apps.IsStopping.Restore.Clear()
    {
    [[ $_obj_opts_apps_isstopping_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restore_flag_=false
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restore_flag_
    }
Opts.Apps.IsStopping.Restore.Disable()
    {
    [[ $_obj_opts_apps_isstopping_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restore_enable_=false
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restore_enable_
    }
Opts.Apps.IsStopping.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restore_changes_flag_=false
    }
Opts.Apps.IsStopping.Restore.Enable()
    {
    [[ $_obj_opts_apps_isstopping_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restore_enable_=true
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restore_enable_
    }
Opts.Apps.IsStopping.Restore.Init()
    {
    _obj_opts_apps_isstopping_restore_text_=''
    _obj_opts_apps_isstopping_restore_flag_=false
    _obj_opts_apps_isstopping_restore_changes_flag_=true
    _obj_opts_apps_isstopping_restore_enable_=false
    }
Opts.Apps.IsStopping.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restore_changes_flag_=true
    }
Opts.Apps.IsStopping.Restore.Set()
    {
    [[ $_obj_opts_apps_isstopping_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restore_flag_=true
    [[ $_obj_opts_apps_isstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restore_flag_
    }
Opts.Apps.IsStopping.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_restore_text_"
    fi
    }
Opts.Apps.IsStopping.Restore.Init

Opts.Apps.IsNotStopping.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_flag_=false
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restore_flag_
    }
Opts.Apps.IsNotStopping.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_enable_=false
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restore_enable_
    }
Opts.Apps.IsNotStopping.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_enable_=true
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restore_enable_
    }
Opts.Apps.IsNotStopping.Restore.Init()
    {
    _obj_opts_apps_isnotstopping_restore_text_=''
    _obj_opts_apps_isnotstopping_restore_flag_=false
    _obj_opts_apps_isnotstopping_restore_changes_flag_=true
    _obj_opts_apps_isnotstopping_restore_enable_=false
    }
Opts.Apps.IsNotStopping.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restore_flag_=true
    [[ $_obj_opts_apps_isnotstopping_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restore_flag_
    }
Opts.Apps.IsNotStopping.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_restore_text_"
    fi
    }
Opts.Apps.IsNotStopping.Restore.Init

Opts.Apps.IsStopping.Restart.Clear()
    {
    [[ $_obj_opts_apps_isstopping_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restart_flag_=false
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restart_flag_
    }
Opts.Apps.IsStopping.Restart.Disable()
    {
    [[ $_obj_opts_apps_isstopping_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restart_enable_=false
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restart_enable_
    }
Opts.Apps.IsStopping.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_restart_changes_flag_=false
    }
Opts.Apps.IsStopping.Restart.Enable()
    {
    [[ $_obj_opts_apps_isstopping_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restart_enable_=true
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restart_enable_
    }
Opts.Apps.IsStopping.Restart.Init()
    {
    _obj_opts_apps_isstopping_restart_text_=''
    _obj_opts_apps_isstopping_restart_flag_=false
    _obj_opts_apps_isstopping_restart_changes_flag_=true
    _obj_opts_apps_isstopping_restart_enable_=false
    }
Opts.Apps.IsStopping.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restart_changes_flag_=true
    }
Opts.Apps.IsStopping.Restart.Set()
    {
    [[ $_obj_opts_apps_isstopping_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_restart_flag_=true
    [[ $_obj_opts_apps_isstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_restart_flag_
    }
Opts.Apps.IsStopping.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_restart_text_"
    fi
    }
Opts.Apps.IsStopping.Restart.Init

Opts.Apps.IsNotStopping.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_flag_=false
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restart_flag_
    }
Opts.Apps.IsNotStopping.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_enable_=false
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restart_enable_
    }
Opts.Apps.IsNotStopping.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_enable_=true
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restart_enable_
    }
Opts.Apps.IsNotStopping.Restart.Init()
    {
    _obj_opts_apps_isnotstopping_restart_text_=''
    _obj_opts_apps_isnotstopping_restart_flag_=false
    _obj_opts_apps_isnotstopping_restart_changes_flag_=true
    _obj_opts_apps_isnotstopping_restart_enable_=false
    }
Opts.Apps.IsNotStopping.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_restart_flag_=true
    [[ $_obj_opts_apps_isnotstopping_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_restart_flag_
    }
Opts.Apps.IsNotStopping.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_restart_text_"
    fi
    }
Opts.Apps.IsNotStopping.Restart.Init

Opts.Apps.IsStopping.Start.Clear()
    {
    [[ $_obj_opts_apps_isstopping_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_start_flag_=false
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_start_flag_
    }
Opts.Apps.IsStopping.Start.Disable()
    {
    [[ $_obj_opts_apps_isstopping_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_start_enable_=false
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_start_enable_
    }
Opts.Apps.IsStopping.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_start_changes_flag_=false
    }
Opts.Apps.IsStopping.Start.Enable()
    {
    [[ $_obj_opts_apps_isstopping_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_start_enable_=true
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_start_enable_
    }
Opts.Apps.IsStopping.Start.Init()
    {
    _obj_opts_apps_isstopping_start_text_=''
    _obj_opts_apps_isstopping_start_flag_=false
    _obj_opts_apps_isstopping_start_changes_flag_=true
    _obj_opts_apps_isstopping_start_enable_=false
    }
Opts.Apps.IsStopping.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_start_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_start_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Start.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_start_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Start.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_start_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_start_changes_flag_=true
    }
Opts.Apps.IsStopping.Start.Set()
    {
    [[ $_obj_opts_apps_isstopping_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_start_flag_=true
    [[ $_obj_opts_apps_isstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_start_flag_
    }
Opts.Apps.IsStopping.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_start_text_"
    fi
    }
Opts.Apps.IsStopping.Start.Init

Opts.Apps.IsNotStopping.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_flag_=false
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_start_flag_
    }
Opts.Apps.IsNotStopping.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_enable_=false
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_start_enable_
    }
Opts.Apps.IsNotStopping.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_enable_=true
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_start_enable_
    }
Opts.Apps.IsNotStopping.Start.Init()
    {
    _obj_opts_apps_isnotstopping_start_text_=''
    _obj_opts_apps_isnotstopping_start_flag_=false
    _obj_opts_apps_isnotstopping_start_changes_flag_=true
    _obj_opts_apps_isnotstopping_start_enable_=false
    }
Opts.Apps.IsNotStopping.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Start.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_start_flag_=true
    [[ $_obj_opts_apps_isnotstopping_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_start_flag_
    }
Opts.Apps.IsNotStopping.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_start_text_"
    fi
    }
Opts.Apps.IsNotStopping.Start.Init

Opts.Apps.IsStopping.Stop.Clear()
    {
    [[ $_obj_opts_apps_isstopping_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_stop_flag_=false
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_stop_flag_
    }
Opts.Apps.IsStopping.Stop.Disable()
    {
    [[ $_obj_opts_apps_isstopping_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_stop_enable_=false
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_stop_enable_
    }
Opts.Apps.IsStopping.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_stop_changes_flag_=false
    }
Opts.Apps.IsStopping.Stop.Enable()
    {
    [[ $_obj_opts_apps_isstopping_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_stop_enable_=true
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_stop_enable_
    }
Opts.Apps.IsStopping.Stop.Init()
    {
    _obj_opts_apps_isstopping_stop_text_=''
    _obj_opts_apps_isstopping_stop_flag_=false
    _obj_opts_apps_isstopping_stop_changes_flag_=true
    _obj_opts_apps_isstopping_stop_enable_=false
    }
Opts.Apps.IsStopping.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_stop_changes_flag_=true
    }
Opts.Apps.IsStopping.Stop.Set()
    {
    [[ $_obj_opts_apps_isstopping_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_stop_flag_=true
    [[ $_obj_opts_apps_isstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_stop_flag_
    }
Opts.Apps.IsStopping.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_stop_text_"
    fi
    }
Opts.Apps.IsStopping.Stop.Init

Opts.Apps.IsNotStopping.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_flag_=false
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_stop_flag_
    }
Opts.Apps.IsNotStopping.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_enable_=false
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_stop_enable_
    }
Opts.Apps.IsNotStopping.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_enable_=true
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_stop_enable_
    }
Opts.Apps.IsNotStopping.Stop.Init()
    {
    _obj_opts_apps_isnotstopping_stop_text_=''
    _obj_opts_apps_isnotstopping_stop_flag_=false
    _obj_opts_apps_isnotstopping_stop_changes_flag_=true
    _obj_opts_apps_isnotstopping_stop_enable_=false
    }
Opts.Apps.IsNotStopping.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_stop_flag_=true
    [[ $_obj_opts_apps_isnotstopping_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_stop_flag_
    }
Opts.Apps.IsNotStopping.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_stop_text_"
    fi
    }
Opts.Apps.IsNotStopping.Stop.Init

Opts.Apps.IsStopping.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_flag_=false
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_uninstall_flag_
    }
Opts.Apps.IsStopping.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_enable_=false
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_uninstall_enable_
    }
Opts.Apps.IsStopping.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_changes_flag_=false
    }
Opts.Apps.IsStopping.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_enable_=true
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_uninstall_enable_
    }
Opts.Apps.IsStopping.Uninstall.Init()
    {
    _obj_opts_apps_isstopping_uninstall_text_=''
    _obj_opts_apps_isstopping_uninstall_flag_=false
    _obj_opts_apps_isstopping_uninstall_changes_flag_=true
    _obj_opts_apps_isstopping_uninstall_enable_=false
    }
Opts.Apps.IsStopping.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_changes_flag_=true
    }
Opts.Apps.IsStopping.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isstopping_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_uninstall_flag_=true
    [[ $_obj_opts_apps_isstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_uninstall_flag_
    }
Opts.Apps.IsStopping.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_uninstall_text_"
    fi
    }
Opts.Apps.IsStopping.Uninstall.Init

Opts.Apps.IsNotStopping.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_uninstall_flag_
    }
Opts.Apps.IsNotStopping.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_uninstall_enable_
    }
Opts.Apps.IsNotStopping.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_uninstall_enable_
    }
Opts.Apps.IsNotStopping.Uninstall.Init()
    {
    _obj_opts_apps_isnotstopping_uninstall_text_=''
    _obj_opts_apps_isnotstopping_uninstall_flag_=false
    _obj_opts_apps_isnotstopping_uninstall_changes_flag_=true
    _obj_opts_apps_isnotstopping_uninstall_enable_=false
    }
Opts.Apps.IsNotStopping.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotstopping_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_uninstall_flag_
    }
Opts.Apps.IsNotStopping.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_uninstall_text_"
    fi
    }
Opts.Apps.IsNotStopping.Uninstall.Init

Opts.Apps.IsStopping.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_flag_=false
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_upgrade_flag_
    }
Opts.Apps.IsStopping.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_enable_=false
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_upgrade_enable_
    }
Opts.Apps.IsStopping.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_changes_flag_=false
    }
Opts.Apps.IsStopping.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_enable_=true
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_upgrade_enable_
    }
Opts.Apps.IsStopping.Upgrade.Init()
    {
    _obj_opts_apps_isstopping_upgrade_text_=''
    _obj_opts_apps_isstopping_upgrade_flag_=false
    _obj_opts_apps_isstopping_upgrade_changes_flag_=true
    _obj_opts_apps_isstopping_upgrade_enable_=false
    }
Opts.Apps.IsStopping.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsStopping.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsStopping.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsStopping.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsStopping.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_changes_flag_=true
    }
Opts.Apps.IsStopping.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isstopping_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopping_upgrade_flag_=true
    [[ $_obj_opts_apps_isstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopping_upgrade_flag_
    }
Opts.Apps.IsStopping.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopping_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopping_upgrade_text_"
    fi
    }
Opts.Apps.IsStopping.Upgrade.Init

Opts.Apps.IsNotStopping.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_upgrade_flag_
    }
Opts.Apps.IsNotStopping.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_upgrade_enable_
    }
Opts.Apps.IsNotStopping.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotStopping.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_upgrade_enable_
    }
Opts.Apps.IsNotStopping.Upgrade.Init()
    {
    _obj_opts_apps_isnotstopping_upgrade_text_=''
    _obj_opts_apps_isnotstopping_upgrade_flag_=false
    _obj_opts_apps_isnotstopping_upgrade_changes_flag_=true
    _obj_opts_apps_isnotstopping_upgrade_enable_=false
    }
Opts.Apps.IsNotStopping.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopping.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopping.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotStopping.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotstopping_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopping_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotstopping_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopping_upgrade_flag_
    }
Opts.Apps.IsNotStopping.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopping_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopping_upgrade_text_"
    fi
    }
Opts.Apps.IsNotStopping.Upgrade.Init

Opts.Apps.List.Stopped.Clear()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_flag_=false
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_flag_
    }
Opts.Apps.List.Stopped.Disable()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_enable_=false
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_enable_
    }
Opts.Apps.List.Stopped.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_stopped_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_stopped_changes_flag_=false
    }
Opts.Apps.List.Stopped.Enable()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_enable_=true
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_enable_
    }
Opts.Apps.List.Stopped.Init()
    {
    _obj_opts_apps_list_stopped_text_=''
    _obj_opts_apps_list_stopped_flag_=false
    _obj_opts_apps_list_stopped_changes_flag_=true
    _obj_opts_apps_list_stopped_enable_=false
    }
Opts.Apps.List.Stopped.IsDisabled()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ != 'true' ]]
    }
Opts.Apps.List.Stopped.IsEnabled()
    {
    [[ $_obj_opts_apps_list_stopped_enable_ = 'true' ]]
    }
Opts.Apps.List.Stopped.IsNot()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ != 'true' ]]
    }
Opts.Apps.List.Stopped.IsSet()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ = 'true' ]]
    }
Opts.Apps.List.Stopped.LogChanges()
    {
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_changes_flag_=true
    }
Opts.Apps.List.Stopped.Set()
    {
    [[ $_obj_opts_apps_list_stopped_flag_ = 'true' ]] && return
    _obj_opts_apps_list_stopped_flag_=true
    [[ $_obj_opts_apps_list_stopped_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_stopped_flag_
    }
Opts.Apps.List.Stopped.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_stopped_text_=$2
    else
        echo -n "$_obj_opts_apps_list_stopped_text_"
    fi
    }
Opts.Apps.List.Stopped.Init

Opts.Apps.IsStopped.Backup.Clear()
    {
    [[ $_obj_opts_apps_isstopped_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_backup_flag_=false
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_backup_flag_
    }
Opts.Apps.IsStopped.Backup.Disable()
    {
    [[ $_obj_opts_apps_isstopped_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_backup_enable_=false
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_backup_enable_
    }
Opts.Apps.IsStopped.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_backup_changes_flag_=false
    }
Opts.Apps.IsStopped.Backup.Enable()
    {
    [[ $_obj_opts_apps_isstopped_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_backup_enable_=true
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_backup_enable_
    }
Opts.Apps.IsStopped.Backup.Init()
    {
    _obj_opts_apps_isstopped_backup_text_=''
    _obj_opts_apps_isstopped_backup_flag_=false
    _obj_opts_apps_isstopped_backup_changes_flag_=true
    _obj_opts_apps_isstopped_backup_enable_=false
    }
Opts.Apps.IsStopped.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_backup_changes_flag_=true
    }
Opts.Apps.IsStopped.Backup.Set()
    {
    [[ $_obj_opts_apps_isstopped_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_backup_flag_=true
    [[ $_obj_opts_apps_isstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_backup_flag_
    }
Opts.Apps.IsStopped.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_backup_text_"
    fi
    }
Opts.Apps.IsStopped.Backup.Init

Opts.Apps.IsNotStopped.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_flag_=false
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_backup_flag_
    }
Opts.Apps.IsNotStopped.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_enable_=false
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_backup_enable_
    }
Opts.Apps.IsNotStopped.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_enable_=true
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_backup_enable_
    }
Opts.Apps.IsNotStopped.Backup.Init()
    {
    _obj_opts_apps_isnotstopped_backup_text_=''
    _obj_opts_apps_isnotstopped_backup_flag_=false
    _obj_opts_apps_isnotstopped_backup_changes_flag_=true
    _obj_opts_apps_isnotstopped_backup_enable_=false
    }
Opts.Apps.IsNotStopped.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_backup_flag_=true
    [[ $_obj_opts_apps_isnotstopped_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_backup_flag_
    }
Opts.Apps.IsNotStopped.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_backup_text_"
    fi
    }
Opts.Apps.IsNotStopped.Backup.Init

Opts.Apps.IsStopped.Download.Clear()
    {
    [[ $_obj_opts_apps_isstopped_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_download_flag_=false
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_download_flag_
    }
Opts.Apps.IsStopped.Download.Disable()
    {
    [[ $_obj_opts_apps_isstopped_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_download_enable_=false
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_download_enable_
    }
Opts.Apps.IsStopped.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_download_changes_flag_=false
    }
Opts.Apps.IsStopped.Download.Enable()
    {
    [[ $_obj_opts_apps_isstopped_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_download_enable_=true
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_download_enable_
    }
Opts.Apps.IsStopped.Download.Init()
    {
    _obj_opts_apps_isstopped_download_text_=''
    _obj_opts_apps_isstopped_download_flag_=false
    _obj_opts_apps_isstopped_download_changes_flag_=true
    _obj_opts_apps_isstopped_download_enable_=false
    }
Opts.Apps.IsStopped.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_download_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_download_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Download.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_download_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Download.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_download_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_download_changes_flag_=true
    }
Opts.Apps.IsStopped.Download.Set()
    {
    [[ $_obj_opts_apps_isstopped_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_download_flag_=true
    [[ $_obj_opts_apps_isstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_download_flag_
    }
Opts.Apps.IsStopped.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_download_text_"
    fi
    }
Opts.Apps.IsStopped.Download.Init

Opts.Apps.IsNotStopped.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_flag_=false
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_download_flag_
    }
Opts.Apps.IsNotStopped.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_enable_=false
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_download_enable_
    }
Opts.Apps.IsNotStopped.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_enable_=true
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_download_enable_
    }
Opts.Apps.IsNotStopped.Download.Init()
    {
    _obj_opts_apps_isnotstopped_download_text_=''
    _obj_opts_apps_isnotstopped_download_flag_=false
    _obj_opts_apps_isnotstopped_download_changes_flag_=true
    _obj_opts_apps_isnotstopped_download_enable_=false
    }
Opts.Apps.IsNotStopped.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Download.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_download_flag_=true
    [[ $_obj_opts_apps_isnotstopped_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_download_flag_
    }
Opts.Apps.IsNotStopped.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_download_text_"
    fi
    }
Opts.Apps.IsNotStopped.Download.Init

Opts.Apps.IsStopped.Install.Clear()
    {
    [[ $_obj_opts_apps_isstopped_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_install_flag_=false
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_install_flag_
    }
Opts.Apps.IsStopped.Install.Disable()
    {
    [[ $_obj_opts_apps_isstopped_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_install_enable_=false
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_install_enable_
    }
Opts.Apps.IsStopped.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_install_changes_flag_=false
    }
Opts.Apps.IsStopped.Install.Enable()
    {
    [[ $_obj_opts_apps_isstopped_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_install_enable_=true
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_install_enable_
    }
Opts.Apps.IsStopped.Install.Init()
    {
    _obj_opts_apps_isstopped_install_text_=''
    _obj_opts_apps_isstopped_install_flag_=false
    _obj_opts_apps_isstopped_install_changes_flag_=true
    _obj_opts_apps_isstopped_install_enable_=false
    }
Opts.Apps.IsStopped.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_install_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_install_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Install.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_install_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Install.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_install_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_install_changes_flag_=true
    }
Opts.Apps.IsStopped.Install.Set()
    {
    [[ $_obj_opts_apps_isstopped_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_install_flag_=true
    [[ $_obj_opts_apps_isstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_install_flag_
    }
Opts.Apps.IsStopped.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_install_text_"
    fi
    }
Opts.Apps.IsStopped.Install.Init

Opts.Apps.IsNotStopped.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_flag_=false
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_install_flag_
    }
Opts.Apps.IsNotStopped.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_enable_=false
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_install_enable_
    }
Opts.Apps.IsNotStopped.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_enable_=true
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_install_enable_
    }
Opts.Apps.IsNotStopped.Install.Init()
    {
    _obj_opts_apps_isnotstopped_install_text_=''
    _obj_opts_apps_isnotstopped_install_flag_=false
    _obj_opts_apps_isnotstopped_install_changes_flag_=true
    _obj_opts_apps_isnotstopped_install_enable_=false
    }
Opts.Apps.IsNotStopped.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Install.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_install_flag_=true
    [[ $_obj_opts_apps_isnotstopped_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_install_flag_
    }
Opts.Apps.IsNotStopped.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_install_text_"
    fi
    }
Opts.Apps.IsNotStopped.Install.Init

Opts.Apps.IsStopped.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_flag_=false
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_rebuild_flag_
    }
Opts.Apps.IsStopped.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_enable_=false
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_rebuild_enable_
    }
Opts.Apps.IsStopped.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_changes_flag_=false
    }
Opts.Apps.IsStopped.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_enable_=true
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_rebuild_enable_
    }
Opts.Apps.IsStopped.Rebuild.Init()
    {
    _obj_opts_apps_isstopped_rebuild_text_=''
    _obj_opts_apps_isstopped_rebuild_flag_=false
    _obj_opts_apps_isstopped_rebuild_changes_flag_=true
    _obj_opts_apps_isstopped_rebuild_enable_=false
    }
Opts.Apps.IsStopped.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_changes_flag_=true
    }
Opts.Apps.IsStopped.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isstopped_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_rebuild_flag_=true
    [[ $_obj_opts_apps_isstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_rebuild_flag_
    }
Opts.Apps.IsStopped.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_rebuild_text_"
    fi
    }
Opts.Apps.IsStopped.Rebuild.Init

Opts.Apps.IsNotStopped.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_rebuild_flag_
    }
Opts.Apps.IsNotStopped.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_rebuild_enable_
    }
Opts.Apps.IsNotStopped.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_rebuild_enable_
    }
Opts.Apps.IsNotStopped.Rebuild.Init()
    {
    _obj_opts_apps_isnotstopped_rebuild_text_=''
    _obj_opts_apps_isnotstopped_rebuild_flag_=false
    _obj_opts_apps_isnotstopped_rebuild_changes_flag_=true
    _obj_opts_apps_isnotstopped_rebuild_enable_=false
    }
Opts.Apps.IsNotStopped.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotstopped_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_rebuild_flag_
    }
Opts.Apps.IsNotStopped.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_rebuild_text_"
    fi
    }
Opts.Apps.IsNotStopped.Rebuild.Init

Opts.Apps.IsStopped.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_flag_=false
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_reinstall_flag_
    }
Opts.Apps.IsStopped.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_enable_=false
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_reinstall_enable_
    }
Opts.Apps.IsStopped.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_changes_flag_=false
    }
Opts.Apps.IsStopped.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_enable_=true
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_reinstall_enable_
    }
Opts.Apps.IsStopped.Reinstall.Init()
    {
    _obj_opts_apps_isstopped_reinstall_text_=''
    _obj_opts_apps_isstopped_reinstall_flag_=false
    _obj_opts_apps_isstopped_reinstall_changes_flag_=true
    _obj_opts_apps_isstopped_reinstall_enable_=false
    }
Opts.Apps.IsStopped.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_changes_flag_=true
    }
Opts.Apps.IsStopped.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isstopped_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_reinstall_flag_=true
    [[ $_obj_opts_apps_isstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_reinstall_flag_
    }
Opts.Apps.IsStopped.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_reinstall_text_"
    fi
    }
Opts.Apps.IsStopped.Reinstall.Init

Opts.Apps.IsNotStopped.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_reinstall_flag_
    }
Opts.Apps.IsNotStopped.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_reinstall_enable_
    }
Opts.Apps.IsNotStopped.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_reinstall_enable_
    }
Opts.Apps.IsNotStopped.Reinstall.Init()
    {
    _obj_opts_apps_isnotstopped_reinstall_text_=''
    _obj_opts_apps_isnotstopped_reinstall_flag_=false
    _obj_opts_apps_isnotstopped_reinstall_changes_flag_=true
    _obj_opts_apps_isnotstopped_reinstall_enable_=false
    }
Opts.Apps.IsNotStopped.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotstopped_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_reinstall_flag_
    }
Opts.Apps.IsNotStopped.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_reinstall_text_"
    fi
    }
Opts.Apps.IsNotStopped.Reinstall.Init

Opts.Apps.IsStopped.Restore.Clear()
    {
    [[ $_obj_opts_apps_isstopped_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restore_flag_=false
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restore_flag_
    }
Opts.Apps.IsStopped.Restore.Disable()
    {
    [[ $_obj_opts_apps_isstopped_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restore_enable_=false
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restore_enable_
    }
Opts.Apps.IsStopped.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restore_changes_flag_=false
    }
Opts.Apps.IsStopped.Restore.Enable()
    {
    [[ $_obj_opts_apps_isstopped_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restore_enable_=true
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restore_enable_
    }
Opts.Apps.IsStopped.Restore.Init()
    {
    _obj_opts_apps_isstopped_restore_text_=''
    _obj_opts_apps_isstopped_restore_flag_=false
    _obj_opts_apps_isstopped_restore_changes_flag_=true
    _obj_opts_apps_isstopped_restore_enable_=false
    }
Opts.Apps.IsStopped.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restore_changes_flag_=true
    }
Opts.Apps.IsStopped.Restore.Set()
    {
    [[ $_obj_opts_apps_isstopped_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restore_flag_=true
    [[ $_obj_opts_apps_isstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restore_flag_
    }
Opts.Apps.IsStopped.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_restore_text_"
    fi
    }
Opts.Apps.IsStopped.Restore.Init

Opts.Apps.IsNotStopped.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_flag_=false
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restore_flag_
    }
Opts.Apps.IsNotStopped.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_enable_=false
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restore_enable_
    }
Opts.Apps.IsNotStopped.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_enable_=true
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restore_enable_
    }
Opts.Apps.IsNotStopped.Restore.Init()
    {
    _obj_opts_apps_isnotstopped_restore_text_=''
    _obj_opts_apps_isnotstopped_restore_flag_=false
    _obj_opts_apps_isnotstopped_restore_changes_flag_=true
    _obj_opts_apps_isnotstopped_restore_enable_=false
    }
Opts.Apps.IsNotStopped.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restore_flag_=true
    [[ $_obj_opts_apps_isnotstopped_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restore_flag_
    }
Opts.Apps.IsNotStopped.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_restore_text_"
    fi
    }
Opts.Apps.IsNotStopped.Restore.Init

Opts.Apps.IsStopped.Restart.Clear()
    {
    [[ $_obj_opts_apps_isstopped_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restart_flag_=false
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restart_flag_
    }
Opts.Apps.IsStopped.Restart.Disable()
    {
    [[ $_obj_opts_apps_isstopped_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restart_enable_=false
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restart_enable_
    }
Opts.Apps.IsStopped.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_restart_changes_flag_=false
    }
Opts.Apps.IsStopped.Restart.Enable()
    {
    [[ $_obj_opts_apps_isstopped_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restart_enable_=true
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restart_enable_
    }
Opts.Apps.IsStopped.Restart.Init()
    {
    _obj_opts_apps_isstopped_restart_text_=''
    _obj_opts_apps_isstopped_restart_flag_=false
    _obj_opts_apps_isstopped_restart_changes_flag_=true
    _obj_opts_apps_isstopped_restart_enable_=false
    }
Opts.Apps.IsStopped.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restart_changes_flag_=true
    }
Opts.Apps.IsStopped.Restart.Set()
    {
    [[ $_obj_opts_apps_isstopped_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_restart_flag_=true
    [[ $_obj_opts_apps_isstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_restart_flag_
    }
Opts.Apps.IsStopped.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_restart_text_"
    fi
    }
Opts.Apps.IsStopped.Restart.Init

Opts.Apps.IsNotStopped.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_flag_=false
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restart_flag_
    }
Opts.Apps.IsNotStopped.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_enable_=false
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restart_enable_
    }
Opts.Apps.IsNotStopped.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_enable_=true
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restart_enable_
    }
Opts.Apps.IsNotStopped.Restart.Init()
    {
    _obj_opts_apps_isnotstopped_restart_text_=''
    _obj_opts_apps_isnotstopped_restart_flag_=false
    _obj_opts_apps_isnotstopped_restart_changes_flag_=true
    _obj_opts_apps_isnotstopped_restart_enable_=false
    }
Opts.Apps.IsNotStopped.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_restart_flag_=true
    [[ $_obj_opts_apps_isnotstopped_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_restart_flag_
    }
Opts.Apps.IsNotStopped.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_restart_text_"
    fi
    }
Opts.Apps.IsNotStopped.Restart.Init

Opts.Apps.IsStopped.Start.Clear()
    {
    [[ $_obj_opts_apps_isstopped_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_start_flag_=false
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_start_flag_
    }
Opts.Apps.IsStopped.Start.Disable()
    {
    [[ $_obj_opts_apps_isstopped_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_start_enable_=false
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_start_enable_
    }
Opts.Apps.IsStopped.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_start_changes_flag_=false
    }
Opts.Apps.IsStopped.Start.Enable()
    {
    [[ $_obj_opts_apps_isstopped_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_start_enable_=true
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_start_enable_
    }
Opts.Apps.IsStopped.Start.Init()
    {
    _obj_opts_apps_isstopped_start_text_=''
    _obj_opts_apps_isstopped_start_flag_=false
    _obj_opts_apps_isstopped_start_changes_flag_=true
    _obj_opts_apps_isstopped_start_enable_=false
    }
Opts.Apps.IsStopped.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_start_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_start_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Start.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_start_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Start.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_start_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_start_changes_flag_=true
    }
Opts.Apps.IsStopped.Start.Set()
    {
    [[ $_obj_opts_apps_isstopped_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_start_flag_=true
    [[ $_obj_opts_apps_isstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_start_flag_
    }
Opts.Apps.IsStopped.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_start_text_"
    fi
    }
Opts.Apps.IsStopped.Start.Init

Opts.Apps.IsNotStopped.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_flag_=false
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_start_flag_
    }
Opts.Apps.IsNotStopped.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_enable_=false
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_start_enable_
    }
Opts.Apps.IsNotStopped.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_enable_=true
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_start_enable_
    }
Opts.Apps.IsNotStopped.Start.Init()
    {
    _obj_opts_apps_isnotstopped_start_text_=''
    _obj_opts_apps_isnotstopped_start_flag_=false
    _obj_opts_apps_isnotstopped_start_changes_flag_=true
    _obj_opts_apps_isnotstopped_start_enable_=false
    }
Opts.Apps.IsNotStopped.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Start.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_start_flag_=true
    [[ $_obj_opts_apps_isnotstopped_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_start_flag_
    }
Opts.Apps.IsNotStopped.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_start_text_"
    fi
    }
Opts.Apps.IsNotStopped.Start.Init

Opts.Apps.IsStopped.Stop.Clear()
    {
    [[ $_obj_opts_apps_isstopped_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_stop_flag_=false
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_stop_flag_
    }
Opts.Apps.IsStopped.Stop.Disable()
    {
    [[ $_obj_opts_apps_isstopped_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_stop_enable_=false
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_stop_enable_
    }
Opts.Apps.IsStopped.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_stop_changes_flag_=false
    }
Opts.Apps.IsStopped.Stop.Enable()
    {
    [[ $_obj_opts_apps_isstopped_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_stop_enable_=true
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_stop_enable_
    }
Opts.Apps.IsStopped.Stop.Init()
    {
    _obj_opts_apps_isstopped_stop_text_=''
    _obj_opts_apps_isstopped_stop_flag_=false
    _obj_opts_apps_isstopped_stop_changes_flag_=true
    _obj_opts_apps_isstopped_stop_enable_=false
    }
Opts.Apps.IsStopped.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_stop_changes_flag_=true
    }
Opts.Apps.IsStopped.Stop.Set()
    {
    [[ $_obj_opts_apps_isstopped_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_stop_flag_=true
    [[ $_obj_opts_apps_isstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_stop_flag_
    }
Opts.Apps.IsStopped.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_stop_text_"
    fi
    }
Opts.Apps.IsStopped.Stop.Init

Opts.Apps.IsNotStopped.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_flag_=false
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_stop_flag_
    }
Opts.Apps.IsNotStopped.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_enable_=false
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_stop_enable_
    }
Opts.Apps.IsNotStopped.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_enable_=true
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_stop_enable_
    }
Opts.Apps.IsNotStopped.Stop.Init()
    {
    _obj_opts_apps_isnotstopped_stop_text_=''
    _obj_opts_apps_isnotstopped_stop_flag_=false
    _obj_opts_apps_isnotstopped_stop_changes_flag_=true
    _obj_opts_apps_isnotstopped_stop_enable_=false
    }
Opts.Apps.IsNotStopped.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_stop_flag_=true
    [[ $_obj_opts_apps_isnotstopped_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_stop_flag_
    }
Opts.Apps.IsNotStopped.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_stop_text_"
    fi
    }
Opts.Apps.IsNotStopped.Stop.Init

Opts.Apps.IsStopped.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_flag_=false
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_uninstall_flag_
    }
Opts.Apps.IsStopped.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_enable_=false
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_uninstall_enable_
    }
Opts.Apps.IsStopped.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_changes_flag_=false
    }
Opts.Apps.IsStopped.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_enable_=true
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_uninstall_enable_
    }
Opts.Apps.IsStopped.Uninstall.Init()
    {
    _obj_opts_apps_isstopped_uninstall_text_=''
    _obj_opts_apps_isstopped_uninstall_flag_=false
    _obj_opts_apps_isstopped_uninstall_changes_flag_=true
    _obj_opts_apps_isstopped_uninstall_enable_=false
    }
Opts.Apps.IsStopped.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_changes_flag_=true
    }
Opts.Apps.IsStopped.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isstopped_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_uninstall_flag_=true
    [[ $_obj_opts_apps_isstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_uninstall_flag_
    }
Opts.Apps.IsStopped.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_uninstall_text_"
    fi
    }
Opts.Apps.IsStopped.Uninstall.Init

Opts.Apps.IsNotStopped.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_uninstall_flag_
    }
Opts.Apps.IsNotStopped.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_uninstall_enable_
    }
Opts.Apps.IsNotStopped.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_uninstall_enable_
    }
Opts.Apps.IsNotStopped.Uninstall.Init()
    {
    _obj_opts_apps_isnotstopped_uninstall_text_=''
    _obj_opts_apps_isnotstopped_uninstall_flag_=false
    _obj_opts_apps_isnotstopped_uninstall_changes_flag_=true
    _obj_opts_apps_isnotstopped_uninstall_enable_=false
    }
Opts.Apps.IsNotStopped.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotstopped_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_uninstall_flag_
    }
Opts.Apps.IsNotStopped.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_uninstall_text_"
    fi
    }
Opts.Apps.IsNotStopped.Uninstall.Init

Opts.Apps.IsStopped.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_flag_=false
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_upgrade_flag_
    }
Opts.Apps.IsStopped.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_enable_=false
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_upgrade_enable_
    }
Opts.Apps.IsStopped.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_changes_flag_=false
    }
Opts.Apps.IsStopped.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_enable_=true
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_upgrade_enable_
    }
Opts.Apps.IsStopped.Upgrade.Init()
    {
    _obj_opts_apps_isstopped_upgrade_text_=''
    _obj_opts_apps_isstopped_upgrade_flag_=false
    _obj_opts_apps_isstopped_upgrade_changes_flag_=true
    _obj_opts_apps_isstopped_upgrade_enable_=false
    }
Opts.Apps.IsStopped.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsStopped.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsStopped.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsStopped.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsStopped.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_changes_flag_=true
    }
Opts.Apps.IsStopped.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isstopped_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isstopped_upgrade_flag_=true
    [[ $_obj_opts_apps_isstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isstopped_upgrade_flag_
    }
Opts.Apps.IsStopped.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isstopped_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isstopped_upgrade_text_"
    fi
    }
Opts.Apps.IsStopped.Upgrade.Init

Opts.Apps.IsNotStopped.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_upgrade_flag_
    }
Opts.Apps.IsNotStopped.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_upgrade_enable_
    }
Opts.Apps.IsNotStopped.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotStopped.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_upgrade_enable_
    }
Opts.Apps.IsNotStopped.Upgrade.Init()
    {
    _obj_opts_apps_isnotstopped_upgrade_text_=''
    _obj_opts_apps_isnotstopped_upgrade_flag_=false
    _obj_opts_apps_isnotstopped_upgrade_changes_flag_=true
    _obj_opts_apps_isnotstopped_upgrade_enable_=false
    }
Opts.Apps.IsNotStopped.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotStopped.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotStopped.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotStopped.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotstopped_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotstopped_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotstopped_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotstopped_upgrade_flag_
    }
Opts.Apps.IsNotStopped.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotstopped_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotstopped_upgrade_text_"
    fi
    }
Opts.Apps.IsNotStopped.Upgrade.Init

Opts.Apps.List.SupportBackup.Clear()
    {
    [[ $_obj_opts_apps_list_supportbackup_flag_ != 'true' ]] && return
    _obj_opts_apps_list_supportbackup_flag_=false
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportbackup_flag_
    }
Opts.Apps.List.SupportBackup.Disable()
    {
    [[ $_obj_opts_apps_list_supportbackup_enable_ != 'true' ]] && return
    _obj_opts_apps_list_supportbackup_enable_=false
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportbackup_enable_
    }
Opts.Apps.List.SupportBackup.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_supportbackup_changes_flag_=false
    }
Opts.Apps.List.SupportBackup.Enable()
    {
    [[ $_obj_opts_apps_list_supportbackup_enable_ = 'true' ]] && return
    _obj_opts_apps_list_supportbackup_enable_=true
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportbackup_enable_
    }
Opts.Apps.List.SupportBackup.Init()
    {
    _obj_opts_apps_list_supportbackup_text_=''
    _obj_opts_apps_list_supportbackup_flag_=false
    _obj_opts_apps_list_supportbackup_changes_flag_=true
    _obj_opts_apps_list_supportbackup_enable_=false
    }
Opts.Apps.List.SupportBackup.IsDisabled()
    {
    [[ $_obj_opts_apps_list_supportbackup_enable_ != 'true' ]]
    }
Opts.Apps.List.SupportBackup.IsEnabled()
    {
    [[ $_obj_opts_apps_list_supportbackup_enable_ = 'true' ]]
    }
Opts.Apps.List.SupportBackup.IsNot()
    {
    [[ $_obj_opts_apps_list_supportbackup_flag_ != 'true' ]]
    }
Opts.Apps.List.SupportBackup.IsSet()
    {
    [[ $_obj_opts_apps_list_supportbackup_flag_ = 'true' ]]
    }
Opts.Apps.List.SupportBackup.LogChanges()
    {
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_supportbackup_changes_flag_=true
    }
Opts.Apps.List.SupportBackup.Set()
    {
    [[ $_obj_opts_apps_list_supportbackup_flag_ = 'true' ]] && return
    _obj_opts_apps_list_supportbackup_flag_=true
    [[ $_obj_opts_apps_list_supportbackup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportbackup_flag_
    }
Opts.Apps.List.SupportBackup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_supportbackup_text_=$2
    else
        echo -n "$_obj_opts_apps_list_supportbackup_text_"
    fi
    }
Opts.Apps.List.SupportBackup.Init

Opts.Apps.IsSupportBackup.Backup.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_flag_=false
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_backup_flag_
    }
Opts.Apps.IsSupportBackup.Backup.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_enable_=false
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_backup_enable_
    }
Opts.Apps.IsSupportBackup.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Backup.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_enable_=true
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_backup_enable_
    }
Opts.Apps.IsSupportBackup.Backup.Init()
    {
    _obj_opts_apps_issupportbackup_backup_text_=''
    _obj_opts_apps_issupportbackup_backup_flag_=false
    _obj_opts_apps_issupportbackup_backup_changes_flag_=true
    _obj_opts_apps_issupportbackup_backup_enable_=false
    }
Opts.Apps.IsSupportBackup.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Backup.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Backup.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Backup.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_backup_flag_=true
    [[ $_obj_opts_apps_issupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_backup_flag_
    }
Opts.Apps.IsSupportBackup.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_backup_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Backup.Init

Opts.Apps.IsNotSupportBackup.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_backup_flag_
    }
Opts.Apps.IsNotSupportBackup.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_backup_enable_
    }
Opts.Apps.IsNotSupportBackup.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_backup_enable_
    }
Opts.Apps.IsNotSupportBackup.Backup.Init()
    {
    _obj_opts_apps_isnotsupportbackup_backup_text_=''
    _obj_opts_apps_isnotsupportbackup_backup_flag_=false
    _obj_opts_apps_isnotsupportbackup_backup_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_backup_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_backup_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_backup_flag_
    }
Opts.Apps.IsNotSupportBackup.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_backup_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Backup.Init

Opts.Apps.IsSupportBackup.Download.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_download_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_flag_=false
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_download_flag_
    }
Opts.Apps.IsSupportBackup.Download.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_download_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_enable_=false
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_download_enable_
    }
Opts.Apps.IsSupportBackup.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Download.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_download_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_enable_=true
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_download_enable_
    }
Opts.Apps.IsSupportBackup.Download.Init()
    {
    _obj_opts_apps_issupportbackup_download_text_=''
    _obj_opts_apps_issupportbackup_download_flag_=false
    _obj_opts_apps_issupportbackup_download_changes_flag_=true
    _obj_opts_apps_issupportbackup_download_enable_=false
    }
Opts.Apps.IsSupportBackup.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_download_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_download_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Download.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_download_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Download.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_download_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Download.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Download.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_download_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_download_flag_=true
    [[ $_obj_opts_apps_issupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_download_flag_
    }
Opts.Apps.IsSupportBackup.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_download_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_download_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Download.Init

Opts.Apps.IsNotSupportBackup.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_download_flag_
    }
Opts.Apps.IsNotSupportBackup.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_download_enable_
    }
Opts.Apps.IsNotSupportBackup.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_download_enable_
    }
Opts.Apps.IsNotSupportBackup.Download.Init()
    {
    _obj_opts_apps_isnotsupportbackup_download_text_=''
    _obj_opts_apps_isnotsupportbackup_download_flag_=false
    _obj_opts_apps_isnotsupportbackup_download_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_download_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Download.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_download_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_download_flag_
    }
Opts.Apps.IsNotSupportBackup.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_download_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Download.Init

Opts.Apps.IsSupportBackup.Install.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_install_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_flag_=false
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_install_flag_
    }
Opts.Apps.IsSupportBackup.Install.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_install_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_enable_=false
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_install_enable_
    }
Opts.Apps.IsSupportBackup.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Install.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_install_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_enable_=true
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_install_enable_
    }
Opts.Apps.IsSupportBackup.Install.Init()
    {
    _obj_opts_apps_issupportbackup_install_text_=''
    _obj_opts_apps_issupportbackup_install_flag_=false
    _obj_opts_apps_issupportbackup_install_changes_flag_=true
    _obj_opts_apps_issupportbackup_install_enable_=false
    }
Opts.Apps.IsSupportBackup.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_install_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_install_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Install.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_install_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Install.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_install_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Install.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Install.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_install_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_install_flag_=true
    [[ $_obj_opts_apps_issupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_install_flag_
    }
Opts.Apps.IsSupportBackup.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_install_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_install_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Install.Init

Opts.Apps.IsNotSupportBackup.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_install_flag_
    }
Opts.Apps.IsNotSupportBackup.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_install_enable_
    }
Opts.Apps.IsNotSupportBackup.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_install_enable_
    }
Opts.Apps.IsNotSupportBackup.Install.Init()
    {
    _obj_opts_apps_isnotsupportbackup_install_text_=''
    _obj_opts_apps_isnotsupportbackup_install_flag_=false
    _obj_opts_apps_isnotsupportbackup_install_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_install_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Install.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_install_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_install_flag_
    }
Opts.Apps.IsNotSupportBackup.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_install_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Install.Init

Opts.Apps.IsSupportBackup.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_flag_=false
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_rebuild_flag_
    }
Opts.Apps.IsSupportBackup.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_enable_=false
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_rebuild_enable_
    }
Opts.Apps.IsSupportBackup.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_enable_=true
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_rebuild_enable_
    }
Opts.Apps.IsSupportBackup.Rebuild.Init()
    {
    _obj_opts_apps_issupportbackup_rebuild_text_=''
    _obj_opts_apps_issupportbackup_rebuild_flag_=false
    _obj_opts_apps_issupportbackup_rebuild_changes_flag_=true
    _obj_opts_apps_issupportbackup_rebuild_enable_=false
    }
Opts.Apps.IsSupportBackup.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Rebuild.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_rebuild_flag_=true
    [[ $_obj_opts_apps_issupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_rebuild_flag_
    }
Opts.Apps.IsSupportBackup.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_rebuild_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Rebuild.Init

Opts.Apps.IsNotSupportBackup.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_rebuild_flag_
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_rebuild_enable_
    }
Opts.Apps.IsNotSupportBackup.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_rebuild_enable_
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Init()
    {
    _obj_opts_apps_isnotsupportbackup_rebuild_text_=''
    _obj_opts_apps_isnotsupportbackup_rebuild_flag_=false
    _obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_rebuild_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_rebuild_flag_
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_rebuild_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Rebuild.Init

Opts.Apps.IsSupportBackup.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_flag_=false
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_reinstall_flag_
    }
Opts.Apps.IsSupportBackup.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_enable_=false
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_reinstall_enable_
    }
Opts.Apps.IsSupportBackup.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_enable_=true
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_reinstall_enable_
    }
Opts.Apps.IsSupportBackup.Reinstall.Init()
    {
    _obj_opts_apps_issupportbackup_reinstall_text_=''
    _obj_opts_apps_issupportbackup_reinstall_flag_=false
    _obj_opts_apps_issupportbackup_reinstall_changes_flag_=true
    _obj_opts_apps_issupportbackup_reinstall_enable_=false
    }
Opts.Apps.IsSupportBackup.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Reinstall.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_reinstall_flag_=true
    [[ $_obj_opts_apps_issupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_reinstall_flag_
    }
Opts.Apps.IsSupportBackup.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_reinstall_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Reinstall.Init

Opts.Apps.IsNotSupportBackup.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_reinstall_flag_
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_reinstall_enable_
    }
Opts.Apps.IsNotSupportBackup.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_reinstall_enable_
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Init()
    {
    _obj_opts_apps_isnotsupportbackup_reinstall_text_=''
    _obj_opts_apps_isnotsupportbackup_reinstall_flag_=false
    _obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_reinstall_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_reinstall_flag_
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_reinstall_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Reinstall.Init

Opts.Apps.IsSupportBackup.Restore.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_flag_=false
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restore_flag_
    }
Opts.Apps.IsSupportBackup.Restore.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_enable_=false
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restore_enable_
    }
Opts.Apps.IsSupportBackup.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Restore.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_enable_=true
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restore_enable_
    }
Opts.Apps.IsSupportBackup.Restore.Init()
    {
    _obj_opts_apps_issupportbackup_restore_text_=''
    _obj_opts_apps_issupportbackup_restore_flag_=false
    _obj_opts_apps_issupportbackup_restore_changes_flag_=true
    _obj_opts_apps_issupportbackup_restore_enable_=false
    }
Opts.Apps.IsSupportBackup.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restore.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restore.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Restore.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restore_flag_=true
    [[ $_obj_opts_apps_issupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restore_flag_
    }
Opts.Apps.IsSupportBackup.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_restore_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Restore.Init

Opts.Apps.IsNotSupportBackup.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restore_flag_
    }
Opts.Apps.IsNotSupportBackup.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restore_enable_
    }
Opts.Apps.IsNotSupportBackup.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restore_enable_
    }
Opts.Apps.IsNotSupportBackup.Restore.Init()
    {
    _obj_opts_apps_isnotsupportbackup_restore_text_=''
    _obj_opts_apps_isnotsupportbackup_restore_flag_=false
    _obj_opts_apps_isnotsupportbackup_restore_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_restore_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restore_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restore_flag_
    }
Opts.Apps.IsNotSupportBackup.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_restore_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Restore.Init

Opts.Apps.IsSupportBackup.Restart.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_flag_=false
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restart_flag_
    }
Opts.Apps.IsSupportBackup.Restart.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_enable_=false
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restart_enable_
    }
Opts.Apps.IsSupportBackup.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Restart.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_enable_=true
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restart_enable_
    }
Opts.Apps.IsSupportBackup.Restart.Init()
    {
    _obj_opts_apps_issupportbackup_restart_text_=''
    _obj_opts_apps_issupportbackup_restart_flag_=false
    _obj_opts_apps_issupportbackup_restart_changes_flag_=true
    _obj_opts_apps_issupportbackup_restart_enable_=false
    }
Opts.Apps.IsSupportBackup.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restart.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restart.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Restart.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_restart_flag_=true
    [[ $_obj_opts_apps_issupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_restart_flag_
    }
Opts.Apps.IsSupportBackup.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_restart_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Restart.Init

Opts.Apps.IsNotSupportBackup.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restart_flag_
    }
Opts.Apps.IsNotSupportBackup.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restart_enable_
    }
Opts.Apps.IsNotSupportBackup.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restart_enable_
    }
Opts.Apps.IsNotSupportBackup.Restart.Init()
    {
    _obj_opts_apps_isnotsupportbackup_restart_text_=''
    _obj_opts_apps_isnotsupportbackup_restart_flag_=false
    _obj_opts_apps_isnotsupportbackup_restart_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_restart_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_restart_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_restart_flag_
    }
Opts.Apps.IsNotSupportBackup.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_restart_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Restart.Init

Opts.Apps.IsSupportBackup.Start.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_start_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_flag_=false
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_start_flag_
    }
Opts.Apps.IsSupportBackup.Start.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_start_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_enable_=false
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_start_enable_
    }
Opts.Apps.IsSupportBackup.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Start.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_start_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_enable_=true
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_start_enable_
    }
Opts.Apps.IsSupportBackup.Start.Init()
    {
    _obj_opts_apps_issupportbackup_start_text_=''
    _obj_opts_apps_issupportbackup_start_flag_=false
    _obj_opts_apps_issupportbackup_start_changes_flag_=true
    _obj_opts_apps_issupportbackup_start_enable_=false
    }
Opts.Apps.IsSupportBackup.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_start_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_start_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Start.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_start_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Start.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_start_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Start.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Start.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_start_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_start_flag_=true
    [[ $_obj_opts_apps_issupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_start_flag_
    }
Opts.Apps.IsSupportBackup.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_start_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_start_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Start.Init

Opts.Apps.IsNotSupportBackup.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_start_flag_
    }
Opts.Apps.IsNotSupportBackup.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_start_enable_
    }
Opts.Apps.IsNotSupportBackup.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_start_enable_
    }
Opts.Apps.IsNotSupportBackup.Start.Init()
    {
    _obj_opts_apps_isnotsupportbackup_start_text_=''
    _obj_opts_apps_isnotsupportbackup_start_flag_=false
    _obj_opts_apps_isnotsupportbackup_start_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_start_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Start.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_start_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_start_flag_
    }
Opts.Apps.IsNotSupportBackup.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_start_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Start.Init

Opts.Apps.IsSupportBackup.Stop.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_flag_=false
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_stop_flag_
    }
Opts.Apps.IsSupportBackup.Stop.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_enable_=false
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_stop_enable_
    }
Opts.Apps.IsSupportBackup.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Stop.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_enable_=true
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_stop_enable_
    }
Opts.Apps.IsSupportBackup.Stop.Init()
    {
    _obj_opts_apps_issupportbackup_stop_text_=''
    _obj_opts_apps_issupportbackup_stop_flag_=false
    _obj_opts_apps_issupportbackup_stop_changes_flag_=true
    _obj_opts_apps_issupportbackup_stop_enable_=false
    }
Opts.Apps.IsSupportBackup.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Stop.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Stop.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Stop.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_stop_flag_=true
    [[ $_obj_opts_apps_issupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_stop_flag_
    }
Opts.Apps.IsSupportBackup.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_stop_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Stop.Init

Opts.Apps.IsNotSupportBackup.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_stop_flag_
    }
Opts.Apps.IsNotSupportBackup.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_stop_enable_
    }
Opts.Apps.IsNotSupportBackup.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_stop_enable_
    }
Opts.Apps.IsNotSupportBackup.Stop.Init()
    {
    _obj_opts_apps_isnotsupportbackup_stop_text_=''
    _obj_opts_apps_isnotsupportbackup_stop_flag_=false
    _obj_opts_apps_isnotsupportbackup_stop_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_stop_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_stop_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_stop_flag_
    }
Opts.Apps.IsNotSupportBackup.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_stop_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Stop.Init

Opts.Apps.IsSupportBackup.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_flag_=false
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_uninstall_flag_
    }
Opts.Apps.IsSupportBackup.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_enable_=false
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_uninstall_enable_
    }
Opts.Apps.IsSupportBackup.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_enable_=true
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_uninstall_enable_
    }
Opts.Apps.IsSupportBackup.Uninstall.Init()
    {
    _obj_opts_apps_issupportbackup_uninstall_text_=''
    _obj_opts_apps_issupportbackup_uninstall_flag_=false
    _obj_opts_apps_issupportbackup_uninstall_changes_flag_=true
    _obj_opts_apps_issupportbackup_uninstall_enable_=false
    }
Opts.Apps.IsSupportBackup.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Uninstall.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_uninstall_flag_=true
    [[ $_obj_opts_apps_issupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_uninstall_flag_
    }
Opts.Apps.IsSupportBackup.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_uninstall_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Uninstall.Init

Opts.Apps.IsNotSupportBackup.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_uninstall_flag_
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_uninstall_enable_
    }
Opts.Apps.IsNotSupportBackup.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_uninstall_enable_
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Init()
    {
    _obj_opts_apps_isnotsupportbackup_uninstall_text_=''
    _obj_opts_apps_isnotsupportbackup_uninstall_flag_=false
    _obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_uninstall_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_uninstall_flag_
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_uninstall_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Uninstall.Init

Opts.Apps.IsSupportBackup.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_flag_=false
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_upgrade_flag_
    }
Opts.Apps.IsSupportBackup.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_enable_=false
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_upgrade_enable_
    }
Opts.Apps.IsSupportBackup.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_changes_flag_=false
    }
Opts.Apps.IsSupportBackup.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_enable_=true
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_upgrade_enable_
    }
Opts.Apps.IsSupportBackup.Upgrade.Init()
    {
    _obj_opts_apps_issupportbackup_upgrade_text_=''
    _obj_opts_apps_issupportbackup_upgrade_flag_=false
    _obj_opts_apps_issupportbackup_upgrade_changes_flag_=true
    _obj_opts_apps_issupportbackup_upgrade_enable_=false
    }
Opts.Apps.IsSupportBackup.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportBackup.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportBackup.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_changes_flag_=true
    }
Opts.Apps.IsSupportBackup.Upgrade.Set()
    {
    [[ $_obj_opts_apps_issupportbackup_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportbackup_upgrade_flag_=true
    [[ $_obj_opts_apps_issupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportbackup_upgrade_flag_
    }
Opts.Apps.IsSupportBackup.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportbackup_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportbackup_upgrade_text_"
    fi
    }
Opts.Apps.IsSupportBackup.Upgrade.Init

Opts.Apps.IsNotSupportBackup.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_upgrade_flag_
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_upgrade_enable_
    }
Opts.Apps.IsNotSupportBackup.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_upgrade_enable_
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Init()
    {
    _obj_opts_apps_isnotsupportbackup_upgrade_text_=''
    _obj_opts_apps_isnotsupportbackup_upgrade_flag_=false
    _obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_=true
    _obj_opts_apps_isnotsupportbackup_upgrade_enable_=false
    }
Opts.Apps.IsNotSupportBackup.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportBackup.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportbackup_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotsupportbackup_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportbackup_upgrade_flag_
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportbackup_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportbackup_upgrade_text_"
    fi
    }
Opts.Apps.IsNotSupportBackup.Upgrade.Init

Opts.Apps.List.SupportUpdateOnRestart.Clear()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_flag_ != 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_flag_=false
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportupdateonrestart_flag_
    }
Opts.Apps.List.SupportUpdateOnRestart.Disable()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_enable_ != 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_enable_=false
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportupdateonrestart_enable_
    }
Opts.Apps.List.SupportUpdateOnRestart.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_changes_flag_=false
    }
Opts.Apps.List.SupportUpdateOnRestart.Enable()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_enable_ = 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_enable_=true
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportupdateonrestart_enable_
    }
Opts.Apps.List.SupportUpdateOnRestart.Init()
    {
    _obj_opts_apps_list_supportupdateonrestart_text_=''
    _obj_opts_apps_list_supportupdateonrestart_flag_=false
    _obj_opts_apps_list_supportupdateonrestart_changes_flag_=true
    _obj_opts_apps_list_supportupdateonrestart_enable_=false
    }
Opts.Apps.List.SupportUpdateOnRestart.IsDisabled()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_enable_ != 'true' ]]
    }
Opts.Apps.List.SupportUpdateOnRestart.IsEnabled()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_enable_ = 'true' ]]
    }
Opts.Apps.List.SupportUpdateOnRestart.IsNot()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_flag_ != 'true' ]]
    }
Opts.Apps.List.SupportUpdateOnRestart.IsSet()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_flag_ = 'true' ]]
    }
Opts.Apps.List.SupportUpdateOnRestart.LogChanges()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_changes_flag_=true
    }
Opts.Apps.List.SupportUpdateOnRestart.Set()
    {
    [[ $_obj_opts_apps_list_supportupdateonrestart_flag_ = 'true' ]] && return
    _obj_opts_apps_list_supportupdateonrestart_flag_=true
    [[ $_obj_opts_apps_list_supportupdateonrestart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_supportupdateonrestart_flag_
    }
Opts.Apps.List.SupportUpdateOnRestart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_supportupdateonrestart_text_=$2
    else
        echo -n "$_obj_opts_apps_list_supportupdateonrestart_text_"
    fi
    }
Opts.Apps.List.SupportUpdateOnRestart.Init

Opts.Apps.IsSupportUpdateOnRestart.Backup.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_backup_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_backup_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_backup_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_backup_text_=''
    _obj_opts_apps_issupportupdateonrestart_backup_flag_=false
    _obj_opts_apps_issupportupdateonrestart_backup_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_backup_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_backup_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_backup_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_backup_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Backup.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_backup_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_backup_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_backup_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_backup_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_backup_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_backup_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_backup_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_backup_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_backup_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Backup.Init

Opts.Apps.IsSupportUpdateOnRestart.Download.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_download_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_download_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_download_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_download_text_=''
    _obj_opts_apps_issupportupdateonrestart_download_flag_=false
    _obj_opts_apps_issupportupdateonrestart_download_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_download_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_download_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_download_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_download_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_download_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_download_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Download.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_download_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_download_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_download_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_download_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_download_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_download_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_download_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_download_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_download_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Download.Init

Opts.Apps.IsSupportUpdateOnRestart.Install.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_install_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_install_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_install_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_install_text_=''
    _obj_opts_apps_issupportupdateonrestart_install_flag_=false
    _obj_opts_apps_issupportupdateonrestart_install_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_install_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_install_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_install_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_install_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_install_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_install_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Install.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_install_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_install_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_install_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_install_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_install_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_install_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_install_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_install_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_install_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Install.Init

Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_rebuild_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_rebuild_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_rebuild_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_rebuild_text_=''
    _obj_opts_apps_issupportupdateonrestart_rebuild_flag_=false
    _obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_rebuild_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_rebuild_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_rebuild_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_rebuild_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Rebuild.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_rebuild_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_rebuild_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Rebuild.Init

Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_reinstall_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_reinstall_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_reinstall_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_reinstall_text_=''
    _obj_opts_apps_issupportupdateonrestart_reinstall_flag_=false
    _obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_reinstall_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_reinstall_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_reinstall_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_reinstall_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Reinstall.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_reinstall_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_reinstall_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Reinstall.Init

Opts.Apps.IsSupportUpdateOnRestart.Restore.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restore_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restore_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restore_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_restore_text_=''
    _obj_opts_apps_issupportupdateonrestart_restore_flag_=false
    _obj_opts_apps_issupportupdateonrestart_restore_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_restore_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restore_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restore_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_restore_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Restore.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restore_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restore_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restore_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_restore_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_restore_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_restore_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restore_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restore_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_restore_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restore.Init

Opts.Apps.IsSupportUpdateOnRestart.Restart.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restart_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restart_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restart_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_restart_text_=''
    _obj_opts_apps_issupportupdateonrestart_restart_flag_=false
    _obj_opts_apps_issupportupdateonrestart_restart_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_restart_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_restart_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_restart_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_restart_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Restart.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restart_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restart_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restart_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_restart_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_restart_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_restart_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_restart_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_restart_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_restart_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Restart.Init

Opts.Apps.IsSupportUpdateOnRestart.Start.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_start_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_start_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_start_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_start_text_=''
    _obj_opts_apps_issupportupdateonrestart_start_flag_=false
    _obj_opts_apps_issupportupdateonrestart_start_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_start_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_start_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_start_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_start_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_start_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_start_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Start.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_start_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_start_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_start_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_start_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_start_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_start_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_start_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_start_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_start_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Start.Init

Opts.Apps.IsSupportUpdateOnRestart.Stop.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_stop_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_stop_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_stop_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_stop_text_=''
    _obj_opts_apps_issupportupdateonrestart_stop_flag_=false
    _obj_opts_apps_issupportupdateonrestart_stop_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_stop_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_stop_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_stop_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_stop_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Stop.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_stop_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_stop_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_stop_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_stop_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_stop_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_stop_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_stop_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_stop_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_stop_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Stop.Init

Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_uninstall_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_uninstall_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_uninstall_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_uninstall_text_=''
    _obj_opts_apps_issupportupdateonrestart_uninstall_flag_=false
    _obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_uninstall_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_uninstall_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_uninstall_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_uninstall_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Uninstall.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_uninstall_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_uninstall_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Uninstall.Init

Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_flag_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_upgrade_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_enable_=false
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_upgrade_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_enable_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_upgrade_enable_
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Init()
    {
    _obj_opts_apps_issupportupdateonrestart_upgrade_text_=''
    _obj_opts_apps_issupportupdateonrestart_upgrade_flag_=false
    _obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_=true
    _obj_opts_apps_issupportupdateonrestart_upgrade_enable_=false
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_=true
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Set()
    {
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_issupportupdateonrestart_upgrade_flag_=true
    [[ $_obj_opts_apps_issupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_issupportupdateonrestart_upgrade_flag_
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_issupportupdateonrestart_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_issupportupdateonrestart_upgrade_text_"
    fi
    }
Opts.Apps.IsSupportUpdateOnRestart.Upgrade.Init

Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Init()
    {
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_text_=''
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_=false
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_=true
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_=false
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotsupportupdateonrestart_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotsupportupdateonrestart_upgrade_flag_
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotsupportupdateonrestart_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotsupportupdateonrestart_upgrade_text_"
    fi
    }
Opts.Apps.IsNotSupportUpdateOnRestart.Upgrade.Init

Opts.Apps.List.Restarting.Clear()
    {
    [[ $_obj_opts_apps_list_restarting_flag_ != 'true' ]] && return
    _obj_opts_apps_list_restarting_flag_=false
    [[ $_obj_opts_apps_list_restarting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_restarting_flag_
    }
Opts.Apps.List.Restarting.Disable()
    {
    [[ $_obj_opts_apps_list_restarting_enable_ != 'true' ]] && return
    _obj_opts_apps_list_restarting_enable_=false
    [[ $_obj_opts_apps_list_restarting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_restarting_enable_
    }
Opts.Apps.List.Restarting.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_restarting_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_restarting_changes_flag_=false
    }
Opts.Apps.List.Restarting.Enable()
    {
    [[ $_obj_opts_apps_list_restarting_enable_ = 'true' ]] && return
    _obj_opts_apps_list_restarting_enable_=true
    [[ $_obj_opts_apps_list_restarting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_restarting_enable_
    }
Opts.Apps.List.Restarting.Init()
    {
    _obj_opts_apps_list_restarting_text_=''
    _obj_opts_apps_list_restarting_flag_=false
    _obj_opts_apps_list_restarting_changes_flag_=true
    _obj_opts_apps_list_restarting_enable_=false
    }
Opts.Apps.List.Restarting.IsDisabled()
    {
    [[ $_obj_opts_apps_list_restarting_enable_ != 'true' ]]
    }
Opts.Apps.List.Restarting.IsEnabled()
    {
    [[ $_obj_opts_apps_list_restarting_enable_ = 'true' ]]
    }
Opts.Apps.List.Restarting.IsNot()
    {
    [[ $_obj_opts_apps_list_restarting_flag_ != 'true' ]]
    }
Opts.Apps.List.Restarting.IsSet()
    {
    [[ $_obj_opts_apps_list_restarting_flag_ = 'true' ]]
    }
Opts.Apps.List.Restarting.LogChanges()
    {
    [[ $_obj_opts_apps_list_restarting_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_restarting_changes_flag_=true
    }
Opts.Apps.List.Restarting.Set()
    {
    [[ $_obj_opts_apps_list_restarting_flag_ = 'true' ]] && return
    _obj_opts_apps_list_restarting_flag_=true
    [[ $_obj_opts_apps_list_restarting_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_restarting_flag_
    }
Opts.Apps.List.Restarting.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_restarting_text_=$2
    else
        echo -n "$_obj_opts_apps_list_restarting_text_"
    fi
    }
Opts.Apps.List.Restarting.Init

Opts.Apps.IsRestarting.Backup.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_flag_=false
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_backup_flag_
    }
Opts.Apps.IsRestarting.Backup.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_enable_=false
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_backup_enable_
    }
Opts.Apps.IsRestarting.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_changes_flag_=false
    }
Opts.Apps.IsRestarting.Backup.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_enable_=true
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_backup_enable_
    }
Opts.Apps.IsRestarting.Backup.Init()
    {
    _obj_opts_apps_isrestarting_backup_text_=''
    _obj_opts_apps_isrestarting_backup_flag_=false
    _obj_opts_apps_isrestarting_backup_changes_flag_=true
    _obj_opts_apps_isrestarting_backup_enable_=false
    }
Opts.Apps.IsRestarting.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_changes_flag_=true
    }
Opts.Apps.IsRestarting.Backup.Set()
    {
    [[ $_obj_opts_apps_isrestarting_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_backup_flag_=true
    [[ $_obj_opts_apps_isrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_backup_flag_
    }
Opts.Apps.IsRestarting.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_backup_text_"
    fi
    }
Opts.Apps.IsRestarting.Backup.Init

Opts.Apps.IsNotRestarting.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_backup_flag_
    }
Opts.Apps.IsNotRestarting.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_backup_enable_
    }
Opts.Apps.IsNotRestarting.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_backup_enable_
    }
Opts.Apps.IsNotRestarting.Backup.Init()
    {
    _obj_opts_apps_isnotrestarting_backup_text_=''
    _obj_opts_apps_isnotrestarting_backup_flag_=false
    _obj_opts_apps_isnotrestarting_backup_changes_flag_=true
    _obj_opts_apps_isnotrestarting_backup_enable_=false
    }
Opts.Apps.IsNotRestarting.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_backup_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_backup_flag_
    }
Opts.Apps.IsNotRestarting.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_backup_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Backup.Init

Opts.Apps.IsRestarting.Download.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_download_flag_=false
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_download_flag_
    }
Opts.Apps.IsRestarting.Download.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_download_enable_=false
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_download_enable_
    }
Opts.Apps.IsRestarting.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_download_changes_flag_=false
    }
Opts.Apps.IsRestarting.Download.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_download_enable_=true
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_download_enable_
    }
Opts.Apps.IsRestarting.Download.Init()
    {
    _obj_opts_apps_isrestarting_download_text_=''
    _obj_opts_apps_isrestarting_download_flag_=false
    _obj_opts_apps_isrestarting_download_changes_flag_=true
    _obj_opts_apps_isrestarting_download_enable_=false
    }
Opts.Apps.IsRestarting.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_download_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_download_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Download.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_download_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Download.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_download_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_download_changes_flag_=true
    }
Opts.Apps.IsRestarting.Download.Set()
    {
    [[ $_obj_opts_apps_isrestarting_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_download_flag_=true
    [[ $_obj_opts_apps_isrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_download_flag_
    }
Opts.Apps.IsRestarting.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_download_text_"
    fi
    }
Opts.Apps.IsRestarting.Download.Init

Opts.Apps.IsNotRestarting.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_download_flag_
    }
Opts.Apps.IsNotRestarting.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_download_enable_
    }
Opts.Apps.IsNotRestarting.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_download_enable_
    }
Opts.Apps.IsNotRestarting.Download.Init()
    {
    _obj_opts_apps_isnotrestarting_download_text_=''
    _obj_opts_apps_isnotrestarting_download_flag_=false
    _obj_opts_apps_isnotrestarting_download_changes_flag_=true
    _obj_opts_apps_isnotrestarting_download_enable_=false
    }
Opts.Apps.IsNotRestarting.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Download.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_download_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_download_flag_
    }
Opts.Apps.IsNotRestarting.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_download_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Download.Init

Opts.Apps.IsRestarting.Install.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_install_flag_=false
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_install_flag_
    }
Opts.Apps.IsRestarting.Install.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_install_enable_=false
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_install_enable_
    }
Opts.Apps.IsRestarting.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_install_changes_flag_=false
    }
Opts.Apps.IsRestarting.Install.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_install_enable_=true
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_install_enable_
    }
Opts.Apps.IsRestarting.Install.Init()
    {
    _obj_opts_apps_isrestarting_install_text_=''
    _obj_opts_apps_isrestarting_install_flag_=false
    _obj_opts_apps_isrestarting_install_changes_flag_=true
    _obj_opts_apps_isrestarting_install_enable_=false
    }
Opts.Apps.IsRestarting.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_install_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_install_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Install.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_install_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Install.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_install_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_install_changes_flag_=true
    }
Opts.Apps.IsRestarting.Install.Set()
    {
    [[ $_obj_opts_apps_isrestarting_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_install_flag_=true
    [[ $_obj_opts_apps_isrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_install_flag_
    }
Opts.Apps.IsRestarting.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_install_text_"
    fi
    }
Opts.Apps.IsRestarting.Install.Init

Opts.Apps.IsNotRestarting.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_install_flag_
    }
Opts.Apps.IsNotRestarting.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_install_enable_
    }
Opts.Apps.IsNotRestarting.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_install_enable_
    }
Opts.Apps.IsNotRestarting.Install.Init()
    {
    _obj_opts_apps_isnotrestarting_install_text_=''
    _obj_opts_apps_isnotrestarting_install_flag_=false
    _obj_opts_apps_isnotrestarting_install_changes_flag_=true
    _obj_opts_apps_isnotrestarting_install_enable_=false
    }
Opts.Apps.IsNotRestarting.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Install.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_install_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_install_flag_
    }
Opts.Apps.IsNotRestarting.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_install_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Install.Init

Opts.Apps.IsRestarting.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_flag_=false
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_rebuild_flag_
    }
Opts.Apps.IsRestarting.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_enable_=false
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_rebuild_enable_
    }
Opts.Apps.IsRestarting.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_changes_flag_=false
    }
Opts.Apps.IsRestarting.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_enable_=true
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_rebuild_enable_
    }
Opts.Apps.IsRestarting.Rebuild.Init()
    {
    _obj_opts_apps_isrestarting_rebuild_text_=''
    _obj_opts_apps_isrestarting_rebuild_flag_=false
    _obj_opts_apps_isrestarting_rebuild_changes_flag_=true
    _obj_opts_apps_isrestarting_rebuild_enable_=false
    }
Opts.Apps.IsRestarting.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_changes_flag_=true
    }
Opts.Apps.IsRestarting.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isrestarting_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_rebuild_flag_=true
    [[ $_obj_opts_apps_isrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_rebuild_flag_
    }
Opts.Apps.IsRestarting.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_rebuild_text_"
    fi
    }
Opts.Apps.IsRestarting.Rebuild.Init

Opts.Apps.IsNotRestarting.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_rebuild_flag_
    }
Opts.Apps.IsNotRestarting.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_rebuild_enable_
    }
Opts.Apps.IsNotRestarting.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_rebuild_enable_
    }
Opts.Apps.IsNotRestarting.Rebuild.Init()
    {
    _obj_opts_apps_isnotrestarting_rebuild_text_=''
    _obj_opts_apps_isnotrestarting_rebuild_flag_=false
    _obj_opts_apps_isnotrestarting_rebuild_changes_flag_=true
    _obj_opts_apps_isnotrestarting_rebuild_enable_=false
    }
Opts.Apps.IsNotRestarting.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_rebuild_flag_
    }
Opts.Apps.IsNotRestarting.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_rebuild_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Rebuild.Init

Opts.Apps.IsRestarting.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_flag_=false
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_reinstall_flag_
    }
Opts.Apps.IsRestarting.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_enable_=false
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_reinstall_enable_
    }
Opts.Apps.IsRestarting.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_changes_flag_=false
    }
Opts.Apps.IsRestarting.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_enable_=true
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_reinstall_enable_
    }
Opts.Apps.IsRestarting.Reinstall.Init()
    {
    _obj_opts_apps_isrestarting_reinstall_text_=''
    _obj_opts_apps_isrestarting_reinstall_flag_=false
    _obj_opts_apps_isrestarting_reinstall_changes_flag_=true
    _obj_opts_apps_isrestarting_reinstall_enable_=false
    }
Opts.Apps.IsRestarting.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_changes_flag_=true
    }
Opts.Apps.IsRestarting.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isrestarting_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_reinstall_flag_=true
    [[ $_obj_opts_apps_isrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_reinstall_flag_
    }
Opts.Apps.IsRestarting.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_reinstall_text_"
    fi
    }
Opts.Apps.IsRestarting.Reinstall.Init

Opts.Apps.IsNotRestarting.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_reinstall_flag_
    }
Opts.Apps.IsNotRestarting.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_reinstall_enable_
    }
Opts.Apps.IsNotRestarting.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_reinstall_enable_
    }
Opts.Apps.IsNotRestarting.Reinstall.Init()
    {
    _obj_opts_apps_isnotrestarting_reinstall_text_=''
    _obj_opts_apps_isnotrestarting_reinstall_flag_=false
    _obj_opts_apps_isnotrestarting_reinstall_changes_flag_=true
    _obj_opts_apps_isnotrestarting_reinstall_enable_=false
    }
Opts.Apps.IsNotRestarting.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_reinstall_flag_
    }
Opts.Apps.IsNotRestarting.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_reinstall_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Reinstall.Init

Opts.Apps.IsRestarting.Restore.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_flag_=false
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restore_flag_
    }
Opts.Apps.IsRestarting.Restore.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_enable_=false
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restore_enable_
    }
Opts.Apps.IsRestarting.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_changes_flag_=false
    }
Opts.Apps.IsRestarting.Restore.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_enable_=true
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restore_enable_
    }
Opts.Apps.IsRestarting.Restore.Init()
    {
    _obj_opts_apps_isrestarting_restore_text_=''
    _obj_opts_apps_isrestarting_restore_flag_=false
    _obj_opts_apps_isrestarting_restore_changes_flag_=true
    _obj_opts_apps_isrestarting_restore_enable_=false
    }
Opts.Apps.IsRestarting.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_changes_flag_=true
    }
Opts.Apps.IsRestarting.Restore.Set()
    {
    [[ $_obj_opts_apps_isrestarting_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restore_flag_=true
    [[ $_obj_opts_apps_isrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restore_flag_
    }
Opts.Apps.IsRestarting.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_restore_text_"
    fi
    }
Opts.Apps.IsRestarting.Restore.Init

Opts.Apps.IsNotRestarting.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restore_flag_
    }
Opts.Apps.IsNotRestarting.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restore_enable_
    }
Opts.Apps.IsNotRestarting.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restore_enable_
    }
Opts.Apps.IsNotRestarting.Restore.Init()
    {
    _obj_opts_apps_isnotrestarting_restore_text_=''
    _obj_opts_apps_isnotrestarting_restore_flag_=false
    _obj_opts_apps_isnotrestarting_restore_changes_flag_=true
    _obj_opts_apps_isnotrestarting_restore_enable_=false
    }
Opts.Apps.IsNotRestarting.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restore_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restore_flag_
    }
Opts.Apps.IsNotRestarting.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_restore_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Restore.Init

Opts.Apps.IsRestarting.Restart.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_flag_=false
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restart_flag_
    }
Opts.Apps.IsRestarting.Restart.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_enable_=false
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restart_enable_
    }
Opts.Apps.IsRestarting.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_changes_flag_=false
    }
Opts.Apps.IsRestarting.Restart.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_enable_=true
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restart_enable_
    }
Opts.Apps.IsRestarting.Restart.Init()
    {
    _obj_opts_apps_isrestarting_restart_text_=''
    _obj_opts_apps_isrestarting_restart_flag_=false
    _obj_opts_apps_isrestarting_restart_changes_flag_=true
    _obj_opts_apps_isrestarting_restart_enable_=false
    }
Opts.Apps.IsRestarting.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_changes_flag_=true
    }
Opts.Apps.IsRestarting.Restart.Set()
    {
    [[ $_obj_opts_apps_isrestarting_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_restart_flag_=true
    [[ $_obj_opts_apps_isrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_restart_flag_
    }
Opts.Apps.IsRestarting.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_restart_text_"
    fi
    }
Opts.Apps.IsRestarting.Restart.Init

Opts.Apps.IsNotRestarting.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restart_flag_
    }
Opts.Apps.IsNotRestarting.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restart_enable_
    }
Opts.Apps.IsNotRestarting.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restart_enable_
    }
Opts.Apps.IsNotRestarting.Restart.Init()
    {
    _obj_opts_apps_isnotrestarting_restart_text_=''
    _obj_opts_apps_isnotrestarting_restart_flag_=false
    _obj_opts_apps_isnotrestarting_restart_changes_flag_=true
    _obj_opts_apps_isnotrestarting_restart_enable_=false
    }
Opts.Apps.IsNotRestarting.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_restart_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_restart_flag_
    }
Opts.Apps.IsNotRestarting.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_restart_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Restart.Init

Opts.Apps.IsRestarting.Start.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_start_flag_=false
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_start_flag_
    }
Opts.Apps.IsRestarting.Start.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_start_enable_=false
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_start_enable_
    }
Opts.Apps.IsRestarting.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_start_changes_flag_=false
    }
Opts.Apps.IsRestarting.Start.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_start_enable_=true
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_start_enable_
    }
Opts.Apps.IsRestarting.Start.Init()
    {
    _obj_opts_apps_isrestarting_start_text_=''
    _obj_opts_apps_isrestarting_start_flag_=false
    _obj_opts_apps_isrestarting_start_changes_flag_=true
    _obj_opts_apps_isrestarting_start_enable_=false
    }
Opts.Apps.IsRestarting.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_start_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_start_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Start.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_start_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Start.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_start_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_start_changes_flag_=true
    }
Opts.Apps.IsRestarting.Start.Set()
    {
    [[ $_obj_opts_apps_isrestarting_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_start_flag_=true
    [[ $_obj_opts_apps_isrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_start_flag_
    }
Opts.Apps.IsRestarting.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_start_text_"
    fi
    }
Opts.Apps.IsRestarting.Start.Init

Opts.Apps.IsNotRestarting.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_start_flag_
    }
Opts.Apps.IsNotRestarting.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_start_enable_
    }
Opts.Apps.IsNotRestarting.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_start_enable_
    }
Opts.Apps.IsNotRestarting.Start.Init()
    {
    _obj_opts_apps_isnotrestarting_start_text_=''
    _obj_opts_apps_isnotrestarting_start_flag_=false
    _obj_opts_apps_isnotrestarting_start_changes_flag_=true
    _obj_opts_apps_isnotrestarting_start_enable_=false
    }
Opts.Apps.IsNotRestarting.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Start.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_start_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_start_flag_
    }
Opts.Apps.IsNotRestarting.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_start_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Start.Init

Opts.Apps.IsRestarting.Stop.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_flag_=false
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_stop_flag_
    }
Opts.Apps.IsRestarting.Stop.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_enable_=false
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_stop_enable_
    }
Opts.Apps.IsRestarting.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_changes_flag_=false
    }
Opts.Apps.IsRestarting.Stop.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_enable_=true
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_stop_enable_
    }
Opts.Apps.IsRestarting.Stop.Init()
    {
    _obj_opts_apps_isrestarting_stop_text_=''
    _obj_opts_apps_isrestarting_stop_flag_=false
    _obj_opts_apps_isrestarting_stop_changes_flag_=true
    _obj_opts_apps_isrestarting_stop_enable_=false
    }
Opts.Apps.IsRestarting.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_changes_flag_=true
    }
Opts.Apps.IsRestarting.Stop.Set()
    {
    [[ $_obj_opts_apps_isrestarting_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_stop_flag_=true
    [[ $_obj_opts_apps_isrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_stop_flag_
    }
Opts.Apps.IsRestarting.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_stop_text_"
    fi
    }
Opts.Apps.IsRestarting.Stop.Init

Opts.Apps.IsNotRestarting.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_stop_flag_
    }
Opts.Apps.IsNotRestarting.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_stop_enable_
    }
Opts.Apps.IsNotRestarting.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_stop_enable_
    }
Opts.Apps.IsNotRestarting.Stop.Init()
    {
    _obj_opts_apps_isnotrestarting_stop_text_=''
    _obj_opts_apps_isnotrestarting_stop_flag_=false
    _obj_opts_apps_isnotrestarting_stop_changes_flag_=true
    _obj_opts_apps_isnotrestarting_stop_enable_=false
    }
Opts.Apps.IsNotRestarting.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_stop_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_stop_flag_
    }
Opts.Apps.IsNotRestarting.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_stop_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Stop.Init

Opts.Apps.IsRestarting.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_flag_=false
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_uninstall_flag_
    }
Opts.Apps.IsRestarting.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_enable_=false
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_uninstall_enable_
    }
Opts.Apps.IsRestarting.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_changes_flag_=false
    }
Opts.Apps.IsRestarting.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_enable_=true
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_uninstall_enable_
    }
Opts.Apps.IsRestarting.Uninstall.Init()
    {
    _obj_opts_apps_isrestarting_uninstall_text_=''
    _obj_opts_apps_isrestarting_uninstall_flag_=false
    _obj_opts_apps_isrestarting_uninstall_changes_flag_=true
    _obj_opts_apps_isrestarting_uninstall_enable_=false
    }
Opts.Apps.IsRestarting.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_changes_flag_=true
    }
Opts.Apps.IsRestarting.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isrestarting_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_uninstall_flag_=true
    [[ $_obj_opts_apps_isrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_uninstall_flag_
    }
Opts.Apps.IsRestarting.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_uninstall_text_"
    fi
    }
Opts.Apps.IsRestarting.Uninstall.Init

Opts.Apps.IsNotRestarting.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_uninstall_flag_
    }
Opts.Apps.IsNotRestarting.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_uninstall_enable_
    }
Opts.Apps.IsNotRestarting.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_uninstall_enable_
    }
Opts.Apps.IsNotRestarting.Uninstall.Init()
    {
    _obj_opts_apps_isnotrestarting_uninstall_text_=''
    _obj_opts_apps_isnotrestarting_uninstall_flag_=false
    _obj_opts_apps_isnotrestarting_uninstall_changes_flag_=true
    _obj_opts_apps_isnotrestarting_uninstall_enable_=false
    }
Opts.Apps.IsNotRestarting.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_uninstall_flag_
    }
Opts.Apps.IsNotRestarting.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_uninstall_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Uninstall.Init

Opts.Apps.IsRestarting.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_flag_=false
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_upgrade_flag_
    }
Opts.Apps.IsRestarting.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_enable_=false
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_upgrade_enable_
    }
Opts.Apps.IsRestarting.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_changes_flag_=false
    }
Opts.Apps.IsRestarting.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_enable_=true
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_upgrade_enable_
    }
Opts.Apps.IsRestarting.Upgrade.Init()
    {
    _obj_opts_apps_isrestarting_upgrade_text_=''
    _obj_opts_apps_isrestarting_upgrade_flag_=false
    _obj_opts_apps_isrestarting_upgrade_changes_flag_=true
    _obj_opts_apps_isrestarting_upgrade_enable_=false
    }
Opts.Apps.IsRestarting.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsRestarting.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsRestarting.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_changes_flag_=true
    }
Opts.Apps.IsRestarting.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isrestarting_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isrestarting_upgrade_flag_=true
    [[ $_obj_opts_apps_isrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isrestarting_upgrade_flag_
    }
Opts.Apps.IsRestarting.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isrestarting_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isrestarting_upgrade_text_"
    fi
    }
Opts.Apps.IsRestarting.Upgrade.Init

Opts.Apps.IsNotRestarting.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_upgrade_flag_
    }
Opts.Apps.IsNotRestarting.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_upgrade_enable_
    }
Opts.Apps.IsNotRestarting.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotRestarting.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_upgrade_enable_
    }
Opts.Apps.IsNotRestarting.Upgrade.Init()
    {
    _obj_opts_apps_isnotrestarting_upgrade_text_=''
    _obj_opts_apps_isnotrestarting_upgrade_flag_=false
    _obj_opts_apps_isnotrestarting_upgrade_changes_flag_=true
    _obj_opts_apps_isnotrestarting_upgrade_enable_=false
    }
Opts.Apps.IsNotRestarting.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotRestarting.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotRestarting.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotRestarting.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotrestarting_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotrestarting_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotrestarting_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotrestarting_upgrade_flag_
    }
Opts.Apps.IsNotRestarting.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotrestarting_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotrestarting_upgrade_text_"
    fi
    }
Opts.Apps.IsNotRestarting.Upgrade.Init

Opts.Apps.List.Upgradable.Clear()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_flag_=false
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_flag_
    }
Opts.Apps.List.Upgradable.Disable()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_enable_=false
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_enable_
    }
Opts.Apps.List.Upgradable.DontLogChanges()
    {
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_list_upgradable_changes_flag_=false
    }
Opts.Apps.List.Upgradable.Enable()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_enable_=true
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_enable_
    }
Opts.Apps.List.Upgradable.Init()
    {
    _obj_opts_apps_list_upgradable_text_=''
    _obj_opts_apps_list_upgradable_flag_=false
    _obj_opts_apps_list_upgradable_changes_flag_=true
    _obj_opts_apps_list_upgradable_enable_=false
    }
Opts.Apps.List.Upgradable.IsDisabled()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ != 'true' ]]
    }
Opts.Apps.List.Upgradable.IsEnabled()
    {
    [[ $_obj_opts_apps_list_upgradable_enable_ = 'true' ]]
    }
Opts.Apps.List.Upgradable.IsNot()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ != 'true' ]]
    }
Opts.Apps.List.Upgradable.IsSet()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ = 'true' ]]
    }
Opts.Apps.List.Upgradable.LogChanges()
    {
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_changes_flag_=true
    }
Opts.Apps.List.Upgradable.Set()
    {
    [[ $_obj_opts_apps_list_upgradable_flag_ = 'true' ]] && return
    _obj_opts_apps_list_upgradable_flag_=true
    [[ $_obj_opts_apps_list_upgradable_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_list_upgradable_flag_
    }
Opts.Apps.List.Upgradable.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_list_upgradable_text_=$2
    else
        echo -n "$_obj_opts_apps_list_upgradable_text_"
    fi
    }
Opts.Apps.List.Upgradable.Init

Opts.Apps.IsUpgradable.Backup.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_flag_=false
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_backup_flag_
    }
Opts.Apps.IsUpgradable.Backup.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_enable_=false
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_backup_enable_
    }
Opts.Apps.IsUpgradable.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Backup.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_enable_=true
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_backup_enable_
    }
Opts.Apps.IsUpgradable.Backup.Init()
    {
    _obj_opts_apps_isupgradable_backup_text_=''
    _obj_opts_apps_isupgradable_backup_flag_=false
    _obj_opts_apps_isupgradable_backup_changes_flag_=true
    _obj_opts_apps_isupgradable_backup_enable_=false
    }
Opts.Apps.IsUpgradable.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Backup.Set()
    {
    [[ $_obj_opts_apps_isupgradable_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_backup_flag_=true
    [[ $_obj_opts_apps_isupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_backup_flag_
    }
Opts.Apps.IsUpgradable.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_backup_text_"
    fi
    }
Opts.Apps.IsUpgradable.Backup.Init

Opts.Apps.IsNotUpgradable.Backup.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_backup_flag_
    }
Opts.Apps.IsNotUpgradable.Backup.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_backup_enable_
    }
Opts.Apps.IsNotUpgradable.Backup.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Backup.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_backup_enable_
    }
Opts.Apps.IsNotUpgradable.Backup.Init()
    {
    _obj_opts_apps_isnotupgradable_backup_text_=''
    _obj_opts_apps_isnotupgradable_backup_flag_=false
    _obj_opts_apps_isnotupgradable_backup_changes_flag_=true
    _obj_opts_apps_isnotupgradable_backup_enable_=false
    }
Opts.Apps.IsNotUpgradable.Backup.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Backup.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Backup.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Backup.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Backup.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Backup.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_backup_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_backup_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_backup_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_backup_flag_
    }
Opts.Apps.IsNotUpgradable.Backup.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_backup_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_backup_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Backup.Init

Opts.Apps.IsUpgradable.Download.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_download_flag_=false
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_download_flag_
    }
Opts.Apps.IsUpgradable.Download.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_download_enable_=false
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_download_enable_
    }
Opts.Apps.IsUpgradable.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_download_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Download.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_download_enable_=true
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_download_enable_
    }
Opts.Apps.IsUpgradable.Download.Init()
    {
    _obj_opts_apps_isupgradable_download_text_=''
    _obj_opts_apps_isupgradable_download_flag_=false
    _obj_opts_apps_isupgradable_download_changes_flag_=true
    _obj_opts_apps_isupgradable_download_enable_=false
    }
Opts.Apps.IsUpgradable.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_download_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_download_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Download.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_download_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Download.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_download_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_download_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Download.Set()
    {
    [[ $_obj_opts_apps_isupgradable_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_download_flag_=true
    [[ $_obj_opts_apps_isupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_download_flag_
    }
Opts.Apps.IsUpgradable.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_download_text_"
    fi
    }
Opts.Apps.IsUpgradable.Download.Init

Opts.Apps.IsNotUpgradable.Download.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_download_flag_
    }
Opts.Apps.IsNotUpgradable.Download.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_download_enable_
    }
Opts.Apps.IsNotUpgradable.Download.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Download.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_download_enable_
    }
Opts.Apps.IsNotUpgradable.Download.Init()
    {
    _obj_opts_apps_isnotupgradable_download_text_=''
    _obj_opts_apps_isnotupgradable_download_flag_=false
    _obj_opts_apps_isnotupgradable_download_changes_flag_=true
    _obj_opts_apps_isnotupgradable_download_enable_=false
    }
Opts.Apps.IsNotUpgradable.Download.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Download.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Download.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Download.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Download.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Download.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_download_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_download_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_download_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_download_flag_
    }
Opts.Apps.IsNotUpgradable.Download.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_download_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_download_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Download.Init

Opts.Apps.IsUpgradable.Install.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_install_flag_=false
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_install_flag_
    }
Opts.Apps.IsUpgradable.Install.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_install_enable_=false
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_install_enable_
    }
Opts.Apps.IsUpgradable.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_install_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Install.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_install_enable_=true
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_install_enable_
    }
Opts.Apps.IsUpgradable.Install.Init()
    {
    _obj_opts_apps_isupgradable_install_text_=''
    _obj_opts_apps_isupgradable_install_flag_=false
    _obj_opts_apps_isupgradable_install_changes_flag_=true
    _obj_opts_apps_isupgradable_install_enable_=false
    }
Opts.Apps.IsUpgradable.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_install_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_install_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Install.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_install_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Install.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_install_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_install_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Install.Set()
    {
    [[ $_obj_opts_apps_isupgradable_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_install_flag_=true
    [[ $_obj_opts_apps_isupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_install_flag_
    }
Opts.Apps.IsUpgradable.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_install_text_"
    fi
    }
Opts.Apps.IsUpgradable.Install.Init

Opts.Apps.IsNotUpgradable.Install.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_install_flag_
    }
Opts.Apps.IsNotUpgradable.Install.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_install_enable_
    }
Opts.Apps.IsNotUpgradable.Install.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Install.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_install_enable_
    }
Opts.Apps.IsNotUpgradable.Install.Init()
    {
    _obj_opts_apps_isnotupgradable_install_text_=''
    _obj_opts_apps_isnotupgradable_install_flag_=false
    _obj_opts_apps_isnotupgradable_install_changes_flag_=true
    _obj_opts_apps_isnotupgradable_install_enable_=false
    }
Opts.Apps.IsNotUpgradable.Install.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Install.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Install.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Install.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Install.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Install.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_install_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_install_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_install_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_install_flag_
    }
Opts.Apps.IsNotUpgradable.Install.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_install_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_install_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Install.Init

Opts.Apps.IsUpgradable.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_flag_=false
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_rebuild_flag_
    }
Opts.Apps.IsUpgradable.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_enable_=false
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_rebuild_enable_
    }
Opts.Apps.IsUpgradable.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_enable_=true
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_rebuild_enable_
    }
Opts.Apps.IsUpgradable.Rebuild.Init()
    {
    _obj_opts_apps_isupgradable_rebuild_text_=''
    _obj_opts_apps_isupgradable_rebuild_flag_=false
    _obj_opts_apps_isupgradable_rebuild_changes_flag_=true
    _obj_opts_apps_isupgradable_rebuild_enable_=false
    }
Opts.Apps.IsUpgradable.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isupgradable_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_rebuild_flag_=true
    [[ $_obj_opts_apps_isupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_rebuild_flag_
    }
Opts.Apps.IsUpgradable.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_rebuild_text_"
    fi
    }
Opts.Apps.IsUpgradable.Rebuild.Init

Opts.Apps.IsNotUpgradable.Rebuild.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_rebuild_flag_
    }
Opts.Apps.IsNotUpgradable.Rebuild.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_rebuild_enable_
    }
Opts.Apps.IsNotUpgradable.Rebuild.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Rebuild.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_rebuild_enable_
    }
Opts.Apps.IsNotUpgradable.Rebuild.Init()
    {
    _obj_opts_apps_isnotupgradable_rebuild_text_=''
    _obj_opts_apps_isnotupgradable_rebuild_flag_=false
    _obj_opts_apps_isnotupgradable_rebuild_changes_flag_=true
    _obj_opts_apps_isnotupgradable_rebuild_enable_=false
    }
Opts.Apps.IsNotUpgradable.Rebuild.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Rebuild.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Rebuild.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Rebuild.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Rebuild.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Rebuild.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_rebuild_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_rebuild_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_rebuild_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_rebuild_flag_
    }
Opts.Apps.IsNotUpgradable.Rebuild.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_rebuild_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_rebuild_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Rebuild.Init

Opts.Apps.IsUpgradable.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_flag_=false
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_reinstall_flag_
    }
Opts.Apps.IsUpgradable.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_enable_=false
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_reinstall_enable_
    }
Opts.Apps.IsUpgradable.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_enable_=true
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_reinstall_enable_
    }
Opts.Apps.IsUpgradable.Reinstall.Init()
    {
    _obj_opts_apps_isupgradable_reinstall_text_=''
    _obj_opts_apps_isupgradable_reinstall_flag_=false
    _obj_opts_apps_isupgradable_reinstall_changes_flag_=true
    _obj_opts_apps_isupgradable_reinstall_enable_=false
    }
Opts.Apps.IsUpgradable.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isupgradable_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_reinstall_flag_=true
    [[ $_obj_opts_apps_isupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_reinstall_flag_
    }
Opts.Apps.IsUpgradable.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_reinstall_text_"
    fi
    }
Opts.Apps.IsUpgradable.Reinstall.Init

Opts.Apps.IsNotUpgradable.Reinstall.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_reinstall_flag_
    }
Opts.Apps.IsNotUpgradable.Reinstall.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_reinstall_enable_
    }
Opts.Apps.IsNotUpgradable.Reinstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Reinstall.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_reinstall_enable_
    }
Opts.Apps.IsNotUpgradable.Reinstall.Init()
    {
    _obj_opts_apps_isnotupgradable_reinstall_text_=''
    _obj_opts_apps_isnotupgradable_reinstall_flag_=false
    _obj_opts_apps_isnotupgradable_reinstall_changes_flag_=true
    _obj_opts_apps_isnotupgradable_reinstall_enable_=false
    }
Opts.Apps.IsNotUpgradable.Reinstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Reinstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Reinstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Reinstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Reinstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Reinstall.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_reinstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_reinstall_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_reinstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_reinstall_flag_
    }
Opts.Apps.IsNotUpgradable.Reinstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_reinstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_reinstall_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Reinstall.Init

Opts.Apps.IsUpgradable.Restore.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_flag_=false
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restore_flag_
    }
Opts.Apps.IsUpgradable.Restore.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_enable_=false
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restore_enable_
    }
Opts.Apps.IsUpgradable.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Restore.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_enable_=true
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restore_enable_
    }
Opts.Apps.IsUpgradable.Restore.Init()
    {
    _obj_opts_apps_isupgradable_restore_text_=''
    _obj_opts_apps_isupgradable_restore_flag_=false
    _obj_opts_apps_isupgradable_restore_changes_flag_=true
    _obj_opts_apps_isupgradable_restore_enable_=false
    }
Opts.Apps.IsUpgradable.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Restore.Set()
    {
    [[ $_obj_opts_apps_isupgradable_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restore_flag_=true
    [[ $_obj_opts_apps_isupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restore_flag_
    }
Opts.Apps.IsUpgradable.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_restore_text_"
    fi
    }
Opts.Apps.IsUpgradable.Restore.Init

Opts.Apps.IsNotUpgradable.Restore.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restore_flag_
    }
Opts.Apps.IsNotUpgradable.Restore.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restore_enable_
    }
Opts.Apps.IsNotUpgradable.Restore.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Restore.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restore_enable_
    }
Opts.Apps.IsNotUpgradable.Restore.Init()
    {
    _obj_opts_apps_isnotupgradable_restore_text_=''
    _obj_opts_apps_isnotupgradable_restore_flag_=false
    _obj_opts_apps_isnotupgradable_restore_changes_flag_=true
    _obj_opts_apps_isnotupgradable_restore_enable_=false
    }
Opts.Apps.IsNotUpgradable.Restore.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restore.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restore.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restore.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restore.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Restore.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_restore_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restore_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_restore_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restore_flag_
    }
Opts.Apps.IsNotUpgradable.Restore.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_restore_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_restore_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Restore.Init

Opts.Apps.IsUpgradable.Restart.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_flag_=false
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restart_flag_
    }
Opts.Apps.IsUpgradable.Restart.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_enable_=false
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restart_enable_
    }
Opts.Apps.IsUpgradable.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Restart.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_enable_=true
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restart_enable_
    }
Opts.Apps.IsUpgradable.Restart.Init()
    {
    _obj_opts_apps_isupgradable_restart_text_=''
    _obj_opts_apps_isupgradable_restart_flag_=false
    _obj_opts_apps_isupgradable_restart_changes_flag_=true
    _obj_opts_apps_isupgradable_restart_enable_=false
    }
Opts.Apps.IsUpgradable.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Restart.Set()
    {
    [[ $_obj_opts_apps_isupgradable_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_restart_flag_=true
    [[ $_obj_opts_apps_isupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_restart_flag_
    }
Opts.Apps.IsUpgradable.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_restart_text_"
    fi
    }
Opts.Apps.IsUpgradable.Restart.Init

Opts.Apps.IsNotUpgradable.Restart.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restart_flag_
    }
Opts.Apps.IsNotUpgradable.Restart.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restart_enable_
    }
Opts.Apps.IsNotUpgradable.Restart.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Restart.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restart_enable_
    }
Opts.Apps.IsNotUpgradable.Restart.Init()
    {
    _obj_opts_apps_isnotupgradable_restart_text_=''
    _obj_opts_apps_isnotupgradable_restart_flag_=false
    _obj_opts_apps_isnotupgradable_restart_changes_flag_=true
    _obj_opts_apps_isnotupgradable_restart_enable_=false
    }
Opts.Apps.IsNotUpgradable.Restart.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restart.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restart.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restart.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Restart.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Restart.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_restart_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_restart_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_restart_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_restart_flag_
    }
Opts.Apps.IsNotUpgradable.Restart.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_restart_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_restart_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Restart.Init

Opts.Apps.IsUpgradable.Start.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_start_flag_=false
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_start_flag_
    }
Opts.Apps.IsUpgradable.Start.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_start_enable_=false
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_start_enable_
    }
Opts.Apps.IsUpgradable.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_start_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Start.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_start_enable_=true
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_start_enable_
    }
Opts.Apps.IsUpgradable.Start.Init()
    {
    _obj_opts_apps_isupgradable_start_text_=''
    _obj_opts_apps_isupgradable_start_flag_=false
    _obj_opts_apps_isupgradable_start_changes_flag_=true
    _obj_opts_apps_isupgradable_start_enable_=false
    }
Opts.Apps.IsUpgradable.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_start_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_start_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Start.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_start_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Start.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_start_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_start_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Start.Set()
    {
    [[ $_obj_opts_apps_isupgradable_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_start_flag_=true
    [[ $_obj_opts_apps_isupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_start_flag_
    }
Opts.Apps.IsUpgradable.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_start_text_"
    fi
    }
Opts.Apps.IsUpgradable.Start.Init

Opts.Apps.IsNotUpgradable.Start.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_start_flag_
    }
Opts.Apps.IsNotUpgradable.Start.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_start_enable_
    }
Opts.Apps.IsNotUpgradable.Start.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Start.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_start_enable_
    }
Opts.Apps.IsNotUpgradable.Start.Init()
    {
    _obj_opts_apps_isnotupgradable_start_text_=''
    _obj_opts_apps_isnotupgradable_start_flag_=false
    _obj_opts_apps_isnotupgradable_start_changes_flag_=true
    _obj_opts_apps_isnotupgradable_start_enable_=false
    }
Opts.Apps.IsNotUpgradable.Start.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Start.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Start.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Start.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Start.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Start.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_start_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_start_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_start_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_start_flag_
    }
Opts.Apps.IsNotUpgradable.Start.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_start_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_start_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Start.Init

Opts.Apps.IsUpgradable.Stop.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_flag_=false
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_stop_flag_
    }
Opts.Apps.IsUpgradable.Stop.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_enable_=false
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_stop_enable_
    }
Opts.Apps.IsUpgradable.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Stop.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_enable_=true
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_stop_enable_
    }
Opts.Apps.IsUpgradable.Stop.Init()
    {
    _obj_opts_apps_isupgradable_stop_text_=''
    _obj_opts_apps_isupgradable_stop_flag_=false
    _obj_opts_apps_isupgradable_stop_changes_flag_=true
    _obj_opts_apps_isupgradable_stop_enable_=false
    }
Opts.Apps.IsUpgradable.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Stop.Set()
    {
    [[ $_obj_opts_apps_isupgradable_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_stop_flag_=true
    [[ $_obj_opts_apps_isupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_stop_flag_
    }
Opts.Apps.IsUpgradable.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_stop_text_"
    fi
    }
Opts.Apps.IsUpgradable.Stop.Init

Opts.Apps.IsNotUpgradable.Stop.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_stop_flag_
    }
Opts.Apps.IsNotUpgradable.Stop.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_stop_enable_
    }
Opts.Apps.IsNotUpgradable.Stop.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Stop.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_stop_enable_
    }
Opts.Apps.IsNotUpgradable.Stop.Init()
    {
    _obj_opts_apps_isnotupgradable_stop_text_=''
    _obj_opts_apps_isnotupgradable_stop_flag_=false
    _obj_opts_apps_isnotupgradable_stop_changes_flag_=true
    _obj_opts_apps_isnotupgradable_stop_enable_=false
    }
Opts.Apps.IsNotUpgradable.Stop.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Stop.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Stop.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Stop.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Stop.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Stop.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_stop_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_stop_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_stop_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_stop_flag_
    }
Opts.Apps.IsNotUpgradable.Stop.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_stop_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_stop_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Stop.Init

Opts.Apps.IsUpgradable.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_flag_=false
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_uninstall_flag_
    }
Opts.Apps.IsUpgradable.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_enable_=false
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_uninstall_enable_
    }
Opts.Apps.IsUpgradable.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_enable_=true
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_uninstall_enable_
    }
Opts.Apps.IsUpgradable.Uninstall.Init()
    {
    _obj_opts_apps_isupgradable_uninstall_text_=''
    _obj_opts_apps_isupgradable_uninstall_flag_=false
    _obj_opts_apps_isupgradable_uninstall_changes_flag_=true
    _obj_opts_apps_isupgradable_uninstall_enable_=false
    }
Opts.Apps.IsUpgradable.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isupgradable_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_uninstall_flag_=true
    [[ $_obj_opts_apps_isupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_uninstall_flag_
    }
Opts.Apps.IsUpgradable.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_uninstall_text_"
    fi
    }
Opts.Apps.IsUpgradable.Uninstall.Init

Opts.Apps.IsNotUpgradable.Uninstall.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_uninstall_flag_
    }
Opts.Apps.IsNotUpgradable.Uninstall.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_uninstall_enable_
    }
Opts.Apps.IsNotUpgradable.Uninstall.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Uninstall.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_uninstall_enable_
    }
Opts.Apps.IsNotUpgradable.Uninstall.Init()
    {
    _obj_opts_apps_isnotupgradable_uninstall_text_=''
    _obj_opts_apps_isnotupgradable_uninstall_flag_=false
    _obj_opts_apps_isnotupgradable_uninstall_changes_flag_=true
    _obj_opts_apps_isnotupgradable_uninstall_enable_=false
    }
Opts.Apps.IsNotUpgradable.Uninstall.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Uninstall.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Uninstall.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Uninstall.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Uninstall.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Uninstall.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_uninstall_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_uninstall_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_uninstall_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_uninstall_flag_
    }
Opts.Apps.IsNotUpgradable.Uninstall.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_uninstall_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_uninstall_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Uninstall.Init

Opts.Apps.IsUpgradable.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_flag_=false
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_upgrade_flag_
    }
Opts.Apps.IsUpgradable.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_enable_=false
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_upgrade_enable_
    }
Opts.Apps.IsUpgradable.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_changes_flag_=false
    }
Opts.Apps.IsUpgradable.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_enable_=true
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_upgrade_enable_
    }
Opts.Apps.IsUpgradable.Upgrade.Init()
    {
    _obj_opts_apps_isupgradable_upgrade_text_=''
    _obj_opts_apps_isupgradable_upgrade_flag_=false
    _obj_opts_apps_isupgradable_upgrade_changes_flag_=true
    _obj_opts_apps_isupgradable_upgrade_enable_=false
    }
Opts.Apps.IsUpgradable.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsUpgradable.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsUpgradable.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_changes_flag_=true
    }
Opts.Apps.IsUpgradable.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isupgradable_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isupgradable_upgrade_flag_=true
    [[ $_obj_opts_apps_isupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isupgradable_upgrade_flag_
    }
Opts.Apps.IsUpgradable.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isupgradable_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isupgradable_upgrade_text_"
    fi
    }
Opts.Apps.IsUpgradable.Upgrade.Init

Opts.Apps.IsNotUpgradable.Upgrade.Clear()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_flag_=false
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_upgrade_flag_
    }
Opts.Apps.IsNotUpgradable.Upgrade.Disable()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_enable_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_enable_=false
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_upgrade_enable_
    }
Opts.Apps.IsNotUpgradable.Upgrade.DontLogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ != 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_changes_flag_=false
    }
Opts.Apps.IsNotUpgradable.Upgrade.Enable()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_enable_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_enable_=true
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_upgrade_enable_
    }
Opts.Apps.IsNotUpgradable.Upgrade.Init()
    {
    _obj_opts_apps_isnotupgradable_upgrade_text_=''
    _obj_opts_apps_isnotupgradable_upgrade_flag_=false
    _obj_opts_apps_isnotupgradable_upgrade_changes_flag_=true
    _obj_opts_apps_isnotupgradable_upgrade_enable_=false
    }
Opts.Apps.IsNotUpgradable.Upgrade.IsDisabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_enable_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Upgrade.IsEnabled()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_enable_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Upgrade.IsNot()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_flag_ != 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Upgrade.IsSet()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_flag_ = 'true' ]]
    }
Opts.Apps.IsNotUpgradable.Upgrade.LogChanges()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_changes_flag_=true
    }
Opts.Apps.IsNotUpgradable.Upgrade.Set()
    {
    [[ $_obj_opts_apps_isnotupgradable_upgrade_flag_ = 'true' ]] && return
    _obj_opts_apps_isnotupgradable_upgrade_flag_=true
    [[ $_obj_opts_apps_isnotupgradable_upgrade_changes_flag_ = 'true' ]] && DebugVar _obj_opts_apps_isnotupgradable_upgrade_flag_
    }
Opts.Apps.IsNotUpgradable.Upgrade.Text()
    {
    if [[ -n ${1:-} && $1 = "=" ]]; then
        _obj_opts_apps_isnotupgradable_upgrade_text_=$2
    else
        echo -n "$_obj_opts_apps_isnotupgradable_upgrade_text_"
    fi
    }
Opts.Apps.IsNotUpgradable.Upgrade.Init

Args.Unknown.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"} " != *"$item"* ]]; then
            _obj_args_unknown_array_+=("$item")
        fi
    done
    }
Args.Unknown.Array()
    {
    echo -n "${_obj_args_unknown_array_[@]+"${_obj_args_unknown_array_[@]}"}"
    }
Args.Unknown.Count()
    {
    echo "${#_obj_args_unknown_array_[@]}"
    }
Args.Unknown.Exist()
    {
    [[ ${_obj_args_unknown_array_[*]:-} == *"$1"* ]]
    }
Args.Unknown.First()
    {
    echo "${_obj_args_unknown_array_[0]}"
    }
Args.Unknown.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_args_unknown_array_[@]} ]] && index=${#_obj_args_unknown_array_[@]}
    echo -n "${_obj_args_unknown_array_[((index-1))]}"
    }
Args.Unknown.Init()
    {
    _obj_args_unknown_size_=0
    _obj_args_unknown_array_=()
    _obj_args_unknown_array_index_=1
    }
Args.Unknown.IsAny()
    {
    [[ ${#_obj_args_unknown_array_[@]} -gt 0 ]]
    }
Args.Unknown.IsNone()
    {
    [[ ${#_obj_args_unknown_array_[@]} -eq 0 ]]
    }
Args.Unknown.List()
    {
    echo -n "${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"}"
    }
Args.Unknown.ListCSV()
    {
    echo -n "${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"}" | tr ' ' ','
    }
Args.Unknown.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_args_unknown_array_[@]+"${_obj_args_unknown_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_args_unknown_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_args_unknown_array_[*]+"${_obj_args_unknown_array_[@]}"} ]] && _obj_args_unknown_array_=()
    }
Args.Unknown.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_args_unknown_size_=$2
    else
        echo -n $_obj_args_unknown_size_
    fi
    }
Args.Unknown.Init

QPKGs.Names.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_names_array_+=("$item")
        fi
    done
    }
QPKGs.Names.Array()
    {
    echo -n "${_obj_qpkgs_names_array_[@]+"${_obj_qpkgs_names_array_[@]}"}"
    }
QPKGs.Names.Count()
    {
    echo "${#_obj_qpkgs_names_array_[@]}"
    }
QPKGs.Names.Exist()
    {
    [[ ${_obj_qpkgs_names_array_[*]:-} == *"$1"* ]]
    }
QPKGs.Names.First()
    {
    echo "${_obj_qpkgs_names_array_[0]}"
    }
QPKGs.Names.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_names_array_[@]} ]] && index=${#_obj_qpkgs_names_array_[@]}
    echo -n "${_obj_qpkgs_names_array_[((index-1))]}"
    }
QPKGs.Names.Init()
    {
    _obj_qpkgs_names_size_=0
    _obj_qpkgs_names_array_=()
    _obj_qpkgs_names_array_index_=1
    }
QPKGs.Names.IsAny()
    {
    [[ ${#_obj_qpkgs_names_array_[@]} -gt 0 ]]
    }
QPKGs.Names.IsNone()
    {
    [[ ${#_obj_qpkgs_names_array_[@]} -eq 0 ]]
    }
QPKGs.Names.List()
    {
    echo -n "${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"}"
    }
QPKGs.Names.ListCSV()
    {
    echo -n "${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"}" | tr ' ' ','
    }
QPKGs.Names.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_names_array_[@]+"${_obj_qpkgs_names_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_names_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_names_array_[*]+"${_obj_qpkgs_names_array_[@]}"} ]] && _obj_qpkgs_names_array_=()
    }
QPKGs.Names.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_names_size_=$2
    else
        echo -n $_obj_qpkgs_names_size_
    fi
    }
QPKGs.Names.Init

QPKGs.IsAll.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isall_array_[*]+"${_obj_qpkgs_isall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isall_array_+=("$item")
        fi
    done
    }
QPKGs.IsAll.Array()
    {
    echo -n "${_obj_qpkgs_isall_array_[@]+"${_obj_qpkgs_isall_array_[@]}"}"
    }
QPKGs.IsAll.Count()
    {
    echo "${#_obj_qpkgs_isall_array_[@]}"
    }
QPKGs.IsAll.Exist()
    {
    [[ ${_obj_qpkgs_isall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsAll.First()
    {
    echo "${_obj_qpkgs_isall_array_[0]}"
    }
QPKGs.IsAll.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isall_array_[@]} ]] && index=${#_obj_qpkgs_isall_array_[@]}
    echo -n "${_obj_qpkgs_isall_array_[((index-1))]}"
    }
QPKGs.IsAll.Init()
    {
    _obj_qpkgs_isall_size_=0
    _obj_qpkgs_isall_array_=()
    _obj_qpkgs_isall_array_index_=1
    }
QPKGs.IsAll.IsAny()
    {
    [[ ${#_obj_qpkgs_isall_array_[@]} -gt 0 ]]
    }
QPKGs.IsAll.IsNone()
    {
    [[ ${#_obj_qpkgs_isall_array_[@]} -eq 0 ]]
    }
QPKGs.IsAll.List()
    {
    echo -n "${_obj_qpkgs_isall_array_[*]+"${_obj_qpkgs_isall_array_[@]}"}"
    }
QPKGs.IsAll.ListCSV()
    {
    echo -n "${_obj_qpkgs_isall_array_[*]+"${_obj_qpkgs_isall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsAll.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isall_array_[@]+"${_obj_qpkgs_isall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isall_array_[*]+"${_obj_qpkgs_isall_array_[@]}"} ]] && _obj_qpkgs_isall_array_=()
    }
QPKGs.IsAll.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isall_size_=$2
    else
        echo -n $_obj_qpkgs_isall_size_
    fi
    }
QPKGs.IsAll.Init

QPKGs.IsNotAll.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotall_array_[*]+"${_obj_qpkgs_isnotall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotall_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotAll.Array()
    {
    echo -n "${_obj_qpkgs_isnotall_array_[@]+"${_obj_qpkgs_isnotall_array_[@]}"}"
    }
QPKGs.IsNotAll.Count()
    {
    echo "${#_obj_qpkgs_isnotall_array_[@]}"
    }
QPKGs.IsNotAll.Exist()
    {
    [[ ${_obj_qpkgs_isnotall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotAll.First()
    {
    echo "${_obj_qpkgs_isnotall_array_[0]}"
    }
QPKGs.IsNotAll.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotall_array_[@]} ]] && index=${#_obj_qpkgs_isnotall_array_[@]}
    echo -n "${_obj_qpkgs_isnotall_array_[((index-1))]}"
    }
QPKGs.IsNotAll.Init()
    {
    _obj_qpkgs_isnotall_size_=0
    _obj_qpkgs_isnotall_array_=()
    _obj_qpkgs_isnotall_array_index_=1
    }
QPKGs.IsNotAll.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotall_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotAll.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotall_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotAll.List()
    {
    echo -n "${_obj_qpkgs_isnotall_array_[*]+"${_obj_qpkgs_isnotall_array_[@]}"}"
    }
QPKGs.IsNotAll.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotall_array_[*]+"${_obj_qpkgs_isnotall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotAll.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotall_array_[@]+"${_obj_qpkgs_isnotall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotall_array_[*]+"${_obj_qpkgs_isnotall_array_[@]}"} ]] && _obj_qpkgs_isnotall_array_=()
    }
QPKGs.IsNotAll.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotall_size_=$2
    else
        echo -n $_obj_qpkgs_isnotall_size_
    fi
    }
QPKGs.IsNotAll.Init

QPKGs.IsBackedUp.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isbackedup_array_+=("$item")
        fi
    done
    }
QPKGs.IsBackedUp.Array()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[@]+"${_obj_qpkgs_isbackedup_array_[@]}"}"
    }
QPKGs.IsBackedUp.Count()
    {
    echo "${#_obj_qpkgs_isbackedup_array_[@]}"
    }
QPKGs.IsBackedUp.Exist()
    {
    [[ ${_obj_qpkgs_isbackedup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsBackedUp.First()
    {
    echo "${_obj_qpkgs_isbackedup_array_[0]}"
    }
QPKGs.IsBackedUp.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isbackedup_array_[@]} ]] && index=${#_obj_qpkgs_isbackedup_array_[@]}
    echo -n "${_obj_qpkgs_isbackedup_array_[((index-1))]}"
    }
QPKGs.IsBackedUp.Init()
    {
    _obj_qpkgs_isbackedup_size_=0
    _obj_qpkgs_isbackedup_array_=()
    _obj_qpkgs_isbackedup_array_index_=1
    }
QPKGs.IsBackedUp.IsAny()
    {
    [[ ${#_obj_qpkgs_isbackedup_array_[@]} -gt 0 ]]
    }
QPKGs.IsBackedUp.IsNone()
    {
    [[ ${#_obj_qpkgs_isbackedup_array_[@]} -eq 0 ]]
    }
QPKGs.IsBackedUp.List()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"}"
    }
QPKGs.IsBackedUp.ListCSV()
    {
    echo -n "${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsBackedUp.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isbackedup_array_[@]+"${_obj_qpkgs_isbackedup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isbackedup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isbackedup_array_[*]+"${_obj_qpkgs_isbackedup_array_[@]}"} ]] && _obj_qpkgs_isbackedup_array_=()
    }
QPKGs.IsBackedUp.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isbackedup_size_=$2
    else
        echo -n $_obj_qpkgs_isbackedup_size_
    fi
    }
QPKGs.IsBackedUp.Init

QPKGs.IsNotBackedUp.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotbackedup_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotBackedUp.Array()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[@]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"
    }
QPKGs.IsNotBackedUp.Count()
    {
    echo "${#_obj_qpkgs_isnotbackedup_array_[@]}"
    }
QPKGs.IsNotBackedUp.Exist()
    {
    [[ ${_obj_qpkgs_isnotbackedup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotBackedUp.First()
    {
    echo "${_obj_qpkgs_isnotbackedup_array_[0]}"
    }
QPKGs.IsNotBackedUp.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotbackedup_array_[@]} ]] && index=${#_obj_qpkgs_isnotbackedup_array_[@]}
    echo -n "${_obj_qpkgs_isnotbackedup_array_[((index-1))]}"
    }
QPKGs.IsNotBackedUp.Init()
    {
    _obj_qpkgs_isnotbackedup_size_=0
    _obj_qpkgs_isnotbackedup_array_=()
    _obj_qpkgs_isnotbackedup_array_index_=1
    }
QPKGs.IsNotBackedUp.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotbackedup_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotBackedUp.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotbackedup_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotBackedUp.List()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"
    }
QPKGs.IsNotBackedUp.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotBackedUp.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotbackedup_array_[@]+"${_obj_qpkgs_isnotbackedup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotbackedup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotbackedup_array_[*]+"${_obj_qpkgs_isnotbackedup_array_[@]}"} ]] && _obj_qpkgs_isnotbackedup_array_=()
    }
QPKGs.IsNotBackedUp.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotbackedup_size_=$2
    else
        echo -n $_obj_qpkgs_isnotbackedup_size_
    fi
    }
QPKGs.IsNotBackedUp.Init

QPKGs.IsDependent.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isdependent_array_+=("$item")
        fi
    done
    }
QPKGs.IsDependent.Array()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[@]+"${_obj_qpkgs_isdependent_array_[@]}"}"
    }
QPKGs.IsDependent.Count()
    {
    echo "${#_obj_qpkgs_isdependent_array_[@]}"
    }
QPKGs.IsDependent.Exist()
    {
    [[ ${_obj_qpkgs_isdependent_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsDependent.First()
    {
    echo "${_obj_qpkgs_isdependent_array_[0]}"
    }
QPKGs.IsDependent.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isdependent_array_[@]} ]] && index=${#_obj_qpkgs_isdependent_array_[@]}
    echo -n "${_obj_qpkgs_isdependent_array_[((index-1))]}"
    }
QPKGs.IsDependent.Init()
    {
    _obj_qpkgs_isdependent_size_=0
    _obj_qpkgs_isdependent_array_=()
    _obj_qpkgs_isdependent_array_index_=1
    }
QPKGs.IsDependent.IsAny()
    {
    [[ ${#_obj_qpkgs_isdependent_array_[@]} -gt 0 ]]
    }
QPKGs.IsDependent.IsNone()
    {
    [[ ${#_obj_qpkgs_isdependent_array_[@]} -eq 0 ]]
    }
QPKGs.IsDependent.List()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"}"
    }
QPKGs.IsDependent.ListCSV()
    {
    echo -n "${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsDependent.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isdependent_array_[@]+"${_obj_qpkgs_isdependent_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isdependent_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isdependent_array_[*]+"${_obj_qpkgs_isdependent_array_[@]}"} ]] && _obj_qpkgs_isdependent_array_=()
    }
QPKGs.IsDependent.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isdependent_size_=$2
    else
        echo -n $_obj_qpkgs_isdependent_size_
    fi
    }
QPKGs.IsDependent.Init

QPKGs.IsNotDependent.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotdependent_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotDependent.Array()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[@]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"
    }
QPKGs.IsNotDependent.Count()
    {
    echo "${#_obj_qpkgs_isnotdependent_array_[@]}"
    }
QPKGs.IsNotDependent.Exist()
    {
    [[ ${_obj_qpkgs_isnotdependent_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotDependent.First()
    {
    echo "${_obj_qpkgs_isnotdependent_array_[0]}"
    }
QPKGs.IsNotDependent.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotdependent_array_[@]} ]] && index=${#_obj_qpkgs_isnotdependent_array_[@]}
    echo -n "${_obj_qpkgs_isnotdependent_array_[((index-1))]}"
    }
QPKGs.IsNotDependent.Init()
    {
    _obj_qpkgs_isnotdependent_size_=0
    _obj_qpkgs_isnotdependent_array_=()
    _obj_qpkgs_isnotdependent_array_index_=1
    }
QPKGs.IsNotDependent.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotdependent_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotDependent.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotdependent_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotDependent.List()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"
    }
QPKGs.IsNotDependent.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotDependent.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotdependent_array_[@]+"${_obj_qpkgs_isnotdependent_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotdependent_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotdependent_array_[*]+"${_obj_qpkgs_isnotdependent_array_[@]}"} ]] && _obj_qpkgs_isnotdependent_array_=()
    }
QPKGs.IsNotDependent.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotdependent_size_=$2
    else
        echo -n $_obj_qpkgs_isnotdependent_size_
    fi
    }
QPKGs.IsNotDependent.Init

QPKGs.IsInstalled.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isinstalled_array_+=("$item")
        fi
    done
    }
QPKGs.IsInstalled.Array()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[@]+"${_obj_qpkgs_isinstalled_array_[@]}"}"
    }
QPKGs.IsInstalled.Count()
    {
    echo "${#_obj_qpkgs_isinstalled_array_[@]}"
    }
QPKGs.IsInstalled.Exist()
    {
    [[ ${_obj_qpkgs_isinstalled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsInstalled.First()
    {
    echo "${_obj_qpkgs_isinstalled_array_[0]}"
    }
QPKGs.IsInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isinstalled_array_[@]} ]] && index=${#_obj_qpkgs_isinstalled_array_[@]}
    echo -n "${_obj_qpkgs_isinstalled_array_[((index-1))]}"
    }
QPKGs.IsInstalled.Init()
    {
    _obj_qpkgs_isinstalled_size_=0
    _obj_qpkgs_isinstalled_array_=()
    _obj_qpkgs_isinstalled_array_index_=1
    }
QPKGs.IsInstalled.IsAny()
    {
    [[ ${#_obj_qpkgs_isinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.IsInstalled.IsNone()
    {
    [[ ${#_obj_qpkgs_isinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.IsInstalled.List()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"}"
    }
QPKGs.IsInstalled.ListCSV()
    {
    echo -n "${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsInstalled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isinstalled_array_[@]+"${_obj_qpkgs_isinstalled_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isinstalled_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isinstalled_array_[*]+"${_obj_qpkgs_isinstalled_array_[@]}"} ]] && _obj_qpkgs_isinstalled_array_=()
    }
QPKGs.IsInstalled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isinstalled_size_=$2
    else
        echo -n $_obj_qpkgs_isinstalled_size_
    fi
    }
QPKGs.IsInstalled.Init

QPKGs.IsNotInstalled.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotinstalled_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotInstalled.Array()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[@]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"
    }
QPKGs.IsNotInstalled.Count()
    {
    echo "${#_obj_qpkgs_isnotinstalled_array_[@]}"
    }
QPKGs.IsNotInstalled.Exist()
    {
    [[ ${_obj_qpkgs_isnotinstalled_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotInstalled.First()
    {
    echo "${_obj_qpkgs_isnotinstalled_array_[0]}"
    }
QPKGs.IsNotInstalled.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotinstalled_array_[@]} ]] && index=${#_obj_qpkgs_isnotinstalled_array_[@]}
    echo -n "${_obj_qpkgs_isnotinstalled_array_[((index-1))]}"
    }
QPKGs.IsNotInstalled.Init()
    {
    _obj_qpkgs_isnotinstalled_size_=0
    _obj_qpkgs_isnotinstalled_array_=()
    _obj_qpkgs_isnotinstalled_array_index_=1
    }
QPKGs.IsNotInstalled.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotinstalled_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotInstalled.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotinstalled_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotInstalled.List()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"
    }
QPKGs.IsNotInstalled.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotInstalled.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotinstalled_array_[@]+"${_obj_qpkgs_isnotinstalled_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotinstalled_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotinstalled_array_[*]+"${_obj_qpkgs_isnotinstalled_array_[@]}"} ]] && _obj_qpkgs_isnotinstalled_array_=()
    }
QPKGs.IsNotInstalled.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotinstalled_size_=$2
    else
        echo -n $_obj_qpkgs_isnotinstalled_size_
    fi
    }
QPKGs.IsNotInstalled.Init

QPKGs.IsInstallable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isinstallable_array_+=("$item")
        fi
    done
    }
QPKGs.IsInstallable.Array()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[@]+"${_obj_qpkgs_isinstallable_array_[@]}"}"
    }
QPKGs.IsInstallable.Count()
    {
    echo "${#_obj_qpkgs_isinstallable_array_[@]}"
    }
QPKGs.IsInstallable.Exist()
    {
    [[ ${_obj_qpkgs_isinstallable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsInstallable.First()
    {
    echo "${_obj_qpkgs_isinstallable_array_[0]}"
    }
QPKGs.IsInstallable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isinstallable_array_[@]} ]] && index=${#_obj_qpkgs_isinstallable_array_[@]}
    echo -n "${_obj_qpkgs_isinstallable_array_[((index-1))]}"
    }
QPKGs.IsInstallable.Init()
    {
    _obj_qpkgs_isinstallable_size_=0
    _obj_qpkgs_isinstallable_array_=()
    _obj_qpkgs_isinstallable_array_index_=1
    }
QPKGs.IsInstallable.IsAny()
    {
    [[ ${#_obj_qpkgs_isinstallable_array_[@]} -gt 0 ]]
    }
QPKGs.IsInstallable.IsNone()
    {
    [[ ${#_obj_qpkgs_isinstallable_array_[@]} -eq 0 ]]
    }
QPKGs.IsInstallable.List()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"}"
    }
QPKGs.IsInstallable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsInstallable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isinstallable_array_[@]+"${_obj_qpkgs_isinstallable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isinstallable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isinstallable_array_[*]+"${_obj_qpkgs_isinstallable_array_[@]}"} ]] && _obj_qpkgs_isinstallable_array_=()
    }
QPKGs.IsInstallable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isinstallable_size_=$2
    else
        echo -n $_obj_qpkgs_isinstallable_size_
    fi
    }
QPKGs.IsInstallable.Init

QPKGs.IsNotInstallable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotinstallable_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotInstallable.Array()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[@]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"
    }
QPKGs.IsNotInstallable.Count()
    {
    echo "${#_obj_qpkgs_isnotinstallable_array_[@]}"
    }
QPKGs.IsNotInstallable.Exist()
    {
    [[ ${_obj_qpkgs_isnotinstallable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotInstallable.First()
    {
    echo "${_obj_qpkgs_isnotinstallable_array_[0]}"
    }
QPKGs.IsNotInstallable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotinstallable_array_[@]} ]] && index=${#_obj_qpkgs_isnotinstallable_array_[@]}
    echo -n "${_obj_qpkgs_isnotinstallable_array_[((index-1))]}"
    }
QPKGs.IsNotInstallable.Init()
    {
    _obj_qpkgs_isnotinstallable_size_=0
    _obj_qpkgs_isnotinstallable_array_=()
    _obj_qpkgs_isnotinstallable_array_index_=1
    }
QPKGs.IsNotInstallable.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotinstallable_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotInstallable.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotinstallable_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotInstallable.List()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"
    }
QPKGs.IsNotInstallable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotInstallable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotinstallable_array_[@]+"${_obj_qpkgs_isnotinstallable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotinstallable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotinstallable_array_[*]+"${_obj_qpkgs_isnotinstallable_array_[@]}"} ]] && _obj_qpkgs_isnotinstallable_array_=()
    }
QPKGs.IsNotInstallable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotinstallable_size_=$2
    else
        echo -n $_obj_qpkgs_isnotinstallable_size_
    fi
    }
QPKGs.IsNotInstallable.Init

QPKGs.IsMissing.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_ismissing_array_+=("$item")
        fi
    done
    }
QPKGs.IsMissing.Array()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[@]+"${_obj_qpkgs_ismissing_array_[@]}"}"
    }
QPKGs.IsMissing.Count()
    {
    echo "${#_obj_qpkgs_ismissing_array_[@]}"
    }
QPKGs.IsMissing.Exist()
    {
    [[ ${_obj_qpkgs_ismissing_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsMissing.First()
    {
    echo "${_obj_qpkgs_ismissing_array_[0]}"
    }
QPKGs.IsMissing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_ismissing_array_[@]} ]] && index=${#_obj_qpkgs_ismissing_array_[@]}
    echo -n "${_obj_qpkgs_ismissing_array_[((index-1))]}"
    }
QPKGs.IsMissing.Init()
    {
    _obj_qpkgs_ismissing_size_=0
    _obj_qpkgs_ismissing_array_=()
    _obj_qpkgs_ismissing_array_index_=1
    }
QPKGs.IsMissing.IsAny()
    {
    [[ ${#_obj_qpkgs_ismissing_array_[@]} -gt 0 ]]
    }
QPKGs.IsMissing.IsNone()
    {
    [[ ${#_obj_qpkgs_ismissing_array_[@]} -eq 0 ]]
    }
QPKGs.IsMissing.List()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"}"
    }
QPKGs.IsMissing.ListCSV()
    {
    echo -n "${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsMissing.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_ismissing_array_[@]+"${_obj_qpkgs_ismissing_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_ismissing_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_ismissing_array_[*]+"${_obj_qpkgs_ismissing_array_[@]}"} ]] && _obj_qpkgs_ismissing_array_=()
    }
QPKGs.IsMissing.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_ismissing_size_=$2
    else
        echo -n $_obj_qpkgs_ismissing_size_
    fi
    }
QPKGs.IsMissing.Init

QPKGs.IsNotMissing.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotmissing_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotMissing.Array()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[@]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"
    }
QPKGs.IsNotMissing.Count()
    {
    echo "${#_obj_qpkgs_isnotmissing_array_[@]}"
    }
QPKGs.IsNotMissing.Exist()
    {
    [[ ${_obj_qpkgs_isnotmissing_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotMissing.First()
    {
    echo "${_obj_qpkgs_isnotmissing_array_[0]}"
    }
QPKGs.IsNotMissing.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotmissing_array_[@]} ]] && index=${#_obj_qpkgs_isnotmissing_array_[@]}
    echo -n "${_obj_qpkgs_isnotmissing_array_[((index-1))]}"
    }
QPKGs.IsNotMissing.Init()
    {
    _obj_qpkgs_isnotmissing_size_=0
    _obj_qpkgs_isnotmissing_array_=()
    _obj_qpkgs_isnotmissing_array_index_=1
    }
QPKGs.IsNotMissing.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotmissing_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotMissing.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotmissing_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotMissing.List()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"
    }
QPKGs.IsNotMissing.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotMissing.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotmissing_array_[@]+"${_obj_qpkgs_isnotmissing_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotmissing_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotmissing_array_[*]+"${_obj_qpkgs_isnotmissing_array_[@]}"} ]] && _obj_qpkgs_isnotmissing_array_=()
    }
QPKGs.IsNotMissing.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotmissing_size_=$2
    else
        echo -n $_obj_qpkgs_isnotmissing_size_
    fi
    }
QPKGs.IsNotMissing.Init

QPKGs.IsNames.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnames_array_+=("$item")
        fi
    done
    }
QPKGs.IsNames.Array()
    {
    echo -n "${_obj_qpkgs_isnames_array_[@]+"${_obj_qpkgs_isnames_array_[@]}"}"
    }
QPKGs.IsNames.Count()
    {
    echo "${#_obj_qpkgs_isnames_array_[@]}"
    }
QPKGs.IsNames.Exist()
    {
    [[ ${_obj_qpkgs_isnames_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNames.First()
    {
    echo "${_obj_qpkgs_isnames_array_[0]}"
    }
QPKGs.IsNames.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnames_array_[@]} ]] && index=${#_obj_qpkgs_isnames_array_[@]}
    echo -n "${_obj_qpkgs_isnames_array_[((index-1))]}"
    }
QPKGs.IsNames.Init()
    {
    _obj_qpkgs_isnames_size_=0
    _obj_qpkgs_isnames_array_=()
    _obj_qpkgs_isnames_array_index_=1
    }
QPKGs.IsNames.IsAny()
    {
    [[ ${#_obj_qpkgs_isnames_array_[@]} -gt 0 ]]
    }
QPKGs.IsNames.IsNone()
    {
    [[ ${#_obj_qpkgs_isnames_array_[@]} -eq 0 ]]
    }
QPKGs.IsNames.List()
    {
    echo -n "${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"}"
    }
QPKGs.IsNames.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNames.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnames_array_[@]+"${_obj_qpkgs_isnames_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnames_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnames_array_[*]+"${_obj_qpkgs_isnames_array_[@]}"} ]] && _obj_qpkgs_isnames_array_=()
    }
QPKGs.IsNames.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnames_size_=$2
    else
        echo -n $_obj_qpkgs_isnames_size_
    fi
    }
QPKGs.IsNames.Init

QPKGs.IsNotNames.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotnames_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotNames.Array()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[@]+"${_obj_qpkgs_isnotnames_array_[@]}"}"
    }
QPKGs.IsNotNames.Count()
    {
    echo "${#_obj_qpkgs_isnotnames_array_[@]}"
    }
QPKGs.IsNotNames.Exist()
    {
    [[ ${_obj_qpkgs_isnotnames_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotNames.First()
    {
    echo "${_obj_qpkgs_isnotnames_array_[0]}"
    }
QPKGs.IsNotNames.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotnames_array_[@]} ]] && index=${#_obj_qpkgs_isnotnames_array_[@]}
    echo -n "${_obj_qpkgs_isnotnames_array_[((index-1))]}"
    }
QPKGs.IsNotNames.Init()
    {
    _obj_qpkgs_isnotnames_size_=0
    _obj_qpkgs_isnotnames_array_=()
    _obj_qpkgs_isnotnames_array_index_=1
    }
QPKGs.IsNotNames.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotnames_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotNames.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotnames_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotNames.List()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"}"
    }
QPKGs.IsNotNames.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotNames.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotnames_array_[@]+"${_obj_qpkgs_isnotnames_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotnames_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotnames_array_[*]+"${_obj_qpkgs_isnotnames_array_[@]}"} ]] && _obj_qpkgs_isnotnames_array_=()
    }
QPKGs.IsNotNames.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotnames_size_=$2
    else
        echo -n $_obj_qpkgs_isnotnames_size_
    fi
    }
QPKGs.IsNotNames.Init

QPKGs.IsStandalone.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstandalone_array_+=("$item")
        fi
    done
    }
QPKGs.IsStandalone.Array()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[@]+"${_obj_qpkgs_isstandalone_array_[@]}"}"
    }
QPKGs.IsStandalone.Count()
    {
    echo "${#_obj_qpkgs_isstandalone_array_[@]}"
    }
QPKGs.IsStandalone.Exist()
    {
    [[ ${_obj_qpkgs_isstandalone_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStandalone.First()
    {
    echo "${_obj_qpkgs_isstandalone_array_[0]}"
    }
QPKGs.IsStandalone.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstandalone_array_[@]} ]] && index=${#_obj_qpkgs_isstandalone_array_[@]}
    echo -n "${_obj_qpkgs_isstandalone_array_[((index-1))]}"
    }
QPKGs.IsStandalone.Init()
    {
    _obj_qpkgs_isstandalone_size_=0
    _obj_qpkgs_isstandalone_array_=()
    _obj_qpkgs_isstandalone_array_index_=1
    }
QPKGs.IsStandalone.IsAny()
    {
    [[ ${#_obj_qpkgs_isstandalone_array_[@]} -gt 0 ]]
    }
QPKGs.IsStandalone.IsNone()
    {
    [[ ${#_obj_qpkgs_isstandalone_array_[@]} -eq 0 ]]
    }
QPKGs.IsStandalone.List()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"}"
    }
QPKGs.IsStandalone.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStandalone.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstandalone_array_[@]+"${_obj_qpkgs_isstandalone_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstandalone_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstandalone_array_[*]+"${_obj_qpkgs_isstandalone_array_[@]}"} ]] && _obj_qpkgs_isstandalone_array_=()
    }
QPKGs.IsStandalone.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstandalone_size_=$2
    else
        echo -n $_obj_qpkgs_isstandalone_size_
    fi
    }
QPKGs.IsStandalone.Init

QPKGs.IsNotStandalone.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstandalone_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStandalone.Array()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[@]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"
    }
QPKGs.IsNotStandalone.Count()
    {
    echo "${#_obj_qpkgs_isnotstandalone_array_[@]}"
    }
QPKGs.IsNotStandalone.Exist()
    {
    [[ ${_obj_qpkgs_isnotstandalone_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStandalone.First()
    {
    echo "${_obj_qpkgs_isnotstandalone_array_[0]}"
    }
QPKGs.IsNotStandalone.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstandalone_array_[@]} ]] && index=${#_obj_qpkgs_isnotstandalone_array_[@]}
    echo -n "${_obj_qpkgs_isnotstandalone_array_[((index-1))]}"
    }
QPKGs.IsNotStandalone.Init()
    {
    _obj_qpkgs_isnotstandalone_size_=0
    _obj_qpkgs_isnotstandalone_array_=()
    _obj_qpkgs_isnotstandalone_array_index_=1
    }
QPKGs.IsNotStandalone.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstandalone_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStandalone.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstandalone_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStandalone.List()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"
    }
QPKGs.IsNotStandalone.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStandalone.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstandalone_array_[@]+"${_obj_qpkgs_isnotstandalone_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstandalone_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstandalone_array_[*]+"${_obj_qpkgs_isnotstandalone_array_[@]}"} ]] && _obj_qpkgs_isnotstandalone_array_=()
    }
QPKGs.IsNotStandalone.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstandalone_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstandalone_size_
    fi
    }
QPKGs.IsNotStandalone.Init

QPKGs.IsStarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsStarting.Array()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[@]+"${_obj_qpkgs_isstarting_array_[@]}"}"
    }
QPKGs.IsStarting.Count()
    {
    echo "${#_obj_qpkgs_isstarting_array_[@]}"
    }
QPKGs.IsStarting.Exist()
    {
    [[ ${_obj_qpkgs_isstarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStarting.First()
    {
    echo "${_obj_qpkgs_isstarting_array_[0]}"
    }
QPKGs.IsStarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstarting_array_[@]} ]] && index=${#_obj_qpkgs_isstarting_array_[@]}
    echo -n "${_obj_qpkgs_isstarting_array_[((index-1))]}"
    }
QPKGs.IsStarting.Init()
    {
    _obj_qpkgs_isstarting_size_=0
    _obj_qpkgs_isstarting_array_=()
    _obj_qpkgs_isstarting_array_index_=1
    }
QPKGs.IsStarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isstarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsStarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isstarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsStarting.List()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"}"
    }
QPKGs.IsStarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstarting_array_[@]+"${_obj_qpkgs_isstarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstarting_array_[*]+"${_obj_qpkgs_isstarting_array_[@]}"} ]] && _obj_qpkgs_isstarting_array_=()
    }
QPKGs.IsStarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstarting_size_=$2
    else
        echo -n $_obj_qpkgs_isstarting_size_
    fi
    }
QPKGs.IsStarting.Init

QPKGs.IsNotStarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStarting.Array()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[@]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"
    }
QPKGs.IsNotStarting.Count()
    {
    echo "${#_obj_qpkgs_isnotstarting_array_[@]}"
    }
QPKGs.IsNotStarting.Exist()
    {
    [[ ${_obj_qpkgs_isnotstarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStarting.First()
    {
    echo "${_obj_qpkgs_isnotstarting_array_[0]}"
    }
QPKGs.IsNotStarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstarting_array_[@]} ]] && index=${#_obj_qpkgs_isnotstarting_array_[@]}
    echo -n "${_obj_qpkgs_isnotstarting_array_[((index-1))]}"
    }
QPKGs.IsNotStarting.Init()
    {
    _obj_qpkgs_isnotstarting_size_=0
    _obj_qpkgs_isnotstarting_array_=()
    _obj_qpkgs_isnotstarting_array_index_=1
    }
QPKGs.IsNotStarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStarting.List()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"
    }
QPKGs.IsNotStarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstarting_array_[@]+"${_obj_qpkgs_isnotstarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstarting_array_[*]+"${_obj_qpkgs_isnotstarting_array_[@]}"} ]] && _obj_qpkgs_isnotstarting_array_=()
    }
QPKGs.IsNotStarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstarting_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstarting_size_
    fi
    }
QPKGs.IsNotStarting.Init

QPKGs.IsStarted.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstarted_array_+=("$item")
        fi
    done
    }
QPKGs.IsStarted.Array()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[@]+"${_obj_qpkgs_isstarted_array_[@]}"}"
    }
QPKGs.IsStarted.Count()
    {
    echo "${#_obj_qpkgs_isstarted_array_[@]}"
    }
QPKGs.IsStarted.Exist()
    {
    [[ ${_obj_qpkgs_isstarted_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStarted.First()
    {
    echo "${_obj_qpkgs_isstarted_array_[0]}"
    }
QPKGs.IsStarted.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstarted_array_[@]} ]] && index=${#_obj_qpkgs_isstarted_array_[@]}
    echo -n "${_obj_qpkgs_isstarted_array_[((index-1))]}"
    }
QPKGs.IsStarted.Init()
    {
    _obj_qpkgs_isstarted_size_=0
    _obj_qpkgs_isstarted_array_=()
    _obj_qpkgs_isstarted_array_index_=1
    }
QPKGs.IsStarted.IsAny()
    {
    [[ ${#_obj_qpkgs_isstarted_array_[@]} -gt 0 ]]
    }
QPKGs.IsStarted.IsNone()
    {
    [[ ${#_obj_qpkgs_isstarted_array_[@]} -eq 0 ]]
    }
QPKGs.IsStarted.List()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"}"
    }
QPKGs.IsStarted.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStarted.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstarted_array_[@]+"${_obj_qpkgs_isstarted_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstarted_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstarted_array_[*]+"${_obj_qpkgs_isstarted_array_[@]}"} ]] && _obj_qpkgs_isstarted_array_=()
    }
QPKGs.IsStarted.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstarted_size_=$2
    else
        echo -n $_obj_qpkgs_isstarted_size_
    fi
    }
QPKGs.IsStarted.Init

QPKGs.IsNotStarted.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstarted_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStarted.Array()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[@]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"
    }
QPKGs.IsNotStarted.Count()
    {
    echo "${#_obj_qpkgs_isnotstarted_array_[@]}"
    }
QPKGs.IsNotStarted.Exist()
    {
    [[ ${_obj_qpkgs_isnotstarted_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStarted.First()
    {
    echo "${_obj_qpkgs_isnotstarted_array_[0]}"
    }
QPKGs.IsNotStarted.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstarted_array_[@]} ]] && index=${#_obj_qpkgs_isnotstarted_array_[@]}
    echo -n "${_obj_qpkgs_isnotstarted_array_[((index-1))]}"
    }
QPKGs.IsNotStarted.Init()
    {
    _obj_qpkgs_isnotstarted_size_=0
    _obj_qpkgs_isnotstarted_array_=()
    _obj_qpkgs_isnotstarted_array_index_=1
    }
QPKGs.IsNotStarted.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstarted_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStarted.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstarted_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStarted.List()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"
    }
QPKGs.IsNotStarted.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStarted.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstarted_array_[@]+"${_obj_qpkgs_isnotstarted_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstarted_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstarted_array_[*]+"${_obj_qpkgs_isnotstarted_array_[@]}"} ]] && _obj_qpkgs_isnotstarted_array_=()
    }
QPKGs.IsNotStarted.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstarted_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstarted_size_
    fi
    }
QPKGs.IsNotStarted.Init

QPKGs.IsStopping.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstopping_array_+=("$item")
        fi
    done
    }
QPKGs.IsStopping.Array()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[@]+"${_obj_qpkgs_isstopping_array_[@]}"}"
    }
QPKGs.IsStopping.Count()
    {
    echo "${#_obj_qpkgs_isstopping_array_[@]}"
    }
QPKGs.IsStopping.Exist()
    {
    [[ ${_obj_qpkgs_isstopping_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStopping.First()
    {
    echo "${_obj_qpkgs_isstopping_array_[0]}"
    }
QPKGs.IsStopping.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstopping_array_[@]} ]] && index=${#_obj_qpkgs_isstopping_array_[@]}
    echo -n "${_obj_qpkgs_isstopping_array_[((index-1))]}"
    }
QPKGs.IsStopping.Init()
    {
    _obj_qpkgs_isstopping_size_=0
    _obj_qpkgs_isstopping_array_=()
    _obj_qpkgs_isstopping_array_index_=1
    }
QPKGs.IsStopping.IsAny()
    {
    [[ ${#_obj_qpkgs_isstopping_array_[@]} -gt 0 ]]
    }
QPKGs.IsStopping.IsNone()
    {
    [[ ${#_obj_qpkgs_isstopping_array_[@]} -eq 0 ]]
    }
QPKGs.IsStopping.List()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"}"
    }
QPKGs.IsStopping.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStopping.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstopping_array_[@]+"${_obj_qpkgs_isstopping_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstopping_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstopping_array_[*]+"${_obj_qpkgs_isstopping_array_[@]}"} ]] && _obj_qpkgs_isstopping_array_=()
    }
QPKGs.IsStopping.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstopping_size_=$2
    else
        echo -n $_obj_qpkgs_isstopping_size_
    fi
    }
QPKGs.IsStopping.Init

QPKGs.IsNotStopping.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstopping_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStopping.Array()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[@]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"
    }
QPKGs.IsNotStopping.Count()
    {
    echo "${#_obj_qpkgs_isnotstopping_array_[@]}"
    }
QPKGs.IsNotStopping.Exist()
    {
    [[ ${_obj_qpkgs_isnotstopping_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStopping.First()
    {
    echo "${_obj_qpkgs_isnotstopping_array_[0]}"
    }
QPKGs.IsNotStopping.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstopping_array_[@]} ]] && index=${#_obj_qpkgs_isnotstopping_array_[@]}
    echo -n "${_obj_qpkgs_isnotstopping_array_[((index-1))]}"
    }
QPKGs.IsNotStopping.Init()
    {
    _obj_qpkgs_isnotstopping_size_=0
    _obj_qpkgs_isnotstopping_array_=()
    _obj_qpkgs_isnotstopping_array_index_=1
    }
QPKGs.IsNotStopping.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstopping_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStopping.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstopping_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStopping.List()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"
    }
QPKGs.IsNotStopping.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStopping.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstopping_array_[@]+"${_obj_qpkgs_isnotstopping_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstopping_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstopping_array_[*]+"${_obj_qpkgs_isnotstopping_array_[@]}"} ]] && _obj_qpkgs_isnotstopping_array_=()
    }
QPKGs.IsNotStopping.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstopping_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstopping_size_
    fi
    }
QPKGs.IsNotStopping.Init

QPKGs.IsStopped.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isstopped_array_+=("$item")
        fi
    done
    }
QPKGs.IsStopped.Array()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[@]+"${_obj_qpkgs_isstopped_array_[@]}"}"
    }
QPKGs.IsStopped.Count()
    {
    echo "${#_obj_qpkgs_isstopped_array_[@]}"
    }
QPKGs.IsStopped.Exist()
    {
    [[ ${_obj_qpkgs_isstopped_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsStopped.First()
    {
    echo "${_obj_qpkgs_isstopped_array_[0]}"
    }
QPKGs.IsStopped.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isstopped_array_[@]} ]] && index=${#_obj_qpkgs_isstopped_array_[@]}
    echo -n "${_obj_qpkgs_isstopped_array_[((index-1))]}"
    }
QPKGs.IsStopped.Init()
    {
    _obj_qpkgs_isstopped_size_=0
    _obj_qpkgs_isstopped_array_=()
    _obj_qpkgs_isstopped_array_index_=1
    }
QPKGs.IsStopped.IsAny()
    {
    [[ ${#_obj_qpkgs_isstopped_array_[@]} -gt 0 ]]
    }
QPKGs.IsStopped.IsNone()
    {
    [[ ${#_obj_qpkgs_isstopped_array_[@]} -eq 0 ]]
    }
QPKGs.IsStopped.List()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"}"
    }
QPKGs.IsStopped.ListCSV()
    {
    echo -n "${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsStopped.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isstopped_array_[@]+"${_obj_qpkgs_isstopped_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isstopped_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isstopped_array_[*]+"${_obj_qpkgs_isstopped_array_[@]}"} ]] && _obj_qpkgs_isstopped_array_=()
    }
QPKGs.IsStopped.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isstopped_size_=$2
    else
        echo -n $_obj_qpkgs_isstopped_size_
    fi
    }
QPKGs.IsStopped.Init

QPKGs.IsNotStopped.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotstopped_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotStopped.Array()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[@]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"
    }
QPKGs.IsNotStopped.Count()
    {
    echo "${#_obj_qpkgs_isnotstopped_array_[@]}"
    }
QPKGs.IsNotStopped.Exist()
    {
    [[ ${_obj_qpkgs_isnotstopped_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotStopped.First()
    {
    echo "${_obj_qpkgs_isnotstopped_array_[0]}"
    }
QPKGs.IsNotStopped.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotstopped_array_[@]} ]] && index=${#_obj_qpkgs_isnotstopped_array_[@]}
    echo -n "${_obj_qpkgs_isnotstopped_array_[((index-1))]}"
    }
QPKGs.IsNotStopped.Init()
    {
    _obj_qpkgs_isnotstopped_size_=0
    _obj_qpkgs_isnotstopped_array_=()
    _obj_qpkgs_isnotstopped_array_index_=1
    }
QPKGs.IsNotStopped.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotstopped_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotStopped.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotstopped_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotStopped.List()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"
    }
QPKGs.IsNotStopped.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotStopped.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotstopped_array_[@]+"${_obj_qpkgs_isnotstopped_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotstopped_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotstopped_array_[*]+"${_obj_qpkgs_isnotstopped_array_[@]}"} ]] && _obj_qpkgs_isnotstopped_array_=()
    }
QPKGs.IsNotStopped.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotstopped_size_=$2
    else
        echo -n $_obj_qpkgs_isnotstopped_size_
    fi
    }
QPKGs.IsNotStopped.Init

QPKGs.IsSupportBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_issupportbackup_array_+=("$item")
        fi
    done
    }
QPKGs.IsSupportBackup.Array()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[@]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"
    }
QPKGs.IsSupportBackup.Count()
    {
    echo "${#_obj_qpkgs_issupportbackup_array_[@]}"
    }
QPKGs.IsSupportBackup.Exist()
    {
    [[ ${_obj_qpkgs_issupportbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsSupportBackup.First()
    {
    echo "${_obj_qpkgs_issupportbackup_array_[0]}"
    }
QPKGs.IsSupportBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_issupportbackup_array_[@]} ]] && index=${#_obj_qpkgs_issupportbackup_array_[@]}
    echo -n "${_obj_qpkgs_issupportbackup_array_[((index-1))]}"
    }
QPKGs.IsSupportBackup.Init()
    {
    _obj_qpkgs_issupportbackup_size_=0
    _obj_qpkgs_issupportbackup_array_=()
    _obj_qpkgs_issupportbackup_array_index_=1
    }
QPKGs.IsSupportBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_issupportbackup_array_[@]} -gt 0 ]]
    }
QPKGs.IsSupportBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_issupportbackup_array_[@]} -eq 0 ]]
    }
QPKGs.IsSupportBackup.List()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"
    }
QPKGs.IsSupportBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsSupportBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_issupportbackup_array_[@]+"${_obj_qpkgs_issupportbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_issupportbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_issupportbackup_array_[*]+"${_obj_qpkgs_issupportbackup_array_[@]}"} ]] && _obj_qpkgs_issupportbackup_array_=()
    }
QPKGs.IsSupportBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_issupportbackup_size_=$2
    else
        echo -n $_obj_qpkgs_issupportbackup_size_
    fi
    }
QPKGs.IsSupportBackup.Init

QPKGs.IsNotSupportBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotsupportbackup_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotSupportBackup.Array()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[@]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"
    }
QPKGs.IsNotSupportBackup.Count()
    {
    echo "${#_obj_qpkgs_isnotsupportbackup_array_[@]}"
    }
QPKGs.IsNotSupportBackup.Exist()
    {
    [[ ${_obj_qpkgs_isnotsupportbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotSupportBackup.First()
    {
    echo "${_obj_qpkgs_isnotsupportbackup_array_[0]}"
    }
QPKGs.IsNotSupportBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotsupportbackup_array_[@]} ]] && index=${#_obj_qpkgs_isnotsupportbackup_array_[@]}
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[((index-1))]}"
    }
QPKGs.IsNotSupportBackup.Init()
    {
    _obj_qpkgs_isnotsupportbackup_size_=0
    _obj_qpkgs_isnotsupportbackup_array_=()
    _obj_qpkgs_isnotsupportbackup_array_index_=1
    }
QPKGs.IsNotSupportBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotsupportbackup_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotSupportBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotsupportbackup_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotSupportBackup.List()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"
    }
QPKGs.IsNotSupportBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotSupportBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotsupportbackup_array_[@]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotsupportbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotsupportbackup_array_[*]+"${_obj_qpkgs_isnotsupportbackup_array_[@]}"} ]] && _obj_qpkgs_isnotsupportbackup_array_=()
    }
QPKGs.IsNotSupportBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotsupportbackup_size_=$2
    else
        echo -n $_obj_qpkgs_isnotsupportbackup_size_
    fi
    }
QPKGs.IsNotSupportBackup.Init

QPKGs.IsSupportUpdateOnRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_issupportupdateonrestart_array_+=("$item")
        fi
    done
    }
QPKGs.IsSupportUpdateOnRestart.Array()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[@]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsSupportUpdateOnRestart.Count()
    {
    echo "${#_obj_qpkgs_issupportupdateonrestart_array_[@]}"
    }
QPKGs.IsSupportUpdateOnRestart.Exist()
    {
    [[ ${_obj_qpkgs_issupportupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsSupportUpdateOnRestart.First()
    {
    echo "${_obj_qpkgs_issupportupdateonrestart_array_[0]}"
    }
QPKGs.IsSupportUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} ]] && index=${#_obj_qpkgs_issupportupdateonrestart_array_[@]}
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[((index-1))]}"
    }
QPKGs.IsSupportUpdateOnRestart.Init()
    {
    _obj_qpkgs_issupportupdateonrestart_size_=0
    _obj_qpkgs_issupportupdateonrestart_array_=()
    _obj_qpkgs_issupportupdateonrestart_array_index_=1
    }
QPKGs.IsSupportUpdateOnRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} -gt 0 ]]
    }
QPKGs.IsSupportUpdateOnRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_issupportupdateonrestart_array_[@]} -eq 0 ]]
    }
QPKGs.IsSupportUpdateOnRestart.List()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsSupportUpdateOnRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsSupportUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_issupportupdateonrestart_array_[@]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_issupportupdateonrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_issupportupdateonrestart_array_[*]+"${_obj_qpkgs_issupportupdateonrestart_array_[@]}"} ]] && _obj_qpkgs_issupportupdateonrestart_array_=()
    }
QPKGs.IsSupportUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_issupportupdateonrestart_size_=$2
    else
        echo -n $_obj_qpkgs_issupportupdateonrestart_size_
    fi
    }
QPKGs.IsSupportUpdateOnRestart.Init

QPKGs.IsNotSupportUpdateOnRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotsupportupdateonrestart_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotSupportUpdateOnRestart.Array()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Count()
    {
    echo "${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Exist()
    {
    [[ ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.First()
    {
    echo "${_obj_qpkgs_isnotsupportupdateonrestart_array_[0]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} ]] && index=${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[((index-1))]}"
    }
QPKGs.IsNotSupportUpdateOnRestart.Init()
    {
    _obj_qpkgs_isnotsupportupdateonrestart_size_=0
    _obj_qpkgs_isnotsupportupdateonrestart_array_=()
    _obj_qpkgs_isnotsupportupdateonrestart_array_index_=1
    }
QPKGs.IsNotSupportUpdateOnRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotsupportupdateonrestart_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotSupportUpdateOnRestart.List()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"
    }
QPKGs.IsNotSupportUpdateOnRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotSupportUpdateOnRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotsupportupdateonrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotsupportupdateonrestart_array_[*]+"${_obj_qpkgs_isnotsupportupdateonrestart_array_[@]}"} ]] && _obj_qpkgs_isnotsupportupdateonrestart_array_=()
    }
QPKGs.IsNotSupportUpdateOnRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotsupportupdateonrestart_size_=$2
    else
        echo -n $_obj_qpkgs_isnotsupportupdateonrestart_size_
    fi
    }
QPKGs.IsNotSupportUpdateOnRestart.Init

QPKGs.IsRestarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isrestarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsRestarting.Array()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[@]+"${_obj_qpkgs_isrestarting_array_[@]}"}"
    }
QPKGs.IsRestarting.Count()
    {
    echo "${#_obj_qpkgs_isrestarting_array_[@]}"
    }
QPKGs.IsRestarting.Exist()
    {
    [[ ${_obj_qpkgs_isrestarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsRestarting.First()
    {
    echo "${_obj_qpkgs_isrestarting_array_[0]}"
    }
QPKGs.IsRestarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isrestarting_array_[@]} ]] && index=${#_obj_qpkgs_isrestarting_array_[@]}
    echo -n "${_obj_qpkgs_isrestarting_array_[((index-1))]}"
    }
QPKGs.IsRestarting.Init()
    {
    _obj_qpkgs_isrestarting_size_=0
    _obj_qpkgs_isrestarting_array_=()
    _obj_qpkgs_isrestarting_array_index_=1
    }
QPKGs.IsRestarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isrestarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsRestarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isrestarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsRestarting.List()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"}"
    }
QPKGs.IsRestarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsRestarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isrestarting_array_[@]+"${_obj_qpkgs_isrestarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isrestarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isrestarting_array_[*]+"${_obj_qpkgs_isrestarting_array_[@]}"} ]] && _obj_qpkgs_isrestarting_array_=()
    }
QPKGs.IsRestarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isrestarting_size_=$2
    else
        echo -n $_obj_qpkgs_isrestarting_size_
    fi
    }
QPKGs.IsRestarting.Init

QPKGs.IsNotRestarting.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotrestarting_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotRestarting.Array()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[@]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"
    }
QPKGs.IsNotRestarting.Count()
    {
    echo "${#_obj_qpkgs_isnotrestarting_array_[@]}"
    }
QPKGs.IsNotRestarting.Exist()
    {
    [[ ${_obj_qpkgs_isnotrestarting_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotRestarting.First()
    {
    echo "${_obj_qpkgs_isnotrestarting_array_[0]}"
    }
QPKGs.IsNotRestarting.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotrestarting_array_[@]} ]] && index=${#_obj_qpkgs_isnotrestarting_array_[@]}
    echo -n "${_obj_qpkgs_isnotrestarting_array_[((index-1))]}"
    }
QPKGs.IsNotRestarting.Init()
    {
    _obj_qpkgs_isnotrestarting_size_=0
    _obj_qpkgs_isnotrestarting_array_=()
    _obj_qpkgs_isnotrestarting_array_index_=1
    }
QPKGs.IsNotRestarting.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotrestarting_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotRestarting.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotrestarting_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotRestarting.List()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"
    }
QPKGs.IsNotRestarting.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotRestarting.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotrestarting_array_[@]+"${_obj_qpkgs_isnotrestarting_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotrestarting_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotrestarting_array_[*]+"${_obj_qpkgs_isnotrestarting_array_[@]}"} ]] && _obj_qpkgs_isnotrestarting_array_=()
    }
QPKGs.IsNotRestarting.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotrestarting_size_=$2
    else
        echo -n $_obj_qpkgs_isnotrestarting_size_
    fi
    }
QPKGs.IsNotRestarting.Init

QPKGs.IsUpgradable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isupgradable_array_+=("$item")
        fi
    done
    }
QPKGs.IsUpgradable.Array()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[@]+"${_obj_qpkgs_isupgradable_array_[@]}"}"
    }
QPKGs.IsUpgradable.Count()
    {
    echo "${#_obj_qpkgs_isupgradable_array_[@]}"
    }
QPKGs.IsUpgradable.Exist()
    {
    [[ ${_obj_qpkgs_isupgradable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsUpgradable.First()
    {
    echo "${_obj_qpkgs_isupgradable_array_[0]}"
    }
QPKGs.IsUpgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isupgradable_array_[@]} ]] && index=${#_obj_qpkgs_isupgradable_array_[@]}
    echo -n "${_obj_qpkgs_isupgradable_array_[((index-1))]}"
    }
QPKGs.IsUpgradable.Init()
    {
    _obj_qpkgs_isupgradable_size_=0
    _obj_qpkgs_isupgradable_array_=()
    _obj_qpkgs_isupgradable_array_index_=1
    }
QPKGs.IsUpgradable.IsAny()
    {
    [[ ${#_obj_qpkgs_isupgradable_array_[@]} -gt 0 ]]
    }
QPKGs.IsUpgradable.IsNone()
    {
    [[ ${#_obj_qpkgs_isupgradable_array_[@]} -eq 0 ]]
    }
QPKGs.IsUpgradable.List()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"}"
    }
QPKGs.IsUpgradable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsUpgradable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isupgradable_array_[@]+"${_obj_qpkgs_isupgradable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isupgradable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isupgradable_array_[*]+"${_obj_qpkgs_isupgradable_array_[@]}"} ]] && _obj_qpkgs_isupgradable_array_=()
    }
QPKGs.IsUpgradable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isupgradable_size_=$2
    else
        echo -n $_obj_qpkgs_isupgradable_size_
    fi
    }
QPKGs.IsUpgradable.Init

QPKGs.IsNotUpgradable.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_isnotupgradable_array_+=("$item")
        fi
    done
    }
QPKGs.IsNotUpgradable.Array()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[@]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"
    }
QPKGs.IsNotUpgradable.Count()
    {
    echo "${#_obj_qpkgs_isnotupgradable_array_[@]}"
    }
QPKGs.IsNotUpgradable.Exist()
    {
    [[ ${_obj_qpkgs_isnotupgradable_array_[*]:-} == *"$1"* ]]
    }
QPKGs.IsNotUpgradable.First()
    {
    echo "${_obj_qpkgs_isnotupgradable_array_[0]}"
    }
QPKGs.IsNotUpgradable.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_isnotupgradable_array_[@]} ]] && index=${#_obj_qpkgs_isnotupgradable_array_[@]}
    echo -n "${_obj_qpkgs_isnotupgradable_array_[((index-1))]}"
    }
QPKGs.IsNotUpgradable.Init()
    {
    _obj_qpkgs_isnotupgradable_size_=0
    _obj_qpkgs_isnotupgradable_array_=()
    _obj_qpkgs_isnotupgradable_array_index_=1
    }
QPKGs.IsNotUpgradable.IsAny()
    {
    [[ ${#_obj_qpkgs_isnotupgradable_array_[@]} -gt 0 ]]
    }
QPKGs.IsNotUpgradable.IsNone()
    {
    [[ ${#_obj_qpkgs_isnotupgradable_array_[@]} -eq 0 ]]
    }
QPKGs.IsNotUpgradable.List()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"
    }
QPKGs.IsNotUpgradable.ListCSV()
    {
    echo -n "${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}" | tr ' ' ','
    }
QPKGs.IsNotUpgradable.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_isnotupgradable_array_[@]+"${_obj_qpkgs_isnotupgradable_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_isnotupgradable_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_isnotupgradable_array_[*]+"${_obj_qpkgs_isnotupgradable_array_[@]}"} ]] && _obj_qpkgs_isnotupgradable_array_=()
    }
QPKGs.IsNotUpgradable.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_isnotupgradable_size_=$2
    else
        echo -n $_obj_qpkgs_isnotupgradable_size_
    fi
    }
QPKGs.IsNotUpgradable.Init

QPKGs.ToBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tobackup_array_+=("$item")
        fi
    done
    }
QPKGs.ToBackup.Array()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[@]+"${_obj_qpkgs_tobackup_array_[@]}"}"
    }
QPKGs.ToBackup.Count()
    {
    echo "${#_obj_qpkgs_tobackup_array_[@]}"
    }
QPKGs.ToBackup.Exist()
    {
    [[ ${_obj_qpkgs_tobackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToBackup.First()
    {
    echo "${_obj_qpkgs_tobackup_array_[0]}"
    }
QPKGs.ToBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tobackup_array_[@]} ]] && index=${#_obj_qpkgs_tobackup_array_[@]}
    echo -n "${_obj_qpkgs_tobackup_array_[((index-1))]}"
    }
QPKGs.ToBackup.Init()
    {
    _obj_qpkgs_tobackup_size_=0
    _obj_qpkgs_tobackup_array_=()
    _obj_qpkgs_tobackup_array_index_=1
    }
QPKGs.ToBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_tobackup_array_[@]} -gt 0 ]]
    }
QPKGs.ToBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_tobackup_array_[@]} -eq 0 ]]
    }
QPKGs.ToBackup.List()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"}"
    }
QPKGs.ToBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tobackup_array_[@]+"${_obj_qpkgs_tobackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tobackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tobackup_array_[*]+"${_obj_qpkgs_tobackup_array_[@]}"} ]] && _obj_qpkgs_tobackup_array_=()
    }
QPKGs.ToBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tobackup_size_=$2
    else
        echo -n $_obj_qpkgs_tobackup_size_
    fi
    }
QPKGs.ToBackup.Init

QPKGs.OkBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okbackup_array_+=("$item")
        fi
    done
    }
QPKGs.OkBackup.Array()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[@]+"${_obj_qpkgs_okbackup_array_[@]}"}"
    }
QPKGs.OkBackup.Count()
    {
    echo "${#_obj_qpkgs_okbackup_array_[@]}"
    }
QPKGs.OkBackup.Exist()
    {
    [[ ${_obj_qpkgs_okbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkBackup.First()
    {
    echo "${_obj_qpkgs_okbackup_array_[0]}"
    }
QPKGs.OkBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okbackup_array_[@]} ]] && index=${#_obj_qpkgs_okbackup_array_[@]}
    echo -n "${_obj_qpkgs_okbackup_array_[((index-1))]}"
    }
QPKGs.OkBackup.Init()
    {
    _obj_qpkgs_okbackup_size_=0
    _obj_qpkgs_okbackup_array_=()
    _obj_qpkgs_okbackup_array_index_=1
    }
QPKGs.OkBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_okbackup_array_[@]} -gt 0 ]]
    }
QPKGs.OkBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_okbackup_array_[@]} -eq 0 ]]
    }
QPKGs.OkBackup.List()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"}"
    }
QPKGs.OkBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okbackup_array_[@]+"${_obj_qpkgs_okbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okbackup_array_[*]+"${_obj_qpkgs_okbackup_array_[@]}"} ]] && _obj_qpkgs_okbackup_array_=()
    }
QPKGs.OkBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okbackup_size_=$2
    else
        echo -n $_obj_qpkgs_okbackup_size_
    fi
    }
QPKGs.OkBackup.Init

QPKGs.ErBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erbackup_array_+=("$item")
        fi
    done
    }
QPKGs.ErBackup.Array()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[@]+"${_obj_qpkgs_erbackup_array_[@]}"}"
    }
QPKGs.ErBackup.Count()
    {
    echo "${#_obj_qpkgs_erbackup_array_[@]}"
    }
QPKGs.ErBackup.Exist()
    {
    [[ ${_obj_qpkgs_erbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErBackup.First()
    {
    echo "${_obj_qpkgs_erbackup_array_[0]}"
    }
QPKGs.ErBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erbackup_array_[@]} ]] && index=${#_obj_qpkgs_erbackup_array_[@]}
    echo -n "${_obj_qpkgs_erbackup_array_[((index-1))]}"
    }
QPKGs.ErBackup.Init()
    {
    _obj_qpkgs_erbackup_size_=0
    _obj_qpkgs_erbackup_array_=()
    _obj_qpkgs_erbackup_array_index_=1
    }
QPKGs.ErBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_erbackup_array_[@]} -gt 0 ]]
    }
QPKGs.ErBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_erbackup_array_[@]} -eq 0 ]]
    }
QPKGs.ErBackup.List()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"}"
    }
QPKGs.ErBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erbackup_array_[@]+"${_obj_qpkgs_erbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erbackup_array_[*]+"${_obj_qpkgs_erbackup_array_[@]}"} ]] && _obj_qpkgs_erbackup_array_=()
    }
QPKGs.ErBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erbackup_size_=$2
    else
        echo -n $_obj_qpkgs_erbackup_size_
    fi
    }
QPKGs.ErBackup.Init

QPKGs.SkBackup.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skbackup_array_+=("$item")
        fi
    done
    }
QPKGs.SkBackup.Array()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[@]+"${_obj_qpkgs_skbackup_array_[@]}"}"
    }
QPKGs.SkBackup.Count()
    {
    echo "${#_obj_qpkgs_skbackup_array_[@]}"
    }
QPKGs.SkBackup.Exist()
    {
    [[ ${_obj_qpkgs_skbackup_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkBackup.First()
    {
    echo "${_obj_qpkgs_skbackup_array_[0]}"
    }
QPKGs.SkBackup.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skbackup_array_[@]} ]] && index=${#_obj_qpkgs_skbackup_array_[@]}
    echo -n "${_obj_qpkgs_skbackup_array_[((index-1))]}"
    }
QPKGs.SkBackup.Init()
    {
    _obj_qpkgs_skbackup_size_=0
    _obj_qpkgs_skbackup_array_=()
    _obj_qpkgs_skbackup_array_index_=1
    }
QPKGs.SkBackup.IsAny()
    {
    [[ ${#_obj_qpkgs_skbackup_array_[@]} -gt 0 ]]
    }
QPKGs.SkBackup.IsNone()
    {
    [[ ${#_obj_qpkgs_skbackup_array_[@]} -eq 0 ]]
    }
QPKGs.SkBackup.List()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"}"
    }
QPKGs.SkBackup.ListCSV()
    {
    echo -n "${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkBackup.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skbackup_array_[@]+"${_obj_qpkgs_skbackup_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skbackup_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skbackup_array_[*]+"${_obj_qpkgs_skbackup_array_[@]}"} ]] && _obj_qpkgs_skbackup_array_=()
    }
QPKGs.SkBackup.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skbackup_size_=$2
    else
        echo -n $_obj_qpkgs_skbackup_size_
    fi
    }
QPKGs.SkBackup.Init

QPKGs.ToDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_todownload_array_+=("$item")
        fi
    done
    }
QPKGs.ToDownload.Array()
    {
    echo -n "${_obj_qpkgs_todownload_array_[@]+"${_obj_qpkgs_todownload_array_[@]}"}"
    }
QPKGs.ToDownload.Count()
    {
    echo "${#_obj_qpkgs_todownload_array_[@]}"
    }
QPKGs.ToDownload.Exist()
    {
    [[ ${_obj_qpkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToDownload.First()
    {
    echo "${_obj_qpkgs_todownload_array_[0]}"
    }
QPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_todownload_array_[@]} ]] && index=${#_obj_qpkgs_todownload_array_[@]}
    echo -n "${_obj_qpkgs_todownload_array_[((index-1))]}"
    }
QPKGs.ToDownload.Init()
    {
    _obj_qpkgs_todownload_size_=0
    _obj_qpkgs_todownload_array_=()
    _obj_qpkgs_todownload_array_index_=1
    }
QPKGs.ToDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_todownload_array_[@]} -gt 0 ]]
    }
QPKGs.ToDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_todownload_array_[@]} -eq 0 ]]
    }
QPKGs.ToDownload.List()
    {
    echo -n "${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"}"
    }
QPKGs.ToDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_todownload_array_[@]+"${_obj_qpkgs_todownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_todownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_todownload_array_[*]+"${_obj_qpkgs_todownload_array_[@]}"} ]] && _obj_qpkgs_todownload_array_=()
    }
QPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_todownload_size_=$2
    else
        echo -n $_obj_qpkgs_todownload_size_
    fi
    }
QPKGs.ToDownload.Init

QPKGs.OkDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okdownload_array_+=("$item")
        fi
    done
    }
QPKGs.OkDownload.Array()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[@]+"${_obj_qpkgs_okdownload_array_[@]}"}"
    }
QPKGs.OkDownload.Count()
    {
    echo "${#_obj_qpkgs_okdownload_array_[@]}"
    }
QPKGs.OkDownload.Exist()
    {
    [[ ${_obj_qpkgs_okdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkDownload.First()
    {
    echo "${_obj_qpkgs_okdownload_array_[0]}"
    }
QPKGs.OkDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okdownload_array_[@]} ]] && index=${#_obj_qpkgs_okdownload_array_[@]}
    echo -n "${_obj_qpkgs_okdownload_array_[((index-1))]}"
    }
QPKGs.OkDownload.Init()
    {
    _obj_qpkgs_okdownload_size_=0
    _obj_qpkgs_okdownload_array_=()
    _obj_qpkgs_okdownload_array_index_=1
    }
QPKGs.OkDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_okdownload_array_[@]} -gt 0 ]]
    }
QPKGs.OkDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_okdownload_array_[@]} -eq 0 ]]
    }
QPKGs.OkDownload.List()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"}"
    }
QPKGs.OkDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okdownload_array_[@]+"${_obj_qpkgs_okdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okdownload_array_[*]+"${_obj_qpkgs_okdownload_array_[@]}"} ]] && _obj_qpkgs_okdownload_array_=()
    }
QPKGs.OkDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okdownload_size_=$2
    else
        echo -n $_obj_qpkgs_okdownload_size_
    fi
    }
QPKGs.OkDownload.Init

QPKGs.ErDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erdownload_array_+=("$item")
        fi
    done
    }
QPKGs.ErDownload.Array()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[@]+"${_obj_qpkgs_erdownload_array_[@]}"}"
    }
QPKGs.ErDownload.Count()
    {
    echo "${#_obj_qpkgs_erdownload_array_[@]}"
    }
QPKGs.ErDownload.Exist()
    {
    [[ ${_obj_qpkgs_erdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErDownload.First()
    {
    echo "${_obj_qpkgs_erdownload_array_[0]}"
    }
QPKGs.ErDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erdownload_array_[@]} ]] && index=${#_obj_qpkgs_erdownload_array_[@]}
    echo -n "${_obj_qpkgs_erdownload_array_[((index-1))]}"
    }
QPKGs.ErDownload.Init()
    {
    _obj_qpkgs_erdownload_size_=0
    _obj_qpkgs_erdownload_array_=()
    _obj_qpkgs_erdownload_array_index_=1
    }
QPKGs.ErDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_erdownload_array_[@]} -gt 0 ]]
    }
QPKGs.ErDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_erdownload_array_[@]} -eq 0 ]]
    }
QPKGs.ErDownload.List()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"}"
    }
QPKGs.ErDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erdownload_array_[@]+"${_obj_qpkgs_erdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erdownload_array_[*]+"${_obj_qpkgs_erdownload_array_[@]}"} ]] && _obj_qpkgs_erdownload_array_=()
    }
QPKGs.ErDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erdownload_size_=$2
    else
        echo -n $_obj_qpkgs_erdownload_size_
    fi
    }
QPKGs.ErDownload.Init

QPKGs.SkDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skdownload_array_+=("$item")
        fi
    done
    }
QPKGs.SkDownload.Array()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[@]+"${_obj_qpkgs_skdownload_array_[@]}"}"
    }
QPKGs.SkDownload.Count()
    {
    echo "${#_obj_qpkgs_skdownload_array_[@]}"
    }
QPKGs.SkDownload.Exist()
    {
    [[ ${_obj_qpkgs_skdownload_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkDownload.First()
    {
    echo "${_obj_qpkgs_skdownload_array_[0]}"
    }
QPKGs.SkDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skdownload_array_[@]} ]] && index=${#_obj_qpkgs_skdownload_array_[@]}
    echo -n "${_obj_qpkgs_skdownload_array_[((index-1))]}"
    }
QPKGs.SkDownload.Init()
    {
    _obj_qpkgs_skdownload_size_=0
    _obj_qpkgs_skdownload_array_=()
    _obj_qpkgs_skdownload_array_index_=1
    }
QPKGs.SkDownload.IsAny()
    {
    [[ ${#_obj_qpkgs_skdownload_array_[@]} -gt 0 ]]
    }
QPKGs.SkDownload.IsNone()
    {
    [[ ${#_obj_qpkgs_skdownload_array_[@]} -eq 0 ]]
    }
QPKGs.SkDownload.List()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"}"
    }
QPKGs.SkDownload.ListCSV()
    {
    echo -n "${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skdownload_array_[@]+"${_obj_qpkgs_skdownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skdownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skdownload_array_[*]+"${_obj_qpkgs_skdownload_array_[@]}"} ]] && _obj_qpkgs_skdownload_array_=()
    }
QPKGs.SkDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skdownload_size_=$2
    else
        echo -n $_obj_qpkgs_skdownload_size_
    fi
    }
QPKGs.SkDownload.Init

QPKGs.ToInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToInstall.Array()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[@]+"${_obj_qpkgs_toinstall_array_[@]}"}"
    }
QPKGs.ToInstall.Count()
    {
    echo "${#_obj_qpkgs_toinstall_array_[@]}"
    }
QPKGs.ToInstall.Exist()
    {
    [[ ${_obj_qpkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToInstall.First()
    {
    echo "${_obj_qpkgs_toinstall_array_[0]}"
    }
QPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toinstall_array_[@]} ]] && index=${#_obj_qpkgs_toinstall_array_[@]}
    echo -n "${_obj_qpkgs_toinstall_array_[((index-1))]}"
    }
QPKGs.ToInstall.Init()
    {
    _obj_qpkgs_toinstall_size_=0
    _obj_qpkgs_toinstall_array_=()
    _obj_qpkgs_toinstall_array_index_=1
    }
QPKGs.ToInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_toinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_toinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToInstall.List()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"}"
    }
QPKGs.ToInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toinstall_array_[@]+"${_obj_qpkgs_toinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toinstall_array_[*]+"${_obj_qpkgs_toinstall_array_[@]}"} ]] && _obj_qpkgs_toinstall_array_=()
    }
QPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toinstall_size_=$2
    else
        echo -n $_obj_qpkgs_toinstall_size_
    fi
    }
QPKGs.ToInstall.Init

QPKGs.OkInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okinstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkInstall.Array()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[@]+"${_obj_qpkgs_okinstall_array_[@]}"}"
    }
QPKGs.OkInstall.Count()
    {
    echo "${#_obj_qpkgs_okinstall_array_[@]}"
    }
QPKGs.OkInstall.Exist()
    {
    [[ ${_obj_qpkgs_okinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkInstall.First()
    {
    echo "${_obj_qpkgs_okinstall_array_[0]}"
    }
QPKGs.OkInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okinstall_array_[@]} ]] && index=${#_obj_qpkgs_okinstall_array_[@]}
    echo -n "${_obj_qpkgs_okinstall_array_[((index-1))]}"
    }
QPKGs.OkInstall.Init()
    {
    _obj_qpkgs_okinstall_size_=0
    _obj_qpkgs_okinstall_array_=()
    _obj_qpkgs_okinstall_array_index_=1
    }
QPKGs.OkInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okinstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okinstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkInstall.List()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"}"
    }
QPKGs.OkInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okinstall_array_[@]+"${_obj_qpkgs_okinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okinstall_array_[*]+"${_obj_qpkgs_okinstall_array_[@]}"} ]] && _obj_qpkgs_okinstall_array_=()
    }
QPKGs.OkInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okinstall_size_=$2
    else
        echo -n $_obj_qpkgs_okinstall_size_
    fi
    }
QPKGs.OkInstall.Init

QPKGs.ErInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErInstall.Array()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[@]+"${_obj_qpkgs_erinstall_array_[@]}"}"
    }
QPKGs.ErInstall.Count()
    {
    echo "${#_obj_qpkgs_erinstall_array_[@]}"
    }
QPKGs.ErInstall.Exist()
    {
    [[ ${_obj_qpkgs_erinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErInstall.First()
    {
    echo "${_obj_qpkgs_erinstall_array_[0]}"
    }
QPKGs.ErInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erinstall_array_[@]} ]] && index=${#_obj_qpkgs_erinstall_array_[@]}
    echo -n "${_obj_qpkgs_erinstall_array_[((index-1))]}"
    }
QPKGs.ErInstall.Init()
    {
    _obj_qpkgs_erinstall_size_=0
    _obj_qpkgs_erinstall_array_=()
    _obj_qpkgs_erinstall_array_index_=1
    }
QPKGs.ErInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_erinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_erinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErInstall.List()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"}"
    }
QPKGs.ErInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erinstall_array_[@]+"${_obj_qpkgs_erinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erinstall_array_[*]+"${_obj_qpkgs_erinstall_array_[@]}"} ]] && _obj_qpkgs_erinstall_array_=()
    }
QPKGs.ErInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erinstall_size_=$2
    else
        echo -n $_obj_qpkgs_erinstall_size_
    fi
    }
QPKGs.ErInstall.Init

QPKGs.SkInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skinstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkInstall.Array()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[@]+"${_obj_qpkgs_skinstall_array_[@]}"}"
    }
QPKGs.SkInstall.Count()
    {
    echo "${#_obj_qpkgs_skinstall_array_[@]}"
    }
QPKGs.SkInstall.Exist()
    {
    [[ ${_obj_qpkgs_skinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkInstall.First()
    {
    echo "${_obj_qpkgs_skinstall_array_[0]}"
    }
QPKGs.SkInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skinstall_array_[@]} ]] && index=${#_obj_qpkgs_skinstall_array_[@]}
    echo -n "${_obj_qpkgs_skinstall_array_[((index-1))]}"
    }
QPKGs.SkInstall.Init()
    {
    _obj_qpkgs_skinstall_size_=0
    _obj_qpkgs_skinstall_array_=()
    _obj_qpkgs_skinstall_array_index_=1
    }
QPKGs.SkInstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skinstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkInstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skinstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkInstall.List()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"}"
    }
QPKGs.SkInstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skinstall_array_[@]+"${_obj_qpkgs_skinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skinstall_array_[*]+"${_obj_qpkgs_skinstall_array_[@]}"} ]] && _obj_qpkgs_skinstall_array_=()
    }
QPKGs.SkInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skinstall_size_=$2
    else
        echo -n $_obj_qpkgs_skinstall_size_
    fi
    }
QPKGs.SkInstall.Init

QPKGs.ToRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torebuild_array_+=("$item")
        fi
    done
    }
QPKGs.ToRebuild.Array()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[@]+"${_obj_qpkgs_torebuild_array_[@]}"}"
    }
QPKGs.ToRebuild.Count()
    {
    echo "${#_obj_qpkgs_torebuild_array_[@]}"
    }
QPKGs.ToRebuild.Exist()
    {
    [[ ${_obj_qpkgs_torebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRebuild.First()
    {
    echo "${_obj_qpkgs_torebuild_array_[0]}"
    }
QPKGs.ToRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torebuild_array_[@]} ]] && index=${#_obj_qpkgs_torebuild_array_[@]}
    echo -n "${_obj_qpkgs_torebuild_array_[((index-1))]}"
    }
QPKGs.ToRebuild.Init()
    {
    _obj_qpkgs_torebuild_size_=0
    _obj_qpkgs_torebuild_array_=()
    _obj_qpkgs_torebuild_array_index_=1
    }
QPKGs.ToRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_torebuild_array_[@]} -gt 0 ]]
    }
QPKGs.ToRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_torebuild_array_[@]} -eq 0 ]]
    }
QPKGs.ToRebuild.List()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"}"
    }
QPKGs.ToRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torebuild_array_[@]+"${_obj_qpkgs_torebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torebuild_array_[*]+"${_obj_qpkgs_torebuild_array_[@]}"} ]] && _obj_qpkgs_torebuild_array_=()
    }
QPKGs.ToRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torebuild_size_=$2
    else
        echo -n $_obj_qpkgs_torebuild_size_
    fi
    }
QPKGs.ToRebuild.Init

QPKGs.OkRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrebuild_array_+=("$item")
        fi
    done
    }
QPKGs.OkRebuild.Array()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[@]+"${_obj_qpkgs_okrebuild_array_[@]}"}"
    }
QPKGs.OkRebuild.Count()
    {
    echo "${#_obj_qpkgs_okrebuild_array_[@]}"
    }
QPKGs.OkRebuild.Exist()
    {
    [[ ${_obj_qpkgs_okrebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRebuild.First()
    {
    echo "${_obj_qpkgs_okrebuild_array_[0]}"
    }
QPKGs.OkRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrebuild_array_[@]} ]] && index=${#_obj_qpkgs_okrebuild_array_[@]}
    echo -n "${_obj_qpkgs_okrebuild_array_[((index-1))]}"
    }
QPKGs.OkRebuild.Init()
    {
    _obj_qpkgs_okrebuild_size_=0
    _obj_qpkgs_okrebuild_array_=()
    _obj_qpkgs_okrebuild_array_index_=1
    }
QPKGs.OkRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_okrebuild_array_[@]} -gt 0 ]]
    }
QPKGs.OkRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_okrebuild_array_[@]} -eq 0 ]]
    }
QPKGs.OkRebuild.List()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"}"
    }
QPKGs.OkRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrebuild_array_[@]+"${_obj_qpkgs_okrebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrebuild_array_[*]+"${_obj_qpkgs_okrebuild_array_[@]}"} ]] && _obj_qpkgs_okrebuild_array_=()
    }
QPKGs.OkRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrebuild_size_=$2
    else
        echo -n $_obj_qpkgs_okrebuild_size_
    fi
    }
QPKGs.OkRebuild.Init

QPKGs.ErRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errebuild_array_+=("$item")
        fi
    done
    }
QPKGs.ErRebuild.Array()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[@]+"${_obj_qpkgs_errebuild_array_[@]}"}"
    }
QPKGs.ErRebuild.Count()
    {
    echo "${#_obj_qpkgs_errebuild_array_[@]}"
    }
QPKGs.ErRebuild.Exist()
    {
    [[ ${_obj_qpkgs_errebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRebuild.First()
    {
    echo "${_obj_qpkgs_errebuild_array_[0]}"
    }
QPKGs.ErRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errebuild_array_[@]} ]] && index=${#_obj_qpkgs_errebuild_array_[@]}
    echo -n "${_obj_qpkgs_errebuild_array_[((index-1))]}"
    }
QPKGs.ErRebuild.Init()
    {
    _obj_qpkgs_errebuild_size_=0
    _obj_qpkgs_errebuild_array_=()
    _obj_qpkgs_errebuild_array_index_=1
    }
QPKGs.ErRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_errebuild_array_[@]} -gt 0 ]]
    }
QPKGs.ErRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_errebuild_array_[@]} -eq 0 ]]
    }
QPKGs.ErRebuild.List()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"}"
    }
QPKGs.ErRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errebuild_array_[@]+"${_obj_qpkgs_errebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errebuild_array_[*]+"${_obj_qpkgs_errebuild_array_[@]}"} ]] && _obj_qpkgs_errebuild_array_=()
    }
QPKGs.ErRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errebuild_size_=$2
    else
        echo -n $_obj_qpkgs_errebuild_size_
    fi
    }
QPKGs.ErRebuild.Init

QPKGs.SkRebuild.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrebuild_array_+=("$item")
        fi
    done
    }
QPKGs.SkRebuild.Array()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[@]+"${_obj_qpkgs_skrebuild_array_[@]}"}"
    }
QPKGs.SkRebuild.Count()
    {
    echo "${#_obj_qpkgs_skrebuild_array_[@]}"
    }
QPKGs.SkRebuild.Exist()
    {
    [[ ${_obj_qpkgs_skrebuild_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRebuild.First()
    {
    echo "${_obj_qpkgs_skrebuild_array_[0]}"
    }
QPKGs.SkRebuild.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrebuild_array_[@]} ]] && index=${#_obj_qpkgs_skrebuild_array_[@]}
    echo -n "${_obj_qpkgs_skrebuild_array_[((index-1))]}"
    }
QPKGs.SkRebuild.Init()
    {
    _obj_qpkgs_skrebuild_size_=0
    _obj_qpkgs_skrebuild_array_=()
    _obj_qpkgs_skrebuild_array_index_=1
    }
QPKGs.SkRebuild.IsAny()
    {
    [[ ${#_obj_qpkgs_skrebuild_array_[@]} -gt 0 ]]
    }
QPKGs.SkRebuild.IsNone()
    {
    [[ ${#_obj_qpkgs_skrebuild_array_[@]} -eq 0 ]]
    }
QPKGs.SkRebuild.List()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"}"
    }
QPKGs.SkRebuild.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRebuild.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrebuild_array_[@]+"${_obj_qpkgs_skrebuild_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrebuild_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrebuild_array_[*]+"${_obj_qpkgs_skrebuild_array_[@]}"} ]] && _obj_qpkgs_skrebuild_array_=()
    }
QPKGs.SkRebuild.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrebuild_size_=$2
    else
        echo -n $_obj_qpkgs_skrebuild_size_
    fi
    }
QPKGs.SkRebuild.Init

QPKGs.ToReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToReinstall.Array()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[@]+"${_obj_qpkgs_toreinstall_array_[@]}"}"
    }
QPKGs.ToReinstall.Count()
    {
    echo "${#_obj_qpkgs_toreinstall_array_[@]}"
    }
QPKGs.ToReinstall.Exist()
    {
    [[ ${_obj_qpkgs_toreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToReinstall.First()
    {
    echo "${_obj_qpkgs_toreinstall_array_[0]}"
    }
QPKGs.ToReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toreinstall_array_[@]} ]] && index=${#_obj_qpkgs_toreinstall_array_[@]}
    echo -n "${_obj_qpkgs_toreinstall_array_[((index-1))]}"
    }
QPKGs.ToReinstall.Init()
    {
    _obj_qpkgs_toreinstall_size_=0
    _obj_qpkgs_toreinstall_array_=()
    _obj_qpkgs_toreinstall_array_index_=1
    }
QPKGs.ToReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_toreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_toreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToReinstall.List()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"}"
    }
QPKGs.ToReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toreinstall_array_[@]+"${_obj_qpkgs_toreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toreinstall_array_[*]+"${_obj_qpkgs_toreinstall_array_[@]}"} ]] && _obj_qpkgs_toreinstall_array_=()
    }
QPKGs.ToReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_toreinstall_size_
    fi
    }
QPKGs.ToReinstall.Init

QPKGs.OkReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkReinstall.Array()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[@]+"${_obj_qpkgs_okreinstall_array_[@]}"}"
    }
QPKGs.OkReinstall.Count()
    {
    echo "${#_obj_qpkgs_okreinstall_array_[@]}"
    }
QPKGs.OkReinstall.Exist()
    {
    [[ ${_obj_qpkgs_okreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkReinstall.First()
    {
    echo "${_obj_qpkgs_okreinstall_array_[0]}"
    }
QPKGs.OkReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okreinstall_array_[@]} ]] && index=${#_obj_qpkgs_okreinstall_array_[@]}
    echo -n "${_obj_qpkgs_okreinstall_array_[((index-1))]}"
    }
QPKGs.OkReinstall.Init()
    {
    _obj_qpkgs_okreinstall_size_=0
    _obj_qpkgs_okreinstall_array_=()
    _obj_qpkgs_okreinstall_array_index_=1
    }
QPKGs.OkReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkReinstall.List()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"}"
    }
QPKGs.OkReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okreinstall_array_[@]+"${_obj_qpkgs_okreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okreinstall_array_[*]+"${_obj_qpkgs_okreinstall_array_[@]}"} ]] && _obj_qpkgs_okreinstall_array_=()
    }
QPKGs.OkReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_okreinstall_size_
    fi
    }
QPKGs.OkReinstall.Init

QPKGs.ErReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErReinstall.Array()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[@]+"${_obj_qpkgs_erreinstall_array_[@]}"}"
    }
QPKGs.ErReinstall.Count()
    {
    echo "${#_obj_qpkgs_erreinstall_array_[@]}"
    }
QPKGs.ErReinstall.Exist()
    {
    [[ ${_obj_qpkgs_erreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErReinstall.First()
    {
    echo "${_obj_qpkgs_erreinstall_array_[0]}"
    }
QPKGs.ErReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erreinstall_array_[@]} ]] && index=${#_obj_qpkgs_erreinstall_array_[@]}
    echo -n "${_obj_qpkgs_erreinstall_array_[((index-1))]}"
    }
QPKGs.ErReinstall.Init()
    {
    _obj_qpkgs_erreinstall_size_=0
    _obj_qpkgs_erreinstall_array_=()
    _obj_qpkgs_erreinstall_array_index_=1
    }
QPKGs.ErReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_erreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_erreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErReinstall.List()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"}"
    }
QPKGs.ErReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erreinstall_array_[@]+"${_obj_qpkgs_erreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erreinstall_array_[*]+"${_obj_qpkgs_erreinstall_array_[@]}"} ]] && _obj_qpkgs_erreinstall_array_=()
    }
QPKGs.ErReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_erreinstall_size_
    fi
    }
QPKGs.ErReinstall.Init

QPKGs.SkReinstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skreinstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkReinstall.Array()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[@]+"${_obj_qpkgs_skreinstall_array_[@]}"}"
    }
QPKGs.SkReinstall.Count()
    {
    echo "${#_obj_qpkgs_skreinstall_array_[@]}"
    }
QPKGs.SkReinstall.Exist()
    {
    [[ ${_obj_qpkgs_skreinstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkReinstall.First()
    {
    echo "${_obj_qpkgs_skreinstall_array_[0]}"
    }
QPKGs.SkReinstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skreinstall_array_[@]} ]] && index=${#_obj_qpkgs_skreinstall_array_[@]}
    echo -n "${_obj_qpkgs_skreinstall_array_[((index-1))]}"
    }
QPKGs.SkReinstall.Init()
    {
    _obj_qpkgs_skreinstall_size_=0
    _obj_qpkgs_skreinstall_array_=()
    _obj_qpkgs_skreinstall_array_index_=1
    }
QPKGs.SkReinstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skreinstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkReinstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skreinstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkReinstall.List()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"}"
    }
QPKGs.SkReinstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkReinstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skreinstall_array_[@]+"${_obj_qpkgs_skreinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skreinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skreinstall_array_[*]+"${_obj_qpkgs_skreinstall_array_[@]}"} ]] && _obj_qpkgs_skreinstall_array_=()
    }
QPKGs.SkReinstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skreinstall_size_=$2
    else
        echo -n $_obj_qpkgs_skreinstall_size_
    fi
    }
QPKGs.SkReinstall.Init

QPKGs.ToRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torestore_array_+=("$item")
        fi
    done
    }
QPKGs.ToRestore.Array()
    {
    echo -n "${_obj_qpkgs_torestore_array_[@]+"${_obj_qpkgs_torestore_array_[@]}"}"
    }
QPKGs.ToRestore.Count()
    {
    echo "${#_obj_qpkgs_torestore_array_[@]}"
    }
QPKGs.ToRestore.Exist()
    {
    [[ ${_obj_qpkgs_torestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestore.First()
    {
    echo "${_obj_qpkgs_torestore_array_[0]}"
    }
QPKGs.ToRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torestore_array_[@]} ]] && index=${#_obj_qpkgs_torestore_array_[@]}
    echo -n "${_obj_qpkgs_torestore_array_[((index-1))]}"
    }
QPKGs.ToRestore.Init()
    {
    _obj_qpkgs_torestore_size_=0
    _obj_qpkgs_torestore_array_=()
    _obj_qpkgs_torestore_array_index_=1
    }
QPKGs.ToRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_torestore_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_torestore_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestore.List()
    {
    echo -n "${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"}"
    }
QPKGs.ToRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torestore_array_[@]+"${_obj_qpkgs_torestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torestore_array_[*]+"${_obj_qpkgs_torestore_array_[@]}"} ]] && _obj_qpkgs_torestore_array_=()
    }
QPKGs.ToRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torestore_size_=$2
    else
        echo -n $_obj_qpkgs_torestore_size_
    fi
    }
QPKGs.ToRestore.Init

QPKGs.OkRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrestore_array_+=("$item")
        fi
    done
    }
QPKGs.OkRestore.Array()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[@]+"${_obj_qpkgs_okrestore_array_[@]}"}"
    }
QPKGs.OkRestore.Count()
    {
    echo "${#_obj_qpkgs_okrestore_array_[@]}"
    }
QPKGs.OkRestore.Exist()
    {
    [[ ${_obj_qpkgs_okrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRestore.First()
    {
    echo "${_obj_qpkgs_okrestore_array_[0]}"
    }
QPKGs.OkRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrestore_array_[@]} ]] && index=${#_obj_qpkgs_okrestore_array_[@]}
    echo -n "${_obj_qpkgs_okrestore_array_[((index-1))]}"
    }
QPKGs.OkRestore.Init()
    {
    _obj_qpkgs_okrestore_size_=0
    _obj_qpkgs_okrestore_array_=()
    _obj_qpkgs_okrestore_array_index_=1
    }
QPKGs.OkRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_okrestore_array_[@]} -gt 0 ]]
    }
QPKGs.OkRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_okrestore_array_[@]} -eq 0 ]]
    }
QPKGs.OkRestore.List()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"}"
    }
QPKGs.OkRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrestore_array_[@]+"${_obj_qpkgs_okrestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrestore_array_[*]+"${_obj_qpkgs_okrestore_array_[@]}"} ]] && _obj_qpkgs_okrestore_array_=()
    }
QPKGs.OkRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrestore_size_=$2
    else
        echo -n $_obj_qpkgs_okrestore_size_
    fi
    }
QPKGs.OkRestore.Init

QPKGs.ErRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errestore_array_+=("$item")
        fi
    done
    }
QPKGs.ErRestore.Array()
    {
    echo -n "${_obj_qpkgs_errestore_array_[@]+"${_obj_qpkgs_errestore_array_[@]}"}"
    }
QPKGs.ErRestore.Count()
    {
    echo "${#_obj_qpkgs_errestore_array_[@]}"
    }
QPKGs.ErRestore.Exist()
    {
    [[ ${_obj_qpkgs_errestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestore.First()
    {
    echo "${_obj_qpkgs_errestore_array_[0]}"
    }
QPKGs.ErRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errestore_array_[@]} ]] && index=${#_obj_qpkgs_errestore_array_[@]}
    echo -n "${_obj_qpkgs_errestore_array_[((index-1))]}"
    }
QPKGs.ErRestore.Init()
    {
    _obj_qpkgs_errestore_size_=0
    _obj_qpkgs_errestore_array_=()
    _obj_qpkgs_errestore_array_index_=1
    }
QPKGs.ErRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_errestore_array_[@]} -gt 0 ]]
    }
QPKGs.ErRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_errestore_array_[@]} -eq 0 ]]
    }
QPKGs.ErRestore.List()
    {
    echo -n "${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"}"
    }
QPKGs.ErRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errestore_array_[@]+"${_obj_qpkgs_errestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errestore_array_[*]+"${_obj_qpkgs_errestore_array_[@]}"} ]] && _obj_qpkgs_errestore_array_=()
    }
QPKGs.ErRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errestore_size_=$2
    else
        echo -n $_obj_qpkgs_errestore_size_
    fi
    }
QPKGs.ErRestore.Init

QPKGs.SkRestore.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrestore_array_+=("$item")
        fi
    done
    }
QPKGs.SkRestore.Array()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[@]+"${_obj_qpkgs_skrestore_array_[@]}"}"
    }
QPKGs.SkRestore.Count()
    {
    echo "${#_obj_qpkgs_skrestore_array_[@]}"
    }
QPKGs.SkRestore.Exist()
    {
    [[ ${_obj_qpkgs_skrestore_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestore.First()
    {
    echo "${_obj_qpkgs_skrestore_array_[0]}"
    }
QPKGs.SkRestore.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrestore_array_[@]} ]] && index=${#_obj_qpkgs_skrestore_array_[@]}
    echo -n "${_obj_qpkgs_skrestore_array_[((index-1))]}"
    }
QPKGs.SkRestore.Init()
    {
    _obj_qpkgs_skrestore_size_=0
    _obj_qpkgs_skrestore_array_=()
    _obj_qpkgs_skrestore_array_index_=1
    }
QPKGs.SkRestore.IsAny()
    {
    [[ ${#_obj_qpkgs_skrestore_array_[@]} -gt 0 ]]
    }
QPKGs.SkRestore.IsNone()
    {
    [[ ${#_obj_qpkgs_skrestore_array_[@]} -eq 0 ]]
    }
QPKGs.SkRestore.List()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"}"
    }
QPKGs.SkRestore.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRestore.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrestore_array_[@]+"${_obj_qpkgs_skrestore_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrestore_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrestore_array_[*]+"${_obj_qpkgs_skrestore_array_[@]}"} ]] && _obj_qpkgs_skrestore_array_=()
    }
QPKGs.SkRestore.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrestore_size_=$2
    else
        echo -n $_obj_qpkgs_skrestore_size_
    fi
    }
QPKGs.SkRestore.Init

QPKGs.ToRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_torestart_array_+=("$item")
        fi
    done
    }
QPKGs.ToRestart.Array()
    {
    echo -n "${_obj_qpkgs_torestart_array_[@]+"${_obj_qpkgs_torestart_array_[@]}"}"
    }
QPKGs.ToRestart.Count()
    {
    echo "${#_obj_qpkgs_torestart_array_[@]}"
    }
QPKGs.ToRestart.Exist()
    {
    [[ ${_obj_qpkgs_torestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToRestart.First()
    {
    echo "${_obj_qpkgs_torestart_array_[0]}"
    }
QPKGs.ToRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_torestart_array_[@]} ]] && index=${#_obj_qpkgs_torestart_array_[@]}
    echo -n "${_obj_qpkgs_torestart_array_[((index-1))]}"
    }
QPKGs.ToRestart.Init()
    {
    _obj_qpkgs_torestart_size_=0
    _obj_qpkgs_torestart_array_=()
    _obj_qpkgs_torestart_array_index_=1
    }
QPKGs.ToRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_torestart_array_[@]} -gt 0 ]]
    }
QPKGs.ToRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_torestart_array_[@]} -eq 0 ]]
    }
QPKGs.ToRestart.List()
    {
    echo -n "${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"}"
    }
QPKGs.ToRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_torestart_array_[@]+"${_obj_qpkgs_torestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_torestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_torestart_array_[*]+"${_obj_qpkgs_torestart_array_[@]}"} ]] && _obj_qpkgs_torestart_array_=()
    }
QPKGs.ToRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_torestart_size_=$2
    else
        echo -n $_obj_qpkgs_torestart_size_
    fi
    }
QPKGs.ToRestart.Init

QPKGs.OkRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okrestart_array_+=("$item")
        fi
    done
    }
QPKGs.OkRestart.Array()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[@]+"${_obj_qpkgs_okrestart_array_[@]}"}"
    }
QPKGs.OkRestart.Count()
    {
    echo "${#_obj_qpkgs_okrestart_array_[@]}"
    }
QPKGs.OkRestart.Exist()
    {
    [[ ${_obj_qpkgs_okrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkRestart.First()
    {
    echo "${_obj_qpkgs_okrestart_array_[0]}"
    }
QPKGs.OkRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okrestart_array_[@]} ]] && index=${#_obj_qpkgs_okrestart_array_[@]}
    echo -n "${_obj_qpkgs_okrestart_array_[((index-1))]}"
    }
QPKGs.OkRestart.Init()
    {
    _obj_qpkgs_okrestart_size_=0
    _obj_qpkgs_okrestart_array_=()
    _obj_qpkgs_okrestart_array_index_=1
    }
QPKGs.OkRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_okrestart_array_[@]} -gt 0 ]]
    }
QPKGs.OkRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_okrestart_array_[@]} -eq 0 ]]
    }
QPKGs.OkRestart.List()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"}"
    }
QPKGs.OkRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okrestart_array_[@]+"${_obj_qpkgs_okrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okrestart_array_[*]+"${_obj_qpkgs_okrestart_array_[@]}"} ]] && _obj_qpkgs_okrestart_array_=()
    }
QPKGs.OkRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okrestart_size_=$2
    else
        echo -n $_obj_qpkgs_okrestart_size_
    fi
    }
QPKGs.OkRestart.Init

QPKGs.ErRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_errestart_array_+=("$item")
        fi
    done
    }
QPKGs.ErRestart.Array()
    {
    echo -n "${_obj_qpkgs_errestart_array_[@]+"${_obj_qpkgs_errestart_array_[@]}"}"
    }
QPKGs.ErRestart.Count()
    {
    echo "${#_obj_qpkgs_errestart_array_[@]}"
    }
QPKGs.ErRestart.Exist()
    {
    [[ ${_obj_qpkgs_errestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErRestart.First()
    {
    echo "${_obj_qpkgs_errestart_array_[0]}"
    }
QPKGs.ErRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_errestart_array_[@]} ]] && index=${#_obj_qpkgs_errestart_array_[@]}
    echo -n "${_obj_qpkgs_errestart_array_[((index-1))]}"
    }
QPKGs.ErRestart.Init()
    {
    _obj_qpkgs_errestart_size_=0
    _obj_qpkgs_errestart_array_=()
    _obj_qpkgs_errestart_array_index_=1
    }
QPKGs.ErRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_errestart_array_[@]} -gt 0 ]]
    }
QPKGs.ErRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_errestart_array_[@]} -eq 0 ]]
    }
QPKGs.ErRestart.List()
    {
    echo -n "${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"}"
    }
QPKGs.ErRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_errestart_array_[@]+"${_obj_qpkgs_errestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_errestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_errestart_array_[*]+"${_obj_qpkgs_errestart_array_[@]}"} ]] && _obj_qpkgs_errestart_array_=()
    }
QPKGs.ErRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_errestart_size_=$2
    else
        echo -n $_obj_qpkgs_errestart_size_
    fi
    }
QPKGs.ErRestart.Init

QPKGs.SkRestart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skrestart_array_+=("$item")
        fi
    done
    }
QPKGs.SkRestart.Array()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[@]+"${_obj_qpkgs_skrestart_array_[@]}"}"
    }
QPKGs.SkRestart.Count()
    {
    echo "${#_obj_qpkgs_skrestart_array_[@]}"
    }
QPKGs.SkRestart.Exist()
    {
    [[ ${_obj_qpkgs_skrestart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkRestart.First()
    {
    echo "${_obj_qpkgs_skrestart_array_[0]}"
    }
QPKGs.SkRestart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skrestart_array_[@]} ]] && index=${#_obj_qpkgs_skrestart_array_[@]}
    echo -n "${_obj_qpkgs_skrestart_array_[((index-1))]}"
    }
QPKGs.SkRestart.Init()
    {
    _obj_qpkgs_skrestart_size_=0
    _obj_qpkgs_skrestart_array_=()
    _obj_qpkgs_skrestart_array_index_=1
    }
QPKGs.SkRestart.IsAny()
    {
    [[ ${#_obj_qpkgs_skrestart_array_[@]} -gt 0 ]]
    }
QPKGs.SkRestart.IsNone()
    {
    [[ ${#_obj_qpkgs_skrestart_array_[@]} -eq 0 ]]
    }
QPKGs.SkRestart.List()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"}"
    }
QPKGs.SkRestart.ListCSV()
    {
    echo -n "${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkRestart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skrestart_array_[@]+"${_obj_qpkgs_skrestart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skrestart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skrestart_array_[*]+"${_obj_qpkgs_skrestart_array_[@]}"} ]] && _obj_qpkgs_skrestart_array_=()
    }
QPKGs.SkRestart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skrestart_size_=$2
    else
        echo -n $_obj_qpkgs_skrestart_size_
    fi
    }
QPKGs.SkRestart.Init

QPKGs.ToStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tostart_array_+=("$item")
        fi
    done
    }
QPKGs.ToStart.Array()
    {
    echo -n "${_obj_qpkgs_tostart_array_[@]+"${_obj_qpkgs_tostart_array_[@]}"}"
    }
QPKGs.ToStart.Count()
    {
    echo "${#_obj_qpkgs_tostart_array_[@]}"
    }
QPKGs.ToStart.Exist()
    {
    [[ ${_obj_qpkgs_tostart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStart.First()
    {
    echo "${_obj_qpkgs_tostart_array_[0]}"
    }
QPKGs.ToStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tostart_array_[@]} ]] && index=${#_obj_qpkgs_tostart_array_[@]}
    echo -n "${_obj_qpkgs_tostart_array_[((index-1))]}"
    }
QPKGs.ToStart.Init()
    {
    _obj_qpkgs_tostart_size_=0
    _obj_qpkgs_tostart_array_=()
    _obj_qpkgs_tostart_array_index_=1
    }
QPKGs.ToStart.IsAny()
    {
    [[ ${#_obj_qpkgs_tostart_array_[@]} -gt 0 ]]
    }
QPKGs.ToStart.IsNone()
    {
    [[ ${#_obj_qpkgs_tostart_array_[@]} -eq 0 ]]
    }
QPKGs.ToStart.List()
    {
    echo -n "${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"}"
    }
QPKGs.ToStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tostart_array_[@]+"${_obj_qpkgs_tostart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tostart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tostart_array_[*]+"${_obj_qpkgs_tostart_array_[@]}"} ]] && _obj_qpkgs_tostart_array_=()
    }
QPKGs.ToStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tostart_size_=$2
    else
        echo -n $_obj_qpkgs_tostart_size_
    fi
    }
QPKGs.ToStart.Init

QPKGs.OkStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okstart_array_+=("$item")
        fi
    done
    }
QPKGs.OkStart.Array()
    {
    echo -n "${_obj_qpkgs_okstart_array_[@]+"${_obj_qpkgs_okstart_array_[@]}"}"
    }
QPKGs.OkStart.Count()
    {
    echo "${#_obj_qpkgs_okstart_array_[@]}"
    }
QPKGs.OkStart.Exist()
    {
    [[ ${_obj_qpkgs_okstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkStart.First()
    {
    echo "${_obj_qpkgs_okstart_array_[0]}"
    }
QPKGs.OkStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okstart_array_[@]} ]] && index=${#_obj_qpkgs_okstart_array_[@]}
    echo -n "${_obj_qpkgs_okstart_array_[((index-1))]}"
    }
QPKGs.OkStart.Init()
    {
    _obj_qpkgs_okstart_size_=0
    _obj_qpkgs_okstart_array_=()
    _obj_qpkgs_okstart_array_index_=1
    }
QPKGs.OkStart.IsAny()
    {
    [[ ${#_obj_qpkgs_okstart_array_[@]} -gt 0 ]]
    }
QPKGs.OkStart.IsNone()
    {
    [[ ${#_obj_qpkgs_okstart_array_[@]} -eq 0 ]]
    }
QPKGs.OkStart.List()
    {
    echo -n "${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"}"
    }
QPKGs.OkStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okstart_array_[@]+"${_obj_qpkgs_okstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okstart_array_[*]+"${_obj_qpkgs_okstart_array_[@]}"} ]] && _obj_qpkgs_okstart_array_=()
    }
QPKGs.OkStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okstart_size_=$2
    else
        echo -n $_obj_qpkgs_okstart_size_
    fi
    }
QPKGs.OkStart.Init

QPKGs.ErStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erstart_array_+=("$item")
        fi
    done
    }
QPKGs.ErStart.Array()
    {
    echo -n "${_obj_qpkgs_erstart_array_[@]+"${_obj_qpkgs_erstart_array_[@]}"}"
    }
QPKGs.ErStart.Count()
    {
    echo "${#_obj_qpkgs_erstart_array_[@]}"
    }
QPKGs.ErStart.Exist()
    {
    [[ ${_obj_qpkgs_erstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStart.First()
    {
    echo "${_obj_qpkgs_erstart_array_[0]}"
    }
QPKGs.ErStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erstart_array_[@]} ]] && index=${#_obj_qpkgs_erstart_array_[@]}
    echo -n "${_obj_qpkgs_erstart_array_[((index-1))]}"
    }
QPKGs.ErStart.Init()
    {
    _obj_qpkgs_erstart_size_=0
    _obj_qpkgs_erstart_array_=()
    _obj_qpkgs_erstart_array_index_=1
    }
QPKGs.ErStart.IsAny()
    {
    [[ ${#_obj_qpkgs_erstart_array_[@]} -gt 0 ]]
    }
QPKGs.ErStart.IsNone()
    {
    [[ ${#_obj_qpkgs_erstart_array_[@]} -eq 0 ]]
    }
QPKGs.ErStart.List()
    {
    echo -n "${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"}"
    }
QPKGs.ErStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erstart_array_[@]+"${_obj_qpkgs_erstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erstart_array_[*]+"${_obj_qpkgs_erstart_array_[@]}"} ]] && _obj_qpkgs_erstart_array_=()
    }
QPKGs.ErStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erstart_size_=$2
    else
        echo -n $_obj_qpkgs_erstart_size_
    fi
    }
QPKGs.ErStart.Init

QPKGs.SkStart.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skstart_array_+=("$item")
        fi
    done
    }
QPKGs.SkStart.Array()
    {
    echo -n "${_obj_qpkgs_skstart_array_[@]+"${_obj_qpkgs_skstart_array_[@]}"}"
    }
QPKGs.SkStart.Count()
    {
    echo "${#_obj_qpkgs_skstart_array_[@]}"
    }
QPKGs.SkStart.Exist()
    {
    [[ ${_obj_qpkgs_skstart_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStart.First()
    {
    echo "${_obj_qpkgs_skstart_array_[0]}"
    }
QPKGs.SkStart.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skstart_array_[@]} ]] && index=${#_obj_qpkgs_skstart_array_[@]}
    echo -n "${_obj_qpkgs_skstart_array_[((index-1))]}"
    }
QPKGs.SkStart.Init()
    {
    _obj_qpkgs_skstart_size_=0
    _obj_qpkgs_skstart_array_=()
    _obj_qpkgs_skstart_array_index_=1
    }
QPKGs.SkStart.IsAny()
    {
    [[ ${#_obj_qpkgs_skstart_array_[@]} -gt 0 ]]
    }
QPKGs.SkStart.IsNone()
    {
    [[ ${#_obj_qpkgs_skstart_array_[@]} -eq 0 ]]
    }
QPKGs.SkStart.List()
    {
    echo -n "${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"}"
    }
QPKGs.SkStart.ListCSV()
    {
    echo -n "${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkStart.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skstart_array_[@]+"${_obj_qpkgs_skstart_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skstart_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skstart_array_[*]+"${_obj_qpkgs_skstart_array_[@]}"} ]] && _obj_qpkgs_skstart_array_=()
    }
QPKGs.SkStart.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skstart_size_=$2
    else
        echo -n $_obj_qpkgs_skstart_size_
    fi
    }
QPKGs.SkStart.Init

QPKGs.ToStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_tostop_array_+=("$item")
        fi
    done
    }
QPKGs.ToStop.Array()
    {
    echo -n "${_obj_qpkgs_tostop_array_[@]+"${_obj_qpkgs_tostop_array_[@]}"}"
    }
QPKGs.ToStop.Count()
    {
    echo "${#_obj_qpkgs_tostop_array_[@]}"
    }
QPKGs.ToStop.Exist()
    {
    [[ ${_obj_qpkgs_tostop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToStop.First()
    {
    echo "${_obj_qpkgs_tostop_array_[0]}"
    }
QPKGs.ToStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_tostop_array_[@]} ]] && index=${#_obj_qpkgs_tostop_array_[@]}
    echo -n "${_obj_qpkgs_tostop_array_[((index-1))]}"
    }
QPKGs.ToStop.Init()
    {
    _obj_qpkgs_tostop_size_=0
    _obj_qpkgs_tostop_array_=()
    _obj_qpkgs_tostop_array_index_=1
    }
QPKGs.ToStop.IsAny()
    {
    [[ ${#_obj_qpkgs_tostop_array_[@]} -gt 0 ]]
    }
QPKGs.ToStop.IsNone()
    {
    [[ ${#_obj_qpkgs_tostop_array_[@]} -eq 0 ]]
    }
QPKGs.ToStop.List()
    {
    echo -n "${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"}"
    }
QPKGs.ToStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_tostop_array_[@]+"${_obj_qpkgs_tostop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_tostop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_tostop_array_[*]+"${_obj_qpkgs_tostop_array_[@]}"} ]] && _obj_qpkgs_tostop_array_=()
    }
QPKGs.ToStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_tostop_size_=$2
    else
        echo -n $_obj_qpkgs_tostop_size_
    fi
    }
QPKGs.ToStop.Init

QPKGs.OkStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okstop_array_+=("$item")
        fi
    done
    }
QPKGs.OkStop.Array()
    {
    echo -n "${_obj_qpkgs_okstop_array_[@]+"${_obj_qpkgs_okstop_array_[@]}"}"
    }
QPKGs.OkStop.Count()
    {
    echo "${#_obj_qpkgs_okstop_array_[@]}"
    }
QPKGs.OkStop.Exist()
    {
    [[ ${_obj_qpkgs_okstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkStop.First()
    {
    echo "${_obj_qpkgs_okstop_array_[0]}"
    }
QPKGs.OkStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okstop_array_[@]} ]] && index=${#_obj_qpkgs_okstop_array_[@]}
    echo -n "${_obj_qpkgs_okstop_array_[((index-1))]}"
    }
QPKGs.OkStop.Init()
    {
    _obj_qpkgs_okstop_size_=0
    _obj_qpkgs_okstop_array_=()
    _obj_qpkgs_okstop_array_index_=1
    }
QPKGs.OkStop.IsAny()
    {
    [[ ${#_obj_qpkgs_okstop_array_[@]} -gt 0 ]]
    }
QPKGs.OkStop.IsNone()
    {
    [[ ${#_obj_qpkgs_okstop_array_[@]} -eq 0 ]]
    }
QPKGs.OkStop.List()
    {
    echo -n "${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"}"
    }
QPKGs.OkStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okstop_array_[@]+"${_obj_qpkgs_okstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okstop_array_[*]+"${_obj_qpkgs_okstop_array_[@]}"} ]] && _obj_qpkgs_okstop_array_=()
    }
QPKGs.OkStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okstop_size_=$2
    else
        echo -n $_obj_qpkgs_okstop_size_
    fi
    }
QPKGs.OkStop.Init

QPKGs.ErStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erstop_array_+=("$item")
        fi
    done
    }
QPKGs.ErStop.Array()
    {
    echo -n "${_obj_qpkgs_erstop_array_[@]+"${_obj_qpkgs_erstop_array_[@]}"}"
    }
QPKGs.ErStop.Count()
    {
    echo "${#_obj_qpkgs_erstop_array_[@]}"
    }
QPKGs.ErStop.Exist()
    {
    [[ ${_obj_qpkgs_erstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErStop.First()
    {
    echo "${_obj_qpkgs_erstop_array_[0]}"
    }
QPKGs.ErStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erstop_array_[@]} ]] && index=${#_obj_qpkgs_erstop_array_[@]}
    echo -n "${_obj_qpkgs_erstop_array_[((index-1))]}"
    }
QPKGs.ErStop.Init()
    {
    _obj_qpkgs_erstop_size_=0
    _obj_qpkgs_erstop_array_=()
    _obj_qpkgs_erstop_array_index_=1
    }
QPKGs.ErStop.IsAny()
    {
    [[ ${#_obj_qpkgs_erstop_array_[@]} -gt 0 ]]
    }
QPKGs.ErStop.IsNone()
    {
    [[ ${#_obj_qpkgs_erstop_array_[@]} -eq 0 ]]
    }
QPKGs.ErStop.List()
    {
    echo -n "${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"}"
    }
QPKGs.ErStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erstop_array_[@]+"${_obj_qpkgs_erstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erstop_array_[*]+"${_obj_qpkgs_erstop_array_[@]}"} ]] && _obj_qpkgs_erstop_array_=()
    }
QPKGs.ErStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erstop_size_=$2
    else
        echo -n $_obj_qpkgs_erstop_size_
    fi
    }
QPKGs.ErStop.Init

QPKGs.SkStop.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skstop_array_+=("$item")
        fi
    done
    }
QPKGs.SkStop.Array()
    {
    echo -n "${_obj_qpkgs_skstop_array_[@]+"${_obj_qpkgs_skstop_array_[@]}"}"
    }
QPKGs.SkStop.Count()
    {
    echo "${#_obj_qpkgs_skstop_array_[@]}"
    }
QPKGs.SkStop.Exist()
    {
    [[ ${_obj_qpkgs_skstop_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkStop.First()
    {
    echo "${_obj_qpkgs_skstop_array_[0]}"
    }
QPKGs.SkStop.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skstop_array_[@]} ]] && index=${#_obj_qpkgs_skstop_array_[@]}
    echo -n "${_obj_qpkgs_skstop_array_[((index-1))]}"
    }
QPKGs.SkStop.Init()
    {
    _obj_qpkgs_skstop_size_=0
    _obj_qpkgs_skstop_array_=()
    _obj_qpkgs_skstop_array_index_=1
    }
QPKGs.SkStop.IsAny()
    {
    [[ ${#_obj_qpkgs_skstop_array_[@]} -gt 0 ]]
    }
QPKGs.SkStop.IsNone()
    {
    [[ ${#_obj_qpkgs_skstop_array_[@]} -eq 0 ]]
    }
QPKGs.SkStop.List()
    {
    echo -n "${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"}"
    }
QPKGs.SkStop.ListCSV()
    {
    echo -n "${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkStop.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skstop_array_[@]+"${_obj_qpkgs_skstop_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skstop_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skstop_array_[*]+"${_obj_qpkgs_skstop_array_[@]}"} ]] && _obj_qpkgs_skstop_array_=()
    }
QPKGs.SkStop.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skstop_size_=$2
    else
        echo -n $_obj_qpkgs_skstop_size_
    fi
    }
QPKGs.SkStop.Init

QPKGs.ToUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_touninstall_array_+=("$item")
        fi
    done
    }
QPKGs.ToUninstall.Array()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[@]+"${_obj_qpkgs_touninstall_array_[@]}"}"
    }
QPKGs.ToUninstall.Count()
    {
    echo "${#_obj_qpkgs_touninstall_array_[@]}"
    }
QPKGs.ToUninstall.Exist()
    {
    [[ ${_obj_qpkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUninstall.First()
    {
    echo "${_obj_qpkgs_touninstall_array_[0]}"
    }
QPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_touninstall_array_[@]} ]] && index=${#_obj_qpkgs_touninstall_array_[@]}
    echo -n "${_obj_qpkgs_touninstall_array_[((index-1))]}"
    }
QPKGs.ToUninstall.Init()
    {
    _obj_qpkgs_touninstall_size_=0
    _obj_qpkgs_touninstall_array_=()
    _obj_qpkgs_touninstall_array_index_=1
    }
QPKGs.ToUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_touninstall_array_[@]} -gt 0 ]]
    }
QPKGs.ToUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_touninstall_array_[@]} -eq 0 ]]
    }
QPKGs.ToUninstall.List()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"}"
    }
QPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_touninstall_array_[@]+"${_obj_qpkgs_touninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_touninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_touninstall_array_[*]+"${_obj_qpkgs_touninstall_array_[@]}"} ]] && _obj_qpkgs_touninstall_array_=()
    }
QPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_touninstall_size_=$2
    else
        echo -n $_obj_qpkgs_touninstall_size_
    fi
    }
QPKGs.ToUninstall.Init

QPKGs.OkUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okuninstall_array_+=("$item")
        fi
    done
    }
QPKGs.OkUninstall.Array()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[@]+"${_obj_qpkgs_okuninstall_array_[@]}"}"
    }
QPKGs.OkUninstall.Count()
    {
    echo "${#_obj_qpkgs_okuninstall_array_[@]}"
    }
QPKGs.OkUninstall.Exist()
    {
    [[ ${_obj_qpkgs_okuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkUninstall.First()
    {
    echo "${_obj_qpkgs_okuninstall_array_[0]}"
    }
QPKGs.OkUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okuninstall_array_[@]} ]] && index=${#_obj_qpkgs_okuninstall_array_[@]}
    echo -n "${_obj_qpkgs_okuninstall_array_[((index-1))]}"
    }
QPKGs.OkUninstall.Init()
    {
    _obj_qpkgs_okuninstall_size_=0
    _obj_qpkgs_okuninstall_array_=()
    _obj_qpkgs_okuninstall_array_index_=1
    }
QPKGs.OkUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_okuninstall_array_[@]} -gt 0 ]]
    }
QPKGs.OkUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_okuninstall_array_[@]} -eq 0 ]]
    }
QPKGs.OkUninstall.List()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"}"
    }
QPKGs.OkUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okuninstall_array_[@]+"${_obj_qpkgs_okuninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okuninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okuninstall_array_[*]+"${_obj_qpkgs_okuninstall_array_[@]}"} ]] && _obj_qpkgs_okuninstall_array_=()
    }
QPKGs.OkUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okuninstall_size_=$2
    else
        echo -n $_obj_qpkgs_okuninstall_size_
    fi
    }
QPKGs.OkUninstall.Init

QPKGs.ErUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_eruninstall_array_+=("$item")
        fi
    done
    }
QPKGs.ErUninstall.Array()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[@]+"${_obj_qpkgs_eruninstall_array_[@]}"}"
    }
QPKGs.ErUninstall.Count()
    {
    echo "${#_obj_qpkgs_eruninstall_array_[@]}"
    }
QPKGs.ErUninstall.Exist()
    {
    [[ ${_obj_qpkgs_eruninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUninstall.First()
    {
    echo "${_obj_qpkgs_eruninstall_array_[0]}"
    }
QPKGs.ErUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_eruninstall_array_[@]} ]] && index=${#_obj_qpkgs_eruninstall_array_[@]}
    echo -n "${_obj_qpkgs_eruninstall_array_[((index-1))]}"
    }
QPKGs.ErUninstall.Init()
    {
    _obj_qpkgs_eruninstall_size_=0
    _obj_qpkgs_eruninstall_array_=()
    _obj_qpkgs_eruninstall_array_index_=1
    }
QPKGs.ErUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_eruninstall_array_[@]} -gt 0 ]]
    }
QPKGs.ErUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_eruninstall_array_[@]} -eq 0 ]]
    }
QPKGs.ErUninstall.List()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"}"
    }
QPKGs.ErUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_eruninstall_array_[@]+"${_obj_qpkgs_eruninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_eruninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_eruninstall_array_[*]+"${_obj_qpkgs_eruninstall_array_[@]}"} ]] && _obj_qpkgs_eruninstall_array_=()
    }
QPKGs.ErUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_eruninstall_size_=$2
    else
        echo -n $_obj_qpkgs_eruninstall_size_
    fi
    }
QPKGs.ErUninstall.Init

QPKGs.SkUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skuninstall_array_+=("$item")
        fi
    done
    }
QPKGs.SkUninstall.Array()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[@]+"${_obj_qpkgs_skuninstall_array_[@]}"}"
    }
QPKGs.SkUninstall.Count()
    {
    echo "${#_obj_qpkgs_skuninstall_array_[@]}"
    }
QPKGs.SkUninstall.Exist()
    {
    [[ ${_obj_qpkgs_skuninstall_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUninstall.First()
    {
    echo "${_obj_qpkgs_skuninstall_array_[0]}"
    }
QPKGs.SkUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skuninstall_array_[@]} ]] && index=${#_obj_qpkgs_skuninstall_array_[@]}
    echo -n "${_obj_qpkgs_skuninstall_array_[((index-1))]}"
    }
QPKGs.SkUninstall.Init()
    {
    _obj_qpkgs_skuninstall_size_=0
    _obj_qpkgs_skuninstall_array_=()
    _obj_qpkgs_skuninstall_array_index_=1
    }
QPKGs.SkUninstall.IsAny()
    {
    [[ ${#_obj_qpkgs_skuninstall_array_[@]} -gt 0 ]]
    }
QPKGs.SkUninstall.IsNone()
    {
    [[ ${#_obj_qpkgs_skuninstall_array_[@]} -eq 0 ]]
    }
QPKGs.SkUninstall.List()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"}"
    }
QPKGs.SkUninstall.ListCSV()
    {
    echo -n "${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skuninstall_array_[@]+"${_obj_qpkgs_skuninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skuninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skuninstall_array_[*]+"${_obj_qpkgs_skuninstall_array_[@]}"} ]] && _obj_qpkgs_skuninstall_array_=()
    }
QPKGs.SkUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skuninstall_size_=$2
    else
        echo -n $_obj_qpkgs_skuninstall_size_
    fi
    }
QPKGs.SkUninstall.Init

QPKGs.ToUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_toupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.ToUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[@]+"${_obj_qpkgs_toupgrade_array_[@]}"}"
    }
QPKGs.ToUpgrade.Count()
    {
    echo "${#_obj_qpkgs_toupgrade_array_[@]}"
    }
QPKGs.ToUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_toupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ToUpgrade.First()
    {
    echo "${_obj_qpkgs_toupgrade_array_[0]}"
    }
QPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_toupgrade_array_[@]} ]] && index=${#_obj_qpkgs_toupgrade_array_[@]}
    echo -n "${_obj_qpkgs_toupgrade_array_[((index-1))]}"
    }
QPKGs.ToUpgrade.Init()
    {
    _obj_qpkgs_toupgrade_size_=0
    _obj_qpkgs_toupgrade_array_=()
    _obj_qpkgs_toupgrade_array_index_=1
    }
QPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_toupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_toupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ToUpgrade.List()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"}"
    }
QPKGs.ToUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ToUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_toupgrade_array_[@]+"${_obj_qpkgs_toupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_toupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_toupgrade_array_[*]+"${_obj_qpkgs_toupgrade_array_[@]}"} ]] && _obj_qpkgs_toupgrade_array_=()
    }
QPKGs.ToUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_toupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_toupgrade_size_
    fi
    }
QPKGs.ToUpgrade.Init

QPKGs.OkUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_okupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.OkUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[@]+"${_obj_qpkgs_okupgrade_array_[@]}"}"
    }
QPKGs.OkUpgrade.Count()
    {
    echo "${#_obj_qpkgs_okupgrade_array_[@]}"
    }
QPKGs.OkUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_okupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.OkUpgrade.First()
    {
    echo "${_obj_qpkgs_okupgrade_array_[0]}"
    }
QPKGs.OkUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_okupgrade_array_[@]} ]] && index=${#_obj_qpkgs_okupgrade_array_[@]}
    echo -n "${_obj_qpkgs_okupgrade_array_[((index-1))]}"
    }
QPKGs.OkUpgrade.Init()
    {
    _obj_qpkgs_okupgrade_size_=0
    _obj_qpkgs_okupgrade_array_=()
    _obj_qpkgs_okupgrade_array_index_=1
    }
QPKGs.OkUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_okupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.OkUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_okupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.OkUpgrade.List()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"}"
    }
QPKGs.OkUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.OkUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_okupgrade_array_[@]+"${_obj_qpkgs_okupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_okupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_okupgrade_array_[*]+"${_obj_qpkgs_okupgrade_array_[@]}"} ]] && _obj_qpkgs_okupgrade_array_=()
    }
QPKGs.OkUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_okupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_okupgrade_size_
    fi
    }
QPKGs.OkUpgrade.Init

QPKGs.ErUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_erupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.ErUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[@]+"${_obj_qpkgs_erupgrade_array_[@]}"}"
    }
QPKGs.ErUpgrade.Count()
    {
    echo "${#_obj_qpkgs_erupgrade_array_[@]}"
    }
QPKGs.ErUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_erupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.ErUpgrade.First()
    {
    echo "${_obj_qpkgs_erupgrade_array_[0]}"
    }
QPKGs.ErUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_erupgrade_array_[@]} ]] && index=${#_obj_qpkgs_erupgrade_array_[@]}
    echo -n "${_obj_qpkgs_erupgrade_array_[((index-1))]}"
    }
QPKGs.ErUpgrade.Init()
    {
    _obj_qpkgs_erupgrade_size_=0
    _obj_qpkgs_erupgrade_array_=()
    _obj_qpkgs_erupgrade_array_index_=1
    }
QPKGs.ErUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_erupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.ErUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_erupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.ErUpgrade.List()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"}"
    }
QPKGs.ErUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.ErUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_erupgrade_array_[@]+"${_obj_qpkgs_erupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_erupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_erupgrade_array_[*]+"${_obj_qpkgs_erupgrade_array_[@]}"} ]] && _obj_qpkgs_erupgrade_array_=()
    }
QPKGs.ErUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_erupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_erupgrade_size_
    fi
    }
QPKGs.ErUpgrade.Init

QPKGs.SkUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_qpkgs_skupgrade_array_+=("$item")
        fi
    done
    }
QPKGs.SkUpgrade.Array()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[@]+"${_obj_qpkgs_skupgrade_array_[@]}"}"
    }
QPKGs.SkUpgrade.Count()
    {
    echo "${#_obj_qpkgs_skupgrade_array_[@]}"
    }
QPKGs.SkUpgrade.Exist()
    {
    [[ ${_obj_qpkgs_skupgrade_array_[*]:-} == *"$1"* ]]
    }
QPKGs.SkUpgrade.First()
    {
    echo "${_obj_qpkgs_skupgrade_array_[0]}"
    }
QPKGs.SkUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_qpkgs_skupgrade_array_[@]} ]] && index=${#_obj_qpkgs_skupgrade_array_[@]}
    echo -n "${_obj_qpkgs_skupgrade_array_[((index-1))]}"
    }
QPKGs.SkUpgrade.Init()
    {
    _obj_qpkgs_skupgrade_size_=0
    _obj_qpkgs_skupgrade_array_=()
    _obj_qpkgs_skupgrade_array_index_=1
    }
QPKGs.SkUpgrade.IsAny()
    {
    [[ ${#_obj_qpkgs_skupgrade_array_[@]} -gt 0 ]]
    }
QPKGs.SkUpgrade.IsNone()
    {
    [[ ${#_obj_qpkgs_skupgrade_array_[@]} -eq 0 ]]
    }
QPKGs.SkUpgrade.List()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"}"
    }
QPKGs.SkUpgrade.ListCSV()
    {
    echo -n "${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"}" | tr ' ' ','
    }
QPKGs.SkUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_qpkgs_skupgrade_array_[@]+"${_obj_qpkgs_skupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_qpkgs_skupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_qpkgs_skupgrade_array_[*]+"${_obj_qpkgs_skupgrade_array_[@]}"} ]] && _obj_qpkgs_skupgrade_array_=()
    }
QPKGs.SkUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_qpkgs_skupgrade_size_=$2
    else
        echo -n $_obj_qpkgs_skupgrade_size_
    fi
    }
QPKGs.SkUpgrade.Init

IPKGs.ToDownload.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_todownload_array_+=("$item")
        fi
    done
    }
IPKGs.ToDownload.Array()
    {
    echo -n "${_obj_ipkgs_todownload_array_[@]+"${_obj_ipkgs_todownload_array_[@]}"}"
    }
IPKGs.ToDownload.Count()
    {
    echo "${#_obj_ipkgs_todownload_array_[@]}"
    }
IPKGs.ToDownload.Exist()
    {
    [[ ${_obj_ipkgs_todownload_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToDownload.First()
    {
    echo "${_obj_ipkgs_todownload_array_[0]}"
    }
IPKGs.ToDownload.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_todownload_array_[@]} ]] && index=${#_obj_ipkgs_todownload_array_[@]}
    echo -n "${_obj_ipkgs_todownload_array_[((index-1))]}"
    }
IPKGs.ToDownload.Init()
    {
    _obj_ipkgs_todownload_size_=0
    _obj_ipkgs_todownload_array_=()
    _obj_ipkgs_todownload_array_index_=1
    }
IPKGs.ToDownload.IsAny()
    {
    [[ ${#_obj_ipkgs_todownload_array_[@]} -gt 0 ]]
    }
IPKGs.ToDownload.IsNone()
    {
    [[ ${#_obj_ipkgs_todownload_array_[@]} -eq 0 ]]
    }
IPKGs.ToDownload.List()
    {
    echo -n "${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"}"
    }
IPKGs.ToDownload.ListCSV()
    {
    echo -n "${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToDownload.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_todownload_array_[@]+"${_obj_ipkgs_todownload_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_todownload_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_todownload_array_[*]+"${_obj_ipkgs_todownload_array_[@]}"} ]] && _obj_ipkgs_todownload_array_=()
    }
IPKGs.ToDownload.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_todownload_size_=$2
    else
        echo -n $_obj_ipkgs_todownload_size_
    fi
    }
IPKGs.ToDownload.Init

IPKGs.ToInstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_toinstall_array_+=("$item")
        fi
    done
    }
IPKGs.ToInstall.Array()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[@]+"${_obj_ipkgs_toinstall_array_[@]}"}"
    }
IPKGs.ToInstall.Count()
    {
    echo "${#_obj_ipkgs_toinstall_array_[@]}"
    }
IPKGs.ToInstall.Exist()
    {
    [[ ${_obj_ipkgs_toinstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToInstall.First()
    {
    echo "${_obj_ipkgs_toinstall_array_[0]}"
    }
IPKGs.ToInstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_toinstall_array_[@]} ]] && index=${#_obj_ipkgs_toinstall_array_[@]}
    echo -n "${_obj_ipkgs_toinstall_array_[((index-1))]}"
    }
IPKGs.ToInstall.Init()
    {
    _obj_ipkgs_toinstall_size_=0
    _obj_ipkgs_toinstall_array_=()
    _obj_ipkgs_toinstall_array_index_=1
    }
IPKGs.ToInstall.IsAny()
    {
    [[ ${#_obj_ipkgs_toinstall_array_[@]} -gt 0 ]]
    }
IPKGs.ToInstall.IsNone()
    {
    [[ ${#_obj_ipkgs_toinstall_array_[@]} -eq 0 ]]
    }
IPKGs.ToInstall.List()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"}"
    }
IPKGs.ToInstall.ListCSV()
    {
    echo -n "${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToInstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_toinstall_array_[@]+"${_obj_ipkgs_toinstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_toinstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_toinstall_array_[*]+"${_obj_ipkgs_toinstall_array_[@]}"} ]] && _obj_ipkgs_toinstall_array_=()
    }
IPKGs.ToInstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_toinstall_size_=$2
    else
        echo -n $_obj_ipkgs_toinstall_size_
    fi
    }
IPKGs.ToInstall.Init

IPKGs.ToUninstall.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_touninstall_array_+=("$item")
        fi
    done
    }
IPKGs.ToUninstall.Array()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[@]+"${_obj_ipkgs_touninstall_array_[@]}"}"
    }
IPKGs.ToUninstall.Count()
    {
    echo "${#_obj_ipkgs_touninstall_array_[@]}"
    }
IPKGs.ToUninstall.Exist()
    {
    [[ ${_obj_ipkgs_touninstall_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToUninstall.First()
    {
    echo "${_obj_ipkgs_touninstall_array_[0]}"
    }
IPKGs.ToUninstall.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_touninstall_array_[@]} ]] && index=${#_obj_ipkgs_touninstall_array_[@]}
    echo -n "${_obj_ipkgs_touninstall_array_[((index-1))]}"
    }
IPKGs.ToUninstall.Init()
    {
    _obj_ipkgs_touninstall_size_=0
    _obj_ipkgs_touninstall_array_=()
    _obj_ipkgs_touninstall_array_index_=1
    }
IPKGs.ToUninstall.IsAny()
    {
    [[ ${#_obj_ipkgs_touninstall_array_[@]} -gt 0 ]]
    }
IPKGs.ToUninstall.IsNone()
    {
    [[ ${#_obj_ipkgs_touninstall_array_[@]} -eq 0 ]]
    }
IPKGs.ToUninstall.List()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"}"
    }
IPKGs.ToUninstall.ListCSV()
    {
    echo -n "${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToUninstall.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_touninstall_array_[@]+"${_obj_ipkgs_touninstall_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_touninstall_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_touninstall_array_[*]+"${_obj_ipkgs_touninstall_array_[@]}"} ]] && _obj_ipkgs_touninstall_array_=()
    }
IPKGs.ToUninstall.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_touninstall_size_=$2
    else
        echo -n $_obj_ipkgs_touninstall_size_
    fi
    }
IPKGs.ToUninstall.Init

IPKGs.ToUpgrade.Add()
    {
    local array=(${1})
    [[ ${#array[@]} -eq 0 ]] && return
    local item=''
    for item in "${array[@]:-}"; do
        if [[ " ${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"} " != *"$item"* ]]; then
            _obj_ipkgs_toupgrade_array_+=("$item")
        fi
    done
    }
IPKGs.ToUpgrade.Array()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[@]+"${_obj_ipkgs_toupgrade_array_[@]}"}"
    }
IPKGs.ToUpgrade.Count()
    {
    echo "${#_obj_ipkgs_toupgrade_array_[@]}"
    }
IPKGs.ToUpgrade.Exist()
    {
    [[ ${_obj_ipkgs_toupgrade_array_[*]:-} == *"$1"* ]]
    }
IPKGs.ToUpgrade.First()
    {
    echo "${_obj_ipkgs_toupgrade_array_[0]}"
    }
IPKGs.ToUpgrade.GetItem()
    {
    local -i index="$1"
    [[ $index -lt 1 ]] && index=1
    [[ $index -gt ${#_obj_ipkgs_toupgrade_array_[@]} ]] && index=${#_obj_ipkgs_toupgrade_array_[@]}
    echo -n "${_obj_ipkgs_toupgrade_array_[((index-1))]}"
    }
IPKGs.ToUpgrade.Init()
    {
    _obj_ipkgs_toupgrade_size_=0
    _obj_ipkgs_toupgrade_array_=()
    _obj_ipkgs_toupgrade_array_index_=1
    }
IPKGs.ToUpgrade.IsAny()
    {
    [[ ${#_obj_ipkgs_toupgrade_array_[@]} -gt 0 ]]
    }
IPKGs.ToUpgrade.IsNone()
    {
    [[ ${#_obj_ipkgs_toupgrade_array_[@]} -eq 0 ]]
    }
IPKGs.ToUpgrade.List()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"}"
    }
IPKGs.ToUpgrade.ListCSV()
    {
    echo -n "${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"}" | tr ' ' ','
    }
IPKGs.ToUpgrade.Remove()
    {
    local argument_array=(${1})
    local temp_array=()
    local argument=''
    local item=''
    local matched=false
    for item in "${_obj_ipkgs_toupgrade_array_[@]+"${_obj_ipkgs_toupgrade_array_[@]}"}"; do
        matched=false
        for argument in "${argument_array[@]+"${argument_array[@]}"}"; do
            if [[ $argument = $item ]]; then
                matched=true; break
            fi
        done
        [[ $matched = false ]] && temp_array+=("$item")
    done
    _obj_ipkgs_toupgrade_array_=("${temp_array[@]+"${temp_array[@]}"}")
    [[ -z ${_obj_ipkgs_toupgrade_array_[*]+"${_obj_ipkgs_toupgrade_array_[@]}"} ]] && _obj_ipkgs_toupgrade_array_=()
    }
IPKGs.ToUpgrade.Size()
    {
    if [[ -n ${1:-} && ${1:-} = "=" ]]; then
        _obj_ipkgs_toupgrade_size_=$2
    else
        echo -n $_obj_ipkgs_toupgrade_size_
    fi
    }
IPKGs.ToUpgrade.Init

